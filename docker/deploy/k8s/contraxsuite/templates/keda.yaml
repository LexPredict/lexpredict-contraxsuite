---
apiVersion: keda.sh/v1alpha1
kind: ScaledJob
metadata:
  name: celery-worker
  namespace: {{ .Values.namespace | quote }}
spec:
  jobTargetRef:
    parallelism: 1
    completions: 1
    backoffLimit: 4
    template:
      spec:
        tolerations:
        - key: "kubernetes.azure.com/scalesetpriority"
          operator: "Equal"
          value: "spot"
          effect: "NoSchedule"
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: "contraxsuite.com/role"
                  operator: In
                  values:
                  - worker
              topologyKey: "kubernetes.io/hostname"
        terminationGracePeriodSeconds: 10
        nodeSelector:
          contraxsuite.com/role: worker
        containers:
        - args:
          - celery-single
          env:
          - name: DOCKER_CELERY_CONCURRENCY
            value: "4"
          - name: DOCKER_DJANGO_ACCOUNT_EMAIL_VERIFICATION
            value: {{ default "optional" .Values.djangoAccountEmailVerification | quote }}
          - name: DOCKER_DJANGO_ADMIN_EMAIL
            valueFrom:
              secretKeyRef:
                name: django-secrets
                key: django_admin_email
          - name: DOCKER_DJANGO_ADMIN_NAME
            valueFrom:
              secretKeyRef:
                name: django-secrets
                key: django_admin_name
          - name: DOCKER_DJANGO_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: django-secrets
                key: django_admin_password
          - name: DOCKER_DJANGO_BASE_PATH
            value: {{ default "/explorer/" .Values.djangoBasePath | quote }}
          - name: DOCKER_DJANGO_DEBUG
            value: {{ default "False" .Values.djangoDebugMode | quote }}
          - name: DOCKER_DJANGO_DEBUG_SQL
            value: {{ default "False" .Values.djangoDebugSql | quote }}
          - name: DOCKER_DJANGO_EMAIL_BACKEND
            value: {{ default "smtp.CustomEmailBackend" .Values.djangoEmailBackend | quote }}
          - name: DOCKER_DJANGO_EMAIL_HOST
            value: {{ default "localhost" .Values.djangoEmailHost | quote }}
          - name: DOCKER_DJANGO_EMAIL_HOST_PASSWORD
            valueFrom:
              secretKeyRef:
                name: django-secrets
                key: django_email_host_password
          - name: DOCKER_DJANGO_EMAIL_HOST_USER
            value: {{ default "" .Values.djangoEmailHostUser | quote }}
          - name: DOCKER_DJANGO_EMAIL_PORT
            value: {{ default "587" .Values.djangoEmailHostPort | quote }}
          - name: DOCKER_DJANGO_EMAIL_USE_TLS
            value: {{ default "False" .Values.djangoEmailUseTls | quote }}
          - name: DOCKER_DJANGO_HOST_NAME
            value: {{ .Values.domainName }}
          - name: DOCKER_DJANGO_JQWIDGETS_ARCHIVE
            value: ./deploy/dependencies/jqwidgets.zip
          - name: DOCKER_DJANGO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: django-secrets
                key: django_secret_key
          - name: DOCKER_FLOWER_BASE_PATH
            value: {{ default "flower" .Values.flowerBasePath | quote }}
          - name: DOCKER_HOST_NAME_ELASTICSEARCH_ACCESS
            value: {{ .Values.esHost | quote }}
          - name: DOCKER_ELASTICSEARCH_PORT
            value: {{ .Values.esPort | quote }}
          - name: DOCKER_HOST_NAME_KIBANA
            value: contrax-kibana
          - name: DOCKER_HOST_NAME_REDIS_ACCESS
            value: contrax-redis
          - name: DOCKER_JUPYTER_BASE_URL
            value: {{ default "/jupyter" .Values.jupyterBasePath | quote }}
          - name: DOCKER_JUPYTER_PORT
            value: {{ default "8888" .Values.jupyterPort | quote }}
          - name: DOCKER_NGINX_SERVER_NAME
            value: contrax-nginx
          - name: DOCKER_HOST_NAME_PG_ACCESS
            value: {{ .Values.dbHost }}
          - name: DOCKER_PG_DB_NAME
            value: {{ .Values.dbName }}
          - name: DOCKER_PG_PASSWORD
            value: {{ .Values.dbPassword }}
          - name: DOCKER_PG_USER
            value: {{ .Values.dbUsername }}
          - name: DOCKER_HOST_NAME_RABBITMQ_ACCESS
            value: {{ .Values.rmqHost }}
          - name: DOCKER_RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: rabbitmq-secrets
                key: rmq_password
          - name: DOCKER_RABBITMQ_USER
            valueFrom:
              secretKeyRef:
                name: rabbitmq-secrets
                key: rmq_username
          - name: DOCKER_RABBITMQ_VHOST
            valueFrom:
              secretKeyRef:
                name: rabbitmq-secrets
                key: rmq_vhost
          - name: DOCKER_WEBDAV_AUTH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: webdav-secrets
                key: password
          - name: DOCKER_WEBDAV_AUTH_USER
            valueFrom:
              secretKeyRef:
                name: webdav-secrets
                key: username
          - name: DOCKER_WEBDAV_SERVER_NAME_ACCESS
            value: contrax-webdav
          - name: LEXNLP_TIKA_PARSER_MODE
            value: pdf_ocr
          - name: MLFLOW_S3_ENDPOINT_URL
            value: {{ .Values.mlflowS3EndpointUrl | quote }}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: mlflow-aws-secrets
                key: aws_access_key
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: mlflow-aws-secrets
                key: aws_secret_key
          - name: DOCKER_TEXT_EXTRACTION_SYSTEM_URL
            value: "tes-web-api:8000"
          - name: contraxsuite_celery_shutdown_when_no_tasks_longer_than_sec
            value: "30"
          name: contrax-celery
          image: {{ .Values.contraxImage | quote }}
          resources:
            limits:
              cpu: {{ default '4'  .Values.celeryLimitCpu | quote }}
            requests:
              cpu: {{ default '3'  .Values.celeryRequestCpu | quote }}
          volumeMounts:
          - name: local-settings
            mountPath: /contraxsuite_services/local_settings.py
            subPath: local_settings_celery.py
        initContainers:
        - name: daphne-waiter
          image: {{ .Values.contraxImage | quote }}
          command: ['sh', '-c', "until curl http://contrax-daphne:3355; do echo still waiting for daphne; sleep 5; done"]
        volumes:
        - name: local-settings
          configMap:
            name: local-settings
        imagePullSecrets:
        - name: contraxsuitesecret
        restartPolicy: Never
  pollingInterval: 300            # Optional. Default: 30 seconds
  maxReplicaCount: 20             # Calculated as = temp_node_pool_scale_limit(15) * Node vCPU(8) / (tes_celery_cpu_request + contrax_celery_cpu_request)
  successfulJobsHistoryLimit: 10  # How many completed jobs should be kept.
  failedJobsHistoryLimit: 10      # How many failed jobs should be kept.
  scalingStrategy:
    strategy: "accurate"
    #strategy: "custom"                        # Optional. Default: default. Which Scaling Strategy to use.
    #customScalingQueueLengthDeduction: 1      # Optional. A parameter to optimize custom ScalingStrategy.
    #customScalingRunningJobPercentage: "0.5"  # Optional. A parameter to optimize custom ScalingStrategy.
  triggers:
  - type: rabbitmq
    metadata:
      host: "amqp://{{ .Values.rmqUsername }}:{{ .Values.rmqPassword }}@{{ .Values.rmqHost }}.{{ .Values.namespace }}:{{ .Values.rmqPort }}/{{ .Values.rmqVhost }}"
      queueName: default
      mode: QueueLength
      value: "10"

---
apiVersion: keda.sh/v1alpha1
kind: ScaledJob
metadata:
  name: tes-celery-worker
  namespace: {{ .Values.namespace | quote }}
spec:
  jobTargetRef:
    parallelism: 1
    completions: 1
    backoffLimit: 4
    template:
      spec:
        tolerations:
        - key: "kubernetes.azure.com/scalesetpriority"
          operator: "Equal"
          value: "spot"
          effect: "NoSchedule"
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: "contraxsuite.com/role"
                  operator: In
                  values:
                  - worker
              topologyKey: "kubernetes.io/hostname"
        nodeSelector:
          contraxsuite.com/role: worker
        containers:
        - args:
          - celery-worker
          env:
          - name: text_extraction_system_celery_broker
            value: redis://contrax-redis:6379/8
          - name: text_extraction_system_celery_backend
            value: redis://contrax-redis:6379/8
          - name: text_extraction_system_webdav_url
            value: http://contrax-tes-webdav:80
          - name: text_extraction_system_webdav_username
            value: {{.Values.tesWebdavUsername}}
          - name: text_extraction_system_webdav_password
            value: {{.Values.tesWebdavPassword}}
          - name: text_extraction_system_delete_temp_files_on_request_finish
            value: "true"
          - name: text_extraction_system_keep_failed_files
            value: "true"
          - name: text_extraction_system_celery_shutdown_when_no_tasks_longer_than_sec
            value: "30"
          name: lexpredict-text-extraction-system
          image: {{ .Values.tesImage }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","/bin/sleep 1; kill -QUIT 1"]
          resources:
            limits:
              cpu: {{ default '4' .Values.tesLimitCpu | quote }}
            requests:
              cpu: {{ default '3' .Values.tesRequestCpu | quote }}
          volumeMounts:
          # - name: lexpredict-text-extraction-system-pvc
          #   mountPath: /data/celery_worker_state
          - name: local-settings
            mountPath: /contraxsuite_services/local_settings.py
            subPath: local_settings_celery.py
        initContainers:
        - name: daphne-waiter
          image: {{ .Values.tesImage }}
          command: ['sh', '-c', "until curl http://contrax-daphne:3355; do echo still waiting for daphne; sleep 5; done"]
        volumes:
        - name: local-settings
          configMap:
            name: local-settings
        imagePullSecrets:
        - name: contraxsuitesecret
        restartPolicy: Never
  pollingInterval: 300            # Optional. Default: 30 seconds
  maxReplicaCount: 20             # Calculated as = temp_node_pool_scale_limit * vCPU / (tes_celery_cpu_request + contrax_celery_cpu_request)
  successfulJobsHistoryLimit: 10  # How many completed jobs should be kept.
  failedJobsHistoryLimit: 10      # How many failed jobs should be kept.
  scalingStrategy:
    strategy: "accurate"
    #strategy: "custom"                        # Optional. Default: default. Which Scaling Strategy to use.
    #customScalingQueueLengthDeduction: 1      # Optional. A parameter to optimize custom ScalingStrategy.
    #customScalingRunningJobPercentage: "0.5"  # Optional. A parameter to optimize custom ScalingStrategy.
  triggers:
  - type: redis
    metadata:
      address: "contrax-redis.{{ .Values.namespace }}:6379" # Format must be host:port
      #passwordFromEnv: REDIS_PASSWORD
      listName: celery # Required
      listLength: "25" # Required
      enableTLS: "false" # optional
      databaseIndex: "8" # optional
      # Alternatively, you can use existing environment variables to read configuration from:
      # See details in "Parameter list" section
      #addressFromEnv: REDIS_HOST # Optional. You can use this instead of `address` parameter
