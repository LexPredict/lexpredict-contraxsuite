#contrax-minio

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file yml
    kompose.version: 1.19.0 (f63a961c)
  creationTimestamp: null
  name: contrax-minio
spec:

  replicas: 1
  selector:
    matchLabels:
      app: contrax-minio
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: ./kompose convert --file yml
        kompose.version: 1.19.0 (f63a961c)
      creationTimestamp: null
      labels:
        app: contrax-minio
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - args:
        - -c
        - mkdir -p /data/{{ .Values.mlflow_aws_bucket }} && rm -rf /data/.minio.sys && /usr/bin/minio server /data
        command:
        - sh
        env:
        - name: MINIO_ACCESS_KEY
          value: 'Administrator'
        - name: MINIO_SECRET_KEY
          value: 'Administrator'
        - name: MINIO_BROWSER
          value: 'off'
        image: {{ .Values.docker_minio_image }}
        livenessProbe:
          exec:
            command:
            - curl
            - -f
            - http://localhost:9000/minio/health/live
          failureThreshold: 3
          periodSeconds: 30
          timeoutSeconds: 20
        name: contrax-minio
        ports:
        - containerPort: 9000
        resources: {}
        volumeMounts:
        - mountPath: /data
          name: contraxsuite-minio
      hostname: contrax-minio
      restartPolicy: Always
      volumes:
      - name: contraxsuite-minio
        persistentVolumeClaim:
          claimName: contraxsuite-minio
          readOnly: false
status: {}

---

#contrax-mlflow-tracking

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file yml
    kompose.version: 1.19.0 (f63a961c)
  creationTimestamp: null
  name: contrax-mlflow-tracking
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-mlflow-tracking
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: ./kompose convert --file yml
        kompose.version: 1.19.0 (f63a961c)
      creationTimestamp: null
      labels:
        app: contrax-mlflow-tracking
    spec:

      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - env:
        - name: AWS_ACCESS_KEY_ID
          value: 'Administrator'
        - name: AWS_BUCKET
          value: '{{ .Values.mlflow_aws_bucket }}'
        - name: AWS_SECRET_ACCESS_KEY
          value: 'Administrator'
        - name: FILE_DIR
          value: /mlflow
        - name: MLFLOW_S3_ENDPOINT_URL
          value: '{{ .Values.mlflow_s3_endpoint_url }}'
        - name: PORT
          value: "5000"
        image: {{ .Values.docker_mlflow_tracking_image }}
        name: contrax-mlflow-tracking
        ports:
        - containerPort: 5000
        resources: {}
        volumeMounts:
        - mountPath: /mlflow
          name: contraxsuite-mlflow-tracking
      restartPolicy: Always
      volumes:
      - name: contraxsuite-mlflow-tracking
        persistentVolumeClaim:
          claimName: contraxsuite-mlflow-tracking
status: {}

---

#contrax-webdav
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file test2.yml
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-webdav
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-webdav
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-webdav
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - env:
        - name: AUTH_TYPE
          value: Basic
        - name: PASSWORD
          value: password
        - name: USERNAME
          value: user
        image: {{ .Values.docker_webdav_image }}
        name: contrax-webdav
        resources: 
          limits:
            cpu: "1500m"
          requests:
            cpu: "1000m"
        volumeMounts:
        - mountPath: /var/lib/dav
          name: contraxsuite-data-media
      restartPolicy: Always
      volumes:
      - name: contraxsuite-data-media
        persistentVolumeClaim:
          claimName: contraxsuite-data-media
          readOnly: false
status: {}

---

#contrax-tes-webdav
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file test2.yml
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-tes-webdav
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-tes-webdav
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-tes-webdav
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - env:
        - name: AUTH_TYPE
          value: Basic
        - name: PASSWORD
          value: {{ .Values.tes_webdav_password }}
        - name: USERNAME
          value: {{ .Values.tes_webdav_username }}
        image: {{ .Values.docker_tes_webdav_image }}
        name: contrax-tes-webdav
        resources: 
          limits:
            cpu: "1500m"
          requests:
            cpu: "1000m"
        volumeMounts:
        - mountPath: /var/lib/dav
          name: contraxsuite-tes-data-media
      restartPolicy: Always
      volumes:
      - name: contraxsuite-tes-data-media
        persistentVolumeClaim:
          claimName: contraxsuite-tes-data-media
          readOnly: false
status: {}

---

#contrax-redis
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  name: contrax-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-redis
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-redis
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - image: redis:5-alpine
        name: contrax-redis
        volumeMounts:
        - mountPath: /data
          name: redis-data
      hostname: contrax-redis
      restartPolicy: Always
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data
          readOnly: false
status: {}

---
{{ if eq .Values.pg_host_name "contrax-db" }}
#contrax-db

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-db
spec:
  replicas: {{ .Values.docker_pg_replicas }}
  selector:
    matchLabels:
      app: contrax-db
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-db
    spec:

      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      {{ if .Values.powa }}
      - args:
        - bash
        - -c
        - apt-get update && apt-get install -y --no-install-recommends postgresql-11-powa postgresql-11-pg-qualstats postgresql-11-pg-stat-kcache postgresql-11-hypopg && rm -rf /var/lib/apt/lists/* && service cron start && /usr/local/bin/docker-entrypoint.sh postgres -c config_file=/contraxsuite/postgresql.conf -c hba_file=/contraxsuite/pg_hba.conf
      {{ else }}
      - args:
        - bash
        - -c
        - service cron start && /usr/local/bin/docker-entrypoint.sh postgres -c config_file=/contraxsuite/postgresql.conf -c hba_file=/contraxsuite/pg_hba.conf
      {{ end }}
        env:
        - name: PGDATA
          value: /var/lib/contraxsuite-postgres
        - name: POSTGRES_DB
          value: contrax1
        - name: POSTGRES_PASSWORD
          value: contrax1
        - name: POSTGRES_USER
          value: contrax1
        image: {{ .Values.docker_pg_image }}
        name: contrax-db
        ports:
        - containerPort: 5432
        resources:
          limits:
            memory: "{{ .Values.postgres_memory_limit }}"
          requests:
            memory: "{{ .Values.postgres_memory_request }}"
        volumeMounts:
        - mountPath: /var/lib/contraxsuite-postgres
          name: postgres-data-11
        - mountPath: /contraxsuite/db-backup.sh
          name: db-backup
          subPath: db-backup.sh
        - mountPath: /backup
          name: backup
        - mountPath: /contraxsuite/postgresql.conf
          name: contraxsuite-postgresqlconf
          subPath: postgresql.conf
        - mountPath: /etc/crontab
          name: postgresql-crontab
          subPath: backup-cron.conf
        - mountPath: /docker-entrypoint-initdb.d/postgres_init.sql
          name: postgresql-init
          subPath: postgres-init.sql
        - mountPath: /contraxsuite/pg_hba.conf
          name: pg-hba
          subPath: pg_hba.conf
      restartPolicy: Always
      volumes:
      - name: postgres-data-11
        persistentVolumeClaim:
          claimName: postgres-data-11
          readOnly: false
      - name: backup
        persistentVolumeClaim:
          claimName: backup
          readOnly: false
      - name: contraxsuite-postgresqlconf
        configMap:
          {{ if .Values.powa }}
          name: postgresqlconf-powa-configmap
          {{ else }}
          name: postgresqlconf-configmap
          {{ end }}
      - name: postgresql-crontab
        configMap:
          name: pg-backup-cron-722aba991ba1ea855e6736133174990a
      - name: postgresql-init
        configMap:
          name: pg-init-sql-106a59094d5cd047cb07f39e68db563a
      - name: db-backup
        configMap:
          name: db-backup-configmap
      - name: pg-hba
        configMap:
          name: pg-hba-configmap
status: {}

---
{{ end }}

#contrax-elasticsearch

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-elasticsearch
spec:
  replicas: {{ .Values.docker_elasticsearch_replicas }}
  selector:
    matchLabels:
      app: contrax-elasticsearch
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-elasticsearch
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      initContainers:
      - name: init-sysctl
        image: busybox:1.27.2
        command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        securityContext:
          privileged: true
      containers:
      - image: {{ .Values.docker_elasticsearch_image }}
        name: contrax-elasticsearch
        resources:
          limits:
            memory: "4294967296"
          requests:
            memory: "0"
        env:
          - name: ES_JAVA_OPTS
            value: '-Des.transport.cname_in_publish_address=true'
        volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: elasticsearch-data
          - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
            subPath: elasticsearch.yml
            name: elasticsearch-yaml-config
      restartPolicy: Always
      volumes:
      - name: elasticsearch-data
        persistentVolumeClaim:
          claimName: elasticsearch-data
          readOnly: false
      - name: elasticsearch-yaml-config
        configMap:
          name: elasticsearch-yaml-config
status: {}

---

#contrax-elastalert
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file yml
    kompose.version: 1.19.0 (f63a961c)
  creationTimestamp: null
  name: contrax-elastalert
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-elastalert
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: ./kompose convert --file yml
        kompose.version: 1.19.0 (f63a961c)
      creationTimestamp: null
      labels:
        app: contrax-elastalert
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - image: bitsensor/elastalert:3.0.0-beta.1
        name: contrax-elastalert
        ports:
        - containerPort: 3030
        - containerPort: 3333
        resources:
          limits:
            cpu: "1"
        volumeMounts:
        - mountPath: /rules
          name: elastalert-rules
        - mountPath: /rule_templates
          name: elastalert-rule-templates
        - mountPath: /opt/elastalert/config.yaml
          name: elastalert-config-yaml
          subPath: config.yaml
        - mountPath: /opt/elastalert-server/config/elastalert.yaml
          name: elastalert-server-yaml
          subPath: elastalert.yaml
        - mountPath: /opt/elastalert-server/config/config.json
          name: elastalert-server-config-json
          subPath: config.json
        - mountPath: /elastalert-smtp-auth.yaml
          name: elastalert-smtp-auth-yaml
          subPath: elastalert-smtp-auth.yaml
      restartPolicy: Always
      volumes:
      - name: elastalert-rules
        persistentVolumeClaim:
          claimName: elastalert-rules
      - name: elastalert-rule-templates
        persistentVolumeClaim:
          claimName: elastalert-rule-templates
      - name: elastalert-config-yaml
        configMap:
          name: elastalert-config-yaml-configmap
      - name: elastalert-server-yaml
        configMap:
          name: elastalert-server-yaml-configmap
      - name: elastalert-server-config-json
        configMap:
          name: elastalert-server-config-json-configmap
      - name: elastalert-smtp-auth-yaml
        configMap:
          name: elastalert-smtp-auth-yaml-configmap
status: {}

---

#contrax-filebeat

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   namespace: {{ .Values.namespace}}
#   annotations:
#     kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
#       -o output/ -c
#     kompose.version: 1.17.0 (a74acad)
#   creationTimestamp: null
#   name: contrax-filebeat
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: contrax-filebeat
#   template:
#     metadata:
#       creationTimestamp: null
#       labels:
#         app: contrax-filebeat
#     spec:
#       containers:
#       - image: {{ .Values.docker_filebeat_image }}
#         name: contrax-filebeat
#         resources:
#           requests:
#             cpu: 0
#             memory: 0
#           limits:
#             cpu: 500m
#             memory: "1073741824"
#         volumeMounts:
#         - mountPath: /usr/share/filebeat/data
#           name: filebeat-data
#         - mountPath: /usr/share/filebeat/filebeat.yml
#           name: filebeat-yml
#           subPath: filebeat.yml
#         - mountPath: /hostfs/var/run/docker.sock
#           name: contrax-filebeat-claim1
#         - mountPath: /hostfs
#           name: contrax-filebeat-claim2
#           readOnly: true
#       restartPolicy: Always
#       volumes:
#       - name: filebeat-data
#         persistentVolumeClaim:
#           claimName: filebeat-data
#           readOnly: false
#       - name: filebeat-yml
#         configMap:
#           name: filebeat-1b84ea4a4555e9c33f0ea04461533050
#       - name: contrax-filebeat-claim1
#         hostPath:
#           path: /var/run/docker.sock
#           type: File
#       - name: contrax-filebeat-claim2
#         hostPath:
#           path: /
#           type: Directory
#           # readOnly: true
# status: {}

---

#contrax-kibana

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-kibana
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-kibana
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - image: {{ .Values.docker_kibana_image }}
        name: contrax-kibana
        resources: {}
        volumeMounts:
        - mountPath: /usr/share/kibana/config/kibana.yml
          name: contrax-kibana-conf
          subPath: kibana.yml
      restartPolicy: Always
      volumes:
      - name: contrax-kibana-conf
        configMap:
          name: contrax-kibana-conf-configmap
status: {}

---

#contrax-metricbeat

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-metricbeat
spec:
  replicas: 0
  selector:
    matchLabels:
      app: contrax-metricbeat
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-metricbeat
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - args:
        - -e
        - -system.hostfs=/hostfs
        image: {{ .Values.docker_metricbeat_image }}
        name: contrax-metricbeat
        resources:
          limits:
            cpu: "1"
            memory: "2147483648"
          requests:
            cpu: "0"
            memory: "0"
        volumeMounts:
        - mountPath: /usr/share/metricbeat/data
          name: metricbeat-data
          readOnly: false
        - mountPath: /hostfs/var/run/docker.sock
          name: contrax-metricbeat-claim1
        - mountPath: /hostfs/proc
          name: contrax-metricbeat-claim2
          readOnly: true
        - mountPath: /hostfs/sys/fs/cgroup
          name: contrax-metricbeat-claim3
          readOnly: true
        - mountPath: /hostfs
          name: contrax-metricbeat-claim4
          readOnly: true
        - mountPath: /usr/share/metricbeat/metricbeat.yml
          name: metricbeat-yml
          subPath: metricbeat.yml
      restartPolicy: Always
      volumes:
      - name: metricbeat-data
        persistentVolumeClaim:
          claimName: metricbeat-data
          readOnly: false
      - name: contrax-metricbeat-claim1
        hostPath:
          path: /var/run/docker.sock
          type: File
      - name: contrax-metricbeat-claim2
        hostPath:
          path: /proc
          type: Directory
      - name: contrax-metricbeat-claim3
        hostPath:
          path: /sys/fs/cgroup
          type: Directory
      - name: contrax-metricbeat-claim4
        hostPath:
          path: /
          type: Directory
      - name: metricbeat-yml
        configMap:
          name: metricbeat-99b4e27a4f53a7c722f3e17e204d86c2
status: {}

---

#contrax-rabbitmq

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-rabbitmq
spec:
  replicas: {{ .Values.docker_rabbitmq_replicas }}
  selector:
    matchLabels:
      app: contrax-rabbitmq
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-rabbitmq
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - env:
        - name: RABBITMQ_DEFAULT_PASS
          value: contrax1
        - name: RABBITMQ_DEFAULT_USER
          value: contrax1
        - name: RABBITMQ_DEFAULT_VHOST
          value: contrax1_vhost
        image: {{ .Values.docker_rabbitmq_image }}
        name: contrax-rabbitmq
        resources:
          requests:
            cpu: {{ .Values.rabbitmq_cpu_request }}
            memory: {{ .Values.rabbitmq_memory_request }}
        volumeMounts:
        - mountPath: /var/lib/rabbitmq
          name: rabbitmq-data
      hostname: contrax-rabbitmq
      restartPolicy: Always
      volumes:
      - name: rabbitmq-data
        persistentVolumeClaim:
          claimName: rabbitmq-data
          readOnly: false
status: {}

---

#contrax-nginx

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-nginx
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-nginx
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - image: {{ .Values.docker_nginx_image }}
        name: contrax-nginx
        resources:
          limits:
            cpu: "1"
            memory: "4203741184"
          requests:
            cpu: "0"
            memory: "0"
        securityContext:
          capabilities:
            add: ["NET_ADMIN"]
        ports:
        - containerPort: 8080
        - containerPort: 4443
        - containerPort: 4444
        volumeMounts:
        # - mountPath: /etc/nginx
        #   readOnly: true
        #   name: nginx-conf
        - mountPath: /etc/nginx/.kibana_htpasswd
          name: nginx-conf
          subPath: .kibana_htpasswd
        - mountPath: /etc/nginx/nginx.conf
          name: nginx-conf
          subPath: nginx.conf
        - mountPath: /etc/nginx/cors_enable
          name: nginx-conf
          subPath: cors_enable
        - mountPath: /etc/nginx/conf.d/default.conf
          name: nginx-conf
          subPath: conf.d/default.conf
        - mountPath: /etc/nginx/internal.conf
          name: nginx-conf
          subPath: internal.conf
        - mountPath: /etc/nginx/mime.types
          name: nginx-conf
          subPath: mime.types
        - mountPath: /etc/nginx/uwsgi_params
          name: nginx-conf
          subPath: uwsgi_params
        - mountPath: /etc/nginx/cors_disable
          name: nginx-conf
          subPath: cors_disable
        - mountPath: /etc/nginx/nginx-customer.conf
          name: nginx-conf
          subPath: nginx-customer.conf
        - mountPath: /data/media/data/frontend/.env
          name: nginx-conf
          subPath: .env
      restartPolicy: Always
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
            - key: kibana_htpasswd
              path: .kibana_htpasswd
            - key: nginx.conf
              path: nginx.conf
            - key: cors_enable
              path: cors_enable
            - key: cors_disable
              path: cors_disable
            - key: default.conf
              path: conf.d/default.conf
            - key: internal.conf
              path: internal.conf
            - key: mime.types
              path: mime.types
            - key: uwsgi_params
              path: uwsgi_params
            - key: nginx-customer.conf
              path: nginx-customer.conf
            - key: .env
              path: .env
      imagePullSecrets:
      - name: contraxsuitesecret
status: {}

---

#contrax-jupyter

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-jupyter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-jupyter
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-jupyter
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - args:
        - jupyter
        env:
        - name: DOCKER_DJANGO_ACCOUNT_EMAIL_VERIFICATION
          value: optional
        - name: DOCKER_DJANGO_ADMIN_EMAIL
          value: admin@localhost
        - name: DOCKER_DJANGO_ADMIN_NAME
          value: Administrator
        - name: DOCKER_DJANGO_ADMIN_PASSWORD
          value: Administrator
        - name: DOCKER_DJANGO_BASE_PATH
          value: /explorer/
        - name: DOCKER_DJANGO_DEBUG
          value: "False"
        - name: DOCKER_DJANGO_DEBUG_SQL
          value: "False"
        - name: DOCKER_DJANGO_EMAIL_BACKEND
          value: smtp.CustomEmailBackend
        - name: DOCKER_DJANGO_EMAIL_HOST
          value: localhost
        - name: DOCKER_DJANGO_EMAIL_HOST_PASSWORD
        - name: DOCKER_DJANGO_EMAIL_HOST_USER
        - name: DOCKER_DJANGO_EMAIL_PORT
          value: "587"
        - name: DOCKER_DJANGO_EMAIL_USE_TLS
          value: "False"
        - name: DOCKER_DJANGO_HOST_NAME
          value: {{ .Values.domain_name }}
        - name: DOCKER_DJANGO_JQWIDGETS_ARCHIVE
          value: ./deploy/dependencies/jqwidgets.zip
        - name: DOCKER_DJANGO_SECRET_KEY
          value: Welcome1
        - name: DOCKER_FLOWER_BASE_PATH
          value: flower
        - name: DOCKER_FRONTEND_ROOT_URL
          value: {{ .Values.domain_name }}
        - name: DOCKER_HOST_NAME_ELASTICSEARCH
          value: {{ .Values.docker_host_name_elasticsearch }}
        - name: DOCKER_HOST_NAME_KIBANA
          value: contrax-kibana
        - name: DOCKER_HOST_NAME_PG
          value: {{ .Values.pg_host_name }}
        - name: DOCKER_HOST_NAME_RABBITMQ
          value: {{ .Values.rabbitmq.host }}
        - name: DOCKER_HOST_NAME_REDIS
          value: contrax-redis
        - name: DOCKER_JUPYTER_BASE_URL
          value: /jupyter
        - name: DOCKER_JUPYTER_PORT
          value: "8888"
        - name: DOCKER_NGINX_SERVER_NAME
          value: contrax-nginx
        - name: DOCKER_PG_DB_NAME
          value: {{ .Values.pg_db_name }}
        - name: DOCKER_PG_PASSWORD
          value: {{ .Values.pg_password }}
        - name: DOCKER_PG_USER
          value: {{ .Values.pg_user }}
        - name: DOCKER_RABBITMQ_PASSWORD
          value: {{ .Values.rabbitmq.password }}
        - name: DOCKER_RABBITMQ_USER
          value: {{ .Values.rabbitmq.username }}
        - name: DOCKER_RABBITMQ_VHOST
          value: {{ .Values.rabbitmq.vhost }}
        - name: SHARED_USER_ID
          value: "65432"
        - name: SHARED_USER_NAME
          value: contraxsuite_docker_user
        - name: DOCKER_WEBDAV_AUTH_PASSWORD
          value: password
        - name: DOCKER_WEBDAV_AUTH_USER
          value: user
        - name: DOCKER_WEBDAV_SERVER_NAME
          value: contrax-webdav
        - name: MLFLOW_S3_ENDPOINT_URL
          value: '{{ .Values.mlflow_s3_endpoint_url }}'
        - name: AWS_ACCESS_KEY_ID
          value: 'Administrator'
        - name: AWS_SECRET_ACCESS_KEY
          value: 'Administrator'
        image: {{ .Values.docker_image }}
        name: contrax-jupyter
        resources:
          limits:
            cpu: "1"
            memory: "4203741184"
          requests:
            cpu: "0"
            memory: "0"
        volumeMounts:
        - mountPath: /contraxsuite_services/notebooks/persistent_volume
          name: contraxsuite-notebooks
        - mountPath: /contraxsuite_services/jupyter_add_req
          name: contraxsuite-jupyter-add-req
        - mountPath: /contraxsuite_services/local_settings.py
          name: local-settings-py
          subPath: local_settings.py
        - mountPath: /contraxsuite_services/uwsgi.ini
          name: uwsgi-ini
          subPath: uwsgi.ini
        - mountPath: /contraxsuite_services/jupyter_notebook_config.py
          name: jupyter-notebook-config-py
          subPath: jupyter_notebook_config.py
      imagePullSecrets:
      - name: contraxsuitesecret
      restartPolicy: Always
      volumes:
      - name: contraxsuite-notebooks
        persistentVolumeClaim:
          claimName: contraxsuite-notebooks
          readOnly: false
      - name: contraxsuite-jupyter-add-req
        persistentVolumeClaim:
          claimName: contraxsuite-jupyter-add-req
          readOnly: false
      - name: local-settings-py
        configMap:
          name: local-settings-websrv
      - name: uwsgi-ini
        configMap:
          name: uwsgi-ini-configmap
      - name: jupyter-notebook-config-py
        configMap:
          name: jupyter-notebook-config-py-configmap
status: {}

---

#contrax-flower

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-flower
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-flower
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-flower
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - args:
        - flower
        env:
        - name: DOCKER_DJANGO_ACCOUNT_EMAIL_VERIFICATION
          value: optional
        - name: DOCKER_DJANGO_ADMIN_EMAIL
          value: admin@localhost
        - name: DOCKER_DJANGO_ADMIN_NAME
          value: Administrator
        - name: DOCKER_DJANGO_ADMIN_PASSWORD
          value: Administrator
        - name: DOCKER_DJANGO_BASE_PATH
          value: /explorer/
        - name: DOCKER_DJANGO_DEBUG
          value: "False"
        - name: DOCKER_DJANGO_DEBUG_SQL
          value: "False"
        - name: DOCKER_DJANGO_EMAIL_BACKEND
          value: smtp.CustomEmailBackend
        - name: DOCKER_DJANGO_EMAIL_HOST
          value: localhost
        - name: DOCKER_DJANGO_EMAIL_HOST_PASSWORD
        - name: DOCKER_DJANGO_EMAIL_HOST_USER
        - name: DOCKER_DJANGO_EMAIL_PORT
          value: "587"
        - name: DOCKER_DJANGO_EMAIL_USE_TLS
          value: "False"
        - name: DOCKER_DJANGO_HOST_NAME
          value: {{ .Values.domain_name }}
        - name: DOCKER_DJANGO_JQWIDGETS_ARCHIVE
          value: ./deploy/dependencies/jqwidgets.zip
        - name: DOCKER_DJANGO_SECRET_KEY
          value: Welcome1
        - name: DOCKER_FLOWER_BASE_PATH
          value: flower
        - name: DOCKER_FRONTEND_ROOT_URL
          value: {{ .Values.domain_name }}
        - name: DOCKER_HOST_NAME_ELASTICSEARCH
          value: {{ .Values.docker_host_name_elasticsearch }}
        - name: DOCKER_ELASTICSEARCH_PORT
          value: "{{ .Values.docker_elasticsearch_port }}"
        - name: DOCKER_HOST_NAME_KIBANA
          value: contrax-kibana
        - name: DOCKER_HOST_NAME_PG
          value: {{ .Values.pg_host_name }}
        - name: DOCKER_HOST_NAME_RABBITMQ
          value: {{ .Values.rabbitmq.host }}
        - name: DOCKER_HOST_NAME_REDIS
          value: contrax-redis
        - name: DOCKER_JUPYTER_BASE_URL
          value: /jupyter
        - name: DOCKER_JUPYTER_PORT
          value: "8888"
        - name: DOCKER_NGINX_SERVER_NAME
          value: contrax-nginx
        - name: DOCKER_PG_DB_NAME
          value: {{ .Values.pg_db_name }}
        - name: DOCKER_PG_PASSWORD
          value: {{ .Values.pg_password }}
        - name: DOCKER_PG_USER
          value: {{ .Values.pg_user }}
        - name: DOCKER_RABBITMQ_PASSWORD
          value: {{ .Values.rabbitmq.password }}
        - name: DOCKER_RABBITMQ_USER
          value: {{ .Values.rabbitmq.username }}
        - name: DOCKER_RABBITMQ_VHOST
          value: {{ .Values.rabbitmq.vhost }}
        - name: SHARED_USER_ID
          value: "65432"
        - name: SHARED_USER_NAME
          value: contraxsuite_docker_user
        - name: DOCKER_WEBDAV_AUTH_PASSWORD
          value: password
        - name: DOCKER_WEBDAV_AUTH_USER
          value: user
        - name: DOCKER_WEBDAV_SERVER_NAME
          value: contrax-webdav
        - name: MLFLOW_S3_ENDPOINT_URL
          value: '{{ .Values.mlflow_s3_endpoint_url }}'
        - name: AWS_ACCESS_KEY_ID
          value: 'Administrator'
        - name: AWS_SECRET_ACCESS_KEY
          value: 'Administrator'
        image: {{ .Values.docker_image }}
        name: contrax-flower
        resources:
          limits:
            cpu: "1"
            memory: "2147483648"
          requests:
            cpu: "0"
            memory: "0"
        volumeMounts:
        - mountPath: /contraxsuite_services/local_settings.py
          name: local-settings-py
          subPath: local_settings.py
      imagePullSecrets:
      - name: contraxsuitesecret
      restartPolicy: Always
      volumes:
      - name: local-settings-py
        configMap:
          name: local-settings-celery
status: {}

---
#contrax-curator-metricbeat

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   namespace: {{ .Values.namespace}}
#   annotations:
#     kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
#       -o output/ -c
#     kompose.version: 1.17.0 (a74acad)
#   creationTimestamp: null
#   name: contrax-curator-metricbeat
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: contrax-curator-metricbeat
#   strategy: {}
#   template:
#     metadata:
#       creationTimestamp: null
#       labels:
#         app: contrax-curator-metricbeat
#     spec:
#       containers:
#       - args:
#         - --host
#         - contrax-elasticsearch
#         - --port
#         - "9200"
#         env:
#         - name: INDEX_PREFIX
#           value: metricbeat-
#         - name: KEEP_DAYS
#           value: "3"
#         - name: PERIOD
#           value: 15min
#         image: {{ .Values.docker_curator_image }}
#         name: contrax-curator-metricbeat
#         resources: {}
#       restartPolicy: Always
# status: {}

---

#contrax-curator-filebeat

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-curator-filebeat
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-curator-filebeat
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-curator-filebeat
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - args:
        - --host
        - contrax-elasticsearch
        - --port
        - "9200"
        env:
        - name: INDEX_PREFIX
          value: filebeat-
        - name: KEEP_DAYS
          value: "30"
        - name: PERIOD
          value: 15min
        image: {{ .Values.docker_curator_image }}
        name: contrax-curator-filebeat
        resources: {}
      restartPolicy: Always
status: {}

---

#contrax-daphne

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file test2.yml
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-daphne
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-daphne
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-daphne
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - args:
        - daphne
        env:
        - name: DOCKER_DJANGO_ACCOUNT_EMAIL_VERIFICATION
          value: optional
        - name: DOCKER_DJANGO_ADMIN_EMAIL
          value: admin@localhost
        - name: DOCKER_DJANGO_ADMIN_NAME
          value: Administrator
        - name: DOCKER_DJANGO_ADMIN_PASSWORD
          value: Administrator
        - name: DOCKER_DJANGO_BASE_PATH
          value: /explorer/
        - name: DOCKER_DJANGO_DEBUG
          value: "False"
        - name: DOCKER_DJANGO_DEBUG_SQL
          value: "False"
        - name: DOCKER_DJANGO_EMAIL_BACKEND
          value: smtp.CustomEmailBackend
        - name: DOCKER_DJANGO_EMAIL_HOST
          value: localhost
        - name: DOCKER_DJANGO_EMAIL_HOST_PASSWORD
        - name: DOCKER_DJANGO_EMAIL_HOST_USER
        - name: DOCKER_DJANGO_EMAIL_PORT
          value: "587"
        - name: DOCKER_DJANGO_EMAIL_USE_TLS
          value: "False"
        - name: DOCKER_DJANGO_HOST_NAME
          value: {{ .Values.domain_name }}
        - name: DOCKER_DJANGO_JQWIDGETS_ARCHIVE
          value: ./deploy/dependencies/jqwidgets.zip
        - name: DOCKER_DJANGO_SECRET_KEY
          value: Welcome1
        - name: DOCKER_FLOWER_BASE_PATH
          value: flower
        - name: DOCKER_HOST_NAME_ELASTICSEARCH
          value: {{ .Values.docker_host_name_elasticsearch }}
        - name: DOCKER_ELASTICSEARCH_PORT
          value: "{{ .Values.docker_elasticsearch_port }}"
        - name: DOCKER_HOST_NAME_KIBANA
          value: contrax-kibana
        - name: DOCKER_HOST_NAME_PG
          value: {{ .Values.pg_host_name }}
        - name: DOCKER_HOST_NAME_RABBITMQ
          value: {{ .Values.rabbitmq.host }}
        - name: DOCKER_HOST_NAME_REDIS
          value: contrax-redis
        - name: DOCKER_JUPYTER_BASE_URL
          value: /jupyter
        - name: DOCKER_JUPYTER_PORT
          value: "8888"
        - name: DOCKER_NGINX_SERVER_NAME
          value: contrax-nginx
        - name: DOCKER_PG_DB_NAME
          value: {{ .Values.pg_db_name }}
        - name: DOCKER_PG_PASSWORD
          value: {{ .Values.pg_password }}
        - name: DOCKER_PG_USER
          value: {{ .Values.pg_user }}
        - name: DOCKER_RABBITMQ_PASSWORD
          value: {{ .Values.rabbitmq.password }}
        - name: DOCKER_RABBITMQ_USER
          value: {{ .Values.rabbitmq.username }}
        - name: DOCKER_RABBITMQ_VHOST
          value: {{ .Values.rabbitmq.vhost }}
        - name: DOCKER_WEBDAV_AUTH_PASSWORD
          value: password
        - name: DOCKER_WEBDAV_AUTH_USER
          value: user
        - name: DOCKER_WEBDAV_SERVER_NAME
          value: contrax-webdav
        - name: SHARED_USER_ID
          value: "82"
        - name: SHARED_USER_NAME
          value: contraxsuite_docker_user
        - name: MLFLOW_S3_ENDPOINT_URL
          value: '{{ .Values.mlflow_s3_endpoint_url }}'
        - name: AWS_ACCESS_KEY_ID
          value: 'Administrator'
        - name: AWS_SECRET_ACCESS_KEY
          value: 'Administrator'
        image: {{ .Values.docker_image }}
        name: contrax-daphne
        resources: {}
        volumeMounts:
        - mountPath: /contraxsuite_services/local_settings.py
          name: local-settings-py
          subPath: local_settings.py
        - mountPath: /contraxsuite_services/uwsgi.ini
          name: uwsgi-ini
          subPath: uwsgi.ini
      #   - mountPath: /contraxsuite_frontend_nginx_volume
      #     name: contraxsuite-frontend-nginx-volume
      #     readOnly: false
      # restartPolicy: Always
      volumes:
      # - name: contraxsuite-frontend-nginx-volume
      #   flexVolume:
      #     driver: ceph.rook.io/rook
      #     fsType: ceph
      #     options:
      #       fsName: nginxcephfs
      #       clusterNamespace: rook-ceph
      - name: local-settings-py
        configMap:
          name: local-settings-websrv
      - name: uwsgi-ini
        configMap:
          name: uwsgi-ini-configmap
      imagePullSecrets:
      - name: contraxsuitesecret
status: {}

---

#contrax-powa-web

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-powa-web
spec:
  {{ if .Values.powa }}
  replicas: 1
  {{ else }}
  replicas: 0
  {{ end }}
  selector:
    matchLabels:
      app: contrax-powa-web
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-powa-web
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - image: powateam/powa-web
        name: contrax-powa-web
        resources: {}
        volumeMounts:
        - mountPath: /etc/powa-web.conf
          name: contrax-powa-web
          subPath: powa-web.conf
      hostname: contrax-powa-web
      restartPolicy: Always
      volumes:
      - name: contrax-powa-web
        configMap:
          name: powa-web-configmap
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  name: contrax-pgbouncer-session
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-pgbouncer-session
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: contrax-pgbouncer-session
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - image: wiredrequired/pgbouncer:0.0.1
        name: contrax-pgbouncer-session
        volumeMounts:
        - mountPath: /etc/pgbouncer/pgbouncer.ini
          name: pgbouncer-websrv-ini
          subPath: pgbouncer.ini
        - mountPath: /etc/pgbouncer/userlist.txt
          name: userlist-txt
          subPath: userlist.txt
      hostname: contrax-pgbouncer-session
      restartPolicy: Always
      volumes:
      - name: pgbouncer-websrv-ini
        configMap:
          name: pgbouncer-websrv-ini-configmap
      - name: userlist-txt
        configMap:
          name: userlist-txt-configmap

---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace}}
  name: contrax-pgbouncer-transaction
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-pgbouncer-transaction
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: contrax-pgbouncer-transaction
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - image: wiredrequired/pgbouncer:0.0.1
        name: contrax-pgbouncer-transaction
        volumeMounts:
        - mountPath: /etc/pgbouncer/pgbouncer.ini
          name: pgbouncer-websrv-ini
          subPath: pgbouncer.ini
        - mountPath: /etc/pgbouncer/userlist.txt
          name: userlist-txt
          subPath: userlist.txt
      hostname: contrax-pgbouncer-transaction
      restartPolicy: Always
      volumes:
      - name: pgbouncer-websrv-ini
        configMap:
          name: pgbouncer-celery-ini-configmap
      - name: userlist-txt
        configMap:
          name: userlist-txt-configmap