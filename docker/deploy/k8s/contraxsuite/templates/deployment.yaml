### contrax-minio
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  annotations:
    kompose.cmd: ./kompose convert --file yml
    kompose.version: 1.19.0 (f63a961c)
  creationTimestamp: null
  name: contrax-minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-minio
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: ./kompose convert --file yml
        kompose.version: 1.19.0 (f63a961c)
      creationTimestamp: null
      labels:
        app: contrax-minio
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - args:
        - -c
        - mkdir -p /data/{{ .Values.mlflow_aws_bucket }} && rm -rf /data/.minio.sys && /usr/bin/minio server /data
        command:
        - sh
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: mlflow-aws-secrets
              key: aws_access_key
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: mlflow-aws-secrets
              key: aws_secret_key
        - name: MINIO_BROWSER
          value: 'off'
        image: {{ .Values.minioImage | quote }}
        livenessProbe:
          exec:
            command:
            - curl
            - -f
            - http://localhost:9000/minio/health/live
          failureThreshold: 3
          periodSeconds: 30
          timeoutSeconds: 20
        name: contrax-minio
        ports:
        - containerPort: 9000
        resources:
          requests:
            cpu: '0.1'
            memory: '256Mi'
          limits:
            cpu: '0.5'
            memory: '512Mi'
        volumeMounts:
        - mountPath: /data
          name: contraxsuite-minio
      hostname: contrax-minio
      restartPolicy: Always
      volumes:
      - name: contraxsuite-minio
        persistentVolumeClaim:
          claimName: contraxsuite-minio
          readOnly: false

# contrax-mlflow-tracking
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  creationTimestamp: null
  name: contrax-mlflow-tracking
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-mlflow-tracking
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-mlflow-tracking
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - env:
        - name: AWS_BUCKET
          value: {{ .Values.mlflowAwsBucket | quote }}
        - name: FILE_DIR
          value: /mlflow
        - name: MLFLOW_S3_ENDPOINT_URL
          value: {{ .Values.mlflowS3EndpointUrl | quote }}
        - name: PORT
          value: "5000"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: mlflow-aws-secrets
              key: aws_access_key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: mlflow-aws-secrets
              key: aws_secret_key
        image: {{ .Values.mlflowTrackingImage | quote }}
        name: contrax-mlflow-tracking
        ports:
        - containerPort: 5000
        resources:
          requests:
            cpu: '0.1'
            memory: '256Mi'
          limits:
            cpu: '0.5'
            memory: '512Mi'
        volumeMounts:
        - mountPath: /mlflow
          name: contraxsuite-mlflow-tracking
      restartPolicy: Always
      volumes:
      - name: contraxsuite-mlflow-tracking
        persistentVolumeClaim:
          claimName: contraxsuite-mlflow-tracking


# contrax-webdav
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  annotations:
    kompose.cmd: ./kompose convert --file test2.yml
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-webdav
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-webdav
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-webdav
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - env:
        - name: AUTH_TYPE
          value: Basic
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: webdav-secrets
              key: password
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: webdav-secrets
              key: username
        image: {{ .Values.webdavImage | quote }}
        name: contrax-webdav
        resources:
          limits:
            cpu: "1.5"
            memory: '256Mi'
          requests:
            cpu: "1"
            memory: '128Mi'
        volumeMounts:
        - mountPath: /var/lib/dav
          name: contraxsuite-data-media
      restartPolicy: Always
      volumes:
      - name: contraxsuite-data-media
        persistentVolumeClaim:
          claimName: contraxsuite-data-media
          readOnly: false


#contrax-tes-webdav
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  annotations:
    kompose.cmd: ./kompose convert --file test2.yml
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-tes-webdav
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-tes-webdav
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-tes-webdav
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - env:
        - name: AUTH_TYPE
          value: Basic
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: tes-webdav-secrets
              key: password
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: tes-webdav-secrets
              key: username
        image: {{ .Values.tesWebdavImage | quote }}
        name: contrax-tes-webdav
        resources:
          limits:
            cpu: "1.5"
            memory: '256Mi'
          requests:
            cpu: "1"
            memory: '128Mi'
        volumeMounts:
        - mountPath: /var/lib/dav
          name: contraxsuite-tes-data-media
      restartPolicy: Always
      volumes:
      - name: contraxsuite-tes-data-media
        persistentVolumeClaim:
          claimName: contraxsuite-tes-data-media
          readOnly: false


#contrax-redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  name: contrax-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-redis
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-redis
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - image: {{ .Values.redisImage | quote }}
        name: contrax-redis
        volumeMounts:
        - mountPath: /data
          name: redis-data
      hostname: contrax-redis
      restartPolicy: Always
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data
          readOnly: false

#contrax-db
{{- if eq .Values.dbType "test" }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-db
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-db
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      {{- if .Values.powa }}
      - args:
        - bash
        - -c
        - apt-get update && apt-get install -y --no-install-recommends postgresql-11-powa postgresql-11-pg-qualstats postgresql-11-pg-stat-kcache postgresql-11-hypopg && rm -rf /var/lib/apt/lists/* && service cron start && /usr/local/bin/docker-entrypoint.sh postgres -c config_file=/contraxsuite/postgresql.conf -c hba_file=/contraxsuite/pg_hba.conf
      {{- else }}
      - args:
        - bash
        - -c
        - service cron start && /usr/local/bin/docker-entrypoint.sh postgres -c config_file=/contraxsuite/postgresql.conf -c hba_file=/contraxsuite/pg_hba.conf
      {{- end }}
        env:
        - name: PGDATA
          value: /var/lib/contraxsuite-postgres
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: porstgrs-db-secrets
              key: db_name
        - name: POSTGRES_PASSWORD #
          valueFrom:
            secretKeyRef:
              name: porstgrs-db-secrets
              key: db_password
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: porstgrs-db-secrets
              key: db_username
        image: {{ .Values.postgresImage | quote }}
        name: contrax-db
        ports:
          - containerPort: {{ .Values.dbPort }}
        resources:
          limits:
            memory: {{ default "4Gi" .Values.dbLimitMemory }}
          requests:
            memory: {{ default "2Gi" .Values.dbRequestMemory }}
        volumeMounts:
          - mountPath: /var/lib/contraxsuite-postgres
            name: postgres-data-11
          - mountPath: /backup
            name: backup
          - mountPath: /contraxsuite/postgresql.conf
            name: postgres-conf
            subPath: postgresql.conf
          - mountPath: /contraxsuite/db-backup.sh
            name: postgres-conf
            subPath: db-backup.sh
          - mountPath: /etc/crontab
            name: postgres-conf
            subPath: backup-cron.conf
          - mountPath: /docker-entrypoint-initdb.d/postgres_init.sql
            name: postgres-conf
            subPath: postgres-init.sql
          - mountPath: /contraxsuite/pg_hba.conf
            name: postgres-conf
            subPath: pg_hba.conf
      restartPolicy: Always
      volumes:
        - name: postgres-data-11
          persistentVolumeClaim:
            claimName: postgres-data-11
            readOnly: false
        - name: backup
          persistentVolumeClaim:
            claimName: backup
            readOnly: false
        - name: postgres-conf
          configMap:
            name: postgres-conf
            items:
              - key: pg_conf
                path: postgresql.conf
              - key: pg_backup
                path: db-backup.sh
              - key: pg_crontab
                path: backup-cron.conf
              - key: pg_init
                path: postgres-init.sql
              - key: pg_hba
                path: pg_hba.conf
{{- end }}
#contrax-elasticsearch
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-elasticsearch
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-elasticsearch
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      initContainers:
      - name: init-sysctl
        image: busybox:1.27.2
        command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        securityContext:
          privileged: true
      containers:
      - image: {{ .Values.elasticSearchImage | quote }}
        name: contrax-elasticsearch
        resources:
          limits:
            memory: "4294967296"
          requests:
            memory: "0"
        env:
          - name: ES_JAVA_OPTS
            value: '-Des.transport.cname_in_publish_address=true'
        volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: elasticsearch-data
          - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
            subPath: elasticsearch.yml
            name: elasticsearch-conf
      restartPolicy: Always
      volumes:
      - name: elasticsearch-data
        persistentVolumeClaim:
          claimName: elasticsearch-data
          readOnly: false
      - name: elasticsearch-conf
        configMap:
          name: elasticsearch-conf

#contrax-elastalert
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  annotations:
    kompose.cmd: ./kompose convert --file yml
    kompose.version: 1.19.0 (f63a961c)
  creationTimestamp: null
  name: contrax-elastalert
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-elastalert
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: ./kompose convert --file yml
        kompose.version: 1.19.0 (f63a961c)
      creationTimestamp: null
      labels:
        app: contrax-elastalert
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - image: bitsensor/elastalert:3.0.0-beta.1
        name: contrax-elastalert
        ports:
        - containerPort: 3030
        - containerPort: 3333
        resources:
          limits:
            cpu: "1"
        volumeMounts:
        - mountPath: /rules
          name: elastalert-rules
        - mountPath: /rule_templates
          name: elastalert-rule-templates
        - mountPath: /opt/elastalert/config.yaml
          name: elastalert-conf
          subPath: config.yaml
        - mountPath: /opt/elastalert-server/config/elastalert.yaml
          name: elastalert-conf
          subPath: elastalert.yaml
        - mountPath: /opt/elastalert-server/config/config.json
          name: elastalert-conf
          subPath: config.json
        - mountPath: /elastalert-smtp-auth.yaml
          name: elastalert-conf
          subPath: elastalert-smtp-auth.yaml
      restartPolicy: Always
      volumes:
        - name: elastalert-rules
          persistentVolumeClaim:
            claimName: elastalert-rules
        - name: elastalert-rule-templates
          persistentVolumeClaim:
            claimName: elastalert-rule-templates
        - name: elastalert-conf
          configMap:
            name: elastalert-conf
            items:
              - key: config.yaml
                path: config.yaml
              - key: elastalert.yaml
                path: elastalert.yaml
              - key: elastalert_smtp_auth.yaml
                path: elastalert-smtp-auth.yaml
              - key: config.json
                path: config.json

#contrax-kibana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-kibana
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-kibana
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - image: {{ .Values.kibanaImage | quote }}
        name: contrax-kibana
        resources: {}
        volumeMounts:
        - mountPath: /usr/share/kibana/config/kibana.yml
          name: kibana-conf
          subPath: kibana.yml
      restartPolicy: Always
      volumes:
      - name: kibana-conf
        configMap:
          name: kibana-conf


# contrax-metricbeat
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-metricbeat
spec:
  replicas: 0 # by default disabled
  selector:
    matchLabels:
      app: contrax-metricbeat
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-metricbeat
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - args:
        - -e
        - -system.hostfs=/hostfs
        image: {{ .Values.metricbeatImage | quote }}
        name: contrax-metricbeat
        resources:
          limits:
            cpu: '1'
            memory: '2Gi'
          requests:
            cpu: '0.1'
            memory: '128Mi'
        volumeMounts:
        - mountPath: /usr/share/metricbeat/data
          name: metricbeat-data
          readOnly: false
        - mountPath: /hostfs/var/run/docker.sock
          name: contrax-metricbeat-claim1
        - mountPath: /hostfs/proc
          name: contrax-metricbeat-claim2
          readOnly: true
        - mountPath: /hostfs/sys/fs/cgroup
          name: contrax-metricbeat-claim3
          readOnly: true
        - mountPath: /hostfs
          name: contrax-metricbeat-claim4
          readOnly: true
        - mountPath: /usr/share/metricbeat/metricbeat.yml
          name: metricbeat-conf
          subPath: metricbeat.yml
      restartPolicy: Always
      volumes:
      - name: metricbeat-data
        persistentVolumeClaim:
          claimName: metricbeat-data
          readOnly: false
      - name: contrax-metricbeat-claim1
        hostPath:
          path: /var/run/docker.sock
          type: File
      - name: contrax-metricbeat-claim2
        hostPath:
          path: /proc
          type: Directory
      - name: contrax-metricbeat-claim3
        hostPath:
          path: /sys/fs/cgroup
          type: Directory
      - name: contrax-metricbeat-claim4
        hostPath:
          path: /
          type: Directory
      - name: metricbeat-conf
        configMap:
          name: metricbeat-conf


#contrax-rabbitmq
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-rabbitmq
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-rabbitmq
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - env:
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secrets
              key: rmq_password
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secrets
              key: rmq_username
        - name: RABBITMQ_DEFAULT_VHOST
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secrets
              key: rmq_vhost
        image: {{ .Values.rabbitmqImage }}
        name: contrax-rabbitmq
        resources:
          requests:
            cpu: {{ default "0.5" .Values.rmqRequestCpu | quote }}
            memory: {{ default "1Gi" .Values.rmqRequestMemory | quote }}
          limits:
            cpu: {{ default "1" .Values.rmqLimitCpu | quote }}
            memory: {{ default "2Gi" .Values.rmqLimitMemory | quote }}
        volumeMounts:
        - mountPath: /var/lib/rabbitmq
          name: rabbitmq-data
      hostname: contrax-rabbitmq
      restartPolicy: Always
      volumes:
      - name: rabbitmq-data
        persistentVolumeClaim:
          claimName: rabbitmq-data
          readOnly: false


#contrax-nginx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace  | quote }}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-nginx
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-nginx
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - image: {{ .Values.nginxImage }}
        name: contrax-nginx
        resources:
          limits:
            cpu: '1'
            memory: '4Gi'
          requests:
            cpu: '0.25'
            memory: '128Mi'
        securityContext:
          capabilities:
            add: ["NET_ADMIN"]
        ports:
        - containerPort: 8080
        - containerPort: 4443
        - containerPort: 4444
        volumeMounts:
        - mountPath: /etc/nginx/.kibana_htpasswd
          name: nginx-conf
          subPath: .kibana_htpasswd
        - mountPath: /etc/nginx/nginx.conf
          name: nginx-conf
          subPath: nginx.conf
        - mountPath: /etc/nginx/cors_enable
          name: nginx-conf
          subPath: cors_enable
        - mountPath: /etc/nginx/conf.d/default.conf
          name: nginx-conf
          subPath: conf.d/default.conf
        - mountPath: /etc/nginx/internal.conf
          name: nginx-conf
          subPath: internal.conf
        - mountPath: /etc/nginx/mime.types
          name: nginx-conf
          subPath: mime.types
        - mountPath: /etc/nginx/uwsgi_params
          name: nginx-conf
          subPath: uwsgi_params
        - mountPath: /etc/nginx/cors_disable
          name: nginx-conf
          subPath: cors_disable
        - mountPath: /etc/nginx/nginx-customer.conf
          name: nginx-conf
          subPath: nginx-customer.conf
        - mountPath: /data/media/data/frontend/.env
          name: nginx-conf
          subPath: .env
        - mountPath: /data/media/data/frontend/env.json
          name: nginx-conf
          subPath: env.json
      restartPolicy: Always
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
            - key: kibana_htpasswd
              path: .kibana_htpasswd
            - key: nginx.conf
              path: nginx.conf
            - key: cors_enable
              path: cors_enable
            - key: cors_disable
              path: cors_disable
            - key: default.conf
              path: conf.d/default.conf
            - key: internal.conf
              path: internal.conf
            - key: mime.types
              path: mime.types
            - key: uwsgi_params
              path: uwsgi_params
            - key: nginx-customer.conf
              path: nginx-customer.conf
            - key: .env
              path: .env
            - key: env.json
              path: env.json
      imagePullSecrets:
      - name: contraxsuitesecret


#contrax-jupyter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  creationTimestamp: null
  name: contrax-jupyter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-jupyter
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-jupyter
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - args:
        - jupyter
        env:
        - name: DOCKER_DJANGO_HOST_NAME
          value: {{ .Values.domainName }}
        - name: DOCKER_DJANGO_JQWIDGETS_ARCHIVE
          value: './deploy/dependencies/jqwidgets.zip'
        - name: DOCKER_DJANGO_SECRET_KEY
          valueFrom:
            secretKeyRef:
                name: django-secrets
                key:  django_secret_key
        - name: DOCKER_DJANGO_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: django-secrets
              key: django_admin_password
        - name: DOCKER_FLOWER_BASE_PATH
          value: flower
        - name: DOCKER_FRONTEND_ROOT_URL
          value: {{ .Values.domainName }}
        - name: DOCKER_HOST_NAME_ELASTICSEARCH_ACCESS
          value: {{ .Values.esHost }}
        - name: DOCKER_HOST_NAME_REDIS_ACCESS
          value: contrax-redis
        - name: DOCKER_HOST_NAME_PG_ACCESS
          value: {{ .Values.dbHost }}
        - name: DOCKER_PG_DB_NAME
          value: {{ .Values.dbName }}
        - name: DOCKER_PG_PASSWORD
          value: {{ .Values.dbPassword }}
        - name: DOCKER_PG_USER
          value: {{ .Values.dbUsername }}
        - name: DOCKER_HOST_NAME_RABBITMQ_ACCESS
          value: {{ .Values.rmqHost }}
        - name: DOCKER_RABBITMQ_PASSWORD
          value: {{ .Values.rmqPassword }}
        - name: DOCKER_RABBITMQ_USER
          value: {{ .Values.rmqUsername }}
        - name: DOCKER_RABBITMQ_VHOST
          value: {{ .Values.rmqVhost }}
        - name: MLFLOW_S3_ENDPOINT_URL
          value: {{ .Values.mlflowS3EndpointUrl | quote }}
        - name: MLFLOW_AWS_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: mlflow-aws-secrets
              key: aws_access_key
        - name: MLFLOW_AWS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: mlflow-aws-secrets
              key: aws_secret_key
        image: {{ .Values.contraxImage }}
        name: contrax-jupyter
        resources:
          limits:
            cpu: '1'
            memory: '4Gi'
          requests:
            cpu: '0.1'
            memory: '100Mi'
        volumeMounts:
        - mountPath: /contraxsuite_services/notebooks/persistent_volume
          name: contraxsuite-notebooks
        - mountPath: /contraxsuite_services/jupyter_add_req
          name: contraxsuite-jupyter-add-req
        - mountPath: /contraxsuite_services/local_settings.py
          name: local-settings
          subPath: local_settings_websrv.py
        - mountPath: /contraxsuite_services/uwsgi.ini
          name: uwsgi-ini
          subPath: uwsgi.ini
        - mountPath: /contraxsuite_services/jupyter_notebook_config.py
          name: jupyter-notebook-conf
          subPath: jupyter_notebook_config.py
      imagePullSecrets:
      - name: contraxsuitesecret
      restartPolicy: Always
      volumes:
      - name: contraxsuite-notebooks
        persistentVolumeClaim:
          claimName: contraxsuite-notebooks
          readOnly: false
      - name: contraxsuite-jupyter-add-req
        persistentVolumeClaim:
          claimName: contraxsuite-jupyter-add-req
          readOnly: false
      - name: local-settings
        configMap:
          name: local-settings
          items:
            - key: local_settings_websrv.py
              path: local_settings_websrv.py
      - name: uwsgi-ini
        configMap:
          name: uwsgi-ini
      - name: jupyter-notebook-conf
        configMap:
          name: jupyter-notebook-conf

#contrax-flower
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-flower
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-flower
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-flower
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - args:
        - flower
        env:
        - name: DOCKER_DJANGO_ACCOUNT_EMAIL_VERIFICATION
          value: optional
        - name: DOCKER_DJANGO_ADMIN_EMAIL
          value: admin@localhost
        - name: DOCKER_DJANGO_ADMIN_NAME
          value: Administrator
        - name: DOCKER_DJANGO_ADMIN_PASSWORD
          value: Administrator
        - name: DOCKER_DJANGO_BASE_PATH
          value: /explorer/
        - name: DOCKER_DJANGO_DEBUG
          value: "False"
        - name: DOCKER_DJANGO_DEBUG_SQL
          value: "False"
        - name: DOCKER_DJANGO_EMAIL_BACKEND
          value: {{ default "smtp.CustomEmailBackend" .Values.djangoEmailBackend | quote }}
        - name: DOCKER_DJANGO_EMAIL_HOST
          value: {{ default "localhost" .Values.djangoEmailHost | quote }}
        - name: DOCKER_DJANGO_EMAIL_HOST_PASSWORD
          valueFrom:
            secretKeyRef:
              name: django-secrets
              key: django_email_host_password
        - name: DOCKER_DJANGO_EMAIL_HOST_USER
          value: {{ default " " .Values.djangoEmailHostUser | quote }}
        - name: DOCKER_DJANGO_EMAIL_PORT
          value: {{ default "587" .Values.djangoEmailHostPort | quote }}
        - name: DOCKER_DJANGO_EMAIL_USE_TLS
          value: {{ default "False" .Values.djangoEmailUseTls | quote }}
        - name: DOCKER_DJANGO_HOST_NAME
          value: {{ .Values.domainName }}
        - name: DOCKER_DJANGO_JQWIDGETS_ARCHIVE
          value: ./deploy/dependencies/jqwidgets.zip
        - name: DOCKER_DJANGO_SECRET_KEY
          value: Welcome1
        - name: DOCKER_FLOWER_BASE_PATH
          value: flower
        - name: DOCKER_FRONTEND_ROOT_URL
          value: {{ .Values.domainName }}
        - name: DOCKER_HOST_NAME_ELASTICSEARCH_ACCESS
          value: {{ .Values.esHost }}
        - name: DOCKER_ELASTICSEARCH_PORT
          value: "{{ .Values.esPort }}"
        - name: DOCKER_HOST_NAME_KIBANA
          value: contrax-kibana
        - name: DOCKER_HOST_NAME_REDIS_ACCESS
          value: contrax-redis
        - name: DOCKER_JUPYTER_BASE_URL
          value: /jupyter
        - name: DOCKER_JUPYTER_PORT
          value: "8888"
        - name: DOCKER_NGINX_SERVER_NAME
          value: contrax-nginx
        - name: DOCKER_HOST_NAME_PG_ACCESS
          value: {{ .Values.dbHost }}
        - name: DOCKER_PG_DB_NAME
          value: {{ .Values.dbName }}
        - name: DOCKER_PG_PASSWORD
          value: {{ .Values.dbPassword }}
        - name: DOCKER_PG_USER
          value: {{ .Values.dbUsername }}
        - name: DOCKER_HOST_NAME_RABBITMQ_ACCESS
          value: {{ .Values.rmqHost }}
        - name: DOCKER_RABBITMQ_PASSWORD
          value: {{ .Values.rmqPassword }}
        - name: DOCKER_RABBITMQ_USER
          value: {{ .Values.rmqUsername }}
        - name: DOCKER_RABBITMQ_VHOST
          value: {{ .Values.rmqVhost }}
        - name: SHARED_USER_ID
          value: "65432"
        - name: SHARED_USER_NAME
          value: contraxsuite_docker_user
        - name: DOCKER_WEBDAV_AUTH_PASSWORD
          value: password
        - name: DOCKER_WEBDAV_AUTH_USER
          value: user
        - name: DOCKER_WEBDAV_SERVER_NAME_ACCESS
          value: contrax-webdav
        - name: MLFLOW_S3_ENDPOINT_URL
          value: {{ .Values.mlflowS3EndpointUrl | quote }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: mlflow-aws-secrets
              key:  aws_access_key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: mlflow-aws-secrets
              key:  aws_secret_key
        image: {{ .Values.contraxImage  | quote }}
        name: contrax-flower
        resources:
          limits:
            cpu: '1'
            memory: '2Gi'
          requests:
            cpu: '0.1'
            memory: '100Mi'
        volumeMounts:
        - mountPath: /contraxsuite_services/local_settings.py
          name: local-settings
          subPath: local_settings_celery.py
      imagePullSecrets:
      - name: contraxsuitesecret
      restartPolicy: Always
      volumes:
      - name: local-settings
        configMap:
          name: local-settings

#---
#contrax-curator-metricbeat

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   namespace: {{ .Values.namespace}}
#   annotations:
#     kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
#       -o output/ -c
#     kompose.version: 1.17.0 (a74acad)
#   creationTimestamp: null
#   name: contrax-curator-metricbeat
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: contrax-curator-metricbeat
#   strategy: {}
#   template:
#     metadata:
#       creationTimestamp: null
#       labels:
#         app: contrax-curator-metricbeat
#     spec:
#       containers:
#       - args:
#         - --host
#         - contrax-elasticsearch
#         - --port
#         - "9200"
#         env:
#         - name: INDEX_PREFIX
#           value: metricbeat-
#         - name: KEEP_DAYS
#           value: "3"
#         - name: PERIOD
#           value: 15min
#         image: {{ .Values.docker_curator_image }}
#         name: contrax-curator-metricbeat
#         resources: {}
#       restartPolicy: Always
# status: {}

#contrax-curator-filebeat
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  creationTimestamp: null
  name: contrax-curator-filebeat
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-curator-filebeat
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-curator-filebeat
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - args: ["--host", "contrax-elasticsearch", "--port", "9200" ]
        env:
        - name: INDEX_PREFIX
          value: filebeat-
        - name: KEEP_DAYS
          value: "30"
        - name: PERIOD
          value: 15min
        image: {{ .Values.curatorImage | quote }}
        name: contrax-curator-filebeat
        resources: {}
      restartPolicy: Always


#contrax-daphne
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  creationTimestamp: null
  name: contrax-daphne
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-daphne
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-daphne
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
      - args:
          - daphne
        env:
          - name: DOCKER_DJANGO_ACCOUNT_EMAIL_VERIFICATION
            value: {{ default "optional" .Values.djangoAccountEmailVerification | quote }}
          - name: DOCKER_DJANGO_ADMIN_EMAIL
            valueFrom:
              secretKeyRef:
                name: django-secrets
                key: django_admin_email
          - name: DOCKER_DJANGO_ADMIN_NAME
            valueFrom:
              secretKeyRef:
                name: django-secrets
                key: django_admin_name
          - name: DOCKER_DJANGO_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: django-secrets
                key: django_admin_password
          - name: DOCKER_DJANGO_BASE_PATH
            value: {{ default "/explorer/" .Values.djangoBasePath | quote }}
          - name: DOCKER_DJANGO_DEBUG
            value: {{ default "False" .Values.djangoDebugMode | quote }}
          - name: DOCKER_DJANGO_DEBUG_SQL
            value: {{ default "False" .Values.djangoDebugSql | quote }}
          - name: DOCKER_DJANGO_EMAIL_BACKEND
            value: {{ default "smtp.CustomEmailBackend" .Values.djangoEmailBackend | quote }}
          - name: DOCKER_DJANGO_EMAIL_HOST
            value: {{ default "localhost" .Values.djangoEmailHost | quote }}
          - name: DOCKER_DJANGO_EMAIL_HOST_PASSWORD
            valueFrom:
              secretKeyRef:
                name: django-secrets
                key: django_email_host_password
          - name: DOCKER_DJANGO_EMAIL_HOST_USER
            value: {{ default " " .Values.djangoEmailHostUser | quote }}
          - name: DOCKER_DJANGO_EMAIL_PORT
            value: {{ default "587" .Values.djangoEmailHostPort | quote }}
          - name: DOCKER_DJANGO_EMAIL_USE_TLS
            value: {{ default "False" .Values.djangoEmailUseTls | quote }}
          - name: DOCKER_DJANGO_HOST_NAME
            value: {{ .Values.domainName }}
          - name: DOCKER_DJANGO_JQWIDGETS_ARCHIVE
            value: ./deploy/dependencies/jqwidgets.zip
          - name: DOCKER_DJANGO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: django-secrets
                key: django_secret_key
          - name: DOCKER_FLOWER_BASE_PATH
            value: {{ default "flower" .Values.flowerBasePath | quote }}
          - name: DOCKER_HOST_NAME_ELASTICSEARCH_ACCESS
            value: {{ .Values.esHost | quote }}
          - name: DOCKER_ELASTICSEARCH_PORT
            value: {{ .Values.esPort | quote }}
          - name: DOCKER_HOST_NAME_KIBANA
            value: contrax-kibana
          - name: DOCKER_HOST_NAME_REDIS_ACCESS
            value: contrax-redis
          - name: DOCKER_JUPYTER_BASE_URL
            value: {{ default "/jupyter" .Values.jupyterBasePath | quote }}
          - name: DOCKER_JUPYTER_PORT
            value: {{ default "8888" .Values.jupyterPort | squote }}
          - name: DOCKER_NGINX_SERVER_NAME
            value: contrax-nginx
          - name: DOCKER_HOST_NAME_PG_ACCESS
            value: {{ .Values.dbHost }}
          - name: DOCKER_PG_DB_NAME
            value: {{ .Values.dbName }}
          - name: DOCKER_PG_PASSWORD
            value: {{ .Values.dbPassword }}
          - name: DOCKER_PG_USER
            value: {{ .Values.dbUsername }}
          - name: DOCKER_HOST_NAME_RABBITMQ_ACCESS
            value: {{ .Values.rmqHost }}
          - name: DOCKER_RABBITMQ_PASSWORD
            value: {{ .Values.rmqPassword }}
          - name: DOCKER_RABBITMQ_USER
            value: {{ .Values.rmqUsername }}
          - name: DOCKER_RABBITMQ_VHOST
            value: {{ .Values.rmqVhost }}
          - name: DOCKER_WEBDAV_AUTH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: webdav-secrets
                key: password
          - name: DOCKER_WEBDAV_AUTH_USER
            valueFrom:
              secretKeyRef:
                name: webdav-secrets
                key: username
          - name: DOCKER_WEBDAV_SERVER_NAME_ACCESS
            value: contrax-webdav
          - name: SHARED_USER_ID
            value: "82"
          - name: SHARED_USER_NAME
            value: contraxsuite_docker_user
          - name: MLFLOW_S3_ENDPOINT_URL
            value: {{ .Values.mlflowS3EndpointUrl | quote }}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: mlflow-aws-secrets
                key: aws_access_key
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: mlflow-aws-secrets
                key: aws_secret_key
        image: {{ .Values.contraxImage }}
        name: contrax-daphne
        resources: {}
        volumeMounts:
          - mountPath: /contraxsuite_services/local_settings.py
            name: local-settings
            subPath: local_settings_websrv.py
          - mountPath: /contraxsuite_services/uwsgi.ini
            name: uwsgi-ini
            subPath: uwsgi.ini
      volumes:
        - name: local-settings
          configMap:
            name: local-settings
        - name: uwsgi-ini
          configMap:
            name: uwsgi-ini
      imagePullSecrets:
        - name: contraxsuitesecret

#contrax-powa-web
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  annotations:
    kompose.cmd: ./kompose convert --file docker-compose-single-host-db-open-afterdeploy.yml
      -o output/ -c
    kompose.version: 1.17.0 (a74acad)
  creationTimestamp: null
  name: contrax-powa-web
spec:
  {{- if .Values.powa }}
  replicas: 1
  {{- else }}
  replicas: 0
  {{- end }}
  selector:
    matchLabels:
      app: contrax-powa-web
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: contrax-powa-web
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
        - image: powateam/powa-web
          name: contrax-powa-web
          resources: {}
          volumeMounts:
            - mountPath: /etc/powa-web.conf
              name: contrax-powa-web
              subPath: powa-web.conf
      hostname: contrax-powa-web
      restartPolicy: Always
      volumes:
        - name: contrax-powa-web
          configMap:
            name: powa-web-configmap

# contrax-pgbouncer-session
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  name: contrax-pgbouncer-session
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-pgbouncer-session
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: contrax-pgbouncer-session
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
        - image: {{ .Values.pgbouncerImage | quote }}
          name: contrax-pgbouncer-session
          volumeMounts:
            - mountPath: /etc/pgbouncer/pgbouncer.ini
              name: pgbouncer-websrv-ini
              subPath: pgbouncer.ini
            - mountPath: /etc/pgbouncer/userlist.txt
              name: userlist-txt
              subPath: userlist.txt
      hostname: contrax-pgbouncer-session
      restartPolicy: Always
      volumes:
        - name: pgbouncer-websrv-ini
          configMap:
            name: pgbouncer-websrv-ini
        - name: userlist-txt
          configMap:
            name: userlist-txt


---
# contrax-pgbouncer-transaction
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace | quote }}
  name: contrax-pgbouncer-transaction
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contrax-pgbouncer-transaction
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: contrax-pgbouncer-transaction
    spec:
      nodeSelector:
        contraxsuite.com/role: manager
      containers:
        - image: {{ .Values.pgbouncerImage | quote }}
          name: contrax-pgbouncer-transaction
          volumeMounts:
            - mountPath: /etc/pgbouncer/pgbouncer.ini
              name: pgbouncer-websrv-ini
              subPath: pgbouncer.ini
            - mountPath: /etc/pgbouncer/userlist.txt
              name: userlist-txt
              subPath: userlist.txt
      hostname: contrax-pgbouncer-transaction
      restartPolicy: Always
      volumes:
        - name: pgbouncer-websrv-ini
          configMap:
            name: pgbouncer-celery-ini
        - name: userlist-txt
          configMap:
            name: userlist-txt
