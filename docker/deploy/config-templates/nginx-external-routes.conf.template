port_in_redirect off;


error_page 404 /404.html;
location = /404.html {
    root /usr/share/nginx/html;
    internal;
}

location ${DOCKER_DJANGO_BASE_PATH}media/data/frontend/ {
    rewrite  ^${DOCKER_DJANGO_BASE_PATH}media/data/frontend/(.*) /$1 break;
    root /data/media/data/frontend/;
    auth_basic off;
    allow all;
}

location /frontend/ {
    rewrite  ^/frontend/(.*) /$1 break;
    root /data/media/data/frontend/;
    auth_basic off;
    allow all;
}

rewrite ^/advanced(.*) ${DOCKER_DJANGO_BASE_PATH_STRIPPED}${DOLLAR}1 redirect;

location ${DOCKER_DJANGO_BASE_PATH_STRIPPED} {
    # workaround to start nginx, if host is unreachable
    set ${DOLLAR}target ${DOCKER_HOST_NAME_DAPHNE}:3355;
    proxy_pass http://${DOCKER_HOST_NAME_DAPHNE}:3355;
    uwsgi_read_timeout 300;

    include /etc/nginx/${DOCKER_NGINX_CORS_CONFIG};
    include /etc/nginx/uwsgi_params;
    try_files $uri $uri/ $uri.html =404;
}

location /api {
    # workaround to start nginx, if host is unreachable
    set ${DOLLAR}target ${DOCKER_HOST_NAME_DAPHNE}:3355;
    proxy_pass http://${DOCKER_HOST_NAME_DAPHNE}:3355;
    uwsgi_read_timeout 300;

    include /etc/nginx/${DOCKER_NGINX_CORS_CONFIG};
    include /etc/nginx/uwsgi_params;
}

location /rest-auth {
    # workaround to start nginx, if host is unreachable
    set ${DOLLAR}target ${DOCKER_HOST_NAME_DAPHNE}:3355;
    proxy_pass http://${DOCKER_HOST_NAME_DAPHNE}:3355;
    # uwsgi_pass ${DOLLAR}target;
    uwsgi_read_timeout 300;

    include /etc/nginx/${DOCKER_NGINX_CORS_CONFIG};
    include /etc/nginx/uwsgi_params;
}

location ~ ^${DOCKER_JUPYTER_BASE_URL}/?$ {
    return 301 ${DOCKER_JUPYTER_BASE_URL}/lab/;
}

location ${DOCKER_JUPYTER_BASE_URL} {
    # workaround to start nginx, if host is unreachable
    set ${DOLLAR}target http://${DOCKER_JUPYTER_HOST_NAME}:${DOCKER_JUPYTER_PORT};
    proxy_pass ${DOLLAR}target;

    error_page 502 /404.html;
	proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
    proxy_set_header Host ${DOLLAR}http_host;
	proxy_http_version 1.1;
    proxy_redirect off;
    proxy_buffering off;
    proxy_set_header Upgrade ${DOLLAR}http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_read_timeout 86400;
    auth_basic "Contraxsuite";
    auth_basic_user_file /etc/nginx/.kibana_htpasswd;
}

#location ${DOCKER_DJANGO_BASE_PATH}static/ {
#    rewrite  ^${DOCKER_DJANGO_BASE_PATH}static/(.*) /$1 break;
#    root /contraxsuite_services/staticfiles/;
#}

# Minio bucket for storing mlflow artifacts
# Minio is compatible with S3 client API and requires itself to be bound to the root (/) of the server.
# The following config is a workaround to pass access to "${MLFLOW_AWS_BUCKET}" bucket.
# A similar entry should be added for each S3 bucket we need to serve.
location /${MLFLOW_AWS_BUCKET} {
    set ${DOLLAR}target http://contrax-minio:9000;
    error_page 502 /404.html;
    proxy_pass ${DOLLAR}target;
    proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto ${DOLLAR}scheme;
    proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
    proxy_set_header Upgrade ${DOLLAR}http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host ${DOLLAR}http_host;
    proxy_cache_bypass ${DOLLAR}http_upgrade;
    proxy_connect_timeout  300;
    # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
    proxy_http_version 1.1;
    proxy_set_header Connection "";
}

rewrite ^/mlflow${DOLLAR} /mlflow/ redirect;
location ~ ^/mlflow/(.*)${DOLLAR} {
    # workaround to start nginx, if host is unreachable
    set ${DOLLAR}target http://contrax-mlflow-tracking:5000;
    error_page 502 /404.html;
    rewrite /mlflow/(.*) /${DOLLAR}1 break;
    proxy_pass ${DOLLAR}target;
    proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
    proxy_http_version 1.1;
    proxy_set_header Upgrade ${DOLLAR}http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host ${DOLLAR}host;
    proxy_cache_bypass ${DOLLAR}http_upgrade;
    auth_basic "Contraxsuite";
    auth_basic_user_file /etc/nginx/.kibana_htpasswd;
}


rewrite ^/kibana$ /kibana/ redirect;

location ~ ^/kibana/(.*)${DOLLAR} {
    # workaround to start nginx, if host is unreachable
    set ${DOLLAR}target http://${DOCKER_HOST_NAME_KIBANA}:5601;
    error_page 502 /404.html;

    rewrite /kibana/(.*) /${DOLLAR}1 break;
	proxy_pass ${DOLLAR}target;
	proxy_http_version 1.1;
	proxy_set_header Upgrade ${DOLLAR}http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host ${DOLLAR}host;
    proxy_cache_bypass ${DOLLAR}http_upgrade;
    auth_basic "Contraxsuite";
    auth_basic_user_file /etc/nginx/.kibana_htpasswd;
}

location /flower {
    # workaround to start nginx, if host is unreachable
    set ${DOLLAR}target http://${DOCKER_HOST_NAME_FLOWER}:5555;
    error_page 502 /404.html;

    proxy_pass ${DOLLAR}target;
    proxy_set_header X-Forwarded-For ${DOLLAR}proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP ${DOLLAR}remote_addr;
    proxy_set_header Host ${DOLLAR}http_host;
    proxy_http_version 1.1;
    proxy_redirect off;
    proxy_buffering off;
    proxy_set_header Upgrade ${DOLLAR}http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_read_timeout 86400;
    auth_basic "Contraxsuite";
    auth_basic_user_file /etc/nginx/.kibana_htpasswd;
}

location /websocket/ {
    proxy_pass http://${DOCKER_HOST_NAME_DAPHNE}:3355/websocket/;
    proxy_ssl_server_name on;
    proxy_http_version 1.1;
    proxy_set_header Upgrade ${DOLLAR}http_upgrade;
    proxy_set_header Connection "upgrade";
}

rewrite ^/text_extraction_system$ /text_extraction_system/ redirect;

location /text_extraction_system {
    rewrite /text_extraction_system/(.*) /${DOLLAR}1 break;
    proxy_pass http://tes-web-api:8000;
    auth_basic "Contraxsuite";
    auth_basic_user_file /etc/nginx/.kibana_htpasswd;
}
