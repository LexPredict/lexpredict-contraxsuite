# Generated by Django 2.2.13 on 2020-12-01 09:54
from typing import Dict, List, Set

from django.db import migrations, connection


PERM_CODE = 'individual_assign'
PERM_NAME = 'Assign document'


def ensure_target_permission_id(c_type_id: int) -> int:
    code = 'individual_assign'
    with connection.cursor() as cursor:
        cursor.execute(f'''INSERT INTO auth_permission (name, content_type_id, codename) 
VALUES (%s, %s, %s) ON CONFLICT DO NOTHING;''',
                       [PERM_NAME, c_type_id, PERM_CODE])
        cursor.execute(f'''SELECT id FROM auth_permission WHERE codename = '{code}';''')
        return cursor.fetchone()[0]


def get_reviewers() -> Dict[int, Set[int]]:
    user_projects: Dict[int, Set[int]] = {}
    target_tables = ['project_project_reviewers', 'project_project_super_reviewers']
    for rev_table in target_tables:
        with connection.cursor() as cursor:
            cursor.execute(f'''SELECT user_id, project_id FROM "{rev_table}";''')
            for user_id, project_id in cursor.fetchall():
                if user_id in user_projects:
                    user_projects[user_id].add(project_id)
                else:
                    user_projects[user_id] = {project_id}
    return user_projects


def add_permission_to_project_team_members(apps, _schema_editor):
    # give all project team members (reviewers and super reviewers)
    # new permission
    reviewers = get_reviewers()
    Project = apps.get_model('project', 'Project')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    project_ctype_id = ContentType.objects.get_for_model(Project).id
    perm_id = ensure_target_permission_id(project_ctype_id)

    with connection.cursor() as cursor:
        for user_id in reviewers:
            project_ids = reviewers[user_id]
            for project_id in project_ids:
                cursor.execute('''INSERT INTO users_customuserobjectpermission  
(user_id, permission_id, object_pk, content_type_id)  
VALUES(%s, %s, %s, %s);''', [user_id, perm_id, project_id, project_ctype_id])


class Migration(migrations.Migration):

    dependencies = [
        ('project', '0043_permissions'),
        ('users', '0019_merge_20201119_1037'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='project',
            options={'ordering': ['name'],
                     'permissions': (('view_documents', 'View project documents'),
                                     ('recluster_project', 'Re-cluster project documents'),
                                     ('add_project_user', 'Add project user'),
                                     ('add_project_document', 'Add project document'),
                                     ('detect_field_values', 'Detect field values in a project'),
                                     (PERM_CODE, PERM_NAME),
                                     ('bulk_assign', 'Bulk assign documents'),
                                     ('bulk_update_status', 'Bulk update document status'),
                                     ('view_project_stats', 'View project stats'),
                                     ('change_document_field_values', 'Change field values in project documents'),
                                     ('change_document_status', 'Change status of individual document in a project'),
                                     ('delete_documents', 'Delete project documents'))},
        ),
        migrations.RunPython(add_permission_to_project_team_members,
                             reverse_code=migrations.RunPython.noop),
    ]
