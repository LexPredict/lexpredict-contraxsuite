# Generated by Django 2.2.13 on 2020-12-07 12:41
from typing import Dict, List

from django.db import migrations, models, connection


def make_term_tags(_apps, _schema_editor):
    project_terms: Dict[int, List[int]] = {}

    _default_tag_id = add_default_tags()

    with connection.cursor() as cursor:
        proj_id = None
        cursor.execute(f'''SELECT p.project_id, pt.term_id
            FROM project_projecttermconfiguration_terms pt
            JOIN project_projecttermconfiguration p on pt.projecttermconfiguration_id = p.id;''')
        for proj_id, term_id in cursor.fetchall():
            if proj_id in project_terms:
                project_terms[proj_id].append(term_id)
            else:
                project_terms[proj_id] = [term_id]

        try:
            if not proj_id:
                return
        except:
            return

        project_names: Dict[int, str] = {}
        cursor.execute('''SELECT id, name FROM project_project;''')
        for id, name in cursor.fetchall():
            project_names[id] = name

        used_names = set([project_names[i] for i in project_names])

        for project_id in project_terms:
            terms = project_terms[proj_id]
            # make unique term tag name
            counter = 0
            proj_name = project_names[project_id][:100 - 6]
            tag_name = proj_name
            while True:
                if counter > 0:
                    tag_name = f'{proj_name}_{counter}'
                if tag_name not in used_names:
                    used_names.add(tag_name)
                    break
                counter += 1
            # add tag and set the tag for all terms
            # and for the project
            cursor.execute('''INSERT INTO extract_termtag(name) VALUES (%s) RETURNING id;''',
                           [tag_name])
            new_tag_id = cursor.fetchone()[0]
            for term in terms:
                cursor.execute('''INSERT INTO extract_term_tags(term_id, termtag_id) VALUES (%s, %s);''',
                               [term, new_tag_id])
            cursor.execute('''INSERT INTO project_project_term_tags(project_id, termtag_id) VALUES (%s, %s);''',
                           [project_id, new_tag_id])


def add_default_tags() -> int:
    with connection.cursor() as cursor:
        cursor.execute("INSERT INTO extract_termtag (name) VALUES ('default') RETURNING id;")
        default_tag_id = cursor.fetchone()[0]

        cursor.execute(f'''
        INSERT INTO extract_term_tags(term_id, termtag_id)
        SELECT id, %s FROM extract_term;
        ''', [default_tag_id])
    return default_tag_id


def rollback_term_config(_apps, schema_editor):
    # revert make_term_tags - fill project_projecttermconfiguration and
    # project_projecttermconfiguration_terms tables
    project_tags: Dict[int, List[int]] = {}
    with connection.cursor() as cursor:
        cursor.execute('''SELECT project_id, termtag_id FROM project_project_term_tags;''')
        for proj_id, tag_id in cursor.fetchall():
            if proj_id in project_tags:
                project_tags[proj_id].append(tag_id)
            else:
                project_tags[proj_id] = [tag_id]
        # create configuration for each project with tags (if doesn't exist)
        for proj_id in project_tags:
            cursor.execute('''SELECT COUNT(*) FROM project_projecttermconfiguration WHERE project_id = %s;''',
                           proj_id)
            if cursor.fetchone()[0]:
                continue
            cursor.execute('''INSERT (%s) INTO project_projecttermconfiguration;''',
                           proj_id)
            conf_id = cursor.lastrowid
            tag_ids = project_tags[proj_id]

            for tag_id in tag_ids:
                cursor.execute(f'''INSERT INTO project_projecttermconfiguration_terms (projecttermconfiguration_id, term_id)
                            SELECT %s, t.term_id FROM extract_term t WHERE t.id IN (
                            SELECT term_id FROM extract_term_tags WHERE termtag_id=%s);''', [conf_id, tag_id])


class Migration(migrations.Migration):

    dependencies = [
        ('extract', '0062_auto_20201207_1241'),
        ('project', '0044_auto_20201201_0954'),
    ]

    operations = [
        migrations.AddField(
            model_name='project',
            name='term_tags',
            field=models.ManyToManyField(blank=True, db_index=True, to='extract.TermTag'),
        ),
        migrations.RunPython(make_term_tags, reverse_code=rollback_term_config)
    ]
