# Generated by Django 2.2.13 on 2020-10-14 04:47

from django.conf import settings
from django.db import migrations, models
from django.contrib.auth.management import create_permissions

from apps.users.permissions import owner_project_permissions, reviewer_project_permissions, \
    super_reviewer_project_permissions, document_permissions, get_default_group_permissions


def create_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')

    # step 1 : ensure all permissions created
    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, apps=apps, verbosity=0)
        app_config.models_module = None

    # step : create groups
    group_permissions = get_default_group_permissions()
    for group_name, permissions in group_permissions.items():
        group, _ = Group.objects.get_or_create(name=group_name)
        for perm in permissions:
            try:
                permission = Permission.objects.get(content_type__app_label=perm['app_name'],
                                                    content_type__model=perm['model_name'],
                                                    codename=perm['perm_name'])
                group.permissions.add(permission)
            except:
                # case when permission was added later
                pass


def delete_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    group_permissions = get_default_group_permissions()
    group_names = list(group_permissions.keys())
    Group.objects.filter(name__in=group_names).delete()


def migrate_roles_to_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    Role = apps.get_model('users', 'Role')
    User = apps.get_model('users', 'User')
    Project = apps.get_model('project', 'Project')
    Document = apps.get_model('document', 'Document')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    CustomUserObjectPermission = apps.get_model('users', 'CustomUserObjectPermission')

    def get_perm_id(permission_name):
        app_label, codename = permission_name.split('.', 1)
        return Permission.objects.get(content_type__app_label=app_label, codename=codename).id

    # migrate users from roles into groups
    for group in Group.objects.all():
        role = Role.objects.filter(name=group.name).last()
        if role:
            group.user_set.set(role.user_set.all())

    manager_role = Role.objects.filter(code='manager').last()
    if manager_role:
        reviewer_group = Group.objects.get(name='Reviewer')
        reviewer_group.user_set.add(*manager_role.user_set.values_list('pk', flat=True))

    perms_data = []

    # grant project permissions
    project_ctype_id = ContentType.objects.get_for_model(Project).id
    for project in Project.objects.all():
        for user in project.owners.all():
            for perm_name in owner_project_permissions:
                try:
                    perms_data.append((user.id, get_perm_id(perm_name), project_ctype_id, project.id))
                except:
                    pass
        for user in project.reviewers.all():
            for perm_name in reviewer_project_permissions:
                try:
                    perms_data.append((user.id, get_perm_id(perm_name), project_ctype_id, project.id))
                except:
                    pass
        for user in project.super_reviewers.all():
            for perm_name in super_reviewer_project_permissions:
                try:
                    perms_data.append((user.id, get_perm_id(perm_name), project_ctype_id, project.id))
                except:
                    pass

    # grant document permissions
    document_ctype_id = ContentType.objects.get_for_model(Document).id
    for user in User.objects.all():
        for document in Document.objects.filter(assignee=user):
            for perm_name in document_permissions:
                try:
                    perms_data.append((user.id, get_perm_id(perm_name), document_ctype_id, document.id))
                except:
                    pass

    perms = [CustomUserObjectPermission(
        user_id=user_id, permission_id=perm_id, content_type_id=ctype_id, object_pk=object_id)
        for user_id, perm_id, ctype_id, object_id in perms_data]

    CustomUserObjectPermission.objects.bulk_create(perms, ignore_conflicts=True)


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0011_update_proxy_permissions'),
        ('document', '0218_permissions'),
        ('project', '0043_permissions'),
        ('users', '0017_permissions'),
    ]

    operations = [

        migrations.RunPython(create_groups, reverse_code=delete_groups),

        migrations.CreateModel(
            name='CustomUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False,
                                        verbose_name='ID')),
                ('object_pk', models.CharField(max_length=255, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=models.deletion.CASCADE,
                                                   to='contenttypes.ContentType')),
                ('permission', models.ForeignKey(on_delete=models.deletion.CASCADE,
                                                 to='auth.Permission')),
                ('user', models.ForeignKey(on_delete=models.deletion.CASCADE,
                                           to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='customuserobjectpermission',
            index=models.Index(fields=['content_type', 'object_pk'],
                               name='users_custo_content_4c8ce1_idx'),
        ),
        migrations.AddIndex(
            model_name='customuserobjectpermission',
            index=models.Index(fields=['content_type', 'object_pk', 'user'],
                               name='users_custo_content_6d83d1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='customuserobjectpermission',
            unique_together={('user', 'permission', 'object_pk')},
        ),

        migrations.RunPython(migrate_roles_to_groups, reverse_code=migrations.RunPython.noop),

    ]
