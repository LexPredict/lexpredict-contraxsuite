# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-11-23 11:45
from __future__ import unicode_literals
from django.db import migrations, transaction

from apps.common.logger import CsLogger

logger = CsLogger.get_django_logger()


def set_processed(document):
    document.tmp_dirty = False
    document.save()


# Because in current code version we can't cache fields without detect field values task lets use this workaround
def fix_document_cache(apps, schema_editor):
    Document = apps.get_model('document', 'Document')
    DocumentField = apps.get_model('document', 'DocumentField')
    cloned_fields_by_document_type_pk = {}
    dirty_documents_count = Document.objects.filter(tmp_dirty=True).count()
    processed_documents_number = 0
    while True:
        with transaction.atomic():
            document = None
            for dirty_document in Document.objects.filter(tmp_dirty=True)[:1]:
                document = dirty_document
                break
            if document is None:
                break

            field_values = document.field_values
            if not field_values:
                set_processed(document)
                continue

            cloned_fields = cloned_fields_by_document_type_pk.get(document.document_type_id)
            if cloned_fields is None:
                cloned_fields = []
                for cloned_field in DocumentField.objects.filter(document_type_id=document.document_type_id) \
                        .exclude(tmp_source_field=None):
                    cloned_fields.append((cloned_field.tmp_source_field_id, cloned_field.pk))
                cloned_fields_by_document_type_pk[document.document_type_id] = cloned_fields

            to_replace = []
            for key in field_values.keys():
                for old_field_pk, new_field_pk in cloned_fields:
                    if key.startswith(old_field_pk):
                        to_replace.append((key, new_field_pk + key[len(old_field_pk):]))

            for old_key, new_key in to_replace:
                value = field_values[old_key]
                del field_values[old_key]
                field_values[new_key] = value

            set_processed(document)

            processed_documents_number += 1
            if processed_documents_number % 100 == 0:
                print('Processed {0}/{1} document caches, don\'t stop migration'
                      .format(processed_documents_number, dirty_documents_count))


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('document', '0108_apply_new_schema'),
    ]
    operations = [
        migrations.RunPython(fix_document_cache, reverse_code=migrations.RunPython.noop),
    ]
