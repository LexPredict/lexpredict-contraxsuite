/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProjectClusteringDocumentClusters
    /// </summary>
    [DataContract]
    public partial class ProjectClusteringDocumentClusters :  IEquatable<ProjectClusteringDocumentClusters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectClusteringDocumentClusters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectClusteringDocumentClusters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectClusteringDocumentClusters" /> class.
        /// </summary>
        /// <param name="clusterId">clusterId.</param>
        /// <param name="name">name (required).</param>
        public ProjectClusteringDocumentClusters(int clusterId = default(int), string name = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ProjectClusteringDocumentClusters and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            this.ClusterId = clusterId;
        }

        /// <summary>
        /// Gets or Sets Pk
        /// </summary>
        [DataMember(Name="pk", EmitDefaultValue=false)]
        public int Pk { get; private set; }

        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        [DataMember(Name="cluster_id", EmitDefaultValue=false)]
        public int ClusterId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsCount
        /// </summary>
        [DataMember(Name="documents_count", EmitDefaultValue=false)]
        public int DocumentsCount { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectClusteringDocumentClusters {\n");
            sb.Append("  Pk: ").Append(Pk).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DocumentsCount: ").Append(DocumentsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectClusteringDocumentClusters);
        }

        /// <summary>
        /// Returns true if ProjectClusteringDocumentClusters instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectClusteringDocumentClusters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectClusteringDocumentClusters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pk == input.Pk ||
                    (this.Pk != null &&
                    this.Pk.Equals(input.Pk))
                ) && 
                (
                    this.ClusterId == input.ClusterId ||
                    (this.ClusterId != null &&
                    this.ClusterId.Equals(input.ClusterId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DocumentsCount == input.DocumentsCount ||
                    (this.DocumentsCount != null &&
                    this.DocumentsCount.Equals(input.DocumentsCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pk != null)
                    hashCode = hashCode * 59 + this.Pk.GetHashCode();
                if (this.ClusterId != null)
                    hashCode = hashCode * 59 + this.ClusterId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DocumentsCount != null)
                    hashCode = hashCode * 59 + this.DocumentsCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

 
            // ClusterId (int) maximum
            if(this.ClusterId > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClusterId, must be a value less than or equal to 2147483647.", new [] { "ClusterId" });
            }

            // ClusterId (int) minimum
            if(this.ClusterId < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClusterId, must be a value greater than or equal to -2147483648.", new [] { "ClusterId" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 300.", new [] { "Name" });
            }

 
            yield break;
        }
    }

}
