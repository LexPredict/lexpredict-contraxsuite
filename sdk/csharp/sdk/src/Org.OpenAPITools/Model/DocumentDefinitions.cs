/* 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentDefinitions
    /// </summary>
    [DataContract]
    public partial class DocumentDefinitions :  IEquatable<DocumentDefinitions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDefinitions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentDefinitions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDefinitions" /> class.
        /// </summary>
        /// <param name="definition">definition (required).</param>
        /// <param name="matches">matches (required).</param>
        /// <param name="descriptions">descriptions (required).</param>
        public DocumentDefinitions(string definition = default(string), List<Object> matches = default(List<Object>), List<Object> descriptions = default(List<Object>))
        {
            // to ensure "definition" is required (not null)
            if (definition == null)
            {
                throw new InvalidDataException("definition is a required property for DocumentDefinitions and cannot be null");
            }
            else
            {
                this.Definition = definition;
            }
            
            // to ensure "matches" is required (not null)
            if (matches == null)
            {
                throw new InvalidDataException("matches is a required property for DocumentDefinitions and cannot be null");
            }
            else
            {
                this.Matches = matches;
            }
            
            // to ensure "descriptions" is required (not null)
            if (descriptions == null)
            {
                throw new InvalidDataException("descriptions is a required property for DocumentDefinitions and cannot be null");
            }
            else
            {
                this.Descriptions = descriptions;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name="definition", EmitDefaultValue=true)]
        public string Definition { get; set; }

        /// <summary>
        /// Gets or Sets Matches
        /// </summary>
        [DataMember(Name="matches", EmitDefaultValue=true)]
        public List<Object> Matches { get; set; }

        /// <summary>
        /// Gets or Sets Descriptions
        /// </summary>
        [DataMember(Name="descriptions", EmitDefaultValue=true)]
        public List<Object> Descriptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentDefinitions {\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  Matches: ").Append(Matches).Append("\n");
            sb.Append("  Descriptions: ").Append(Descriptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentDefinitions);
        }

        /// <summary>
        /// Returns true if DocumentDefinitions instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentDefinitions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentDefinitions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Definition == input.Definition ||
                    (this.Definition != null &&
                    this.Definition.Equals(input.Definition))
                ) && 
                (
                    this.Matches == input.Matches ||
                    this.Matches != null &&
                    input.Matches != null &&
                    this.Matches.SequenceEqual(input.Matches)
                ) && 
                (
                    this.Descriptions == input.Descriptions ||
                    this.Descriptions != null &&
                    input.Descriptions != null &&
                    this.Descriptions.SequenceEqual(input.Descriptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Definition != null)
                    hashCode = hashCode * 59 + this.Definition.GetHashCode();
                if (this.Matches != null)
                    hashCode = hashCode * 59 + this.Matches.GetHashCode();
                if (this.Descriptions != null)
                    hashCode = hashCode * 59 + this.Descriptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
