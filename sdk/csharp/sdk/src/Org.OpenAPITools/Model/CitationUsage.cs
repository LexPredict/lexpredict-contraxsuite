/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CitationUsage
    /// </summary>
    [DataContract]
    public partial class CitationUsage :  IEquatable<CitationUsage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CitationUsage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CitationUsage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CitationUsage" /> class.
        /// </summary>
        /// <param name="volume">volume (required).</param>
        /// <param name="reporter">reporter (required).</param>
        /// <param name="reporterFullName">reporterFullName.</param>
        /// <param name="page">page (required).</param>
        /// <param name="page2">page2.</param>
        /// <param name="court">court.</param>
        /// <param name="year">year.</param>
        /// <param name="citationStr">citationStr (required).</param>
        /// <param name="count">count.</param>
        public CitationUsage(int volume = default(int), string reporter = default(string), string reporterFullName = default(string), int page = default(int), string page2 = default(string), string court = default(string), int? year = default(int?), string citationStr = default(string), int count = default(int))
        {
            // to ensure "volume" is required (not null)
            if (volume == null)
            {
                throw new InvalidDataException("volume is a required property for CitationUsage and cannot be null");
            }
            else
            {
                this.Volume = volume;
            }

            // to ensure "reporter" is required (not null)
            if (reporter == null)
            {
                throw new InvalidDataException("reporter is a required property for CitationUsage and cannot be null");
            }
            else
            {
                this.Reporter = reporter;
            }

            this.ReporterFullName = reporterFullName;
            // to ensure "page" is required (not null)
            if (page == null)
            {
                throw new InvalidDataException("page is a required property for CitationUsage and cannot be null");
            }
            else
            {
                this.Page = page;
            }

            this.Page2 = page2;
            this.Court = court;
            this.Year = year;
            // to ensure "citationStr" is required (not null)
            if (citationStr == null)
            {
                throw new InvalidDataException("citationStr is a required property for CitationUsage and cannot be null");
            }
            else
            {
                this.CitationStr = citationStr;
            }

            this.ReporterFullName = reporterFullName;
            this.Page2 = page2;
            this.Court = court;
            this.Year = year;
            this.Count = count;
        }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name="volume", EmitDefaultValue=true)]
        public int Volume { get; set; }

        /// <summary>
        /// Gets or Sets Reporter
        /// </summary>
        [DataMember(Name="reporter", EmitDefaultValue=true)]
        public string Reporter { get; set; }

        /// <summary>
        /// Gets or Sets ReporterFullName
        /// </summary>
        [DataMember(Name="reporter_full_name", EmitDefaultValue=true)]
        public string ReporterFullName { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name="page", EmitDefaultValue=true)]
        public int Page { get; set; }

        /// <summary>
        /// Gets or Sets Page2
        /// </summary>
        [DataMember(Name="page2", EmitDefaultValue=true)]
        public string Page2 { get; set; }

        /// <summary>
        /// Gets or Sets Court
        /// </summary>
        [DataMember(Name="court", EmitDefaultValue=true)]
        public string Court { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=true)]
        public int? Year { get; set; }

        /// <summary>
        /// Gets or Sets CitationStr
        /// </summary>
        [DataMember(Name="citation_str", EmitDefaultValue=true)]
        public string CitationStr { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Pk
        /// </summary>
        [DataMember(Name="pk", EmitDefaultValue=false)]
        public int Pk { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitPk
        /// </summary>
        [DataMember(Name="text_unit__pk", EmitDefaultValue=false)]
        public string TextUnitPk { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitUnitType
        /// </summary>
        [DataMember(Name="text_unit__unit_type", EmitDefaultValue=false)]
        public string TextUnitUnitType { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitLocationStart
        /// </summary>
        [DataMember(Name="text_unit__location_start", EmitDefaultValue=false)]
        public string TextUnitLocationStart { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitLocationEnd
        /// </summary>
        [DataMember(Name="text_unit__location_end", EmitDefaultValue=false)]
        public string TextUnitLocationEnd { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitDocumentPk
        /// </summary>
        [DataMember(Name="text_unit__document__pk", EmitDefaultValue=false)]
        public string TextUnitDocumentPk { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitDocumentName
        /// </summary>
        [DataMember(Name="text_unit__document__name", EmitDefaultValue=false)]
        public string TextUnitDocumentName { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitDocumentDescription
        /// </summary>
        [DataMember(Name="text_unit__document__description", EmitDefaultValue=false)]
        public string TextUnitDocumentDescription { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitDocumentDocumentType
        /// </summary>
        [DataMember(Name="text_unit__document__document_type", EmitDefaultValue=false)]
        public string TextUnitDocumentDocumentType { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CitationUsage {\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  Reporter: ").Append(Reporter).Append("\n");
            sb.Append("  ReporterFullName: ").Append(ReporterFullName).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Page2: ").Append(Page2).Append("\n");
            sb.Append("  Court: ").Append(Court).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  CitationStr: ").Append(CitationStr).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Pk: ").Append(Pk).Append("\n");
            sb.Append("  TextUnitPk: ").Append(TextUnitPk).Append("\n");
            sb.Append("  TextUnitUnitType: ").Append(TextUnitUnitType).Append("\n");
            sb.Append("  TextUnitLocationStart: ").Append(TextUnitLocationStart).Append("\n");
            sb.Append("  TextUnitLocationEnd: ").Append(TextUnitLocationEnd).Append("\n");
            sb.Append("  TextUnitDocumentPk: ").Append(TextUnitDocumentPk).Append("\n");
            sb.Append("  TextUnitDocumentName: ").Append(TextUnitDocumentName).Append("\n");
            sb.Append("  TextUnitDocumentDescription: ").Append(TextUnitDocumentDescription).Append("\n");
            sb.Append("  TextUnitDocumentDocumentType: ").Append(TextUnitDocumentDocumentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CitationUsage);
        }

        /// <summary>
        /// Returns true if CitationUsage instances are equal
        /// </summary>
        /// <param name="input">Instance of CitationUsage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CitationUsage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.Reporter == input.Reporter ||
                    (this.Reporter != null &&
                    this.Reporter.Equals(input.Reporter))
                ) && 
                (
                    this.ReporterFullName == input.ReporterFullName ||
                    (this.ReporterFullName != null &&
                    this.ReporterFullName.Equals(input.ReporterFullName))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.Page2 == input.Page2 ||
                    (this.Page2 != null &&
                    this.Page2.Equals(input.Page2))
                ) && 
                (
                    this.Court == input.Court ||
                    (this.Court != null &&
                    this.Court.Equals(input.Court))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.CitationStr == input.CitationStr ||
                    (this.CitationStr != null &&
                    this.CitationStr.Equals(input.CitationStr))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.Pk == input.Pk ||
                    (this.Pk != null &&
                    this.Pk.Equals(input.Pk))
                ) && 
                (
                    this.TextUnitPk == input.TextUnitPk ||
                    (this.TextUnitPk != null &&
                    this.TextUnitPk.Equals(input.TextUnitPk))
                ) && 
                (
                    this.TextUnitUnitType == input.TextUnitUnitType ||
                    (this.TextUnitUnitType != null &&
                    this.TextUnitUnitType.Equals(input.TextUnitUnitType))
                ) && 
                (
                    this.TextUnitLocationStart == input.TextUnitLocationStart ||
                    (this.TextUnitLocationStart != null &&
                    this.TextUnitLocationStart.Equals(input.TextUnitLocationStart))
                ) && 
                (
                    this.TextUnitLocationEnd == input.TextUnitLocationEnd ||
                    (this.TextUnitLocationEnd != null &&
                    this.TextUnitLocationEnd.Equals(input.TextUnitLocationEnd))
                ) && 
                (
                    this.TextUnitDocumentPk == input.TextUnitDocumentPk ||
                    (this.TextUnitDocumentPk != null &&
                    this.TextUnitDocumentPk.Equals(input.TextUnitDocumentPk))
                ) && 
                (
                    this.TextUnitDocumentName == input.TextUnitDocumentName ||
                    (this.TextUnitDocumentName != null &&
                    this.TextUnitDocumentName.Equals(input.TextUnitDocumentName))
                ) && 
                (
                    this.TextUnitDocumentDescription == input.TextUnitDocumentDescription ||
                    (this.TextUnitDocumentDescription != null &&
                    this.TextUnitDocumentDescription.Equals(input.TextUnitDocumentDescription))
                ) && 
                (
                    this.TextUnitDocumentDocumentType == input.TextUnitDocumentDocumentType ||
                    (this.TextUnitDocumentDocumentType != null &&
                    this.TextUnitDocumentDocumentType.Equals(input.TextUnitDocumentDocumentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.Reporter != null)
                    hashCode = hashCode * 59 + this.Reporter.GetHashCode();
                if (this.ReporterFullName != null)
                    hashCode = hashCode * 59 + this.ReporterFullName.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                if (this.Page2 != null)
                    hashCode = hashCode * 59 + this.Page2.GetHashCode();
                if (this.Court != null)
                    hashCode = hashCode * 59 + this.Court.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.CitationStr != null)
                    hashCode = hashCode * 59 + this.CitationStr.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Pk != null)
                    hashCode = hashCode * 59 + this.Pk.GetHashCode();
                if (this.TextUnitPk != null)
                    hashCode = hashCode * 59 + this.TextUnitPk.GetHashCode();
                if (this.TextUnitUnitType != null)
                    hashCode = hashCode * 59 + this.TextUnitUnitType.GetHashCode();
                if (this.TextUnitLocationStart != null)
                    hashCode = hashCode * 59 + this.TextUnitLocationStart.GetHashCode();
                if (this.TextUnitLocationEnd != null)
                    hashCode = hashCode * 59 + this.TextUnitLocationEnd.GetHashCode();
                if (this.TextUnitDocumentPk != null)
                    hashCode = hashCode * 59 + this.TextUnitDocumentPk.GetHashCode();
                if (this.TextUnitDocumentName != null)
                    hashCode = hashCode * 59 + this.TextUnitDocumentName.GetHashCode();
                if (this.TextUnitDocumentDescription != null)
                    hashCode = hashCode * 59 + this.TextUnitDocumentDescription.GetHashCode();
                if (this.TextUnitDocumentDocumentType != null)
                    hashCode = hashCode * 59 + this.TextUnitDocumentDocumentType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

 
            // Volume (int) maximum
            if(this.Volume > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Volume, must be a value less than or equal to 2147483647.", new [] { "Volume" });
            }

            // Volume (int) minimum
            if(this.Volume < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Volume, must be a value greater than or equal to 0.", new [] { "Volume" });
            }

            // Reporter (string) maxLength
            if(this.Reporter != null && this.Reporter.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reporter, length must be less than 1024.", new [] { "Reporter" });
            }

 
            // ReporterFullName (string) maxLength
            if(this.ReporterFullName != null && this.ReporterFullName.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReporterFullName, length must be less than 1024.", new [] { "ReporterFullName" });
            }

 

 
            // Page (int) maximum
            if(this.Page > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Page, must be a value less than or equal to 2147483647.", new [] { "Page" });
            }

            // Page (int) minimum
            if(this.Page < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Page, must be a value greater than or equal to 0.", new [] { "Page" });
            }

            // Page2 (string) maxLength
            if(this.Page2 != null && this.Page2.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Page2, length must be less than 1024.", new [] { "Page2" });
            }

 
            // Court (string) maxLength
            if(this.Court != null && this.Court.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Court, length must be less than 1024.", new [] { "Court" });
            }

 

 
            // Year (int?) maximum
            if(this.Year > (int?)32767)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Year, must be a value less than or equal to 32767.", new [] { "Year" });
            }

            // Year (int?) minimum
            if(this.Year < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Year, must be a value greater than or equal to 0.", new [] { "Year" });
            }

            // CitationStr (string) maxLength
            if(this.CitationStr != null && this.CitationStr.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CitationStr, length must be less than 1024.", new [] { "CitationStr" });
            }

 

 
            // Count (int) maximum
            if(this.Count > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Count, must be a value less than or equal to 2147483647.", new [] { "Count" });
            }

            // Count (int) minimum
            if(this.Count < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Count, must be a value greater than or equal to -2147483648.", new [] { "Count" });
            }

            yield break;
        }
    }

}
