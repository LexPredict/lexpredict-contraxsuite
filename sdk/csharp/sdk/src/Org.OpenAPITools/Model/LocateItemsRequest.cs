/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LocateItemsRequest
    /// </summary>
    [DataContract]
    public partial class LocateItemsRequest :  IEquatable<LocateItemsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocateItemsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocateItemsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocateItemsRequest" /> class.
        /// </summary>
        /// <param name="itemsToLocate">itemsToLocate (required).</param>
        /// <param name="projectId">projectId (required).</param>
        /// <param name="deleteExisting">deleteExisting.</param>
        /// <param name="searchIn">searchIn.</param>
        /// <param name="selectedTags">selectedTags.</param>
        public LocateItemsRequest(List<string> itemsToLocate = default(List<string>), int projectId = default(int), bool deleteExisting = default(bool), List<string> searchIn = default(List<string>), List<string> selectedTags = default(List<string>))
        {
            // to ensure "itemsToLocate" is required (not null)
            if (itemsToLocate == null)
            {
                throw new InvalidDataException("itemsToLocate is a required property for LocateItemsRequest and cannot be null");
            }
            else
            {
                this.ItemsToLocate = itemsToLocate;
            }

            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new InvalidDataException("projectId is a required property for LocateItemsRequest and cannot be null");
            }
            else
            {
                this.ProjectId = projectId;
            }

            this.DeleteExisting = deleteExisting;
            this.SearchIn = searchIn;
            this.SelectedTags = selectedTags;
        }

        /// <summary>
        /// Gets or Sets ItemsToLocate
        /// </summary>
        [DataMember(Name="items_to_locate", EmitDefaultValue=true)]
        public List<string> ItemsToLocate { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="project_id", EmitDefaultValue=true)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets DeleteExisting
        /// </summary>
        [DataMember(Name="delete_existing", EmitDefaultValue=false)]
        public bool DeleteExisting { get; set; }

        /// <summary>
        /// Gets or Sets SearchIn
        /// </summary>
        [DataMember(Name="search_in", EmitDefaultValue=false)]
        public List<string> SearchIn { get; set; }

        /// <summary>
        /// Gets or Sets SelectedTags
        /// </summary>
        [DataMember(Name="selected_tags", EmitDefaultValue=false)]
        public List<string> SelectedTags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocateItemsRequest {\n");
            sb.Append("  ItemsToLocate: ").Append(ItemsToLocate).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  DeleteExisting: ").Append(DeleteExisting).Append("\n");
            sb.Append("  SearchIn: ").Append(SearchIn).Append("\n");
            sb.Append("  SelectedTags: ").Append(SelectedTags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocateItemsRequest);
        }

        /// <summary>
        /// Returns true if LocateItemsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LocateItemsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocateItemsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemsToLocate == input.ItemsToLocate ||
                    this.ItemsToLocate != null &&
                    input.ItemsToLocate != null &&
                    this.ItemsToLocate.SequenceEqual(input.ItemsToLocate)
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.DeleteExisting == input.DeleteExisting ||
                    (this.DeleteExisting != null &&
                    this.DeleteExisting.Equals(input.DeleteExisting))
                ) && 
                (
                    this.SearchIn == input.SearchIn ||
                    this.SearchIn != null &&
                    input.SearchIn != null &&
                    this.SearchIn.SequenceEqual(input.SearchIn)
                ) && 
                (
                    this.SelectedTags == input.SelectedTags ||
                    this.SelectedTags != null &&
                    input.SelectedTags != null &&
                    this.SelectedTags.SequenceEqual(input.SelectedTags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemsToLocate != null)
                    hashCode = hashCode * 59 + this.ItemsToLocate.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.DeleteExisting != null)
                    hashCode = hashCode * 59 + this.DeleteExisting.GetHashCode();
                if (this.SearchIn != null)
                    hashCode = hashCode * 59 + this.SearchIn.GetHashCode();
                if (this.SelectedTags != null)
                    hashCode = hashCode * 59 + this.SelectedTags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
