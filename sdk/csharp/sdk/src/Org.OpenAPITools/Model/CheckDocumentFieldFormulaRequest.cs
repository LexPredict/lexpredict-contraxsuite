/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CheckDocumentFieldFormulaRequest
    /// </summary>
    [DataContract]
    public partial class CheckDocumentFieldFormulaRequest :  IEquatable<CheckDocumentFieldFormulaRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckDocumentFieldFormulaRequest" /> class.
        /// </summary>
        /// <param name="formula">formula.</param>
        /// <param name="hideUntilPython">hideUntilPython.</param>
        public CheckDocumentFieldFormulaRequest(string formula = default(string), string hideUntilPython = default(string))
        {
            this.Formula = formula;
            this.HideUntilPython = hideUntilPython;
        }

        /// <summary>
        /// Gets or Sets Formula
        /// </summary>
        [DataMember(Name="formula", EmitDefaultValue=false)]
        public string Formula { get; set; }

        /// <summary>
        /// Gets or Sets HideUntilPython
        /// </summary>
        [DataMember(Name="hide_until_python", EmitDefaultValue=false)]
        public string HideUntilPython { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckDocumentFieldFormulaRequest {\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  HideUntilPython: ").Append(HideUntilPython).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckDocumentFieldFormulaRequest);
        }

        /// <summary>
        /// Returns true if CheckDocumentFieldFormulaRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckDocumentFieldFormulaRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckDocumentFieldFormulaRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Formula == input.Formula ||
                    (this.Formula != null &&
                    this.Formula.Equals(input.Formula))
                ) && 
                (
                    this.HideUntilPython == input.HideUntilPython ||
                    (this.HideUntilPython != null &&
                    this.HideUntilPython.Equals(input.HideUntilPython))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Formula != null)
                    hashCode = hashCode * 59 + this.Formula.GetHashCode();
                if (this.HideUntilPython != null)
                    hashCode = hashCode * 59 + this.HideUntilPython.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
