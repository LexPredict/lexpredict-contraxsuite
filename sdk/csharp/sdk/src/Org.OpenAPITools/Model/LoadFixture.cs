/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LoadFixture
    /// </summary>
    [DataContract]
    public partial class LoadFixture :  IEquatable<LoadFixture>, IValidatableObject
    {
        /// <summary>
        /// Defines Mode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 1,

            /// <summary>
            /// Enum Shift for value: shift
            /// </summary>
            [EnumMember(Value = "shift")]
            Shift = 2,

            /// <summary>
            /// Enum Partial for value: partial
            /// </summary>
            [EnumMember(Value = "partial")]
            Partial = 3,

            /// <summary>
            /// Enum Soft for value: soft
            /// </summary>
            [EnumMember(Value = "soft")]
            Soft = 4

        }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadFixture" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoadFixture() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadFixture" /> class.
        /// </summary>
        /// <param name="fixture">fixture (required).</param>
        /// <param name="mode">mode (default to ModeEnum.Default).</param>
        /// <param name="encoding">encoding (default to &quot;utf&#x3D;8&quot;).</param>
        public LoadFixture(string fixture = default(string), ModeEnum? mode = ModeEnum.Default, string encoding = "utf=8")
        {
            // to ensure "fixture" is required (not null)
            if (fixture == null)
            {
                throw new InvalidDataException("fixture is a required property for LoadFixture and cannot be null");
            }
            else
            {
                this.Fixture = fixture;
            }

            // use default value if no "mode" provided
            if (mode == null)
            {
                this.Mode = ModeEnum.Default;
            }
            else
            {
                this.Mode = mode;
            }
            // use default value if no "encoding" provided
            if (encoding == null)
            {
                this.Encoding = "utf=8";
            }
            else
            {
                this.Encoding = encoding;
            }
        }

        /// <summary>
        /// Gets or Sets Fixture
        /// </summary>
        [DataMember(Name="fixture", EmitDefaultValue=true)]
        public string Fixture { get; set; }


        /// <summary>
        /// Gets or Sets Encoding
        /// </summary>
        [DataMember(Name="encoding", EmitDefaultValue=false)]
        public string Encoding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoadFixture {\n");
            sb.Append("  Fixture: ").Append(Fixture).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoadFixture);
        }

        /// <summary>
        /// Returns true if LoadFixture instances are equal
        /// </summary>
        /// <param name="input">Instance of LoadFixture to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoadFixture input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fixture == input.Fixture ||
                    (this.Fixture != null &&
                    this.Fixture.Equals(input.Fixture))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Encoding == input.Encoding ||
                    (this.Encoding != null &&
                    this.Encoding.Equals(input.Encoding))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fixture != null)
                    hashCode = hashCode * 59 + this.Fixture.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Encoding != null)
                    hashCode = hashCode * 59 + this.Encoding.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Encoding (string) maxLength
            if(this.Encoding != null && this.Encoding.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Encoding, length must be less than 10.", new [] { "Encoding" });
            }


            yield break;
        }
    }

}
