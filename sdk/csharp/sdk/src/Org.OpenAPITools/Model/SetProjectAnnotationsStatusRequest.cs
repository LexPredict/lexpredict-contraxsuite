/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SetProjectAnnotationsStatusRequest
    /// </summary>
    [DataContract]
    public partial class SetProjectAnnotationsStatusRequest :  IEquatable<SetProjectAnnotationsStatusRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetProjectAnnotationsStatusRequest" /> class.
        /// </summary>
        /// <param name="statusId">statusId.</param>
        /// <param name="all">all.</param>
        /// <param name="annotationIds">annotationIds.</param>
        /// <param name="noAnnotationIds">noAnnotationIds.</param>
        /// <param name="force">force.</param>
        public SetProjectAnnotationsStatusRequest(int? statusId = default(int?), bool all = default(bool), List<int> annotationIds = default(List<int>), List<int> noAnnotationIds = default(List<int>), bool force = default(bool))
        {
            this.StatusId = statusId;
            this.StatusId = statusId;
            this.All = all;
            this.AnnotationIds = annotationIds;
            this.NoAnnotationIds = noAnnotationIds;
            this.Force = force;
        }

        /// <summary>
        /// Gets or Sets StatusId
        /// </summary>
        [DataMember(Name="status_id", EmitDefaultValue=true)]
        public int? StatusId { get; set; }

        /// <summary>
        /// Gets or Sets All
        /// </summary>
        [DataMember(Name="all", EmitDefaultValue=false)]
        public bool All { get; set; }

        /// <summary>
        /// Gets or Sets AnnotationIds
        /// </summary>
        [DataMember(Name="annotation_ids", EmitDefaultValue=false)]
        public List<int> AnnotationIds { get; set; }

        /// <summary>
        /// Gets or Sets NoAnnotationIds
        /// </summary>
        [DataMember(Name="no_annotation_ids", EmitDefaultValue=false)]
        public List<int> NoAnnotationIds { get; set; }

        /// <summary>
        /// Gets or Sets Force
        /// </summary>
        [DataMember(Name="force", EmitDefaultValue=false)]
        public bool Force { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetProjectAnnotationsStatusRequest {\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  All: ").Append(All).Append("\n");
            sb.Append("  AnnotationIds: ").Append(AnnotationIds).Append("\n");
            sb.Append("  NoAnnotationIds: ").Append(NoAnnotationIds).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetProjectAnnotationsStatusRequest);
        }

        /// <summary>
        /// Returns true if SetProjectAnnotationsStatusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SetProjectAnnotationsStatusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetProjectAnnotationsStatusRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StatusId == input.StatusId ||
                    (this.StatusId != null &&
                    this.StatusId.Equals(input.StatusId))
                ) && 
                (
                    this.All == input.All ||
                    (this.All != null &&
                    this.All.Equals(input.All))
                ) && 
                (
                    this.AnnotationIds == input.AnnotationIds ||
                    this.AnnotationIds != null &&
                    input.AnnotationIds != null &&
                    this.AnnotationIds.SequenceEqual(input.AnnotationIds)
                ) && 
                (
                    this.NoAnnotationIds == input.NoAnnotationIds ||
                    this.NoAnnotationIds != null &&
                    input.NoAnnotationIds != null &&
                    this.NoAnnotationIds.SequenceEqual(input.NoAnnotationIds)
                ) && 
                (
                    this.Force == input.Force ||
                    (this.Force != null &&
                    this.Force.Equals(input.Force))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatusId != null)
                    hashCode = hashCode * 59 + this.StatusId.GetHashCode();
                if (this.All != null)
                    hashCode = hashCode * 59 + this.All.GetHashCode();
                if (this.AnnotationIds != null)
                    hashCode = hashCode * 59 + this.AnnotationIds.GetHashCode();
                if (this.NoAnnotationIds != null)
                    hashCode = hashCode * 59 + this.NoAnnotationIds.GetHashCode();
                if (this.Force != null)
                    hashCode = hashCode * 59 + this.Force.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
