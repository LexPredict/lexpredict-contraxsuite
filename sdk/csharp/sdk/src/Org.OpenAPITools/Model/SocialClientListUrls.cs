/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SocialClientListUrls
    /// </summary>
    [DataContract]
    public partial class SocialClientListUrls :  IEquatable<SocialClientListUrls>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SocialClientListUrls" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SocialClientListUrls() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SocialClientListUrls" /> class.
        /// </summary>
        /// <param name="authorizeUrl">authorizeUrl (required).</param>
        /// <param name="accessTokenUrl">accessTokenUrl (required).</param>
        /// <param name="profileUrl">profileUrl (required).</param>
        /// <param name="loginUrl">loginUrl (required).</param>
        public SocialClientListUrls(string authorizeUrl = default(string), string accessTokenUrl = default(string), string profileUrl = default(string), string loginUrl = default(string))
        {
            // to ensure "authorizeUrl" is required (not null)
            if (authorizeUrl == null)
            {
                throw new InvalidDataException("authorizeUrl is a required property for SocialClientListUrls and cannot be null");
            }
            else
            {
                this.AuthorizeUrl = authorizeUrl;
            }

            // to ensure "accessTokenUrl" is required (not null)
            if (accessTokenUrl == null)
            {
                throw new InvalidDataException("accessTokenUrl is a required property for SocialClientListUrls and cannot be null");
            }
            else
            {
                this.AccessTokenUrl = accessTokenUrl;
            }

            // to ensure "profileUrl" is required (not null)
            if (profileUrl == null)
            {
                throw new InvalidDataException("profileUrl is a required property for SocialClientListUrls and cannot be null");
            }
            else
            {
                this.ProfileUrl = profileUrl;
            }

            // to ensure "loginUrl" is required (not null)
            if (loginUrl == null)
            {
                throw new InvalidDataException("loginUrl is a required property for SocialClientListUrls and cannot be null");
            }
            else
            {
                this.LoginUrl = loginUrl;
            }

        }

        /// <summary>
        /// Gets or Sets AuthorizeUrl
        /// </summary>
        [DataMember(Name="authorize_url", EmitDefaultValue=true)]
        public string AuthorizeUrl { get; set; }

        /// <summary>
        /// Gets or Sets AccessTokenUrl
        /// </summary>
        [DataMember(Name="access_token_url", EmitDefaultValue=true)]
        public string AccessTokenUrl { get; set; }

        /// <summary>
        /// Gets or Sets ProfileUrl
        /// </summary>
        [DataMember(Name="profile_url", EmitDefaultValue=true)]
        public string ProfileUrl { get; set; }

        /// <summary>
        /// Gets or Sets LoginUrl
        /// </summary>
        [DataMember(Name="login_url", EmitDefaultValue=true)]
        public string LoginUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SocialClientListUrls {\n");
            sb.Append("  AuthorizeUrl: ").Append(AuthorizeUrl).Append("\n");
            sb.Append("  AccessTokenUrl: ").Append(AccessTokenUrl).Append("\n");
            sb.Append("  ProfileUrl: ").Append(ProfileUrl).Append("\n");
            sb.Append("  LoginUrl: ").Append(LoginUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SocialClientListUrls);
        }

        /// <summary>
        /// Returns true if SocialClientListUrls instances are equal
        /// </summary>
        /// <param name="input">Instance of SocialClientListUrls to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SocialClientListUrls input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthorizeUrl == input.AuthorizeUrl ||
                    (this.AuthorizeUrl != null &&
                    this.AuthorizeUrl.Equals(input.AuthorizeUrl))
                ) && 
                (
                    this.AccessTokenUrl == input.AccessTokenUrl ||
                    (this.AccessTokenUrl != null &&
                    this.AccessTokenUrl.Equals(input.AccessTokenUrl))
                ) && 
                (
                    this.ProfileUrl == input.ProfileUrl ||
                    (this.ProfileUrl != null &&
                    this.ProfileUrl.Equals(input.ProfileUrl))
                ) && 
                (
                    this.LoginUrl == input.LoginUrl ||
                    (this.LoginUrl != null &&
                    this.LoginUrl.Equals(input.LoginUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthorizeUrl != null)
                    hashCode = hashCode * 59 + this.AuthorizeUrl.GetHashCode();
                if (this.AccessTokenUrl != null)
                    hashCode = hashCode * 59 + this.AccessTokenUrl.GetHashCode();
                if (this.ProfileUrl != null)
                    hashCode = hashCode * 59 + this.ProfileUrl.GetHashCode();
                if (this.LoginUrl != null)
                    hashCode = hashCode * 59 + this.LoginUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // AuthorizeUrl (string) pattern
            Regex regexAuthorizeUrl = new Regex(@"^(?:[a-z0-9\\.\\-\\+]*):\/\/(?:[^\\s:@\/]+(?::[^\\s:@\/]*)?@)?(?:(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)(?:\\.(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)){3}|\\[[0-9a-f:\\.]+\\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-￿-]{2,63}|xn- -[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::\\d{2,5})?(?:[\/?#][^\\s]*)?\\z", RegexOptions.CultureInvariant);
            if (false == regexAuthorizeUrl.Match(this.AuthorizeUrl).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthorizeUrl, must match a pattern of " + regexAuthorizeUrl, new [] { "AuthorizeUrl" });
            }



            // AccessTokenUrl (string) pattern
            Regex regexAccessTokenUrl = new Regex(@"^(?:[a-z0-9\\.\\-\\+]*):\/\/(?:[^\\s:@\/]+(?::[^\\s:@\/]*)?@)?(?:(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)(?:\\.(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)){3}|\\[[0-9a-f:\\.]+\\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-￿-]{2,63}|xn- -[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::\\d{2,5})?(?:[\/?#][^\\s]*)?\\z", RegexOptions.CultureInvariant);
            if (false == regexAccessTokenUrl.Match(this.AccessTokenUrl).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccessTokenUrl, must match a pattern of " + regexAccessTokenUrl, new [] { "AccessTokenUrl" });
            }



            // ProfileUrl (string) pattern
            Regex regexProfileUrl = new Regex(@"^(?:[a-z0-9\\.\\-\\+]*):\/\/(?:[^\\s:@\/]+(?::[^\\s:@\/]*)?@)?(?:(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)(?:\\.(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)){3}|\\[[0-9a-f:\\.]+\\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-￿-]{2,63}|xn- -[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::\\d{2,5})?(?:[\/?#][^\\s]*)?\\z", RegexOptions.CultureInvariant);
            if (false == regexProfileUrl.Match(this.ProfileUrl).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProfileUrl, must match a pattern of " + regexProfileUrl, new [] { "ProfileUrl" });
            }



            // LoginUrl (string) pattern
            Regex regexLoginUrl = new Regex(@"^(?:[a-z0-9\\.\\-\\+]*):\/\/(?:[^\\s:@\/]+(?::[^\\s:@\/]*)?@)?(?:(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)(?:\\.(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)){3}|\\[[0-9a-f:\\.]+\\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-￿-]{2,63}|xn- -[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::\\d{2,5})?(?:[\/?#][^\\s]*)?\\z", RegexOptions.CultureInvariant);
            if (false == regexLoginUrl.Match(this.LoginUrl).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginUrl, must match a pattern of " + regexLoginUrl, new [] { "LoginUrl" });
            }

            yield break;
        }
    }

}
