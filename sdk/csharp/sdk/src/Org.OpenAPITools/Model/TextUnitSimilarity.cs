/* 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TextUnitSimilarity
    /// </summary>
    [DataContract]
    public partial class TextUnitSimilarity :  IEquatable<TextUnitSimilarity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextUnitSimilarity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextUnitSimilarity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextUnitSimilarity" /> class.
        /// </summary>
        /// <param name="similarity">similarity (required).</param>
        public TextUnitSimilarity(string similarity = default(string))
        {
            // to ensure "similarity" is required (not null)
            if (similarity == null)
            {
                throw new InvalidDataException("similarity is a required property for TextUnitSimilarity and cannot be null");
            }
            else
            {
                this.Similarity = similarity;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Pk
        /// </summary>
        [DataMember(Name="pk", EmitDefaultValue=false)]
        public int Pk { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitAPk
        /// </summary>
        [DataMember(Name="text_unit_a__pk", EmitDefaultValue=false)]
        public string TextUnitAPk { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitAUnitType
        /// </summary>
        [DataMember(Name="text_unit_a__unit_type", EmitDefaultValue=false)]
        public string TextUnitAUnitType { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitALanguage
        /// </summary>
        [DataMember(Name="text_unit_a__language", EmitDefaultValue=false)]
        public string TextUnitALanguage { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitATextunittextText
        /// </summary>
        [DataMember(Name="text_unit_a__textunittext__text", EmitDefaultValue=false)]
        public string TextUnitATextunittextText { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitADocumentPk
        /// </summary>
        [DataMember(Name="text_unit_a__document__pk", EmitDefaultValue=false)]
        public string TextUnitADocumentPk { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitADocumentName
        /// </summary>
        [DataMember(Name="text_unit_a__document__name", EmitDefaultValue=false)]
        public string TextUnitADocumentName { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitBPk
        /// </summary>
        [DataMember(Name="text_unit_b__pk", EmitDefaultValue=false)]
        public string TextUnitBPk { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitBUnitType
        /// </summary>
        [DataMember(Name="text_unit_b__unit_type", EmitDefaultValue=false)]
        public string TextUnitBUnitType { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitBLanguage
        /// </summary>
        [DataMember(Name="text_unit_b__language", EmitDefaultValue=false)]
        public string TextUnitBLanguage { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitBTextunittextText
        /// </summary>
        [DataMember(Name="text_unit_b__textunittext__text", EmitDefaultValue=false)]
        public string TextUnitBTextunittextText { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitBDocumentPk
        /// </summary>
        [DataMember(Name="text_unit_b__document__pk", EmitDefaultValue=false)]
        public string TextUnitBDocumentPk { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitBDocumentName
        /// </summary>
        [DataMember(Name="text_unit_b__document__name", EmitDefaultValue=false)]
        public string TextUnitBDocumentName { get; private set; }

        /// <summary>
        /// Gets or Sets Similarity
        /// </summary>
        [DataMember(Name="similarity", EmitDefaultValue=true)]
        public string Similarity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextUnitSimilarity {\n");
            sb.Append("  Pk: ").Append(Pk).Append("\n");
            sb.Append("  TextUnitAPk: ").Append(TextUnitAPk).Append("\n");
            sb.Append("  TextUnitAUnitType: ").Append(TextUnitAUnitType).Append("\n");
            sb.Append("  TextUnitALanguage: ").Append(TextUnitALanguage).Append("\n");
            sb.Append("  TextUnitATextunittextText: ").Append(TextUnitATextunittextText).Append("\n");
            sb.Append("  TextUnitADocumentPk: ").Append(TextUnitADocumentPk).Append("\n");
            sb.Append("  TextUnitADocumentName: ").Append(TextUnitADocumentName).Append("\n");
            sb.Append("  TextUnitBPk: ").Append(TextUnitBPk).Append("\n");
            sb.Append("  TextUnitBUnitType: ").Append(TextUnitBUnitType).Append("\n");
            sb.Append("  TextUnitBLanguage: ").Append(TextUnitBLanguage).Append("\n");
            sb.Append("  TextUnitBTextunittextText: ").Append(TextUnitBTextunittextText).Append("\n");
            sb.Append("  TextUnitBDocumentPk: ").Append(TextUnitBDocumentPk).Append("\n");
            sb.Append("  TextUnitBDocumentName: ").Append(TextUnitBDocumentName).Append("\n");
            sb.Append("  Similarity: ").Append(Similarity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextUnitSimilarity);
        }

        /// <summary>
        /// Returns true if TextUnitSimilarity instances are equal
        /// </summary>
        /// <param name="input">Instance of TextUnitSimilarity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextUnitSimilarity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pk == input.Pk ||
                    (this.Pk != null &&
                    this.Pk.Equals(input.Pk))
                ) && 
                (
                    this.TextUnitAPk == input.TextUnitAPk ||
                    (this.TextUnitAPk != null &&
                    this.TextUnitAPk.Equals(input.TextUnitAPk))
                ) && 
                (
                    this.TextUnitAUnitType == input.TextUnitAUnitType ||
                    (this.TextUnitAUnitType != null &&
                    this.TextUnitAUnitType.Equals(input.TextUnitAUnitType))
                ) && 
                (
                    this.TextUnitALanguage == input.TextUnitALanguage ||
                    (this.TextUnitALanguage != null &&
                    this.TextUnitALanguage.Equals(input.TextUnitALanguage))
                ) && 
                (
                    this.TextUnitATextunittextText == input.TextUnitATextunittextText ||
                    (this.TextUnitATextunittextText != null &&
                    this.TextUnitATextunittextText.Equals(input.TextUnitATextunittextText))
                ) && 
                (
                    this.TextUnitADocumentPk == input.TextUnitADocumentPk ||
                    (this.TextUnitADocumentPk != null &&
                    this.TextUnitADocumentPk.Equals(input.TextUnitADocumentPk))
                ) && 
                (
                    this.TextUnitADocumentName == input.TextUnitADocumentName ||
                    (this.TextUnitADocumentName != null &&
                    this.TextUnitADocumentName.Equals(input.TextUnitADocumentName))
                ) && 
                (
                    this.TextUnitBPk == input.TextUnitBPk ||
                    (this.TextUnitBPk != null &&
                    this.TextUnitBPk.Equals(input.TextUnitBPk))
                ) && 
                (
                    this.TextUnitBUnitType == input.TextUnitBUnitType ||
                    (this.TextUnitBUnitType != null &&
                    this.TextUnitBUnitType.Equals(input.TextUnitBUnitType))
                ) && 
                (
                    this.TextUnitBLanguage == input.TextUnitBLanguage ||
                    (this.TextUnitBLanguage != null &&
                    this.TextUnitBLanguage.Equals(input.TextUnitBLanguage))
                ) && 
                (
                    this.TextUnitBTextunittextText == input.TextUnitBTextunittextText ||
                    (this.TextUnitBTextunittextText != null &&
                    this.TextUnitBTextunittextText.Equals(input.TextUnitBTextunittextText))
                ) && 
                (
                    this.TextUnitBDocumentPk == input.TextUnitBDocumentPk ||
                    (this.TextUnitBDocumentPk != null &&
                    this.TextUnitBDocumentPk.Equals(input.TextUnitBDocumentPk))
                ) && 
                (
                    this.TextUnitBDocumentName == input.TextUnitBDocumentName ||
                    (this.TextUnitBDocumentName != null &&
                    this.TextUnitBDocumentName.Equals(input.TextUnitBDocumentName))
                ) && 
                (
                    this.Similarity == input.Similarity ||
                    (this.Similarity != null &&
                    this.Similarity.Equals(input.Similarity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pk != null)
                    hashCode = hashCode * 59 + this.Pk.GetHashCode();
                if (this.TextUnitAPk != null)
                    hashCode = hashCode * 59 + this.TextUnitAPk.GetHashCode();
                if (this.TextUnitAUnitType != null)
                    hashCode = hashCode * 59 + this.TextUnitAUnitType.GetHashCode();
                if (this.TextUnitALanguage != null)
                    hashCode = hashCode * 59 + this.TextUnitALanguage.GetHashCode();
                if (this.TextUnitATextunittextText != null)
                    hashCode = hashCode * 59 + this.TextUnitATextunittextText.GetHashCode();
                if (this.TextUnitADocumentPk != null)
                    hashCode = hashCode * 59 + this.TextUnitADocumentPk.GetHashCode();
                if (this.TextUnitADocumentName != null)
                    hashCode = hashCode * 59 + this.TextUnitADocumentName.GetHashCode();
                if (this.TextUnitBPk != null)
                    hashCode = hashCode * 59 + this.TextUnitBPk.GetHashCode();
                if (this.TextUnitBUnitType != null)
                    hashCode = hashCode * 59 + this.TextUnitBUnitType.GetHashCode();
                if (this.TextUnitBLanguage != null)
                    hashCode = hashCode * 59 + this.TextUnitBLanguage.GetHashCode();
                if (this.TextUnitBTextunittextText != null)
                    hashCode = hashCode * 59 + this.TextUnitBTextunittextText.GetHashCode();
                if (this.TextUnitBDocumentPk != null)
                    hashCode = hashCode * 59 + this.TextUnitBDocumentPk.GetHashCode();
                if (this.TextUnitBDocumentName != null)
                    hashCode = hashCode * 59 + this.TextUnitBDocumentName.GetHashCode();
                if (this.Similarity != null)
                    hashCode = hashCode * 59 + this.Similarity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
