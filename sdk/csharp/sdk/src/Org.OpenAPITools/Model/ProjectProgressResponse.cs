/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProjectProgressResponse
    /// </summary>
    [DataContract]
    public partial class ProjectProgressResponse :  IEquatable<ProjectProgressResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectProgressResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectProgressResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectProgressResponse" /> class.
        /// </summary>
        /// <param name="projectHasCompletedSessions">projectHasCompletedSessions (required).</param>
        /// <param name="userUncompletedSessionProgress">userUncompletedSessionProgress (required).</param>
        /// <param name="otherUncompletedSessionProgress">otherUncompletedSessionProgress (required).</param>
        /// <param name="clustering">clustering.</param>
        /// <param name="requireClustering">requireClustering.</param>
        public ProjectProgressResponse(bool projectHasCompletedSessions = default(bool), Object userUncompletedSessionProgress = default(Object), Object otherUncompletedSessionProgress = default(Object), string clustering = default(string), bool requireClustering = default(bool))
        {
            // to ensure "projectHasCompletedSessions" is required (not null)
            if (projectHasCompletedSessions == null)
            {
                throw new InvalidDataException("projectHasCompletedSessions is a required property for ProjectProgressResponse and cannot be null");
            }
            else
            {
                this.ProjectHasCompletedSessions = projectHasCompletedSessions;
            }

            // to ensure "userUncompletedSessionProgress" is required (not null)
            if (userUncompletedSessionProgress == null)
            {
                throw new InvalidDataException("userUncompletedSessionProgress is a required property for ProjectProgressResponse and cannot be null");
            }
            else
            {
                this.UserUncompletedSessionProgress = userUncompletedSessionProgress;
            }

            this.UserUncompletedSessionProgress = userUncompletedSessionProgress;
            // to ensure "otherUncompletedSessionProgress" is required (not null)
            if (otherUncompletedSessionProgress == null)
            {
                throw new InvalidDataException("otherUncompletedSessionProgress is a required property for ProjectProgressResponse and cannot be null");
            }
            else
            {
                this.OtherUncompletedSessionProgress = otherUncompletedSessionProgress;
            }

            this.OtherUncompletedSessionProgress = otherUncompletedSessionProgress;
            this.Clustering = clustering;
            this.RequireClustering = requireClustering;
        }

        /// <summary>
        /// Gets or Sets ProjectHasCompletedSessions
        /// </summary>
        [DataMember(Name="project_has_completed_sessions", EmitDefaultValue=true)]
        public bool ProjectHasCompletedSessions { get; set; }

        /// <summary>
        /// Gets or Sets UserUncompletedSessionProgress
        /// </summary>
        [DataMember(Name="user_uncompleted_session_progress", EmitDefaultValue=true)]
        public Object UserUncompletedSessionProgress { get; set; }

        /// <summary>
        /// Gets or Sets OtherUncompletedSessionProgress
        /// </summary>
        [DataMember(Name="other_uncompleted_session_progress", EmitDefaultValue=true)]
        public Object OtherUncompletedSessionProgress { get; set; }

        /// <summary>
        /// Gets or Sets Clustering
        /// </summary>
        [DataMember(Name="clustering", EmitDefaultValue=false)]
        public string Clustering { get; set; }

        /// <summary>
        /// Gets or Sets RequireClustering
        /// </summary>
        [DataMember(Name="require_clustering", EmitDefaultValue=false)]
        public bool RequireClustering { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectProgressResponse {\n");
            sb.Append("  ProjectHasCompletedSessions: ").Append(ProjectHasCompletedSessions).Append("\n");
            sb.Append("  UserUncompletedSessionProgress: ").Append(UserUncompletedSessionProgress).Append("\n");
            sb.Append("  OtherUncompletedSessionProgress: ").Append(OtherUncompletedSessionProgress).Append("\n");
            sb.Append("  Clustering: ").Append(Clustering).Append("\n");
            sb.Append("  RequireClustering: ").Append(RequireClustering).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectProgressResponse);
        }

        /// <summary>
        /// Returns true if ProjectProgressResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectProgressResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectProgressResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProjectHasCompletedSessions == input.ProjectHasCompletedSessions ||
                    (this.ProjectHasCompletedSessions != null &&
                    this.ProjectHasCompletedSessions.Equals(input.ProjectHasCompletedSessions))
                ) && 
                (
                    this.UserUncompletedSessionProgress == input.UserUncompletedSessionProgress ||
                    (this.UserUncompletedSessionProgress != null &&
                    this.UserUncompletedSessionProgress.Equals(input.UserUncompletedSessionProgress))
                ) && 
                (
                    this.OtherUncompletedSessionProgress == input.OtherUncompletedSessionProgress ||
                    (this.OtherUncompletedSessionProgress != null &&
                    this.OtherUncompletedSessionProgress.Equals(input.OtherUncompletedSessionProgress))
                ) && 
                (
                    this.Clustering == input.Clustering ||
                    (this.Clustering != null &&
                    this.Clustering.Equals(input.Clustering))
                ) && 
                (
                    this.RequireClustering == input.RequireClustering ||
                    (this.RequireClustering != null &&
                    this.RequireClustering.Equals(input.RequireClustering))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProjectHasCompletedSessions != null)
                    hashCode = hashCode * 59 + this.ProjectHasCompletedSessions.GetHashCode();
                if (this.UserUncompletedSessionProgress != null)
                    hashCode = hashCode * 59 + this.UserUncompletedSessionProgress.GetHashCode();
                if (this.OtherUncompletedSessionProgress != null)
                    hashCode = hashCode * 59 + this.OtherUncompletedSessionProgress.GetHashCode();
                if (this.Clustering != null)
                    hashCode = hashCode * 59 + this.Clustering.GetHashCode();
                if (this.RequireClustering != null)
                    hashCode = hashCode * 59 + this.RequireClustering.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
