/* 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TextUnitClassifierSuggestion
    /// </summary>
    [DataContract]
    public partial class TextUnitClassifierSuggestion :  IEquatable<TextUnitClassifierSuggestion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextUnitClassifierSuggestion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextUnitClassifierSuggestion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextUnitClassifierSuggestion" /> class.
        /// </summary>
        /// <param name="className">className (required).</param>
        /// <param name="classValue">classValue (required).</param>
        /// <param name="classifierRun">classifierRun.</param>
        /// <param name="classifierConfidence">classifierConfidence.</param>
        public TextUnitClassifierSuggestion(string className = default(string), string classValue = default(string), DateTime classifierRun = default(DateTime), decimal classifierConfidence = default(decimal))
        {
            // to ensure "className" is required (not null)
            if (className == null)
            {
                throw new InvalidDataException("className is a required property for TextUnitClassifierSuggestion and cannot be null");
            }
            else
            {
                this.ClassName = className;
            }
            
            // to ensure "classValue" is required (not null)
            if (classValue == null)
            {
                throw new InvalidDataException("classValue is a required property for TextUnitClassifierSuggestion and cannot be null");
            }
            else
            {
                this.ClassValue = classValue;
            }
            
            this.ClassifierRun = classifierRun;
            this.ClassifierConfidence = classifierConfidence;
        }
        
        /// <summary>
        /// Gets or Sets Pk
        /// </summary>
        [DataMember(Name="pk", EmitDefaultValue=false)]
        public int Pk { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitDocumentPk
        /// </summary>
        [DataMember(Name="text_unit__document__pk", EmitDefaultValue=false)]
        public string TextUnitDocumentPk { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitDocumentName
        /// </summary>
        [DataMember(Name="text_unit__document__name", EmitDefaultValue=false)]
        public string TextUnitDocumentName { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitDocumentDocumentType
        /// </summary>
        [DataMember(Name="text_unit__document__document_type", EmitDefaultValue=false)]
        public string TextUnitDocumentDocumentType { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitDocumentDescription
        /// </summary>
        [DataMember(Name="text_unit__document__description", EmitDefaultValue=false)]
        public string TextUnitDocumentDescription { get; private set; }

        /// <summary>
        /// Gets or Sets TextUnitPk
        /// </summary>
        [DataMember(Name="text_unit__pk", EmitDefaultValue=false)]
        public string TextUnitPk { get; private set; }

        /// <summary>
        /// Gets or Sets ClassName
        /// </summary>
        [DataMember(Name="class_name", EmitDefaultValue=true)]
        public string ClassName { get; set; }

        /// <summary>
        /// Gets or Sets ClassValue
        /// </summary>
        [DataMember(Name="class_value", EmitDefaultValue=true)]
        public string ClassValue { get; set; }

        /// <summary>
        /// Gets or Sets ClassifierRun
        /// </summary>
        [DataMember(Name="classifier_run", EmitDefaultValue=false)]
        public DateTime ClassifierRun { get; set; }

        /// <summary>
        /// Gets or Sets ClassifierConfidence
        /// </summary>
        [DataMember(Name="classifier_confidence", EmitDefaultValue=false)]
        public decimal ClassifierConfidence { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextUnitClassifierSuggestion {\n");
            sb.Append("  Pk: ").Append(Pk).Append("\n");
            sb.Append("  TextUnitDocumentPk: ").Append(TextUnitDocumentPk).Append("\n");
            sb.Append("  TextUnitDocumentName: ").Append(TextUnitDocumentName).Append("\n");
            sb.Append("  TextUnitDocumentDocumentType: ").Append(TextUnitDocumentDocumentType).Append("\n");
            sb.Append("  TextUnitDocumentDescription: ").Append(TextUnitDocumentDescription).Append("\n");
            sb.Append("  TextUnitPk: ").Append(TextUnitPk).Append("\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  ClassValue: ").Append(ClassValue).Append("\n");
            sb.Append("  ClassifierRun: ").Append(ClassifierRun).Append("\n");
            sb.Append("  ClassifierConfidence: ").Append(ClassifierConfidence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextUnitClassifierSuggestion);
        }

        /// <summary>
        /// Returns true if TextUnitClassifierSuggestion instances are equal
        /// </summary>
        /// <param name="input">Instance of TextUnitClassifierSuggestion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextUnitClassifierSuggestion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pk == input.Pk ||
                    (this.Pk != null &&
                    this.Pk.Equals(input.Pk))
                ) && 
                (
                    this.TextUnitDocumentPk == input.TextUnitDocumentPk ||
                    (this.TextUnitDocumentPk != null &&
                    this.TextUnitDocumentPk.Equals(input.TextUnitDocumentPk))
                ) && 
                (
                    this.TextUnitDocumentName == input.TextUnitDocumentName ||
                    (this.TextUnitDocumentName != null &&
                    this.TextUnitDocumentName.Equals(input.TextUnitDocumentName))
                ) && 
                (
                    this.TextUnitDocumentDocumentType == input.TextUnitDocumentDocumentType ||
                    (this.TextUnitDocumentDocumentType != null &&
                    this.TextUnitDocumentDocumentType.Equals(input.TextUnitDocumentDocumentType))
                ) && 
                (
                    this.TextUnitDocumentDescription == input.TextUnitDocumentDescription ||
                    (this.TextUnitDocumentDescription != null &&
                    this.TextUnitDocumentDescription.Equals(input.TextUnitDocumentDescription))
                ) && 
                (
                    this.TextUnitPk == input.TextUnitPk ||
                    (this.TextUnitPk != null &&
                    this.TextUnitPk.Equals(input.TextUnitPk))
                ) && 
                (
                    this.ClassName == input.ClassName ||
                    (this.ClassName != null &&
                    this.ClassName.Equals(input.ClassName))
                ) && 
                (
                    this.ClassValue == input.ClassValue ||
                    (this.ClassValue != null &&
                    this.ClassValue.Equals(input.ClassValue))
                ) && 
                (
                    this.ClassifierRun == input.ClassifierRun ||
                    (this.ClassifierRun != null &&
                    this.ClassifierRun.Equals(input.ClassifierRun))
                ) && 
                (
                    this.ClassifierConfidence == input.ClassifierConfidence ||
                    (this.ClassifierConfidence != null &&
                    this.ClassifierConfidence.Equals(input.ClassifierConfidence))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pk != null)
                    hashCode = hashCode * 59 + this.Pk.GetHashCode();
                if (this.TextUnitDocumentPk != null)
                    hashCode = hashCode * 59 + this.TextUnitDocumentPk.GetHashCode();
                if (this.TextUnitDocumentName != null)
                    hashCode = hashCode * 59 + this.TextUnitDocumentName.GetHashCode();
                if (this.TextUnitDocumentDocumentType != null)
                    hashCode = hashCode * 59 + this.TextUnitDocumentDocumentType.GetHashCode();
                if (this.TextUnitDocumentDescription != null)
                    hashCode = hashCode * 59 + this.TextUnitDocumentDescription.GetHashCode();
                if (this.TextUnitPk != null)
                    hashCode = hashCode * 59 + this.TextUnitPk.GetHashCode();
                if (this.ClassName != null)
                    hashCode = hashCode * 59 + this.ClassName.GetHashCode();
                if (this.ClassValue != null)
                    hashCode = hashCode * 59 + this.ClassValue.GetHashCode();
                if (this.ClassifierRun != null)
                    hashCode = hashCode * 59 + this.ClassifierRun.GetHashCode();
                if (this.ClassifierConfidence != null)
                    hashCode = hashCode * 59 + this.ClassifierConfidence.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClassName (string) maxLength
            if(this.ClassName != null && this.ClassName.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassName, length must be less than 1024.", new [] { "ClassName" });
            }

            
            // ClassValue (string) maxLength
            if(this.ClassValue != null && this.ClassValue.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassValue, length must be less than 1024.", new [] { "ClassValue" });
            }

            
            yield break;
        }
    }

}
