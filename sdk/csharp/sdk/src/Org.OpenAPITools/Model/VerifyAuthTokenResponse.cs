/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VerifyAuthTokenResponse
    /// </summary>
    [DataContract]
    public partial class VerifyAuthTokenResponse :  IEquatable<VerifyAuthTokenResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyAuthTokenResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VerifyAuthTokenResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyAuthTokenResponse" /> class.
        /// </summary>
        /// <param name="key">key (required).</param>
        /// <param name="userName">userName (required).</param>
        /// <param name="releaseVersion">releaseVersion (required).</param>
        /// <param name="user">user (required).</param>
        public VerifyAuthTokenResponse(string key = default(string), string userName = default(string), string releaseVersion = default(string), ProjectDetailOwnersData user = default(ProjectDetailOwnersData))
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new InvalidDataException("key is a required property for VerifyAuthTokenResponse and cannot be null");
            }
            else
            {
                this.Key = key;
            }

            // to ensure "userName" is required (not null)
            if (userName == null)
            {
                throw new InvalidDataException("userName is a required property for VerifyAuthTokenResponse and cannot be null");
            }
            else
            {
                this.UserName = userName;
            }

            // to ensure "releaseVersion" is required (not null)
            if (releaseVersion == null)
            {
                throw new InvalidDataException("releaseVersion is a required property for VerifyAuthTokenResponse and cannot be null");
            }
            else
            {
                this.ReleaseVersion = releaseVersion;
            }

            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for VerifyAuthTokenResponse and cannot be null");
            }
            else
            {
                this.User = user;
            }

        }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=true)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="user_name", EmitDefaultValue=true)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseVersion
        /// </summary>
        [DataMember(Name="release_version", EmitDefaultValue=true)]
        public string ReleaseVersion { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=true)]
        public ProjectDetailOwnersData User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerifyAuthTokenResponse {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  ReleaseVersion: ").Append(ReleaseVersion).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyAuthTokenResponse);
        }

        /// <summary>
        /// Returns true if VerifyAuthTokenResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyAuthTokenResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyAuthTokenResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.ReleaseVersion == input.ReleaseVersion ||
                    (this.ReleaseVersion != null &&
                    this.ReleaseVersion.Equals(input.ReleaseVersion))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.ReleaseVersion != null)
                    hashCode = hashCode * 59 + this.ReleaseVersion.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
