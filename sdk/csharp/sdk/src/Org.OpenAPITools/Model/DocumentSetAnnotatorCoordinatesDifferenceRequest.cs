/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentSetAnnotatorCoordinatesDifferenceRequest
    /// </summary>
    [DataContract]
    public partial class DocumentSetAnnotatorCoordinatesDifferenceRequest :  IEquatable<DocumentSetAnnotatorCoordinatesDifferenceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSetAnnotatorCoordinatesDifferenceRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentSetAnnotatorCoordinatesDifferenceRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSetAnnotatorCoordinatesDifferenceRequest" /> class.
        /// </summary>
        /// <param name="documentId">documentId (required).</param>
        /// <param name="firstLetters">firstLetters (required).</param>
        public DocumentSetAnnotatorCoordinatesDifferenceRequest(int documentId = default(int), List<DocumentSetAnnotatorCoordinatesDifferenceRequestFirstLettersInner> firstLetters = default(List<DocumentSetAnnotatorCoordinatesDifferenceRequestFirstLettersInner>))
        {
            // to ensure "documentId" is required (not null)
            if (documentId == null)
            {
                throw new InvalidDataException("documentId is a required property for DocumentSetAnnotatorCoordinatesDifferenceRequest and cannot be null");
            }
            else
            {
                this.DocumentId = documentId;
            }

            // to ensure "firstLetters" is required (not null)
            if (firstLetters == null)
            {
                throw new InvalidDataException("firstLetters is a required property for DocumentSetAnnotatorCoordinatesDifferenceRequest and cannot be null");
            }
            else
            {
                this.FirstLetters = firstLetters;
            }

        }

        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name="document_id", EmitDefaultValue=true)]
        public int DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets FirstLetters
        /// </summary>
        [DataMember(Name="first_letters", EmitDefaultValue=true)]
        public List<DocumentSetAnnotatorCoordinatesDifferenceRequestFirstLettersInner> FirstLetters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentSetAnnotatorCoordinatesDifferenceRequest {\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  FirstLetters: ").Append(FirstLetters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentSetAnnotatorCoordinatesDifferenceRequest);
        }

        /// <summary>
        /// Returns true if DocumentSetAnnotatorCoordinatesDifferenceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentSetAnnotatorCoordinatesDifferenceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentSetAnnotatorCoordinatesDifferenceRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.FirstLetters == input.FirstLetters ||
                    this.FirstLetters != null &&
                    input.FirstLetters != null &&
                    this.FirstLetters.SequenceEqual(input.FirstLetters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.FirstLetters != null)
                    hashCode = hashCode * 59 + this.FirstLetters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
