/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SocialClientList
    /// </summary>
    [DataContract]
    public partial class SocialClientList :  IEquatable<SocialClientList>, IValidatableObject
    {
        /// <summary>
        /// Defines Provider
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProviderEnum
        {
            /// <summary>
            /// Enum Elevate for value: elevate
            /// </summary>
            [EnumMember(Value = "elevate")]
            Elevate = 1,

            /// <summary>
            /// Enum Office365 for value: office365
            /// </summary>
            [EnumMember(Value = "office365")]
            Office365 = 2,

            /// <summary>
            /// Enum Google for value: google
            /// </summary>
            [EnumMember(Value = "google")]
            Google = 3,

            /// <summary>
            /// Enum Okta for value: okta
            /// </summary>
            [EnumMember(Value = "okta")]
            Okta = 4

        }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="provider", EmitDefaultValue=true)]
        public ProviderEnum Provider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SocialClientList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SocialClientList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SocialClientList" /> class.
        /// </summary>
        /// <param name="provider">provider (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="clientId">App ID, or consumer key (required).</param>
        /// <param name="urls">urls.</param>
        public SocialClientList(ProviderEnum provider = default(ProviderEnum), string name = default(string), string clientId = default(string), SocialClientListUrls urls = default(SocialClientListUrls))
        {
            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new InvalidDataException("provider is a required property for SocialClientList and cannot be null");
            }
            else
            {
                this.Provider = provider;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for SocialClientList and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new InvalidDataException("clientId is a required property for SocialClientList and cannot be null");
            }
            else
            {
                this.ClientId = clientId;
            }

            this.Urls = urls;
        }


        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// App ID, or consumer key
        /// </summary>
        /// <value>App ID, or consumer key</value>
        [DataMember(Name="client_id", EmitDefaultValue=true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name="urls", EmitDefaultValue=false)]
        public SocialClientListUrls Urls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SocialClientList {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SocialClientList);
        }

        /// <summary>
        /// Returns true if SocialClientList instances are equal
        /// </summary>
        /// <param name="input">Instance of SocialClientList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SocialClientList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Urls == input.Urls ||
                    (this.Urls != null &&
                    this.Urls.Equals(input.Urls))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.Urls != null)
                    hashCode = hashCode * 59 + this.Urls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 40.", new [] { "Name" });
            }


            // ClientId (string) maxLength
            if(this.ClientId != null && this.ClientId.Length > 191)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClientId, length must be less than 191.", new [] { "ClientId" });
            }


            yield break;
        }
    }

}
