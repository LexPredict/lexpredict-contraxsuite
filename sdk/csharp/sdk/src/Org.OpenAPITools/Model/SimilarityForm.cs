/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SimilarityForm
    /// </summary>
    [DataContract]
    public partial class SimilarityForm :  IEquatable<SimilarityForm>, IValidatableObject
    {
        /// <summary>
        /// Defines Project
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProjectEnum
        {
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 1,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,

            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 3

        }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="project", EmitDefaultValue=true)]
        public ProjectEnum Project { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimilarityForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SimilarityForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimilarityForm" /> class.
        /// </summary>
        /// <param name="runName">runName (required).</param>
        /// <param name="searchSimilarDocuments">searchSimilarDocuments (required).</param>
        /// <param name="searchSimilarTextUnits">searchSimilarTextUnits (required).</param>
        /// <param name="similarityThreshold">similarityThreshold (default to 75).</param>
        /// <param name="project">project (required).</param>
        /// <param name="useIdf">useIdf (required).</param>
        /// <param name="delete">delete (required).</param>
        public SimilarityForm(string runName = default(string), bool searchSimilarDocuments = default(bool), bool searchSimilarTextUnits = default(bool), int? similarityThreshold = 75, ProjectEnum project = default(ProjectEnum), bool useIdf = default(bool), bool delete = default(bool))
        {
            // to ensure "runName" is required (not null)
            if (runName == null)
            {
                throw new InvalidDataException("runName is a required property for SimilarityForm and cannot be null");
            }
            else
            {
                this.RunName = runName;
            }

            // to ensure "searchSimilarDocuments" is required (not null)
            if (searchSimilarDocuments == null)
            {
                throw new InvalidDataException("searchSimilarDocuments is a required property for SimilarityForm and cannot be null");
            }
            else
            {
                this.SearchSimilarDocuments = searchSimilarDocuments;
            }

            // to ensure "searchSimilarTextUnits" is required (not null)
            if (searchSimilarTextUnits == null)
            {
                throw new InvalidDataException("searchSimilarTextUnits is a required property for SimilarityForm and cannot be null");
            }
            else
            {
                this.SearchSimilarTextUnits = searchSimilarTextUnits;
            }

            this.SimilarityThreshold = similarityThreshold;
            // to ensure "project" is required (not null)
            if (project == null)
            {
                throw new InvalidDataException("project is a required property for SimilarityForm and cannot be null");
            }
            else
            {
                this.Project = project;
            }

            // to ensure "useIdf" is required (not null)
            if (useIdf == null)
            {
                throw new InvalidDataException("useIdf is a required property for SimilarityForm and cannot be null");
            }
            else
            {
                this.UseIdf = useIdf;
            }

            // to ensure "delete" is required (not null)
            if (delete == null)
            {
                throw new InvalidDataException("delete is a required property for SimilarityForm and cannot be null");
            }
            else
            {
                this.Delete = delete;
            }

            // use default value if no "similarityThreshold" provided
            if (similarityThreshold == null)
            {
                this.SimilarityThreshold = 75;
            }
            else
            {
                this.SimilarityThreshold = similarityThreshold;
            }
        }

        /// <summary>
        /// Gets or Sets RunName
        /// </summary>
        [DataMember(Name="run_name", EmitDefaultValue=true)]
        public string RunName { get; set; }

        /// <summary>
        /// Gets or Sets SearchSimilarDocuments
        /// </summary>
        [DataMember(Name="search_similar_documents", EmitDefaultValue=true)]
        public bool SearchSimilarDocuments { get; set; }

        /// <summary>
        /// Gets or Sets SearchSimilarTextUnits
        /// </summary>
        [DataMember(Name="search_similar_text_units", EmitDefaultValue=true)]
        public bool SearchSimilarTextUnits { get; set; }

        /// <summary>
        /// Gets or Sets SimilarityThreshold
        /// </summary>
        [DataMember(Name="similarity_threshold", EmitDefaultValue=true)]
        public int? SimilarityThreshold { get; set; }


        /// <summary>
        /// Gets or Sets UseIdf
        /// </summary>
        [DataMember(Name="use_idf", EmitDefaultValue=true)]
        public bool UseIdf { get; set; }

        /// <summary>
        /// Gets or Sets Delete
        /// </summary>
        [DataMember(Name="delete", EmitDefaultValue=true)]
        public bool Delete { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimilarityForm {\n");
            sb.Append("  RunName: ").Append(RunName).Append("\n");
            sb.Append("  SearchSimilarDocuments: ").Append(SearchSimilarDocuments).Append("\n");
            sb.Append("  SearchSimilarTextUnits: ").Append(SearchSimilarTextUnits).Append("\n");
            sb.Append("  SimilarityThreshold: ").Append(SimilarityThreshold).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  UseIdf: ").Append(UseIdf).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimilarityForm);
        }

        /// <summary>
        /// Returns true if SimilarityForm instances are equal
        /// </summary>
        /// <param name="input">Instance of SimilarityForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimilarityForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RunName == input.RunName ||
                    (this.RunName != null &&
                    this.RunName.Equals(input.RunName))
                ) && 
                (
                    this.SearchSimilarDocuments == input.SearchSimilarDocuments ||
                    (this.SearchSimilarDocuments != null &&
                    this.SearchSimilarDocuments.Equals(input.SearchSimilarDocuments))
                ) && 
                (
                    this.SearchSimilarTextUnits == input.SearchSimilarTextUnits ||
                    (this.SearchSimilarTextUnits != null &&
                    this.SearchSimilarTextUnits.Equals(input.SearchSimilarTextUnits))
                ) && 
                (
                    this.SimilarityThreshold == input.SimilarityThreshold ||
                    (this.SimilarityThreshold != null &&
                    this.SimilarityThreshold.Equals(input.SimilarityThreshold))
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.UseIdf == input.UseIdf ||
                    (this.UseIdf != null &&
                    this.UseIdf.Equals(input.UseIdf))
                ) && 
                (
                    this.Delete == input.Delete ||
                    (this.Delete != null &&
                    this.Delete.Equals(input.Delete))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RunName != null)
                    hashCode = hashCode * 59 + this.RunName.GetHashCode();
                if (this.SearchSimilarDocuments != null)
                    hashCode = hashCode * 59 + this.SearchSimilarDocuments.GetHashCode();
                if (this.SearchSimilarTextUnits != null)
                    hashCode = hashCode * 59 + this.SearchSimilarTextUnits.GetHashCode();
                if (this.SimilarityThreshold != null)
                    hashCode = hashCode * 59 + this.SimilarityThreshold.GetHashCode();
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.UseIdf != null)
                    hashCode = hashCode * 59 + this.UseIdf.GetHashCode();
                if (this.Delete != null)
                    hashCode = hashCode * 59 + this.Delete.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
