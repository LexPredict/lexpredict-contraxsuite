/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.188
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SimilarityForm
    /// </summary>
    [DataContract]
    public partial class SimilarityForm :  IEquatable<SimilarityForm>, IValidatableObject
    {
        /// <summary>
        /// Defines Project
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProjectEnum
        {
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 1,

            /// <summary>
            /// Enum _1204 for value: 1204
            /// </summary>
            [EnumMember(Value = "1204")]
            _1204 = 2,

            /// <summary>
            /// Enum _1203 for value: 1203
            /// </summary>
            [EnumMember(Value = "1203")]
            _1203 = 3,

            /// <summary>
            /// Enum _1198 for value: 1198
            /// </summary>
            [EnumMember(Value = "1198")]
            _1198 = 4,

            /// <summary>
            /// Enum _1191 for value: 1191
            /// </summary>
            [EnumMember(Value = "1191")]
            _1191 = 5,

            /// <summary>
            /// Enum _1189 for value: 1189
            /// </summary>
            [EnumMember(Value = "1189")]
            _1189 = 6,

            /// <summary>
            /// Enum _1188 for value: 1188
            /// </summary>
            [EnumMember(Value = "1188")]
            _1188 = 7,

            /// <summary>
            /// Enum _1187 for value: 1187
            /// </summary>
            [EnumMember(Value = "1187")]
            _1187 = 8,

            /// <summary>
            /// Enum _1186 for value: 1186
            /// </summary>
            [EnumMember(Value = "1186")]
            _1186 = 9,

            /// <summary>
            /// Enum _1185 for value: 1185
            /// </summary>
            [EnumMember(Value = "1185")]
            _1185 = 10,

            /// <summary>
            /// Enum _1184 for value: 1184
            /// </summary>
            [EnumMember(Value = "1184")]
            _1184 = 11,

            /// <summary>
            /// Enum _1183 for value: 1183
            /// </summary>
            [EnumMember(Value = "1183")]
            _1183 = 12,

            /// <summary>
            /// Enum _1179 for value: 1179
            /// </summary>
            [EnumMember(Value = "1179")]
            _1179 = 13,

            /// <summary>
            /// Enum _1178 for value: 1178
            /// </summary>
            [EnumMember(Value = "1178")]
            _1178 = 14,

            /// <summary>
            /// Enum _1177 for value: 1177
            /// </summary>
            [EnumMember(Value = "1177")]
            _1177 = 15,

            /// <summary>
            /// Enum _1176 for value: 1176
            /// </summary>
            [EnumMember(Value = "1176")]
            _1176 = 16,

            /// <summary>
            /// Enum _1174 for value: 1174
            /// </summary>
            [EnumMember(Value = "1174")]
            _1174 = 17,

            /// <summary>
            /// Enum _1173 for value: 1173
            /// </summary>
            [EnumMember(Value = "1173")]
            _1173 = 18,

            /// <summary>
            /// Enum _1172 for value: 1172
            /// </summary>
            [EnumMember(Value = "1172")]
            _1172 = 19,

            /// <summary>
            /// Enum _1170 for value: 1170
            /// </summary>
            [EnumMember(Value = "1170")]
            _1170 = 20,

            /// <summary>
            /// Enum _1169 for value: 1169
            /// </summary>
            [EnumMember(Value = "1169")]
            _1169 = 21,

            /// <summary>
            /// Enum _1168 for value: 1168
            /// </summary>
            [EnumMember(Value = "1168")]
            _1168 = 22,

            /// <summary>
            /// Enum _1167 for value: 1167
            /// </summary>
            [EnumMember(Value = "1167")]
            _1167 = 23,

            /// <summary>
            /// Enum _1165 for value: 1165
            /// </summary>
            [EnumMember(Value = "1165")]
            _1165 = 24,

            /// <summary>
            /// Enum _1164 for value: 1164
            /// </summary>
            [EnumMember(Value = "1164")]
            _1164 = 25,

            /// <summary>
            /// Enum _1163 for value: 1163
            /// </summary>
            [EnumMember(Value = "1163")]
            _1163 = 26,

            /// <summary>
            /// Enum _1159 for value: 1159
            /// </summary>
            [EnumMember(Value = "1159")]
            _1159 = 27,

            /// <summary>
            /// Enum _1157 for value: 1157
            /// </summary>
            [EnumMember(Value = "1157")]
            _1157 = 28,

            /// <summary>
            /// Enum _1156 for value: 1156
            /// </summary>
            [EnumMember(Value = "1156")]
            _1156 = 29,

            /// <summary>
            /// Enum _1153 for value: 1153
            /// </summary>
            [EnumMember(Value = "1153")]
            _1153 = 30,

            /// <summary>
            /// Enum _1149 for value: 1149
            /// </summary>
            [EnumMember(Value = "1149")]
            _1149 = 31,

            /// <summary>
            /// Enum _1145 for value: 1145
            /// </summary>
            [EnumMember(Value = "1145")]
            _1145 = 32,

            /// <summary>
            /// Enum _1141 for value: 1141
            /// </summary>
            [EnumMember(Value = "1141")]
            _1141 = 33,

            /// <summary>
            /// Enum _1133 for value: 1133
            /// </summary>
            [EnumMember(Value = "1133")]
            _1133 = 34,

            /// <summary>
            /// Enum _1129 for value: 1129
            /// </summary>
            [EnumMember(Value = "1129")]
            _1129 = 35,

            /// <summary>
            /// Enum _1126 for value: 1126
            /// </summary>
            [EnumMember(Value = "1126")]
            _1126 = 36,

            /// <summary>
            /// Enum _1125 for value: 1125
            /// </summary>
            [EnumMember(Value = "1125")]
            _1125 = 37,

            /// <summary>
            /// Enum _1124 for value: 1124
            /// </summary>
            [EnumMember(Value = "1124")]
            _1124 = 38,

            /// <summary>
            /// Enum _1123 for value: 1123
            /// </summary>
            [EnumMember(Value = "1123")]
            _1123 = 39,

            /// <summary>
            /// Enum _1120 for value: 1120
            /// </summary>
            [EnumMember(Value = "1120")]
            _1120 = 40,

            /// <summary>
            /// Enum _1118 for value: 1118
            /// </summary>
            [EnumMember(Value = "1118")]
            _1118 = 41,

            /// <summary>
            /// Enum _1116 for value: 1116
            /// </summary>
            [EnumMember(Value = "1116")]
            _1116 = 42,

            /// <summary>
            /// Enum _1115 for value: 1115
            /// </summary>
            [EnumMember(Value = "1115")]
            _1115 = 43,

            /// <summary>
            /// Enum _1113 for value: 1113
            /// </summary>
            [EnumMember(Value = "1113")]
            _1113 = 44,

            /// <summary>
            /// Enum _1112 for value: 1112
            /// </summary>
            [EnumMember(Value = "1112")]
            _1112 = 45,

            /// <summary>
            /// Enum _1110 for value: 1110
            /// </summary>
            [EnumMember(Value = "1110")]
            _1110 = 46,

            /// <summary>
            /// Enum _1101 for value: 1101
            /// </summary>
            [EnumMember(Value = "1101")]
            _1101 = 47,

            /// <summary>
            /// Enum _1097 for value: 1097
            /// </summary>
            [EnumMember(Value = "1097")]
            _1097 = 48,

            /// <summary>
            /// Enum _1085 for value: 1085
            /// </summary>
            [EnumMember(Value = "1085")]
            _1085 = 49,

            /// <summary>
            /// Enum _1083 for value: 1083
            /// </summary>
            [EnumMember(Value = "1083")]
            _1083 = 50,

            /// <summary>
            /// Enum _1080 for value: 1080
            /// </summary>
            [EnumMember(Value = "1080")]
            _1080 = 51,

            /// <summary>
            /// Enum _1079 for value: 1079
            /// </summary>
            [EnumMember(Value = "1079")]
            _1079 = 52,

            /// <summary>
            /// Enum _1067 for value: 1067
            /// </summary>
            [EnumMember(Value = "1067")]
            _1067 = 53,

            /// <summary>
            /// Enum _1065 for value: 1065
            /// </summary>
            [EnumMember(Value = "1065")]
            _1065 = 54,

            /// <summary>
            /// Enum _1062 for value: 1062
            /// </summary>
            [EnumMember(Value = "1062")]
            _1062 = 55,

            /// <summary>
            /// Enum _1061 for value: 1061
            /// </summary>
            [EnumMember(Value = "1061")]
            _1061 = 56,

            /// <summary>
            /// Enum _1059 for value: 1059
            /// </summary>
            [EnumMember(Value = "1059")]
            _1059 = 57,

            /// <summary>
            /// Enum _1057 for value: 1057
            /// </summary>
            [EnumMember(Value = "1057")]
            _1057 = 58,

            /// <summary>
            /// Enum _1052 for value: 1052
            /// </summary>
            [EnumMember(Value = "1052")]
            _1052 = 59,

            /// <summary>
            /// Enum _1050 for value: 1050
            /// </summary>
            [EnumMember(Value = "1050")]
            _1050 = 60,

            /// <summary>
            /// Enum _1047 for value: 1047
            /// </summary>
            [EnumMember(Value = "1047")]
            _1047 = 61,

            /// <summary>
            /// Enum _1036 for value: 1036
            /// </summary>
            [EnumMember(Value = "1036")]
            _1036 = 62,

            /// <summary>
            /// Enum _1025 for value: 1025
            /// </summary>
            [EnumMember(Value = "1025")]
            _1025 = 63,

            /// <summary>
            /// Enum _996 for value: 996
            /// </summary>
            [EnumMember(Value = "996")]
            _996 = 64,

            /// <summary>
            /// Enum _992 for value: 992
            /// </summary>
            [EnumMember(Value = "992")]
            _992 = 65,

            /// <summary>
            /// Enum _987 for value: 987
            /// </summary>
            [EnumMember(Value = "987")]
            _987 = 66,

            /// <summary>
            /// Enum _978 for value: 978
            /// </summary>
            [EnumMember(Value = "978")]
            _978 = 67,

            /// <summary>
            /// Enum _930 for value: 930
            /// </summary>
            [EnumMember(Value = "930")]
            _930 = 68,

            /// <summary>
            /// Enum _923 for value: 923
            /// </summary>
            [EnumMember(Value = "923")]
            _923 = 69,

            /// <summary>
            /// Enum _919 for value: 919
            /// </summary>
            [EnumMember(Value = "919")]
            _919 = 70,

            /// <summary>
            /// Enum _915 for value: 915
            /// </summary>
            [EnumMember(Value = "915")]
            _915 = 71,

            /// <summary>
            /// Enum _890 for value: 890
            /// </summary>
            [EnumMember(Value = "890")]
            _890 = 72,

            /// <summary>
            /// Enum _889 for value: 889
            /// </summary>
            [EnumMember(Value = "889")]
            _889 = 73,

            /// <summary>
            /// Enum _883 for value: 883
            /// </summary>
            [EnumMember(Value = "883")]
            _883 = 74,

            /// <summary>
            /// Enum _773 for value: 773
            /// </summary>
            [EnumMember(Value = "773")]
            _773 = 75,

            /// <summary>
            /// Enum _673 for value: 673
            /// </summary>
            [EnumMember(Value = "673")]
            _673 = 76,

            /// <summary>
            /// Enum _600 for value: 600
            /// </summary>
            [EnumMember(Value = "600")]
            _600 = 77,

            /// <summary>
            /// Enum _493 for value: 493
            /// </summary>
            [EnumMember(Value = "493")]
            _493 = 78,

            /// <summary>
            /// Enum _401 for value: 401
            /// </summary>
            [EnumMember(Value = "401")]
            _401 = 79,

            /// <summary>
            /// Enum _397 for value: 397
            /// </summary>
            [EnumMember(Value = "397")]
            _397 = 80,

            /// <summary>
            /// Enum _291 for value: 291
            /// </summary>
            [EnumMember(Value = "291")]
            _291 = 81,

            /// <summary>
            /// Enum _146 for value: 146
            /// </summary>
            [EnumMember(Value = "146")]
            _146 = 82,

            /// <summary>
            /// Enum _46 for value: 46
            /// </summary>
            [EnumMember(Value = "46")]
            _46 = 83,

            /// <summary>
            /// Enum _23 for value: 23
            /// </summary>
            [EnumMember(Value = "23")]
            _23 = 84,

            /// <summary>
            /// Enum _12 for value: 12
            /// </summary>
            [EnumMember(Value = "12")]
            _12 = 85

        }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="project", EmitDefaultValue=true)]
        public ProjectEnum? Project { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimilarityForm" /> class.
        /// </summary>
        /// <param name="runName">runName.</param>
        /// <param name="searchSimilarDocuments">searchSimilarDocuments.</param>
        /// <param name="searchSimilarTextUnits">searchSimilarTextUnits.</param>
        /// <param name="similarityThreshold">Min. Similarity Value 50-100% (default to 75).</param>
        /// <param name="project">project.</param>
        /// <param name="useIdf">useIdf.</param>
        /// <param name="delete">delete.</param>
        public SimilarityForm(string runName = default(string), bool? searchSimilarDocuments = default(bool?), bool? searchSimilarTextUnits = default(bool?), int? similarityThreshold = 75, ProjectEnum? project = default(ProjectEnum?), bool? useIdf = default(bool?), bool? delete = default(bool?))
        {
            this.RunName = runName;
            this.SearchSimilarDocuments = searchSimilarDocuments;
            this.SearchSimilarTextUnits = searchSimilarTextUnits;
            this.SimilarityThreshold = similarityThreshold;
            this.Project = project;
            this.UseIdf = useIdf;
            this.Delete = delete;
            this.RunName = runName;
            this.SearchSimilarDocuments = searchSimilarDocuments;
            this.SearchSimilarTextUnits = searchSimilarTextUnits;
            // use default value if no "similarityThreshold" provided
            if (similarityThreshold == null)
            {
                this.SimilarityThreshold = 75;
            }
            else
            {
                this.SimilarityThreshold = similarityThreshold;
            }
            this.Project = project;
            this.UseIdf = useIdf;
            this.Delete = delete;
        }

        /// <summary>
        /// Gets or Sets RunName
        /// </summary>
        [DataMember(Name="run_name", EmitDefaultValue=true)]
        public string RunName { get; set; }

        /// <summary>
        /// Gets or Sets SearchSimilarDocuments
        /// </summary>
        [DataMember(Name="search_similar_documents", EmitDefaultValue=true)]
        public bool? SearchSimilarDocuments { get; set; }

        /// <summary>
        /// Gets or Sets SearchSimilarTextUnits
        /// </summary>
        [DataMember(Name="search_similar_text_units", EmitDefaultValue=true)]
        public bool? SearchSimilarTextUnits { get; set; }

        /// <summary>
        /// Min. Similarity Value 50-100%
        /// </summary>
        /// <value>Min. Similarity Value 50-100%</value>
        [DataMember(Name="similarity_threshold", EmitDefaultValue=true)]
        public int? SimilarityThreshold { get; set; }


        /// <summary>
        /// Gets or Sets UseIdf
        /// </summary>
        [DataMember(Name="use_idf", EmitDefaultValue=true)]
        public bool? UseIdf { get; set; }

        /// <summary>
        /// Gets or Sets Delete
        /// </summary>
        [DataMember(Name="delete", EmitDefaultValue=true)]
        public bool? Delete { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimilarityForm {\n");
            sb.Append("  RunName: ").Append(RunName).Append("\n");
            sb.Append("  SearchSimilarDocuments: ").Append(SearchSimilarDocuments).Append("\n");
            sb.Append("  SearchSimilarTextUnits: ").Append(SearchSimilarTextUnits).Append("\n");
            sb.Append("  SimilarityThreshold: ").Append(SimilarityThreshold).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  UseIdf: ").Append(UseIdf).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimilarityForm);
        }

        /// <summary>
        /// Returns true if SimilarityForm instances are equal
        /// </summary>
        /// <param name="input">Instance of SimilarityForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimilarityForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RunName == input.RunName ||
                    (this.RunName != null &&
                    this.RunName.Equals(input.RunName))
                ) && 
                (
                    this.SearchSimilarDocuments == input.SearchSimilarDocuments ||
                    (this.SearchSimilarDocuments != null &&
                    this.SearchSimilarDocuments.Equals(input.SearchSimilarDocuments))
                ) && 
                (
                    this.SearchSimilarTextUnits == input.SearchSimilarTextUnits ||
                    (this.SearchSimilarTextUnits != null &&
                    this.SearchSimilarTextUnits.Equals(input.SearchSimilarTextUnits))
                ) && 
                (
                    this.SimilarityThreshold == input.SimilarityThreshold ||
                    (this.SimilarityThreshold != null &&
                    this.SimilarityThreshold.Equals(input.SimilarityThreshold))
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.UseIdf == input.UseIdf ||
                    (this.UseIdf != null &&
                    this.UseIdf.Equals(input.UseIdf))
                ) && 
                (
                    this.Delete == input.Delete ||
                    (this.Delete != null &&
                    this.Delete.Equals(input.Delete))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RunName != null)
                    hashCode = hashCode * 59 + this.RunName.GetHashCode();
                if (this.SearchSimilarDocuments != null)
                    hashCode = hashCode * 59 + this.SearchSimilarDocuments.GetHashCode();
                if (this.SearchSimilarTextUnits != null)
                    hashCode = hashCode * 59 + this.SearchSimilarTextUnits.GetHashCode();
                if (this.SimilarityThreshold != null)
                    hashCode = hashCode * 59 + this.SimilarityThreshold.GetHashCode();
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.UseIdf != null)
                    hashCode = hashCode * 59 + this.UseIdf.GetHashCode();
                if (this.Delete != null)
                    hashCode = hashCode * 59 + this.Delete.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RunName (string) maxLength
            if(this.RunName != null && this.RunName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RunName, length must be less than 100.", new [] { "RunName" });
            }




            // SimilarityThreshold (int?) maximum
            if(this.SimilarityThreshold > (int?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SimilarityThreshold, must be a value less than or equal to 100.", new [] { "SimilarityThreshold" });
            }

            // SimilarityThreshold (int?) minimum
            if(this.SimilarityThreshold < (int?)50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SimilarityThreshold, must be a value greater than or equal to 50.", new [] { "SimilarityThreshold" });
            }

            yield break;
        }
    }

}
