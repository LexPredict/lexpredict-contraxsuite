/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.188
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AnnotationSuggestRequest
    /// </summary>
    [DataContract]
    public partial class AnnotationSuggestRequest :  IEquatable<AnnotationSuggestRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotationSuggestRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AnnotationSuggestRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotationSuggestRequest" /> class.
        /// </summary>
        /// <param name="field">field (required).</param>
        /// <param name="document">document (required).</param>
        /// <param name="quite">quite (required).</param>
        public AnnotationSuggestRequest(Guid field = default(Guid), int document = default(int), string quite = default(string))
        {
            // to ensure "field" is required (not null)
            if (field == null)
            {
                throw new InvalidDataException("field is a required property for AnnotationSuggestRequest and cannot be null");
            }
            else
            {
                this.Field = field;
            }

            // to ensure "document" is required (not null)
            if (document == null)
            {
                throw new InvalidDataException("document is a required property for AnnotationSuggestRequest and cannot be null");
            }
            else
            {
                this.Document = document;
            }

            // to ensure "quite" is required (not null)
            if (quite == null)
            {
                throw new InvalidDataException("quite is a required property for AnnotationSuggestRequest and cannot be null");
            }
            else
            {
                this.Quite = quite;
            }

        }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name="field", EmitDefaultValue=true)]
        public Guid Field { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name="document", EmitDefaultValue=true)]
        public int Document { get; set; }

        /// <summary>
        /// Gets or Sets Quite
        /// </summary>
        [DataMember(Name="quite", EmitDefaultValue=true)]
        public string Quite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnnotationSuggestRequest {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  Quite: ").Append(Quite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnnotationSuggestRequest);
        }

        /// <summary>
        /// Returns true if AnnotationSuggestRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AnnotationSuggestRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnnotationSuggestRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                ) && 
                (
                    this.Quite == input.Quite ||
                    (this.Quite != null &&
                    this.Quite.Equals(input.Quite))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                if (this.Document != null)
                    hashCode = hashCode * 59 + this.Document.GetHashCode();
                if (this.Quite != null)
                    hashCode = hashCode * 59 + this.Quite.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
