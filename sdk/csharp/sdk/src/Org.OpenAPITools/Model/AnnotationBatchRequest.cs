/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AnnotationBatchRequest
    /// </summary>
    [DataContract]
    public partial class AnnotationBatchRequest :  IEquatable<AnnotationBatchRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Delete for value: delete
            /// </summary>
            [EnumMember(Value = "delete")]
            Delete = 1,

            /// <summary>
            /// Enum Save for value: save
            /// </summary>
            [EnumMember(Value = "save")]
            Save = 2

        }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=true)]
        public ActionEnum Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotationBatchRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AnnotationBatchRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotationBatchRequest" /> class.
        /// </summary>
        /// <param name="operationUid">operationUid (required).</param>
        /// <param name="action">action (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="data">data (required).</param>
        public AnnotationBatchRequest(Guid operationUid = default(Guid), ActionEnum action = default(ActionEnum), int id = default(int), Object data = default(Object))
        {
            // to ensure "operationUid" is required (not null)
            if (operationUid == null)
            {
                throw new InvalidDataException("operationUid is a required property for AnnotationBatchRequest and cannot be null");
            }
            else
            {
                this.OperationUid = operationUid;
            }

            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new InvalidDataException("action is a required property for AnnotationBatchRequest and cannot be null");
            }
            else
            {
                this.Action = action;
            }

            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for AnnotationBatchRequest and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for AnnotationBatchRequest and cannot be null");
            }
            else
            {
                this.Data = data;
            }

        }

        /// <summary>
        /// Gets or Sets OperationUid
        /// </summary>
        [DataMember(Name="operation_uid", EmitDefaultValue=true)]
        public Guid OperationUid { get; set; }


        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=true)]
        public Object Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnnotationBatchRequest {\n");
            sb.Append("  OperationUid: ").Append(OperationUid).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnnotationBatchRequest);
        }

        /// <summary>
        /// Returns true if AnnotationBatchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AnnotationBatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnnotationBatchRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OperationUid == input.OperationUid ||
                    (this.OperationUid != null &&
                    this.OperationUid.Equals(input.OperationUid))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OperationUid != null)
                    hashCode = hashCode * 59 + this.OperationUid.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
