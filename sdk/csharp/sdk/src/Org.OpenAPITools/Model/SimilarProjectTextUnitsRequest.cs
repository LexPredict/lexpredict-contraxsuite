/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SimilarProjectTextUnitsRequest
    /// </summary>
    [DataContract]
    public partial class SimilarProjectTextUnitsRequest :  IEquatable<SimilarProjectTextUnitsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimilarProjectTextUnitsRequest" /> class.
        /// </summary>
        /// <param name="textMaxLength">text unit b text max length, 0 to get all text.</param>
        /// <param name="runId">run id or text unit id required.</param>
        /// <param name="lastRun">run id or last_run or text unit id required.</param>
        /// <param name="textUnitId">run id or text unit id required.</param>
        /// <param name="documentId">document ID.</param>
        /// <param name="locationStart">start of chosen text block in a Document.</param>
        /// <param name="locationEnd">end of chosen text block in a Document.</param>
        /// <param name="selection">selection coordinates.</param>
        public SimilarProjectTextUnitsRequest(int textMaxLength = default(int), int runId = default(int), bool lastRun = default(bool), int textUnitId = default(int), int documentId = default(int), int locationStart = default(int), int locationEnd = default(int), List<Object> selection = default(List<Object>))
        {
            this.TextMaxLength = textMaxLength;
            this.RunId = runId;
            this.LastRun = lastRun;
            this.TextUnitId = textUnitId;
            this.DocumentId = documentId;
            this.LocationStart = locationStart;
            this.LocationEnd = locationEnd;
            this.Selection = selection;
        }

        /// <summary>
        /// text unit b text max length, 0 to get all text
        /// </summary>
        /// <value>text unit b text max length, 0 to get all text</value>
        [DataMember(Name="text_max_length", EmitDefaultValue=false)]
        public int TextMaxLength { get; set; }

        /// <summary>
        /// run id or text unit id required
        /// </summary>
        /// <value>run id or text unit id required</value>
        [DataMember(Name="run_id", EmitDefaultValue=false)]
        public int RunId { get; set; }

        /// <summary>
        /// run id or last_run or text unit id required
        /// </summary>
        /// <value>run id or last_run or text unit id required</value>
        [DataMember(Name="last_run", EmitDefaultValue=false)]
        public bool LastRun { get; set; }

        /// <summary>
        /// run id or text unit id required
        /// </summary>
        /// <value>run id or text unit id required</value>
        [DataMember(Name="text_unit_id", EmitDefaultValue=false)]
        public int TextUnitId { get; set; }

        /// <summary>
        /// document ID
        /// </summary>
        /// <value>document ID</value>
        [DataMember(Name="document_id", EmitDefaultValue=false)]
        public int DocumentId { get; set; }

        /// <summary>
        /// start of chosen text block in a Document
        /// </summary>
        /// <value>start of chosen text block in a Document</value>
        [DataMember(Name="location_start", EmitDefaultValue=false)]
        public int LocationStart { get; set; }

        /// <summary>
        /// end of chosen text block in a Document
        /// </summary>
        /// <value>end of chosen text block in a Document</value>
        [DataMember(Name="location_end", EmitDefaultValue=false)]
        public int LocationEnd { get; set; }

        /// <summary>
        /// selection coordinates
        /// </summary>
        /// <value>selection coordinates</value>
        [DataMember(Name="selection", EmitDefaultValue=false)]
        public List<Object> Selection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimilarProjectTextUnitsRequest {\n");
            sb.Append("  TextMaxLength: ").Append(TextMaxLength).Append("\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  LastRun: ").Append(LastRun).Append("\n");
            sb.Append("  TextUnitId: ").Append(TextUnitId).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  LocationStart: ").Append(LocationStart).Append("\n");
            sb.Append("  LocationEnd: ").Append(LocationEnd).Append("\n");
            sb.Append("  Selection: ").Append(Selection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimilarProjectTextUnitsRequest);
        }

        /// <summary>
        /// Returns true if SimilarProjectTextUnitsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SimilarProjectTextUnitsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimilarProjectTextUnitsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TextMaxLength == input.TextMaxLength ||
                    (this.TextMaxLength != null &&
                    this.TextMaxLength.Equals(input.TextMaxLength))
                ) && 
                (
                    this.RunId == input.RunId ||
                    (this.RunId != null &&
                    this.RunId.Equals(input.RunId))
                ) && 
                (
                    this.LastRun == input.LastRun ||
                    (this.LastRun != null &&
                    this.LastRun.Equals(input.LastRun))
                ) && 
                (
                    this.TextUnitId == input.TextUnitId ||
                    (this.TextUnitId != null &&
                    this.TextUnitId.Equals(input.TextUnitId))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.LocationStart == input.LocationStart ||
                    (this.LocationStart != null &&
                    this.LocationStart.Equals(input.LocationStart))
                ) && 
                (
                    this.LocationEnd == input.LocationEnd ||
                    (this.LocationEnd != null &&
                    this.LocationEnd.Equals(input.LocationEnd))
                ) && 
                (
                    this.Selection == input.Selection ||
                    this.Selection != null &&
                    input.Selection != null &&
                    this.Selection.SequenceEqual(input.Selection)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TextMaxLength != null)
                    hashCode = hashCode * 59 + this.TextMaxLength.GetHashCode();
                if (this.RunId != null)
                    hashCode = hashCode * 59 + this.RunId.GetHashCode();
                if (this.LastRun != null)
                    hashCode = hashCode * 59 + this.LastRun.GetHashCode();
                if (this.TextUnitId != null)
                    hashCode = hashCode * 59 + this.TextUnitId.GetHashCode();
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.LocationStart != null)
                    hashCode = hashCode * 59 + this.LocationStart.GetHashCode();
                if (this.LocationEnd != null)
                    hashCode = hashCode * 59 + this.LocationEnd.GetHashCode();
                if (this.Selection != null)
                    hashCode = hashCode * 59 + this.Selection.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
