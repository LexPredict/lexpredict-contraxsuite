/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CheckNewDocumentFieldFormulaRequest
    /// </summary>
    [DataContract]
    public partial class CheckNewDocumentFieldFormulaRequest :  IEquatable<CheckNewDocumentFieldFormulaRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckNewDocumentFieldFormulaRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckNewDocumentFieldFormulaRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckNewDocumentFieldFormulaRequest" /> class.
        /// </summary>
        /// <param name="formula">formula.</param>
        /// <param name="hideUntilPython">hideUntilPython.</param>
        /// <param name="fieldType">fieldType.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="dependsOnFields">dependsOnFields (required).</param>
        public CheckNewDocumentFieldFormulaRequest(string formula = default(string), string hideUntilPython = default(string), string fieldType = default(string), string documentType = default(string), List<Guid> dependsOnFields = default(List<Guid>))
        {
            // to ensure "dependsOnFields" is required (not null)
            if (dependsOnFields == null)
            {
                throw new InvalidDataException("dependsOnFields is a required property for CheckNewDocumentFieldFormulaRequest and cannot be null");
            }
            else
            {
                this.DependsOnFields = dependsOnFields;
            }

            this.Formula = formula;
            this.HideUntilPython = hideUntilPython;
            this.FieldType = fieldType;
            this.DocumentType = documentType;
        }

        /// <summary>
        /// Gets or Sets Formula
        /// </summary>
        [DataMember(Name="formula", EmitDefaultValue=false)]
        public string Formula { get; set; }

        /// <summary>
        /// Gets or Sets HideUntilPython
        /// </summary>
        [DataMember(Name="hide_until_python", EmitDefaultValue=false)]
        public string HideUntilPython { get; set; }

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [DataMember(Name="field_type", EmitDefaultValue=false)]
        public string FieldType { get; set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name="document_type", EmitDefaultValue=false)]
        public string DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets DependsOnFields
        /// </summary>
        [DataMember(Name="depends_on_fields", EmitDefaultValue=true)]
        public List<Guid> DependsOnFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckNewDocumentFieldFormulaRequest {\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  HideUntilPython: ").Append(HideUntilPython).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  DependsOnFields: ").Append(DependsOnFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckNewDocumentFieldFormulaRequest);
        }

        /// <summary>
        /// Returns true if CheckNewDocumentFieldFormulaRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckNewDocumentFieldFormulaRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckNewDocumentFieldFormulaRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Formula == input.Formula ||
                    (this.Formula != null &&
                    this.Formula.Equals(input.Formula))
                ) && 
                (
                    this.HideUntilPython == input.HideUntilPython ||
                    (this.HideUntilPython != null &&
                    this.HideUntilPython.Equals(input.HideUntilPython))
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.DependsOnFields == input.DependsOnFields ||
                    this.DependsOnFields != null &&
                    input.DependsOnFields != null &&
                    this.DependsOnFields.SequenceEqual(input.DependsOnFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Formula != null)
                    hashCode = hashCode * 59 + this.Formula.GetHashCode();
                if (this.HideUntilPython != null)
                    hashCode = hashCode * 59 + this.HideUntilPython.GetHashCode();
                if (this.FieldType != null)
                    hashCode = hashCode * 59 + this.FieldType.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.DependsOnFields != null)
                    hashCode = hashCode * 59 + this.DependsOnFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
