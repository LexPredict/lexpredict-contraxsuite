/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TaskLogResponse
    /// </summary>
    [DataContract]
    public partial class TaskLogResponse :  IEquatable<TaskLogResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskLogResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaskLogResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskLogResponse" /> class.
        /// </summary>
        /// <param name="records">records (required).</param>
        /// <param name="totalRecordsCount">totalRecordsCount (required).</param>
        /// <param name="filteredRecordsCount">filteredRecordsCount (required).</param>
        /// <param name="currentRecordsCount">currentRecordsCount (required).</param>
        public TaskLogResponse(TaskLogResponseRecords records = default(TaskLogResponseRecords), int totalRecordsCount = default(int), int filteredRecordsCount = default(int), int currentRecordsCount = default(int))
        {
            // to ensure "records" is required (not null)
            if (records == null)
            {
                throw new InvalidDataException("records is a required property for TaskLogResponse and cannot be null");
            }
            else
            {
                this.Records = records;
            }

            // to ensure "totalRecordsCount" is required (not null)
            if (totalRecordsCount == null)
            {
                throw new InvalidDataException("totalRecordsCount is a required property for TaskLogResponse and cannot be null");
            }
            else
            {
                this.TotalRecordsCount = totalRecordsCount;
            }

            // to ensure "filteredRecordsCount" is required (not null)
            if (filteredRecordsCount == null)
            {
                throw new InvalidDataException("filteredRecordsCount is a required property for TaskLogResponse and cannot be null");
            }
            else
            {
                this.FilteredRecordsCount = filteredRecordsCount;
            }

            // to ensure "currentRecordsCount" is required (not null)
            if (currentRecordsCount == null)
            {
                throw new InvalidDataException("currentRecordsCount is a required property for TaskLogResponse and cannot be null");
            }
            else
            {
                this.CurrentRecordsCount = currentRecordsCount;
            }

        }

        /// <summary>
        /// Gets or Sets Records
        /// </summary>
        [DataMember(Name="records", EmitDefaultValue=true)]
        public TaskLogResponseRecords Records { get; set; }

        /// <summary>
        /// Gets or Sets TotalRecordsCount
        /// </summary>
        [DataMember(Name="total_records_count", EmitDefaultValue=true)]
        public int TotalRecordsCount { get; set; }

        /// <summary>
        /// Gets or Sets FilteredRecordsCount
        /// </summary>
        [DataMember(Name="filtered_records_count", EmitDefaultValue=true)]
        public int FilteredRecordsCount { get; set; }

        /// <summary>
        /// Gets or Sets CurrentRecordsCount
        /// </summary>
        [DataMember(Name="current_records_count", EmitDefaultValue=true)]
        public int CurrentRecordsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskLogResponse {\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  TotalRecordsCount: ").Append(TotalRecordsCount).Append("\n");
            sb.Append("  FilteredRecordsCount: ").Append(FilteredRecordsCount).Append("\n");
            sb.Append("  CurrentRecordsCount: ").Append(CurrentRecordsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskLogResponse);
        }

        /// <summary>
        /// Returns true if TaskLogResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskLogResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskLogResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Records == input.Records ||
                    (this.Records != null &&
                    this.Records.Equals(input.Records))
                ) && 
                (
                    this.TotalRecordsCount == input.TotalRecordsCount ||
                    (this.TotalRecordsCount != null &&
                    this.TotalRecordsCount.Equals(input.TotalRecordsCount))
                ) && 
                (
                    this.FilteredRecordsCount == input.FilteredRecordsCount ||
                    (this.FilteredRecordsCount != null &&
                    this.FilteredRecordsCount.Equals(input.FilteredRecordsCount))
                ) && 
                (
                    this.CurrentRecordsCount == input.CurrentRecordsCount ||
                    (this.CurrentRecordsCount != null &&
                    this.CurrentRecordsCount.Equals(input.CurrentRecordsCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Records != null)
                    hashCode = hashCode * 59 + this.Records.GetHashCode();
                if (this.TotalRecordsCount != null)
                    hashCode = hashCode * 59 + this.TotalRecordsCount.GetHashCode();
                if (this.FilteredRecordsCount != null)
                    hashCode = hashCode * 59 + this.FilteredRecordsCount.GetHashCode();
                if (this.CurrentRecordsCount != null)
                    hashCode = hashCode * 59 + this.CurrentRecordsCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
