/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentSimilarityRun
    /// </summary>
    [DataContract]
    public partial class DocumentSimilarityRun :  IEquatable<DocumentSimilarityRun>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSimilarityRun" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentSimilarityRun() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSimilarityRun" /> class.
        /// </summary>
        /// <param name="featureSource">featureSource.</param>
        /// <param name="unitSource">unitSource.</param>
        /// <param name="unitType">unitType.</param>
        /// <param name="unitId">unitId.</param>
        /// <param name="itemsCount">itemsCount (required).</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdDate">createdDate.</param>
        public DocumentSimilarityRun(string featureSource = default(string), string unitSource = default(string), string unitType = default(string), int? unitId = default(int?), int itemsCount = default(int), int? createdBy = default(int?), DateTime createdDate = default(DateTime))
        {
            this.FeatureSource = featureSource;
            this.UnitSource = unitSource;
            this.UnitType = unitType;
            this.UnitId = unitId;
            // to ensure "itemsCount" is required (not null)
            if (itemsCount == null)
            {
                throw new InvalidDataException("itemsCount is a required property for DocumentSimilarityRun and cannot be null");
            }
            else
            {
                this.ItemsCount = itemsCount;
            }

            this.CreatedBy = createdBy;
            this.FeatureSource = featureSource;
            this.UnitSource = unitSource;
            this.UnitType = unitType;
            this.UnitId = unitId;
            this.CreatedBy = createdBy;
            this.CreatedDate = createdDate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="project_id", EmitDefaultValue=false)]
        public string ProjectId { get; private set; }

        /// <summary>
        /// Gets or Sets FeatureSource
        /// </summary>
        [DataMember(Name="feature_source", EmitDefaultValue=true)]
        public string FeatureSource { get; set; }

        /// <summary>
        /// Gets or Sets UnitSource
        /// </summary>
        [DataMember(Name="unit_source", EmitDefaultValue=true)]
        public string UnitSource { get; set; }

        /// <summary>
        /// Gets or Sets UnitType
        /// </summary>
        [DataMember(Name="unit_type", EmitDefaultValue=true)]
        public string UnitType { get; set; }

        /// <summary>
        /// Gets or Sets UnitId
        /// </summary>
        [DataMember(Name="unit_id", EmitDefaultValue=true)]
        public int? UnitId { get; set; }

        /// <summary>
        /// Gets or Sets ItemsCount
        /// </summary>
        [DataMember(Name="items_count", EmitDefaultValue=true)]
        public int ItemsCount { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="created_by", EmitDefaultValue=true)]
        public int? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentSimilarityRun {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  FeatureSource: ").Append(FeatureSource).Append("\n");
            sb.Append("  UnitSource: ").Append(UnitSource).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  UnitId: ").Append(UnitId).Append("\n");
            sb.Append("  ItemsCount: ").Append(ItemsCount).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentSimilarityRun);
        }

        /// <summary>
        /// Returns true if DocumentSimilarityRun instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentSimilarityRun to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentSimilarityRun input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.FeatureSource == input.FeatureSource ||
                    (this.FeatureSource != null &&
                    this.FeatureSource.Equals(input.FeatureSource))
                ) && 
                (
                    this.UnitSource == input.UnitSource ||
                    (this.UnitSource != null &&
                    this.UnitSource.Equals(input.UnitSource))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                ) && 
                (
                    this.UnitId == input.UnitId ||
                    (this.UnitId != null &&
                    this.UnitId.Equals(input.UnitId))
                ) && 
                (
                    this.ItemsCount == input.ItemsCount ||
                    (this.ItemsCount != null &&
                    this.ItemsCount.Equals(input.ItemsCount))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.FeatureSource != null)
                    hashCode = hashCode * 59 + this.FeatureSource.GetHashCode();
                if (this.UnitSource != null)
                    hashCode = hashCode * 59 + this.UnitSource.GetHashCode();
                if (this.UnitType != null)
                    hashCode = hashCode * 59 + this.UnitType.GetHashCode();
                if (this.UnitId != null)
                    hashCode = hashCode * 59 + this.UnitId.GetHashCode();
                if (this.ItemsCount != null)
                    hashCode = hashCode * 59 + this.ItemsCount.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FeatureSource (string) maxLength
            if(this.FeatureSource != null && this.FeatureSource.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FeatureSource, length must be less than 50.", new [] { "FeatureSource" });
            }

 
            // UnitSource (string) maxLength
            if(this.UnitSource != null && this.UnitSource.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitSource, length must be less than 50.", new [] { "UnitSource" });
            }

 
            // UnitType (string) maxLength
            if(this.UnitType != null && this.UnitType.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitType, length must be less than 50.", new [] { "UnitType" });
            }

 

 
            // UnitId (int?) maximum
            if(this.UnitId > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitId, must be a value less than or equal to 2147483647.", new [] { "UnitId" });
            }

            // UnitId (int?) minimum
            if(this.UnitId < (int?)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitId, must be a value greater than or equal to -2147483648.", new [] { "UnitId" });
            }

            yield break;
        }
    }

}
