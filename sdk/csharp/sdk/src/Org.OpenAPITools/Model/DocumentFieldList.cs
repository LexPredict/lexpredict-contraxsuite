/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentFieldList
    /// </summary>
    [DataContract]
    public partial class DocumentFieldList :  IEquatable<DocumentFieldList>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Address for value: address
            /// </summary>
            [EnumMember(Value = "address")]
            Address = 1,

            /// <summary>
            /// Enum Choice for value: choice
            /// </summary>
            [EnumMember(Value = "choice")]
            Choice = 2,

            /// <summary>
            /// Enum Company for value: company
            /// </summary>
            [EnumMember(Value = "company")]
            Company = 3,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 4,

            /// <summary>
            /// Enum Daterecurring for value: date_recurring
            /// </summary>
            [EnumMember(Value = "date_recurring")]
            Daterecurring = 5,

            /// <summary>
            /// Enum Datetime for value: datetime
            /// </summary>
            [EnumMember(Value = "datetime")]
            Datetime = 6,

            /// <summary>
            /// Enum Duration for value: duration
            /// </summary>
            [EnumMember(Value = "duration")]
            Duration = 7,

            /// <summary>
            /// Enum Float for value: float
            /// </summary>
            [EnumMember(Value = "float")]
            Float = 8,

            /// <summary>
            /// Enum Geography for value: geography
            /// </summary>
            [EnumMember(Value = "geography")]
            Geography = 9,

            /// <summary>
            /// Enum Int for value: int
            /// </summary>
            [EnumMember(Value = "int")]
            Int = 10,

            /// <summary>
            /// Enum Linkeddocuments for value: linked_documents
            /// </summary>
            [EnumMember(Value = "linked_documents")]
            Linkeddocuments = 11,

            /// <summary>
            /// Enum Money for value: money
            /// </summary>
            [EnumMember(Value = "money")]
            Money = 12,

            /// <summary>
            /// Enum Multichoice for value: multi_choice
            /// </summary>
            [EnumMember(Value = "multi_choice")]
            Multichoice = 13,

            /// <summary>
            /// Enum Percent for value: percent
            /// </summary>
            [EnumMember(Value = "percent")]
            Percent = 14,

            /// <summary>
            /// Enum Person for value: person
            /// </summary>
            [EnumMember(Value = "person")]
            Person = 15,

            /// <summary>
            /// Enum Ratio for value: ratio
            /// </summary>
            [EnumMember(Value = "ratio")]
            Ratio = 16,

            /// <summary>
            /// Enum Relatedinfo for value: related_info
            /// </summary>
            [EnumMember(Value = "related_info")]
            Relatedinfo = 17,

            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 18,

            /// <summary>
            /// Enum Stringnowordwrap for value: string_no_word_wrap
            /// </summary>
            [EnumMember(Value = "string_no_word_wrap")]
            Stringnowordwrap = 19,

            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 20

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Defines TextUnitType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TextUnitTypeEnum
        {
            /// <summary>
            /// Enum Sentence for value: sentence
            /// </summary>
            [EnumMember(Value = "sentence")]
            Sentence = 1,

            /// <summary>
            /// Enum Paragraph for value: paragraph
            /// </summary>
            [EnumMember(Value = "paragraph")]
            Paragraph = 2,

            /// <summary>
            /// Enum Section for value: section
            /// </summary>
            [EnumMember(Value = "section")]
            Section = 3

        }

        /// <summary>
        /// Gets or Sets TextUnitType
        /// </summary>
        [DataMember(Name="text_unit_type", EmitDefaultValue=false)]
        public TextUnitTypeEnum? TextUnitType { get; set; }
        /// <summary>
        /// Defines ValueDetectionStrategy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValueDetectionStrategyEnum
        {
            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled = 1,

            /// <summary>
            /// Enum Useregexpsonly for value: use_regexps_only
            /// </summary>
            [EnumMember(Value = "use_regexps_only")]
            Useregexpsonly = 2,

            /// <summary>
            /// Enum Useformulaonly for value: use_formula_only
            /// </summary>
            [EnumMember(Value = "use_formula_only")]
            Useformulaonly = 3,

            /// <summary>
            /// Enum Regexptable for value: regexp_table
            /// </summary>
            [EnumMember(Value = "regexp_table")]
            Regexptable = 4,

            /// <summary>
            /// Enum Textbasedmlonly for value: text_based_ml_only
            /// </summary>
            [EnumMember(Value = "text_based_ml_only")]
            Textbasedmlonly = 5,

            /// <summary>
            /// Enum Fieldsbasedmlonly for value: fields_based_ml_only
            /// </summary>
            [EnumMember(Value = "fields_based_ml_only")]
            Fieldsbasedmlonly = 6,

            /// <summary>
            /// Enum Fieldsbasedprobmlonly for value: fields_based_prob_ml_only
            /// </summary>
            [EnumMember(Value = "fields_based_prob_ml_only")]
            Fieldsbasedprobmlonly = 7,

            /// <summary>
            /// Enum Fieldbasedregexps for value: field_based_regexps
            /// </summary>
            [EnumMember(Value = "field_based_regexps")]
            Fieldbasedregexps = 8,

            /// <summary>
            /// Enum Mlflowmodel for value: mlflow_model
            /// </summary>
            [EnumMember(Value = "mlflow_model")]
            Mlflowmodel = 9

        }

        /// <summary>
        /// Gets or Sets ValueDetectionStrategy
        /// </summary>
        [DataMember(Name="value_detection_strategy", EmitDefaultValue=false)]
        public ValueDetectionStrategyEnum? ValueDetectionStrategy { get; set; }
        /// <summary>
        /// Defines Confidence
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConfidenceEnum
        {
            /// <summary>
            /// Enum High for value: High
            /// </summary>
            [EnumMember(Value = "High")]
            High = 1,

            /// <summary>
            /// Enum Medium for value: Medium
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium = 2,

            /// <summary>
            /// Enum Low for value: Low
            /// </summary>
            [EnumMember(Value = "Low")]
            Low = 3

        }

        /// <summary>
        /// Gets or Sets Confidence
        /// </summary>
        [DataMember(Name="confidence", EmitDefaultValue=true)]
        public ConfidenceEnum? Confidence { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentFieldList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentFieldList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentFieldList" /> class.
        /// </summary>
        /// <param name="documentType">documentType (required).</param>
        /// <param name="code">Field codes must be lowercase, should start with  a Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type. (required).</param>
        /// <param name="longCode">longCode.</param>
        /// <param name="title">title (required).</param>
        /// <param name="description">description.</param>
        /// <param name="type">type.</param>
        /// <param name="textUnitType">textUnitType.</param>
        /// <param name="valueDetectionStrategy">valueDetectionStrategy.</param>
        /// <param name="classifierInitScript">classifierInitScript.</param>
        /// <param name="formula">formula.</param>
        /// <param name="convertDecimalsToFloatsInFormulaArgs">Floating point field values      are represented in Python Decimal type to avoid rounding problems in machine numbers representations.      Use this checkbox for converting them to Python float type before calculating the formula.      Float: 0.1 + 0.2 &#x3D; 0.30000000000000004. Decimal: 0.1 + 0.2 &#x3D; 0.3..</param>
        /// <param name="valueRegexp">This regular expression is run on the sentence      found by a Field Detector and extracts a specific string value from a Text Unit. If the regular expression returns multiple matching groups, then the first matching group will be used by the Field. This is only applicable to String Fields..</param>
        /// <param name="confidence">confidence.</param>
        /// <param name="requiresTextAnnotations">requiresTextAnnotations.</param>
        /// <param name="readOnly">readOnly.</param>
        /// <param name="category">category.</param>
        /// <param name="family">family.</param>
        /// <param name="defaultValue">If populated, the Default Value will be displayed for this Field if no other value is found by the chosen Value Detection Strategy. Leave this form blank to have the Field Value remain empty by default. Please wrap entries with quotes, example: “landlord”. This is only applicable to Choice and Multi Choice Fields..</param>
        /// <param name="allowValuesNotSpecifiedInChoices">allowValuesNotSpecifiedInChoices.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="trainingFinished">trainingFinished.</param>
        /// <param name="dirty">dirty.</param>
        /// <param name="order">order.</param>
        /// <param name="trainedAfterDocumentsNumber">trainedAfterDocumentsNumber.</param>
        /// <param name="hiddenAlways">hiddenAlways.</param>
        /// <param name="hideUntilPython">hideUntilPython.</param>
        /// <param name="hideUntilJs">hideUntilJs.</param>
        /// <param name="displayYesNo">Checking this box will      display “Yes” if Related Info text is found, and display “No” if no text is found..</param>
        /// <param name="vectorizerStopWords">Stop words for vectorizers      user in field-based ML field detection. These stop words are excluded from going into the feature vector part      build based on this field. In addition to these words the standard sklearn \&quot;english\&quot; word list is used.      Format: each word on new line.</param>
        /// <param name="unsureChoiceValue">Makes sense for machine learning      strategies with \&quot;Unsure\&quot; category. The strategy will return this value if probabilities of all other categories      appear lower than the specified threshold..</param>
        /// <param name="unsureThresholdsByValue">Makes sense for machine learning      strategies with \&quot;Unsure\&quot; category. The strategy will return concrete result (one of choice values) only if      the probability of the detected value is greater than this threshold. Otherwise the strategy returns None      or the choice value specified in \&quot;Unsure choice value\&quot; field. Format: { \&quot;value1\&quot;: 0.9, \&quot;value2\&quot;: 0.5, ...}.      Default: 0.9.</param>
        /// <param name="mlflowModelUri">MLFlow model URI      understandable by the MLFlow artifact downloading routines..</param>
        /// <param name="mlflowDetectOnDocumentLevel">If true - whole      document text will be sent to the MLFlow model and the field value will be returned for the whole text with no     annotations. If false - each text unit will be sent separately..</param>
        public DocumentFieldList(string documentType = default(string), string code = default(string), string longCode = default(string), string title = default(string), string description = default(string), TypeEnum? type = default(TypeEnum?), TextUnitTypeEnum? textUnitType = default(TextUnitTypeEnum?), ValueDetectionStrategyEnum? valueDetectionStrategy = default(ValueDetectionStrategyEnum?), string classifierInitScript = default(string), string formula = default(string), bool convertDecimalsToFloatsInFormulaArgs = default(bool), string valueRegexp = default(string), ConfidenceEnum? confidence = default(ConfidenceEnum?), bool requiresTextAnnotations = default(bool), bool readOnly = default(bool), DocumentFieldListCategory category = default(DocumentFieldListCategory), DocumentFieldListFamily family = default(DocumentFieldListFamily), Object defaultValue = default(Object), bool allowValuesNotSpecifiedInChoices = default(bool), Object metadata = default(Object), bool trainingFinished = default(bool), bool dirty = default(bool), int order = default(int), int trainedAfterDocumentsNumber = default(int), bool hiddenAlways = default(bool), string hideUntilPython = default(string), string hideUntilJs = default(string), bool displayYesNo = default(bool), string vectorizerStopWords = default(string), string unsureChoiceValue = default(string), Object unsureThresholdsByValue = default(Object), string mlflowModelUri = default(string), bool mlflowDetectOnDocumentLevel = default(bool))
        {
            // to ensure "documentType" is required (not null)
            if (documentType == null)
            {
                throw new InvalidDataException("documentType is a required property for DocumentFieldList and cannot be null");
            }
            else
            {
                this.DocumentType = documentType;
            }

            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for DocumentFieldList and cannot be null");
            }
            else
            {
                this.Code = code;
            }

            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for DocumentFieldList and cannot be null");
            }
            else
            {
                this.Title = title;
            }

            this.Description = description;
            this.ClassifierInitScript = classifierInitScript;
            this.Formula = formula;
            this.ValueRegexp = valueRegexp;
            this.Confidence = confidence;
            this.DefaultValue = defaultValue;
            this.Metadata = metadata;
            this.HideUntilPython = hideUntilPython;
            this.HideUntilJs = hideUntilJs;
            this.VectorizerStopWords = vectorizerStopWords;
            this.UnsureChoiceValue = unsureChoiceValue;
            this.UnsureThresholdsByValue = unsureThresholdsByValue;
            this.MlflowModelUri = mlflowModelUri;
            this.LongCode = longCode;
            this.Description = description;
            this.Type = type;
            this.TextUnitType = textUnitType;
            this.ValueDetectionStrategy = valueDetectionStrategy;
            this.ClassifierInitScript = classifierInitScript;
            this.Formula = formula;
            this.ConvertDecimalsToFloatsInFormulaArgs = convertDecimalsToFloatsInFormulaArgs;
            this.ValueRegexp = valueRegexp;
            this.Confidence = confidence;
            this.RequiresTextAnnotations = requiresTextAnnotations;
            this.ReadOnly = readOnly;
            this.Category = category;
            this.Family = family;
            this.DefaultValue = defaultValue;
            this.AllowValuesNotSpecifiedInChoices = allowValuesNotSpecifiedInChoices;
            this.Metadata = metadata;
            this.TrainingFinished = trainingFinished;
            this.Dirty = dirty;
            this.Order = order;
            this.TrainedAfterDocumentsNumber = trainedAfterDocumentsNumber;
            this.HiddenAlways = hiddenAlways;
            this.HideUntilPython = hideUntilPython;
            this.HideUntilJs = hideUntilJs;
            this.DisplayYesNo = displayYesNo;
            this.VectorizerStopWords = vectorizerStopWords;
            this.UnsureChoiceValue = unsureChoiceValue;
            this.UnsureThresholdsByValue = unsureThresholdsByValue;
            this.MlflowModelUri = mlflowModelUri;
            this.MlflowDetectOnDocumentLevel = mlflowDetectOnDocumentLevel;
        }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public Guid Uid { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name="document_type", EmitDefaultValue=true)]
        public string DocumentType { get; set; }

        /// <summary>
        /// Field codes must be lowercase, should start with  a Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.
        /// </summary>
        /// <value>Field codes must be lowercase, should start with  a Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.</value>
        [DataMember(Name="code", EmitDefaultValue=true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets LongCode
        /// </summary>
        [DataMember(Name="long_code", EmitDefaultValue=false)]
        public string LongCode { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }




        /// <summary>
        /// Gets or Sets ClassifierInitScript
        /// </summary>
        [DataMember(Name="classifier_init_script", EmitDefaultValue=true)]
        public string ClassifierInitScript { get; set; }

        /// <summary>
        /// Gets or Sets Formula
        /// </summary>
        [DataMember(Name="formula", EmitDefaultValue=true)]
        public string Formula { get; set; }

        /// <summary>
        /// Floating point field values      are represented in Python Decimal type to avoid rounding problems in machine numbers representations.      Use this checkbox for converting them to Python float type before calculating the formula.      Float: 0.1 + 0.2 &#x3D; 0.30000000000000004. Decimal: 0.1 + 0.2 &#x3D; 0.3.
        /// </summary>
        /// <value>Floating point field values      are represented in Python Decimal type to avoid rounding problems in machine numbers representations.      Use this checkbox for converting them to Python float type before calculating the formula.      Float: 0.1 + 0.2 &#x3D; 0.30000000000000004. Decimal: 0.1 + 0.2 &#x3D; 0.3.</value>
        [DataMember(Name="convert_decimals_to_floats_in_formula_args", EmitDefaultValue=false)]
        public bool ConvertDecimalsToFloatsInFormulaArgs { get; set; }

        /// <summary>
        /// This regular expression is run on the sentence      found by a Field Detector and extracts a specific string value from a Text Unit. If the regular expression returns multiple matching groups, then the first matching group will be used by the Field. This is only applicable to String Fields.
        /// </summary>
        /// <value>This regular expression is run on the sentence      found by a Field Detector and extracts a specific string value from a Text Unit. If the regular expression returns multiple matching groups, then the first matching group will be used by the Field. This is only applicable to String Fields.</value>
        [DataMember(Name="value_regexp", EmitDefaultValue=true)]
        public string ValueRegexp { get; set; }

        /// <summary>
        /// Gets or Sets DependsOnFields
        /// </summary>
        [DataMember(Name="depends_on_fields", EmitDefaultValue=false)]
        public List<Guid> DependsOnFields { get; private set; }

        /// <summary>
        /// Gets or Sets ValueDetectionStrategyName
        /// </summary>
        [DataMember(Name="value_detection_strategy_name", EmitDefaultValue=false)]
        public string ValueDetectionStrategyName { get; private set; }


        /// <summary>
        /// Gets or Sets RequiresTextAnnotations
        /// </summary>
        [DataMember(Name="requires_text_annotations", EmitDefaultValue=false)]
        public bool RequiresTextAnnotations { get; set; }

        /// <summary>
        /// Gets or Sets ReadOnly
        /// </summary>
        [DataMember(Name="read_only", EmitDefaultValue=false)]
        public bool ReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public DocumentFieldListCategory Category { get; set; }

        /// <summary>
        /// Gets or Sets Family
        /// </summary>
        [DataMember(Name="family", EmitDefaultValue=false)]
        public DocumentFieldListFamily Family { get; set; }

        /// <summary>
        /// If populated, the Default Value will be displayed for this Field if no other value is found by the chosen Value Detection Strategy. Leave this form blank to have the Field Value remain empty by default. Please wrap entries with quotes, example: “landlord”. This is only applicable to Choice and Multi Choice Fields.
        /// </summary>
        /// <value>If populated, the Default Value will be displayed for this Field if no other value is found by the chosen Value Detection Strategy. Leave this form blank to have the Field Value remain empty by default. Please wrap entries with quotes, example: “landlord”. This is only applicable to Choice and Multi Choice Fields.</value>
        [DataMember(Name="default_value", EmitDefaultValue=true)]
        public Object DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets Choices
        /// </summary>
        [DataMember(Name="choices", EmitDefaultValue=false)]
        public List<string> Choices { get; private set; }

        /// <summary>
        /// Gets or Sets AllowValuesNotSpecifiedInChoices
        /// </summary>
        [DataMember(Name="allow_values_not_specified_in_choices", EmitDefaultValue=false)]
        public bool AllowValuesNotSpecifiedInChoices { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets TrainingFinished
        /// </summary>
        [DataMember(Name="training_finished", EmitDefaultValue=false)]
        public bool TrainingFinished { get; set; }

        /// <summary>
        /// Gets or Sets Dirty
        /// </summary>
        [DataMember(Name="dirty", EmitDefaultValue=false)]
        public bool Dirty { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int Order { get; set; }

        /// <summary>
        /// Gets or Sets TrainedAfterDocumentsNumber
        /// </summary>
        [DataMember(Name="trained_after_documents_number", EmitDefaultValue=false)]
        public int TrainedAfterDocumentsNumber { get; set; }

        /// <summary>
        /// Gets or Sets HiddenAlways
        /// </summary>
        [DataMember(Name="hidden_always", EmitDefaultValue=false)]
        public bool HiddenAlways { get; set; }

        /// <summary>
        /// Gets or Sets HideUntilPython
        /// </summary>
        [DataMember(Name="hide_until_python", EmitDefaultValue=true)]
        public string HideUntilPython { get; set; }

        /// <summary>
        /// Gets or Sets HideUntilJs
        /// </summary>
        [DataMember(Name="hide_until_js", EmitDefaultValue=true)]
        public string HideUntilJs { get; set; }

        /// <summary>
        /// Gets or Sets IsValueDetectionStrategyDisabled
        /// </summary>
        [DataMember(Name="is_value_detection_strategy_disabled", EmitDefaultValue=false)]
        public bool IsValueDetectionStrategyDisabled { get; private set; }

        /// <summary>
        /// Checking this box will      display “Yes” if Related Info text is found, and display “No” if no text is found.
        /// </summary>
        /// <value>Checking this box will      display “Yes” if Related Info text is found, and display “No” if no text is found.</value>
        [DataMember(Name="display_yes_no", EmitDefaultValue=false)]
        public bool DisplayYesNo { get; set; }

        /// <summary>
        /// Gets or Sets ValueAware
        /// </summary>
        [DataMember(Name="value_aware", EmitDefaultValue=false)]
        public bool ValueAware { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedByName
        /// </summary>
        [DataMember(Name="created_by__name", EmitDefaultValue=false)]
        public string CreatedByName { get; private set; }

        /// <summary>
        /// Gets or Sets ModifiedByName
        /// </summary>
        [DataMember(Name="modified_by__name", EmitDefaultValue=false)]
        public string ModifiedByName { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public DateTime CreatedDate { get; private set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="modified_date", EmitDefaultValue=false)]
        public DateTime ModifiedDate { get; private set; }

        /// <summary>
        /// Stop words for vectorizers      user in field-based ML field detection. These stop words are excluded from going into the feature vector part      build based on this field. In addition to these words the standard sklearn \&quot;english\&quot; word list is used.      Format: each word on new line
        /// </summary>
        /// <value>Stop words for vectorizers      user in field-based ML field detection. These stop words are excluded from going into the feature vector part      build based on this field. In addition to these words the standard sklearn \&quot;english\&quot; word list is used.      Format: each word on new line</value>
        [DataMember(Name="vectorizer_stop_words", EmitDefaultValue=true)]
        public string VectorizerStopWords { get; set; }

        /// <summary>
        /// Makes sense for machine learning      strategies with \&quot;Unsure\&quot; category. The strategy will return this value if probabilities of all other categories      appear lower than the specified threshold.
        /// </summary>
        /// <value>Makes sense for machine learning      strategies with \&quot;Unsure\&quot; category. The strategy will return this value if probabilities of all other categories      appear lower than the specified threshold.</value>
        [DataMember(Name="unsure_choice_value", EmitDefaultValue=true)]
        public string UnsureChoiceValue { get; set; }

        /// <summary>
        /// Makes sense for machine learning      strategies with \&quot;Unsure\&quot; category. The strategy will return concrete result (one of choice values) only if      the probability of the detected value is greater than this threshold. Otherwise the strategy returns None      or the choice value specified in \&quot;Unsure choice value\&quot; field. Format: { \&quot;value1\&quot;: 0.9, \&quot;value2\&quot;: 0.5, ...}.      Default: 0.9
        /// </summary>
        /// <value>Makes sense for machine learning      strategies with \&quot;Unsure\&quot; category. The strategy will return concrete result (one of choice values) only if      the probability of the detected value is greater than this threshold. Otherwise the strategy returns None      or the choice value specified in \&quot;Unsure choice value\&quot; field. Format: { \&quot;value1\&quot;: 0.9, \&quot;value2\&quot;: 0.5, ...}.      Default: 0.9</value>
        [DataMember(Name="unsure_thresholds_by_value", EmitDefaultValue=true)]
        public Object UnsureThresholdsByValue { get; set; }

        /// <summary>
        /// MLFlow model URI      understandable by the MLFlow artifact downloading routines.
        /// </summary>
        /// <value>MLFlow model URI      understandable by the MLFlow artifact downloading routines.</value>
        [DataMember(Name="mlflow_model_uri", EmitDefaultValue=true)]
        public string MlflowModelUri { get; set; }

        /// <summary>
        /// If true - whole      document text will be sent to the MLFlow model and the field value will be returned for the whole text with no     annotations. If false - each text unit will be sent separately.
        /// </summary>
        /// <value>If true - whole      document text will be sent to the MLFlow model and the field value will be returned for the whole text with no     annotations. If false - each text unit will be sent separately.</value>
        [DataMember(Name="mlflow_detect_on_document_level", EmitDefaultValue=false)]
        public bool MlflowDetectOnDocumentLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentFieldList {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  LongCode: ").Append(LongCode).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TextUnitType: ").Append(TextUnitType).Append("\n");
            sb.Append("  ValueDetectionStrategy: ").Append(ValueDetectionStrategy).Append("\n");
            sb.Append("  ClassifierInitScript: ").Append(ClassifierInitScript).Append("\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  ConvertDecimalsToFloatsInFormulaArgs: ").Append(ConvertDecimalsToFloatsInFormulaArgs).Append("\n");
            sb.Append("  ValueRegexp: ").Append(ValueRegexp).Append("\n");
            sb.Append("  DependsOnFields: ").Append(DependsOnFields).Append("\n");
            sb.Append("  ValueDetectionStrategyName: ").Append(ValueDetectionStrategyName).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  RequiresTextAnnotations: ").Append(RequiresTextAnnotations).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Family: ").Append(Family).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Choices: ").Append(Choices).Append("\n");
            sb.Append("  AllowValuesNotSpecifiedInChoices: ").Append(AllowValuesNotSpecifiedInChoices).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  TrainingFinished: ").Append(TrainingFinished).Append("\n");
            sb.Append("  Dirty: ").Append(Dirty).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  TrainedAfterDocumentsNumber: ").Append(TrainedAfterDocumentsNumber).Append("\n");
            sb.Append("  HiddenAlways: ").Append(HiddenAlways).Append("\n");
            sb.Append("  HideUntilPython: ").Append(HideUntilPython).Append("\n");
            sb.Append("  HideUntilJs: ").Append(HideUntilJs).Append("\n");
            sb.Append("  IsValueDetectionStrategyDisabled: ").Append(IsValueDetectionStrategyDisabled).Append("\n");
            sb.Append("  DisplayYesNo: ").Append(DisplayYesNo).Append("\n");
            sb.Append("  ValueAware: ").Append(ValueAware).Append("\n");
            sb.Append("  CreatedByName: ").Append(CreatedByName).Append("\n");
            sb.Append("  ModifiedByName: ").Append(ModifiedByName).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  VectorizerStopWords: ").Append(VectorizerStopWords).Append("\n");
            sb.Append("  UnsureChoiceValue: ").Append(UnsureChoiceValue).Append("\n");
            sb.Append("  UnsureThresholdsByValue: ").Append(UnsureThresholdsByValue).Append("\n");
            sb.Append("  MlflowModelUri: ").Append(MlflowModelUri).Append("\n");
            sb.Append("  MlflowDetectOnDocumentLevel: ").Append(MlflowDetectOnDocumentLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentFieldList);
        }

        /// <summary>
        /// Returns true if DocumentFieldList instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentFieldList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentFieldList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.LongCode == input.LongCode ||
                    (this.LongCode != null &&
                    this.LongCode.Equals(input.LongCode))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TextUnitType == input.TextUnitType ||
                    (this.TextUnitType != null &&
                    this.TextUnitType.Equals(input.TextUnitType))
                ) && 
                (
                    this.ValueDetectionStrategy == input.ValueDetectionStrategy ||
                    (this.ValueDetectionStrategy != null &&
                    this.ValueDetectionStrategy.Equals(input.ValueDetectionStrategy))
                ) && 
                (
                    this.ClassifierInitScript == input.ClassifierInitScript ||
                    (this.ClassifierInitScript != null &&
                    this.ClassifierInitScript.Equals(input.ClassifierInitScript))
                ) && 
                (
                    this.Formula == input.Formula ||
                    (this.Formula != null &&
                    this.Formula.Equals(input.Formula))
                ) && 
                (
                    this.ConvertDecimalsToFloatsInFormulaArgs == input.ConvertDecimalsToFloatsInFormulaArgs ||
                    (this.ConvertDecimalsToFloatsInFormulaArgs != null &&
                    this.ConvertDecimalsToFloatsInFormulaArgs.Equals(input.ConvertDecimalsToFloatsInFormulaArgs))
                ) && 
                (
                    this.ValueRegexp == input.ValueRegexp ||
                    (this.ValueRegexp != null &&
                    this.ValueRegexp.Equals(input.ValueRegexp))
                ) && 
                (
                    this.DependsOnFields == input.DependsOnFields ||
                    this.DependsOnFields != null &&
                    input.DependsOnFields != null &&
                    this.DependsOnFields.SequenceEqual(input.DependsOnFields)
                ) && 
                (
                    this.ValueDetectionStrategyName == input.ValueDetectionStrategyName ||
                    (this.ValueDetectionStrategyName != null &&
                    this.ValueDetectionStrategyName.Equals(input.ValueDetectionStrategyName))
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    (this.Confidence != null &&
                    this.Confidence.Equals(input.Confidence))
                ) && 
                (
                    this.RequiresTextAnnotations == input.RequiresTextAnnotations ||
                    (this.RequiresTextAnnotations != null &&
                    this.RequiresTextAnnotations.Equals(input.RequiresTextAnnotations))
                ) && 
                (
                    this.ReadOnly == input.ReadOnly ||
                    (this.ReadOnly != null &&
                    this.ReadOnly.Equals(input.ReadOnly))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Family == input.Family ||
                    (this.Family != null &&
                    this.Family.Equals(input.Family))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.Choices == input.Choices ||
                    this.Choices != null &&
                    input.Choices != null &&
                    this.Choices.SequenceEqual(input.Choices)
                ) && 
                (
                    this.AllowValuesNotSpecifiedInChoices == input.AllowValuesNotSpecifiedInChoices ||
                    (this.AllowValuesNotSpecifiedInChoices != null &&
                    this.AllowValuesNotSpecifiedInChoices.Equals(input.AllowValuesNotSpecifiedInChoices))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.TrainingFinished == input.TrainingFinished ||
                    (this.TrainingFinished != null &&
                    this.TrainingFinished.Equals(input.TrainingFinished))
                ) && 
                (
                    this.Dirty == input.Dirty ||
                    (this.Dirty != null &&
                    this.Dirty.Equals(input.Dirty))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.TrainedAfterDocumentsNumber == input.TrainedAfterDocumentsNumber ||
                    (this.TrainedAfterDocumentsNumber != null &&
                    this.TrainedAfterDocumentsNumber.Equals(input.TrainedAfterDocumentsNumber))
                ) && 
                (
                    this.HiddenAlways == input.HiddenAlways ||
                    (this.HiddenAlways != null &&
                    this.HiddenAlways.Equals(input.HiddenAlways))
                ) && 
                (
                    this.HideUntilPython == input.HideUntilPython ||
                    (this.HideUntilPython != null &&
                    this.HideUntilPython.Equals(input.HideUntilPython))
                ) && 
                (
                    this.HideUntilJs == input.HideUntilJs ||
                    (this.HideUntilJs != null &&
                    this.HideUntilJs.Equals(input.HideUntilJs))
                ) && 
                (
                    this.IsValueDetectionStrategyDisabled == input.IsValueDetectionStrategyDisabled ||
                    (this.IsValueDetectionStrategyDisabled != null &&
                    this.IsValueDetectionStrategyDisabled.Equals(input.IsValueDetectionStrategyDisabled))
                ) && 
                (
                    this.DisplayYesNo == input.DisplayYesNo ||
                    (this.DisplayYesNo != null &&
                    this.DisplayYesNo.Equals(input.DisplayYesNo))
                ) && 
                (
                    this.ValueAware == input.ValueAware ||
                    (this.ValueAware != null &&
                    this.ValueAware.Equals(input.ValueAware))
                ) && 
                (
                    this.CreatedByName == input.CreatedByName ||
                    (this.CreatedByName != null &&
                    this.CreatedByName.Equals(input.CreatedByName))
                ) && 
                (
                    this.ModifiedByName == input.ModifiedByName ||
                    (this.ModifiedByName != null &&
                    this.ModifiedByName.Equals(input.ModifiedByName))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                ) && 
                (
                    this.VectorizerStopWords == input.VectorizerStopWords ||
                    (this.VectorizerStopWords != null &&
                    this.VectorizerStopWords.Equals(input.VectorizerStopWords))
                ) && 
                (
                    this.UnsureChoiceValue == input.UnsureChoiceValue ||
                    (this.UnsureChoiceValue != null &&
                    this.UnsureChoiceValue.Equals(input.UnsureChoiceValue))
                ) && 
                (
                    this.UnsureThresholdsByValue == input.UnsureThresholdsByValue ||
                    (this.UnsureThresholdsByValue != null &&
                    this.UnsureThresholdsByValue.Equals(input.UnsureThresholdsByValue))
                ) && 
                (
                    this.MlflowModelUri == input.MlflowModelUri ||
                    (this.MlflowModelUri != null &&
                    this.MlflowModelUri.Equals(input.MlflowModelUri))
                ) && 
                (
                    this.MlflowDetectOnDocumentLevel == input.MlflowDetectOnDocumentLevel ||
                    (this.MlflowDetectOnDocumentLevel != null &&
                    this.MlflowDetectOnDocumentLevel.Equals(input.MlflowDetectOnDocumentLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.LongCode != null)
                    hashCode = hashCode * 59 + this.LongCode.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TextUnitType != null)
                    hashCode = hashCode * 59 + this.TextUnitType.GetHashCode();
                if (this.ValueDetectionStrategy != null)
                    hashCode = hashCode * 59 + this.ValueDetectionStrategy.GetHashCode();
                if (this.ClassifierInitScript != null)
                    hashCode = hashCode * 59 + this.ClassifierInitScript.GetHashCode();
                if (this.Formula != null)
                    hashCode = hashCode * 59 + this.Formula.GetHashCode();
                if (this.ConvertDecimalsToFloatsInFormulaArgs != null)
                    hashCode = hashCode * 59 + this.ConvertDecimalsToFloatsInFormulaArgs.GetHashCode();
                if (this.ValueRegexp != null)
                    hashCode = hashCode * 59 + this.ValueRegexp.GetHashCode();
                if (this.DependsOnFields != null)
                    hashCode = hashCode * 59 + this.DependsOnFields.GetHashCode();
                if (this.ValueDetectionStrategyName != null)
                    hashCode = hashCode * 59 + this.ValueDetectionStrategyName.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.RequiresTextAnnotations != null)
                    hashCode = hashCode * 59 + this.RequiresTextAnnotations.GetHashCode();
                if (this.ReadOnly != null)
                    hashCode = hashCode * 59 + this.ReadOnly.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Family != null)
                    hashCode = hashCode * 59 + this.Family.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.Choices != null)
                    hashCode = hashCode * 59 + this.Choices.GetHashCode();
                if (this.AllowValuesNotSpecifiedInChoices != null)
                    hashCode = hashCode * 59 + this.AllowValuesNotSpecifiedInChoices.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.TrainingFinished != null)
                    hashCode = hashCode * 59 + this.TrainingFinished.GetHashCode();
                if (this.Dirty != null)
                    hashCode = hashCode * 59 + this.Dirty.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.TrainedAfterDocumentsNumber != null)
                    hashCode = hashCode * 59 + this.TrainedAfterDocumentsNumber.GetHashCode();
                if (this.HiddenAlways != null)
                    hashCode = hashCode * 59 + this.HiddenAlways.GetHashCode();
                if (this.HideUntilPython != null)
                    hashCode = hashCode * 59 + this.HideUntilPython.GetHashCode();
                if (this.HideUntilJs != null)
                    hashCode = hashCode * 59 + this.HideUntilJs.GetHashCode();
                if (this.IsValueDetectionStrategyDisabled != null)
                    hashCode = hashCode * 59 + this.IsValueDetectionStrategyDisabled.GetHashCode();
                if (this.DisplayYesNo != null)
                    hashCode = hashCode * 59 + this.DisplayYesNo.GetHashCode();
                if (this.ValueAware != null)
                    hashCode = hashCode * 59 + this.ValueAware.GetHashCode();
                if (this.CreatedByName != null)
                    hashCode = hashCode * 59 + this.CreatedByName.GetHashCode();
                if (this.ModifiedByName != null)
                    hashCode = hashCode * 59 + this.ModifiedByName.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.ModifiedDate != null)
                    hashCode = hashCode * 59 + this.ModifiedDate.GetHashCode();
                if (this.VectorizerStopWords != null)
                    hashCode = hashCode * 59 + this.VectorizerStopWords.GetHashCode();
                if (this.UnsureChoiceValue != null)
                    hashCode = hashCode * 59 + this.UnsureChoiceValue.GetHashCode();
                if (this.UnsureThresholdsByValue != null)
                    hashCode = hashCode * 59 + this.UnsureThresholdsByValue.GetHashCode();
                if (this.MlflowModelUri != null)
                    hashCode = hashCode * 59 + this.MlflowModelUri.GetHashCode();
                if (this.MlflowDetectOnDocumentLevel != null)
                    hashCode = hashCode * 59 + this.MlflowDetectOnDocumentLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if(this.Code != null && this.Code.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 50.", new [] { "Code" });
            }

 
            // LongCode (string) maxLength
            if(this.LongCode != null && this.LongCode.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LongCode, length must be less than 150.", new [] { "LongCode" });
            }

 
            // Title (string) maxLength
            if(this.Title != null && this.Title.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 100.", new [] { "Title" });
            }

 

 
            // Order (int) maximum
            if(this.Order > (int)32767)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value less than or equal to 32767.", new [] { "Order" });
            }

            // Order (int) minimum
            if(this.Order < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Order, must be a value greater than or equal to 0.", new [] { "Order" });
            }


 
            // TrainedAfterDocumentsNumber (int) maximum
            if(this.TrainedAfterDocumentsNumber > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrainedAfterDocumentsNumber, must be a value less than or equal to 2147483647.", new [] { "TrainedAfterDocumentsNumber" });
            }

            // TrainedAfterDocumentsNumber (int) minimum
            if(this.TrainedAfterDocumentsNumber < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrainedAfterDocumentsNumber, must be a value greater than or equal to 1.", new [] { "TrainedAfterDocumentsNumber" });
            }

            // UnsureChoiceValue (string) maxLength
            if(this.UnsureChoiceValue != null && this.UnsureChoiceValue.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnsureChoiceValue, length must be less than 256.", new [] { "UnsureChoiceValue" });
            }

 
            // MlflowModelUri (string) maxLength
            if(this.MlflowModelUri != null && this.MlflowModelUri.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MlflowModelUri, length must be less than 1024.", new [] { "MlflowModelUri" });
            }

 
            yield break;
        }
    }

}
