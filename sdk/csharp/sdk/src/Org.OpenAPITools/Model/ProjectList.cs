/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProjectList
    /// </summary>
    [DataContract]
    public partial class ProjectList :  IEquatable<ProjectList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectList" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="status">status.</param>
        /// <param name="statusData">statusData.</param>
        /// <param name="type">type.</param>
        /// <param name="typeData">typeData (required).</param>
        /// <param name="countOfDocuments">countOfDocuments (required).</param>
        public ProjectList(string name = default(string), int status = default(int), ProjectListStatusData statusData = default(ProjectListStatusData), string type = default(string), ProjectListTypeData typeData = default(ProjectListTypeData), int countOfDocuments = default(int))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ProjectList and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "typeData" is required (not null)
            if (typeData == null)
            {
                throw new InvalidDataException("typeData is a required property for ProjectList and cannot be null");
            }
            else
            {
                this.TypeData = typeData;
            }

            // to ensure "countOfDocuments" is required (not null)
            if (countOfDocuments == null)
            {
                throw new InvalidDataException("countOfDocuments is a required property for ProjectList and cannot be null");
            }
            else
            {
                this.CountOfDocuments = countOfDocuments;
            }

            this.Status = status;
            this.StatusData = statusData;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Pk
        /// </summary>
        [DataMember(Name="pk", EmitDefaultValue=false)]
        public int Pk { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusData
        /// </summary>
        [DataMember(Name="status_data", EmitDefaultValue=false)]
        public ProjectListStatusData StatusData { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets TypeData
        /// </summary>
        [DataMember(Name="type_data", EmitDefaultValue=true)]
        public ProjectListTypeData TypeData { get; set; }

        /// <summary>
        /// Gets or Sets CountOfDocuments
        /// </summary>
        [DataMember(Name="count_of_documents", EmitDefaultValue=true)]
        public int CountOfDocuments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectList {\n");
            sb.Append("  Pk: ").Append(Pk).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusData: ").Append(StatusData).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeData: ").Append(TypeData).Append("\n");
            sb.Append("  CountOfDocuments: ").Append(CountOfDocuments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectList);
        }

        /// <summary>
        /// Returns true if ProjectList instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pk == input.Pk ||
                    (this.Pk != null &&
                    this.Pk.Equals(input.Pk))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusData == input.StatusData ||
                    (this.StatusData != null &&
                    this.StatusData.Equals(input.StatusData))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeData == input.TypeData ||
                    (this.TypeData != null &&
                    this.TypeData.Equals(input.TypeData))
                ) && 
                (
                    this.CountOfDocuments == input.CountOfDocuments ||
                    (this.CountOfDocuments != null &&
                    this.CountOfDocuments.Equals(input.CountOfDocuments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pk != null)
                    hashCode = hashCode * 59 + this.Pk.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusData != null)
                    hashCode = hashCode * 59 + this.StatusData.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeData != null)
                    hashCode = hashCode * 59 + this.TypeData.GetHashCode();
                if (this.CountOfDocuments != null)
                    hashCode = hashCode * 59 + this.CountOfDocuments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

 
            yield break;
        }
    }

}
