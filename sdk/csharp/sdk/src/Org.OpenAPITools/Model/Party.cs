/* 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Party
    /// </summary>
    [DataContract]
    public partial class Party :  IEquatable<Party>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Party" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Party() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Party" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="type">type.</param>
        /// <param name="typeAbbr">typeAbbr (required).</param>
        /// <param name="typeLabel">typeLabel.</param>
        /// <param name="typeDescription">typeDescription.</param>
        /// <param name="description">description.</param>
        public Party(string name = default(string), string type = default(string), string typeAbbr = default(string), string typeLabel = default(string), string typeDescription = default(string), string description = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Party and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            this.Type = type;
            // to ensure "typeAbbr" is required (not null)
            if (typeAbbr == null)
            {
                throw new InvalidDataException("typeAbbr is a required property for Party and cannot be null");
            }
            else
            {
                this.TypeAbbr = typeAbbr;
            }
            
            this.TypeAbbr = typeAbbr;
            this.TypeLabel = typeLabel;
            this.TypeDescription = typeDescription;
            this.Description = description;
            this.Type = type;
            this.TypeLabel = typeLabel;
            this.TypeDescription = typeDescription;
            this.Description = description;
        }
        
        /// <summary>
        /// Gets or Sets Pk
        /// </summary>
        [DataMember(Name="pk", EmitDefaultValue=false)]
        public int Pk { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets TypeAbbr
        /// </summary>
        [DataMember(Name="type_abbr", EmitDefaultValue=true)]
        public string TypeAbbr { get; set; }

        /// <summary>
        /// Gets or Sets TypeLabel
        /// </summary>
        [DataMember(Name="type_label", EmitDefaultValue=true)]
        public string TypeLabel { get; set; }

        /// <summary>
        /// Gets or Sets TypeDescription
        /// </summary>
        [DataMember(Name="type_description", EmitDefaultValue=true)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Party {\n");
            sb.Append("  Pk: ").Append(Pk).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeAbbr: ").Append(TypeAbbr).Append("\n");
            sb.Append("  TypeLabel: ").Append(TypeLabel).Append("\n");
            sb.Append("  TypeDescription: ").Append(TypeDescription).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Party);
        }

        /// <summary>
        /// Returns true if Party instances are equal
        /// </summary>
        /// <param name="input">Instance of Party to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Party input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pk == input.Pk ||
                    (this.Pk != null &&
                    this.Pk.Equals(input.Pk))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeAbbr == input.TypeAbbr ||
                    (this.TypeAbbr != null &&
                    this.TypeAbbr.Equals(input.TypeAbbr))
                ) && 
                (
                    this.TypeLabel == input.TypeLabel ||
                    (this.TypeLabel != null &&
                    this.TypeLabel.Equals(input.TypeLabel))
                ) && 
                (
                    this.TypeDescription == input.TypeDescription ||
                    (this.TypeDescription != null &&
                    this.TypeDescription.Equals(input.TypeDescription))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pk != null)
                    hashCode = hashCode * 59 + this.Pk.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeAbbr != null)
                    hashCode = hashCode * 59 + this.TypeAbbr.GetHashCode();
                if (this.TypeLabel != null)
                    hashCode = hashCode * 59 + this.TypeLabel.GetHashCode();
                if (this.TypeDescription != null)
                    hashCode = hashCode * 59 + this.TypeDescription.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 1024.", new [] { "Name" });
            }

            
            // Type (string) maxLength
            if(this.Type != null && this.Type.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be less than 1024.", new [] { "Type" });
            }

            
            // TypeAbbr (string) maxLength
            if(this.TypeAbbr != null && this.TypeAbbr.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TypeAbbr, length must be less than 30.", new [] { "TypeAbbr" });
            }

            
            // TypeLabel (string) maxLength
            if(this.TypeLabel != null && this.TypeLabel.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TypeLabel, length must be less than 50.", new [] { "TypeLabel" });
            }

            
            // TypeDescription (string) maxLength
            if(this.TypeDescription != null && this.TypeDescription.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TypeDescription, length must be less than 50.", new [] { "TypeDescription" });
            }

            
            yield break;
        }
    }

}
