/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.188
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SocialAccountsResponseSocialAccounts
    /// </summary>
    [DataContract]
    public partial class SocialAccountsResponseSocialAccounts :  IEquatable<SocialAccountsResponseSocialAccounts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SocialAccountsResponseSocialAccounts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SocialAccountsResponseSocialAccounts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SocialAccountsResponseSocialAccounts" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="provider">provider (required).</param>
        /// <param name="loginUrl">loginUrl (required).</param>
        public SocialAccountsResponseSocialAccounts(string name = default(string), string provider = default(string), string loginUrl = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for SocialAccountsResponseSocialAccounts and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new InvalidDataException("provider is a required property for SocialAccountsResponseSocialAccounts and cannot be null");
            }
            else
            {
                this.Provider = provider;
            }

            // to ensure "loginUrl" is required (not null)
            if (loginUrl == null)
            {
                throw new InvalidDataException("loginUrl is a required property for SocialAccountsResponseSocialAccounts and cannot be null");
            }
            else
            {
                this.LoginUrl = loginUrl;
            }

        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="provider", EmitDefaultValue=true)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets LoginUrl
        /// </summary>
        [DataMember(Name="login_url", EmitDefaultValue=true)]
        public string LoginUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SocialAccountsResponseSocialAccounts {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  LoginUrl: ").Append(LoginUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SocialAccountsResponseSocialAccounts);
        }

        /// <summary>
        /// Returns true if SocialAccountsResponseSocialAccounts instances are equal
        /// </summary>
        /// <param name="input">Instance of SocialAccountsResponseSocialAccounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SocialAccountsResponseSocialAccounts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.LoginUrl == input.LoginUrl ||
                    (this.LoginUrl != null &&
                    this.LoginUrl.Equals(input.LoginUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.LoginUrl != null)
                    hashCode = hashCode * 59 + this.LoginUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
