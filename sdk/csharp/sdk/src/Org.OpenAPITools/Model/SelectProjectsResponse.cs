/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SelectProjectsResponse
    /// </summary>
    [DataContract]
    public partial class SelectProjectsResponse :  IEquatable<SelectProjectsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SelectProjectsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SelectProjectsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SelectProjectsResponse" /> class.
        /// </summary>
        /// <param name="savedFilterId">savedFilterId (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="projectIds">projectIds (required).</param>
        /// <param name="showWarning">showWarning (required).</param>
        public SelectProjectsResponse(int savedFilterId = default(int), int userId = default(int), List<int> projectIds = default(List<int>), bool showWarning = default(bool))
        {
            // to ensure "savedFilterId" is required (not null)
            if (savedFilterId == null)
            {
                throw new InvalidDataException("savedFilterId is a required property for SelectProjectsResponse and cannot be null");
            }
            else
            {
                this.SavedFilterId = savedFilterId;
            }

            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for SelectProjectsResponse and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }

            // to ensure "projectIds" is required (not null)
            if (projectIds == null)
            {
                throw new InvalidDataException("projectIds is a required property for SelectProjectsResponse and cannot be null");
            }
            else
            {
                this.ProjectIds = projectIds;
            }

            // to ensure "showWarning" is required (not null)
            if (showWarning == null)
            {
                throw new InvalidDataException("showWarning is a required property for SelectProjectsResponse and cannot be null");
            }
            else
            {
                this.ShowWarning = showWarning;
            }

        }

        /// <summary>
        /// Gets or Sets SavedFilterId
        /// </summary>
        [DataMember(Name="saved_filter_id", EmitDefaultValue=true)]
        public int SavedFilterId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=true)]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectIds
        /// </summary>
        [DataMember(Name="project_ids", EmitDefaultValue=true)]
        public List<int> ProjectIds { get; set; }

        /// <summary>
        /// Gets or Sets ShowWarning
        /// </summary>
        [DataMember(Name="show_warning", EmitDefaultValue=true)]
        public bool ShowWarning { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SelectProjectsResponse {\n");
            sb.Append("  SavedFilterId: ").Append(SavedFilterId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ProjectIds: ").Append(ProjectIds).Append("\n");
            sb.Append("  ShowWarning: ").Append(ShowWarning).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SelectProjectsResponse);
        }

        /// <summary>
        /// Returns true if SelectProjectsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SelectProjectsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SelectProjectsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SavedFilterId == input.SavedFilterId ||
                    (this.SavedFilterId != null &&
                    this.SavedFilterId.Equals(input.SavedFilterId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ProjectIds == input.ProjectIds ||
                    this.ProjectIds != null &&
                    input.ProjectIds != null &&
                    this.ProjectIds.SequenceEqual(input.ProjectIds)
                ) && 
                (
                    this.ShowWarning == input.ShowWarning ||
                    (this.ShowWarning != null &&
                    this.ShowWarning.Equals(input.ShowWarning))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SavedFilterId != null)
                    hashCode = hashCode * 59 + this.SavedFilterId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.ProjectIds != null)
                    hashCode = hashCode * 59 + this.ProjectIds.GetHashCode();
                if (this.ShowWarning != null)
                    hashCode = hashCode * 59 + this.ShowWarning.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
