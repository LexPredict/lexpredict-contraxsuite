/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProjectDocumentSimilarityResponse
    /// </summary>
    [DataContract]
    public partial class ProjectDocumentSimilarityResponse :  IEquatable<ProjectDocumentSimilarityResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectDocumentSimilarityResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectDocumentSimilarityResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectDocumentSimilarityResponse" /> class.
        /// </summary>
        /// <param name="data">data (required).</param>
        /// <param name="documentAId">documentAId.</param>
        /// <param name="documentAName">documentAName.</param>
        /// <param name="totalRecords">totalRecords.</param>
        public ProjectDocumentSimilarityResponse(List<ProjectDocumentSimilarityResponseDataInner> data = default(List<ProjectDocumentSimilarityResponseDataInner>), int? documentAId = default(int?), string documentAName = default(string), int totalRecords = default(int))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for ProjectDocumentSimilarityResponse and cannot be null");
            }
            else
            {
                this.Data = data;
            }

            this.DocumentAId = documentAId;
            this.DocumentAName = documentAName;
            this.DocumentAId = documentAId;
            this.DocumentAName = documentAName;
            this.TotalRecords = totalRecords;
        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=true)]
        public List<ProjectDocumentSimilarityResponseDataInner> Data { get; set; }

        /// <summary>
        /// Gets or Sets DocumentAId
        /// </summary>
        [DataMember(Name="document_a_id", EmitDefaultValue=true)]
        public int? DocumentAId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentAName
        /// </summary>
        [DataMember(Name="document_a_name", EmitDefaultValue=true)]
        public string DocumentAName { get; set; }

        /// <summary>
        /// Gets or Sets TotalRecords
        /// </summary>
        [DataMember(Name="total_records", EmitDefaultValue=false)]
        public int TotalRecords { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectDocumentSimilarityResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DocumentAId: ").Append(DocumentAId).Append("\n");
            sb.Append("  DocumentAName: ").Append(DocumentAName).Append("\n");
            sb.Append("  TotalRecords: ").Append(TotalRecords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectDocumentSimilarityResponse);
        }

        /// <summary>
        /// Returns true if ProjectDocumentSimilarityResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectDocumentSimilarityResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectDocumentSimilarityResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.DocumentAId == input.DocumentAId ||
                    (this.DocumentAId != null &&
                    this.DocumentAId.Equals(input.DocumentAId))
                ) && 
                (
                    this.DocumentAName == input.DocumentAName ||
                    (this.DocumentAName != null &&
                    this.DocumentAName.Equals(input.DocumentAName))
                ) && 
                (
                    this.TotalRecords == input.TotalRecords ||
                    (this.TotalRecords != null &&
                    this.TotalRecords.Equals(input.TotalRecords))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.DocumentAId != null)
                    hashCode = hashCode * 59 + this.DocumentAId.GetHashCode();
                if (this.DocumentAName != null)
                    hashCode = hashCode * 59 + this.DocumentAName.GetHashCode();
                if (this.TotalRecords != null)
                    hashCode = hashCode * 59 + this.TotalRecords.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
