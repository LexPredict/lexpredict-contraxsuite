/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.188
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentTypeStats
    /// </summary>
    [DataContract]
    public partial class DocumentTypeStats :  IEquatable<DocumentTypeStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTypeStats" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentTypeStats() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTypeStats" /> class.
        /// </summary>
        /// <param name="data">data (required).</param>
        /// <param name="countOfItems">countOfItems (required).</param>
        /// <param name="countOfFilteredItems">countOfFilteredItems (required).</param>
        public DocumentTypeStats(DocumentTypeStatsData data = default(DocumentTypeStatsData), int countOfItems = default(int), int countOfFilteredItems = default(int))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for DocumentTypeStats and cannot be null");
            }
            else
            {
                this.Data = data;
            }

            // to ensure "countOfItems" is required (not null)
            if (countOfItems == null)
            {
                throw new InvalidDataException("countOfItems is a required property for DocumentTypeStats and cannot be null");
            }
            else
            {
                this.CountOfItems = countOfItems;
            }

            // to ensure "countOfFilteredItems" is required (not null)
            if (countOfFilteredItems == null)
            {
                throw new InvalidDataException("countOfFilteredItems is a required property for DocumentTypeStats and cannot be null");
            }
            else
            {
                this.CountOfFilteredItems = countOfFilteredItems;
            }

        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=true)]
        public DocumentTypeStatsData Data { get; set; }

        /// <summary>
        /// Gets or Sets CountOfItems
        /// </summary>
        [DataMember(Name="count_of_items", EmitDefaultValue=true)]
        public int CountOfItems { get; set; }

        /// <summary>
        /// Gets or Sets CountOfFilteredItems
        /// </summary>
        [DataMember(Name="count_of_filtered_items", EmitDefaultValue=true)]
        public int CountOfFilteredItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentTypeStats {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  CountOfItems: ").Append(CountOfItems).Append("\n");
            sb.Append("  CountOfFilteredItems: ").Append(CountOfFilteredItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentTypeStats);
        }

        /// <summary>
        /// Returns true if DocumentTypeStats instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentTypeStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentTypeStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.CountOfItems == input.CountOfItems ||
                    (this.CountOfItems != null &&
                    this.CountOfItems.Equals(input.CountOfItems))
                ) && 
                (
                    this.CountOfFilteredItems == input.CountOfFilteredItems ||
                    (this.CountOfFilteredItems != null &&
                    this.CountOfFilteredItems.Equals(input.CountOfFilteredItems))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.CountOfItems != null)
                    hashCode = hashCode * 59 + this.CountOfItems.GetHashCode();
                if (this.CountOfFilteredItems != null)
                    hashCode = hashCode * 59 + this.CountOfFilteredItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
