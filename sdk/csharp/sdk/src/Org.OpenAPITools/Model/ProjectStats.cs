/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProjectStats
    /// </summary>
    [DataContract]
    public partial class ProjectStats :  IEquatable<ProjectStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectStats" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectStats() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectStats" /> class.
        /// </summary>
        /// <param name="projectId">projectId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="typeTitle">typeTitle (required).</param>
        /// <param name="documentsTotal">documentsTotal (required).</param>
        /// <param name="clausesTotal">clausesTotal (required).</param>
        /// <param name="avgOcrGrade">avgOcrGrade (required).</param>
        /// <param name="documentStatusNotStarted">documentStatusNotStarted (required).</param>
        /// <param name="documentStatusNotStartedPcnt">documentStatusNotStartedPcnt (required).</param>
        /// <param name="documentStatusInReview">documentStatusInReview (required).</param>
        /// <param name="documentStatusInReviewPcnt">documentStatusInReviewPcnt (required).</param>
        /// <param name="documentStatusAwaitingQa">documentStatusAwaitingQa (required).</param>
        /// <param name="documentStatusAwaitingQaPcnt">documentStatusAwaitingQaPcnt (required).</param>
        /// <param name="documentStatusCompleted">documentStatusCompleted (required).</param>
        /// <param name="documentStatusCompletedPcnt">documentStatusCompletedPcnt (required).</param>
        /// <param name="documentStatusExcluded">documentStatusExcluded (required).</param>
        /// <param name="documentStatusExcludedPcnt">documentStatusExcludedPcnt (required).</param>
        /// <param name="clauseStatusUnreviewed">clauseStatusUnreviewed (required).</param>
        /// <param name="clauseStatusUnreviewedPcnt">clauseStatusUnreviewedPcnt (required).</param>
        /// <param name="clauseStatusAccepted">clauseStatusAccepted (required).</param>
        /// <param name="clauseStatusAcceptedPcnt">clauseStatusAcceptedPcnt (required).</param>
        /// <param name="clauseStatusRejected">clauseStatusRejected (required).</param>
        /// <param name="clauseStatusRejectedPcnt">clauseStatusRejectedPcnt (required).</param>
        public ProjectStats(int projectId = default(int), string name = default(string), string typeTitle = default(string), int documentsTotal = default(int), int clausesTotal = default(int), int? avgOcrGrade = default(int?), int documentStatusNotStarted = default(int), decimal documentStatusNotStartedPcnt = default(decimal), int documentStatusInReview = default(int), decimal documentStatusInReviewPcnt = default(decimal), int documentStatusAwaitingQa = default(int), decimal documentStatusAwaitingQaPcnt = default(decimal), int documentStatusCompleted = default(int), decimal documentStatusCompletedPcnt = default(decimal), int documentStatusExcluded = default(int), decimal documentStatusExcludedPcnt = default(decimal), int clauseStatusUnreviewed = default(int), decimal clauseStatusUnreviewedPcnt = default(decimal), int clauseStatusAccepted = default(int), decimal clauseStatusAcceptedPcnt = default(decimal), int clauseStatusRejected = default(int), decimal clauseStatusRejectedPcnt = default(decimal))
        {
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new InvalidDataException("projectId is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.ProjectId = projectId;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "typeTitle" is required (not null)
            if (typeTitle == null)
            {
                throw new InvalidDataException("typeTitle is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.TypeTitle = typeTitle;
            }

            // to ensure "documentsTotal" is required (not null)
            if (documentsTotal == null)
            {
                throw new InvalidDataException("documentsTotal is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.DocumentsTotal = documentsTotal;
            }

            // to ensure "clausesTotal" is required (not null)
            if (clausesTotal == null)
            {
                throw new InvalidDataException("clausesTotal is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.ClausesTotal = clausesTotal;
            }

            // to ensure "avgOcrGrade" is required (not null)
            if (avgOcrGrade == null)
            {
                throw new InvalidDataException("avgOcrGrade is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.AvgOcrGrade = avgOcrGrade;
            }

            this.AvgOcrGrade = avgOcrGrade;
            // to ensure "documentStatusNotStarted" is required (not null)
            if (documentStatusNotStarted == null)
            {
                throw new InvalidDataException("documentStatusNotStarted is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.DocumentStatusNotStarted = documentStatusNotStarted;
            }

            // to ensure "documentStatusNotStartedPcnt" is required (not null)
            if (documentStatusNotStartedPcnt == null)
            {
                throw new InvalidDataException("documentStatusNotStartedPcnt is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.DocumentStatusNotStartedPcnt = documentStatusNotStartedPcnt;
            }

            // to ensure "documentStatusInReview" is required (not null)
            if (documentStatusInReview == null)
            {
                throw new InvalidDataException("documentStatusInReview is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.DocumentStatusInReview = documentStatusInReview;
            }

            // to ensure "documentStatusInReviewPcnt" is required (not null)
            if (documentStatusInReviewPcnt == null)
            {
                throw new InvalidDataException("documentStatusInReviewPcnt is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.DocumentStatusInReviewPcnt = documentStatusInReviewPcnt;
            }

            // to ensure "documentStatusAwaitingQa" is required (not null)
            if (documentStatusAwaitingQa == null)
            {
                throw new InvalidDataException("documentStatusAwaitingQa is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.DocumentStatusAwaitingQa = documentStatusAwaitingQa;
            }

            // to ensure "documentStatusAwaitingQaPcnt" is required (not null)
            if (documentStatusAwaitingQaPcnt == null)
            {
                throw new InvalidDataException("documentStatusAwaitingQaPcnt is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.DocumentStatusAwaitingQaPcnt = documentStatusAwaitingQaPcnt;
            }

            // to ensure "documentStatusCompleted" is required (not null)
            if (documentStatusCompleted == null)
            {
                throw new InvalidDataException("documentStatusCompleted is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.DocumentStatusCompleted = documentStatusCompleted;
            }

            // to ensure "documentStatusCompletedPcnt" is required (not null)
            if (documentStatusCompletedPcnt == null)
            {
                throw new InvalidDataException("documentStatusCompletedPcnt is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.DocumentStatusCompletedPcnt = documentStatusCompletedPcnt;
            }

            // to ensure "documentStatusExcluded" is required (not null)
            if (documentStatusExcluded == null)
            {
                throw new InvalidDataException("documentStatusExcluded is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.DocumentStatusExcluded = documentStatusExcluded;
            }

            // to ensure "documentStatusExcludedPcnt" is required (not null)
            if (documentStatusExcludedPcnt == null)
            {
                throw new InvalidDataException("documentStatusExcludedPcnt is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.DocumentStatusExcludedPcnt = documentStatusExcludedPcnt;
            }

            // to ensure "clauseStatusUnreviewed" is required (not null)
            if (clauseStatusUnreviewed == null)
            {
                throw new InvalidDataException("clauseStatusUnreviewed is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.ClauseStatusUnreviewed = clauseStatusUnreviewed;
            }

            // to ensure "clauseStatusUnreviewedPcnt" is required (not null)
            if (clauseStatusUnreviewedPcnt == null)
            {
                throw new InvalidDataException("clauseStatusUnreviewedPcnt is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.ClauseStatusUnreviewedPcnt = clauseStatusUnreviewedPcnt;
            }

            // to ensure "clauseStatusAccepted" is required (not null)
            if (clauseStatusAccepted == null)
            {
                throw new InvalidDataException("clauseStatusAccepted is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.ClauseStatusAccepted = clauseStatusAccepted;
            }

            // to ensure "clauseStatusAcceptedPcnt" is required (not null)
            if (clauseStatusAcceptedPcnt == null)
            {
                throw new InvalidDataException("clauseStatusAcceptedPcnt is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.ClauseStatusAcceptedPcnt = clauseStatusAcceptedPcnt;
            }

            // to ensure "clauseStatusRejected" is required (not null)
            if (clauseStatusRejected == null)
            {
                throw new InvalidDataException("clauseStatusRejected is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.ClauseStatusRejected = clauseStatusRejected;
            }

            // to ensure "clauseStatusRejectedPcnt" is required (not null)
            if (clauseStatusRejectedPcnt == null)
            {
                throw new InvalidDataException("clauseStatusRejectedPcnt is a required property for ProjectStats and cannot be null");
            }
            else
            {
                this.ClauseStatusRejectedPcnt = clauseStatusRejectedPcnt;
            }

        }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="project_id", EmitDefaultValue=true)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TypeTitle
        /// </summary>
        [DataMember(Name="type_title", EmitDefaultValue=true)]
        public string TypeTitle { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsTotal
        /// </summary>
        [DataMember(Name="documents_total", EmitDefaultValue=true)]
        public int DocumentsTotal { get; set; }

        /// <summary>
        /// Gets or Sets ClausesTotal
        /// </summary>
        [DataMember(Name="clauses_total", EmitDefaultValue=true)]
        public int ClausesTotal { get; set; }

        /// <summary>
        /// Gets or Sets AvgOcrGrade
        /// </summary>
        [DataMember(Name="avg_ocr_grade", EmitDefaultValue=true)]
        public int? AvgOcrGrade { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStatusNotStarted
        /// </summary>
        [DataMember(Name="document_status_not_started", EmitDefaultValue=true)]
        public int DocumentStatusNotStarted { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStatusNotStartedPcnt
        /// </summary>
        [DataMember(Name="document_status_not_started_pcnt", EmitDefaultValue=true)]
        public decimal DocumentStatusNotStartedPcnt { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStatusInReview
        /// </summary>
        [DataMember(Name="document_status_in_review", EmitDefaultValue=true)]
        public int DocumentStatusInReview { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStatusInReviewPcnt
        /// </summary>
        [DataMember(Name="document_status_in_review_pcnt", EmitDefaultValue=true)]
        public decimal DocumentStatusInReviewPcnt { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStatusAwaitingQa
        /// </summary>
        [DataMember(Name="document_status_awaiting_qa", EmitDefaultValue=true)]
        public int DocumentStatusAwaitingQa { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStatusAwaitingQaPcnt
        /// </summary>
        [DataMember(Name="document_status_awaiting_qa_pcnt", EmitDefaultValue=true)]
        public decimal DocumentStatusAwaitingQaPcnt { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStatusCompleted
        /// </summary>
        [DataMember(Name="document_status_completed", EmitDefaultValue=true)]
        public int DocumentStatusCompleted { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStatusCompletedPcnt
        /// </summary>
        [DataMember(Name="document_status_completed_pcnt", EmitDefaultValue=true)]
        public decimal DocumentStatusCompletedPcnt { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStatusExcluded
        /// </summary>
        [DataMember(Name="document_status_excluded", EmitDefaultValue=true)]
        public int DocumentStatusExcluded { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStatusExcludedPcnt
        /// </summary>
        [DataMember(Name="document_status_excluded_pcnt", EmitDefaultValue=true)]
        public decimal DocumentStatusExcludedPcnt { get; set; }

        /// <summary>
        /// Gets or Sets ClauseStatusUnreviewed
        /// </summary>
        [DataMember(Name="clause_status_unreviewed", EmitDefaultValue=true)]
        public int ClauseStatusUnreviewed { get; set; }

        /// <summary>
        /// Gets or Sets ClauseStatusUnreviewedPcnt
        /// </summary>
        [DataMember(Name="clause_status_unreviewed_pcnt", EmitDefaultValue=true)]
        public decimal ClauseStatusUnreviewedPcnt { get; set; }

        /// <summary>
        /// Gets or Sets ClauseStatusAccepted
        /// </summary>
        [DataMember(Name="clause_status_accepted", EmitDefaultValue=true)]
        public int ClauseStatusAccepted { get; set; }

        /// <summary>
        /// Gets or Sets ClauseStatusAcceptedPcnt
        /// </summary>
        [DataMember(Name="clause_status_accepted_pcnt", EmitDefaultValue=true)]
        public decimal ClauseStatusAcceptedPcnt { get; set; }

        /// <summary>
        /// Gets or Sets ClauseStatusRejected
        /// </summary>
        [DataMember(Name="clause_status_rejected", EmitDefaultValue=true)]
        public int ClauseStatusRejected { get; set; }

        /// <summary>
        /// Gets or Sets ClauseStatusRejectedPcnt
        /// </summary>
        [DataMember(Name="clause_status_rejected_pcnt", EmitDefaultValue=true)]
        public decimal ClauseStatusRejectedPcnt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectStats {\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TypeTitle: ").Append(TypeTitle).Append("\n");
            sb.Append("  DocumentsTotal: ").Append(DocumentsTotal).Append("\n");
            sb.Append("  ClausesTotal: ").Append(ClausesTotal).Append("\n");
            sb.Append("  AvgOcrGrade: ").Append(AvgOcrGrade).Append("\n");
            sb.Append("  DocumentStatusNotStarted: ").Append(DocumentStatusNotStarted).Append("\n");
            sb.Append("  DocumentStatusNotStartedPcnt: ").Append(DocumentStatusNotStartedPcnt).Append("\n");
            sb.Append("  DocumentStatusInReview: ").Append(DocumentStatusInReview).Append("\n");
            sb.Append("  DocumentStatusInReviewPcnt: ").Append(DocumentStatusInReviewPcnt).Append("\n");
            sb.Append("  DocumentStatusAwaitingQa: ").Append(DocumentStatusAwaitingQa).Append("\n");
            sb.Append("  DocumentStatusAwaitingQaPcnt: ").Append(DocumentStatusAwaitingQaPcnt).Append("\n");
            sb.Append("  DocumentStatusCompleted: ").Append(DocumentStatusCompleted).Append("\n");
            sb.Append("  DocumentStatusCompletedPcnt: ").Append(DocumentStatusCompletedPcnt).Append("\n");
            sb.Append("  DocumentStatusExcluded: ").Append(DocumentStatusExcluded).Append("\n");
            sb.Append("  DocumentStatusExcludedPcnt: ").Append(DocumentStatusExcludedPcnt).Append("\n");
            sb.Append("  ClauseStatusUnreviewed: ").Append(ClauseStatusUnreviewed).Append("\n");
            sb.Append("  ClauseStatusUnreviewedPcnt: ").Append(ClauseStatusUnreviewedPcnt).Append("\n");
            sb.Append("  ClauseStatusAccepted: ").Append(ClauseStatusAccepted).Append("\n");
            sb.Append("  ClauseStatusAcceptedPcnt: ").Append(ClauseStatusAcceptedPcnt).Append("\n");
            sb.Append("  ClauseStatusRejected: ").Append(ClauseStatusRejected).Append("\n");
            sb.Append("  ClauseStatusRejectedPcnt: ").Append(ClauseStatusRejectedPcnt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectStats);
        }

        /// <summary>
        /// Returns true if ProjectStats instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TypeTitle == input.TypeTitle ||
                    (this.TypeTitle != null &&
                    this.TypeTitle.Equals(input.TypeTitle))
                ) && 
                (
                    this.DocumentsTotal == input.DocumentsTotal ||
                    (this.DocumentsTotal != null &&
                    this.DocumentsTotal.Equals(input.DocumentsTotal))
                ) && 
                (
                    this.ClausesTotal == input.ClausesTotal ||
                    (this.ClausesTotal != null &&
                    this.ClausesTotal.Equals(input.ClausesTotal))
                ) && 
                (
                    this.AvgOcrGrade == input.AvgOcrGrade ||
                    (this.AvgOcrGrade != null &&
                    this.AvgOcrGrade.Equals(input.AvgOcrGrade))
                ) && 
                (
                    this.DocumentStatusNotStarted == input.DocumentStatusNotStarted ||
                    (this.DocumentStatusNotStarted != null &&
                    this.DocumentStatusNotStarted.Equals(input.DocumentStatusNotStarted))
                ) && 
                (
                    this.DocumentStatusNotStartedPcnt == input.DocumentStatusNotStartedPcnt ||
                    (this.DocumentStatusNotStartedPcnt != null &&
                    this.DocumentStatusNotStartedPcnt.Equals(input.DocumentStatusNotStartedPcnt))
                ) && 
                (
                    this.DocumentStatusInReview == input.DocumentStatusInReview ||
                    (this.DocumentStatusInReview != null &&
                    this.DocumentStatusInReview.Equals(input.DocumentStatusInReview))
                ) && 
                (
                    this.DocumentStatusInReviewPcnt == input.DocumentStatusInReviewPcnt ||
                    (this.DocumentStatusInReviewPcnt != null &&
                    this.DocumentStatusInReviewPcnt.Equals(input.DocumentStatusInReviewPcnt))
                ) && 
                (
                    this.DocumentStatusAwaitingQa == input.DocumentStatusAwaitingQa ||
                    (this.DocumentStatusAwaitingQa != null &&
                    this.DocumentStatusAwaitingQa.Equals(input.DocumentStatusAwaitingQa))
                ) && 
                (
                    this.DocumentStatusAwaitingQaPcnt == input.DocumentStatusAwaitingQaPcnt ||
                    (this.DocumentStatusAwaitingQaPcnt != null &&
                    this.DocumentStatusAwaitingQaPcnt.Equals(input.DocumentStatusAwaitingQaPcnt))
                ) && 
                (
                    this.DocumentStatusCompleted == input.DocumentStatusCompleted ||
                    (this.DocumentStatusCompleted != null &&
                    this.DocumentStatusCompleted.Equals(input.DocumentStatusCompleted))
                ) && 
                (
                    this.DocumentStatusCompletedPcnt == input.DocumentStatusCompletedPcnt ||
                    (this.DocumentStatusCompletedPcnt != null &&
                    this.DocumentStatusCompletedPcnt.Equals(input.DocumentStatusCompletedPcnt))
                ) && 
                (
                    this.DocumentStatusExcluded == input.DocumentStatusExcluded ||
                    (this.DocumentStatusExcluded != null &&
                    this.DocumentStatusExcluded.Equals(input.DocumentStatusExcluded))
                ) && 
                (
                    this.DocumentStatusExcludedPcnt == input.DocumentStatusExcludedPcnt ||
                    (this.DocumentStatusExcludedPcnt != null &&
                    this.DocumentStatusExcludedPcnt.Equals(input.DocumentStatusExcludedPcnt))
                ) && 
                (
                    this.ClauseStatusUnreviewed == input.ClauseStatusUnreviewed ||
                    (this.ClauseStatusUnreviewed != null &&
                    this.ClauseStatusUnreviewed.Equals(input.ClauseStatusUnreviewed))
                ) && 
                (
                    this.ClauseStatusUnreviewedPcnt == input.ClauseStatusUnreviewedPcnt ||
                    (this.ClauseStatusUnreviewedPcnt != null &&
                    this.ClauseStatusUnreviewedPcnt.Equals(input.ClauseStatusUnreviewedPcnt))
                ) && 
                (
                    this.ClauseStatusAccepted == input.ClauseStatusAccepted ||
                    (this.ClauseStatusAccepted != null &&
                    this.ClauseStatusAccepted.Equals(input.ClauseStatusAccepted))
                ) && 
                (
                    this.ClauseStatusAcceptedPcnt == input.ClauseStatusAcceptedPcnt ||
                    (this.ClauseStatusAcceptedPcnt != null &&
                    this.ClauseStatusAcceptedPcnt.Equals(input.ClauseStatusAcceptedPcnt))
                ) && 
                (
                    this.ClauseStatusRejected == input.ClauseStatusRejected ||
                    (this.ClauseStatusRejected != null &&
                    this.ClauseStatusRejected.Equals(input.ClauseStatusRejected))
                ) && 
                (
                    this.ClauseStatusRejectedPcnt == input.ClauseStatusRejectedPcnt ||
                    (this.ClauseStatusRejectedPcnt != null &&
                    this.ClauseStatusRejectedPcnt.Equals(input.ClauseStatusRejectedPcnt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TypeTitle != null)
                    hashCode = hashCode * 59 + this.TypeTitle.GetHashCode();
                if (this.DocumentsTotal != null)
                    hashCode = hashCode * 59 + this.DocumentsTotal.GetHashCode();
                if (this.ClausesTotal != null)
                    hashCode = hashCode * 59 + this.ClausesTotal.GetHashCode();
                if (this.AvgOcrGrade != null)
                    hashCode = hashCode * 59 + this.AvgOcrGrade.GetHashCode();
                if (this.DocumentStatusNotStarted != null)
                    hashCode = hashCode * 59 + this.DocumentStatusNotStarted.GetHashCode();
                if (this.DocumentStatusNotStartedPcnt != null)
                    hashCode = hashCode * 59 + this.DocumentStatusNotStartedPcnt.GetHashCode();
                if (this.DocumentStatusInReview != null)
                    hashCode = hashCode * 59 + this.DocumentStatusInReview.GetHashCode();
                if (this.DocumentStatusInReviewPcnt != null)
                    hashCode = hashCode * 59 + this.DocumentStatusInReviewPcnt.GetHashCode();
                if (this.DocumentStatusAwaitingQa != null)
                    hashCode = hashCode * 59 + this.DocumentStatusAwaitingQa.GetHashCode();
                if (this.DocumentStatusAwaitingQaPcnt != null)
                    hashCode = hashCode * 59 + this.DocumentStatusAwaitingQaPcnt.GetHashCode();
                if (this.DocumentStatusCompleted != null)
                    hashCode = hashCode * 59 + this.DocumentStatusCompleted.GetHashCode();
                if (this.DocumentStatusCompletedPcnt != null)
                    hashCode = hashCode * 59 + this.DocumentStatusCompletedPcnt.GetHashCode();
                if (this.DocumentStatusExcluded != null)
                    hashCode = hashCode * 59 + this.DocumentStatusExcluded.GetHashCode();
                if (this.DocumentStatusExcludedPcnt != null)
                    hashCode = hashCode * 59 + this.DocumentStatusExcludedPcnt.GetHashCode();
                if (this.ClauseStatusUnreviewed != null)
                    hashCode = hashCode * 59 + this.ClauseStatusUnreviewed.GetHashCode();
                if (this.ClauseStatusUnreviewedPcnt != null)
                    hashCode = hashCode * 59 + this.ClauseStatusUnreviewedPcnt.GetHashCode();
                if (this.ClauseStatusAccepted != null)
                    hashCode = hashCode * 59 + this.ClauseStatusAccepted.GetHashCode();
                if (this.ClauseStatusAcceptedPcnt != null)
                    hashCode = hashCode * 59 + this.ClauseStatusAcceptedPcnt.GetHashCode();
                if (this.ClauseStatusRejected != null)
                    hashCode = hashCode * 59 + this.ClauseStatusRejected.GetHashCode();
                if (this.ClauseStatusRejectedPcnt != null)
                    hashCode = hashCode * 59 + this.ClauseStatusRejectedPcnt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
