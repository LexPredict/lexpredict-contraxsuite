/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UpdateProjectDocumentsFieldsResponse
    /// </summary>
    [DataContract]
    public partial class UpdateProjectDocumentsFieldsResponse :  IEquatable<UpdateProjectDocumentsFieldsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProjectDocumentsFieldsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateProjectDocumentsFieldsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProjectDocumentsFieldsResponse" /> class.
        /// </summary>
        /// <param name="taskId">taskId (required).</param>
        /// <param name="inactiveDocumentIds">inactiveDocumentIds (required).</param>
        /// <param name="inactiveDocumentNames">inactiveDocumentNames (required).</param>
        public UpdateProjectDocumentsFieldsResponse(Guid taskId = default(Guid), List<int> inactiveDocumentIds = default(List<int>), List<string> inactiveDocumentNames = default(List<string>))
        {
            // to ensure "taskId" is required (not null)
            if (taskId == null)
            {
                throw new InvalidDataException("taskId is a required property for UpdateProjectDocumentsFieldsResponse and cannot be null");
            }
            else
            {
                this.TaskId = taskId;
            }

            // to ensure "inactiveDocumentIds" is required (not null)
            if (inactiveDocumentIds == null)
            {
                throw new InvalidDataException("inactiveDocumentIds is a required property for UpdateProjectDocumentsFieldsResponse and cannot be null");
            }
            else
            {
                this.InactiveDocumentIds = inactiveDocumentIds;
            }

            // to ensure "inactiveDocumentNames" is required (not null)
            if (inactiveDocumentNames == null)
            {
                throw new InvalidDataException("inactiveDocumentNames is a required property for UpdateProjectDocumentsFieldsResponse and cannot be null");
            }
            else
            {
                this.InactiveDocumentNames = inactiveDocumentNames;
            }

        }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name="task_id", EmitDefaultValue=true)]
        public Guid TaskId { get; set; }

        /// <summary>
        /// Gets or Sets InactiveDocumentIds
        /// </summary>
        [DataMember(Name="inactive_document_ids", EmitDefaultValue=true)]
        public List<int> InactiveDocumentIds { get; set; }

        /// <summary>
        /// Gets or Sets InactiveDocumentNames
        /// </summary>
        [DataMember(Name="inactive_document_names", EmitDefaultValue=true)]
        public List<string> InactiveDocumentNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateProjectDocumentsFieldsResponse {\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  InactiveDocumentIds: ").Append(InactiveDocumentIds).Append("\n");
            sb.Append("  InactiveDocumentNames: ").Append(InactiveDocumentNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateProjectDocumentsFieldsResponse);
        }

        /// <summary>
        /// Returns true if UpdateProjectDocumentsFieldsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateProjectDocumentsFieldsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateProjectDocumentsFieldsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.InactiveDocumentIds == input.InactiveDocumentIds ||
                    this.InactiveDocumentIds != null &&
                    input.InactiveDocumentIds != null &&
                    this.InactiveDocumentIds.SequenceEqual(input.InactiveDocumentIds)
                ) && 
                (
                    this.InactiveDocumentNames == input.InactiveDocumentNames ||
                    this.InactiveDocumentNames != null &&
                    input.InactiveDocumentNames != null &&
                    this.InactiveDocumentNames.SequenceEqual(input.InactiveDocumentNames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.InactiveDocumentIds != null)
                    hashCode = hashCode * 59 + this.InactiveDocumentIds.GetHashCode();
                if (this.InactiveDocumentNames != null)
                    hashCode = hashCode * 59 + this.InactiveDocumentNames.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
