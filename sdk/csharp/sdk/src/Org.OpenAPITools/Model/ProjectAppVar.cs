/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProjectAppVar
    /// </summary>
    [DataContract]
    public partial class ProjectAppVar :  IEquatable<ProjectAppVar>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectAppVar" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectAppVar() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectAppVar" /> class.
        /// </summary>
        /// <param name="category">category (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="value">value (required).</param>
        /// <param name="accessType">accessType (required).</param>
        /// <param name="useSystem">useSystem (required).</param>
        /// <param name="systemValue">systemValue (required).</param>
        public ProjectAppVar(string category = default(string), string name = default(string), string description = default(string), Object value = default(Object), string accessType = default(string), bool useSystem = default(bool), Object systemValue = default(Object))
        {
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new InvalidDataException("category is a required property for ProjectAppVar and cannot be null");
            }
            else
            {
                this.Category = category;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ProjectAppVar and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for ProjectAppVar and cannot be null");
            }
            else
            {
                this.Description = description;
            }

            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for ProjectAppVar and cannot be null");
            }
            else
            {
                this.Value = value;
            }

            // to ensure "accessType" is required (not null)
            if (accessType == null)
            {
                throw new InvalidDataException("accessType is a required property for ProjectAppVar and cannot be null");
            }
            else
            {
                this.AccessType = accessType;
            }

            // to ensure "useSystem" is required (not null)
            if (useSystem == null)
            {
                throw new InvalidDataException("useSystem is a required property for ProjectAppVar and cannot be null");
            }
            else
            {
                this.UseSystem = useSystem;
            }

            // to ensure "systemValue" is required (not null)
            if (systemValue == null)
            {
                throw new InvalidDataException("systemValue is a required property for ProjectAppVar and cannot be null");
            }
            else
            {
                this.SystemValue = systemValue;
            }

        }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=true)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public Object Value { get; set; }

        /// <summary>
        /// Gets or Sets AccessType
        /// </summary>
        [DataMember(Name="access_type", EmitDefaultValue=true)]
        public string AccessType { get; set; }

        /// <summary>
        /// Gets or Sets UseSystem
        /// </summary>
        [DataMember(Name="use_system", EmitDefaultValue=true)]
        public bool UseSystem { get; set; }

        /// <summary>
        /// Gets or Sets SystemValue
        /// </summary>
        [DataMember(Name="system_value", EmitDefaultValue=true)]
        public Object SystemValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectAppVar {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  UseSystem: ").Append(UseSystem).Append("\n");
            sb.Append("  SystemValue: ").Append(SystemValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectAppVar);
        }

        /// <summary>
        /// Returns true if ProjectAppVar instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectAppVar to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectAppVar input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.AccessType == input.AccessType ||
                    (this.AccessType != null &&
                    this.AccessType.Equals(input.AccessType))
                ) && 
                (
                    this.UseSystem == input.UseSystem ||
                    (this.UseSystem != null &&
                    this.UseSystem.Equals(input.UseSystem))
                ) && 
                (
                    this.SystemValue == input.SystemValue ||
                    (this.SystemValue != null &&
                    this.SystemValue.Equals(input.SystemValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.AccessType != null)
                    hashCode = hashCode * 59 + this.AccessType.GetHashCode();
                if (this.UseSystem != null)
                    hashCode = hashCode * 59 + this.UseSystem.GetHashCode();
                if (this.SystemValue != null)
                    hashCode = hashCode * 59 + this.SystemValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
