/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentFieldStatsResponse
    /// </summary>
    [DataContract]
    public partial class DocumentFieldStatsResponse :  IEquatable<DocumentFieldStatsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentFieldStatsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentFieldStatsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentFieldStatsResponse" /> class.
        /// </summary>
        /// <param name="code">code (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="total">total (required).</param>
        /// <param name="todo">todo (required).</param>
        /// <param name="sysGeneratedConfirmCorrect">sysGeneratedConfirmCorrect (required).</param>
        /// <param name="rejected">rejected (required).</param>
        /// <param name="userGenerated">userGenerated (required).</param>
        /// <param name="depsOnFields">depsOnFields (required).</param>
        public DocumentFieldStatsResponse(string code = default(string), string title = default(string), int total = default(int), int todo = default(int), int sysGeneratedConfirmCorrect = default(int), int rejected = default(int), int userGenerated = default(int), List<string> depsOnFields = default(List<string>))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for DocumentFieldStatsResponse and cannot be null");
            }
            else
            {
                this.Code = code;
            }

            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for DocumentFieldStatsResponse and cannot be null");
            }
            else
            {
                this.Title = title;
            }

            // to ensure "total" is required (not null)
            if (total == null)
            {
                throw new InvalidDataException("total is a required property for DocumentFieldStatsResponse and cannot be null");
            }
            else
            {
                this.Total = total;
            }

            // to ensure "todo" is required (not null)
            if (todo == null)
            {
                throw new InvalidDataException("todo is a required property for DocumentFieldStatsResponse and cannot be null");
            }
            else
            {
                this.Todo = todo;
            }

            // to ensure "sysGeneratedConfirmCorrect" is required (not null)
            if (sysGeneratedConfirmCorrect == null)
            {
                throw new InvalidDataException("sysGeneratedConfirmCorrect is a required property for DocumentFieldStatsResponse and cannot be null");
            }
            else
            {
                this.SysGeneratedConfirmCorrect = sysGeneratedConfirmCorrect;
            }

            // to ensure "rejected" is required (not null)
            if (rejected == null)
            {
                throw new InvalidDataException("rejected is a required property for DocumentFieldStatsResponse and cannot be null");
            }
            else
            {
                this.Rejected = rejected;
            }

            // to ensure "userGenerated" is required (not null)
            if (userGenerated == null)
            {
                throw new InvalidDataException("userGenerated is a required property for DocumentFieldStatsResponse and cannot be null");
            }
            else
            {
                this.UserGenerated = userGenerated;
            }

            // to ensure "depsOnFields" is required (not null)
            if (depsOnFields == null)
            {
                throw new InvalidDataException("depsOnFields is a required property for DocumentFieldStatsResponse and cannot be null");
            }
            else
            {
                this.DepsOnFields = depsOnFields;
            }

        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=true)]
        public int Total { get; set; }

        /// <summary>
        /// Gets or Sets Todo
        /// </summary>
        [DataMember(Name="todo", EmitDefaultValue=true)]
        public int Todo { get; set; }

        /// <summary>
        /// Gets or Sets SysGeneratedConfirmCorrect
        /// </summary>
        [DataMember(Name="sys_generated_confirm_correct", EmitDefaultValue=true)]
        public int SysGeneratedConfirmCorrect { get; set; }

        /// <summary>
        /// Gets or Sets Rejected
        /// </summary>
        [DataMember(Name="rejected", EmitDefaultValue=true)]
        public int Rejected { get; set; }

        /// <summary>
        /// Gets or Sets UserGenerated
        /// </summary>
        [DataMember(Name="user_generated", EmitDefaultValue=true)]
        public int UserGenerated { get; set; }

        /// <summary>
        /// Gets or Sets DepsOnFields
        /// </summary>
        [DataMember(Name="deps_on_fields", EmitDefaultValue=true)]
        public List<string> DepsOnFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentFieldStatsResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Todo: ").Append(Todo).Append("\n");
            sb.Append("  SysGeneratedConfirmCorrect: ").Append(SysGeneratedConfirmCorrect).Append("\n");
            sb.Append("  Rejected: ").Append(Rejected).Append("\n");
            sb.Append("  UserGenerated: ").Append(UserGenerated).Append("\n");
            sb.Append("  DepsOnFields: ").Append(DepsOnFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentFieldStatsResponse);
        }

        /// <summary>
        /// Returns true if DocumentFieldStatsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentFieldStatsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentFieldStatsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Todo == input.Todo ||
                    (this.Todo != null &&
                    this.Todo.Equals(input.Todo))
                ) && 
                (
                    this.SysGeneratedConfirmCorrect == input.SysGeneratedConfirmCorrect ||
                    (this.SysGeneratedConfirmCorrect != null &&
                    this.SysGeneratedConfirmCorrect.Equals(input.SysGeneratedConfirmCorrect))
                ) && 
                (
                    this.Rejected == input.Rejected ||
                    (this.Rejected != null &&
                    this.Rejected.Equals(input.Rejected))
                ) && 
                (
                    this.UserGenerated == input.UserGenerated ||
                    (this.UserGenerated != null &&
                    this.UserGenerated.Equals(input.UserGenerated))
                ) && 
                (
                    this.DepsOnFields == input.DepsOnFields ||
                    this.DepsOnFields != null &&
                    input.DepsOnFields != null &&
                    this.DepsOnFields.SequenceEqual(input.DepsOnFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Todo != null)
                    hashCode = hashCode * 59 + this.Todo.GetHashCode();
                if (this.SysGeneratedConfirmCorrect != null)
                    hashCode = hashCode * 59 + this.SysGeneratedConfirmCorrect.GetHashCode();
                if (this.Rejected != null)
                    hashCode = hashCode * 59 + this.Rejected.GetHashCode();
                if (this.UserGenerated != null)
                    hashCode = hashCode * 59 + this.UserGenerated.GetHashCode();
                if (this.DepsOnFields != null)
                    hashCode = hashCode * 59 + this.DepsOnFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
