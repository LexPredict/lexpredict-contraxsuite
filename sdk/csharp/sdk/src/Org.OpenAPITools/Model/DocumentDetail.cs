/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentDetail
    /// </summary>
    [DataContract]
    public partial class DocumentDetail :  IEquatable<DocumentDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDetail" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="fileSize">fileSize.</param>
        /// <param name="folder">folder.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="modifiedDate">modifiedDate.</param>
        /// <param name="modifiedByName">modifiedByName (required).</param>
        /// <param name="createdByName">createdByName (required).</param>
        /// <param name="createdByInitials">createdByInitials (required).</param>
        /// <param name="createdByPhoto">createdByPhoto (required).</param>
        /// <param name="modifiedByInitials">modifiedByInitials (required).</param>
        /// <param name="modifiedByPhoto">modifiedByPhoto (required).</param>
        /// <param name="status">status.</param>
        /// <param name="statusData">statusData (required).</param>
        /// <param name="assignee">assignee.</param>
        /// <param name="assignDate">assignDate.</param>
        /// <param name="assigneeData">assigneeData (required).</param>
        /// <param name="availableAssigneesData">availableAssigneesData (required).</param>
        /// <param name="description">description.</param>
        /// <param name="title">title.</param>
        public DocumentDetail(string name = default(string), string documentType = default(string), int fileSize = default(int), string folder = default(string), DateTime? createdDate = default(DateTime?), DateTime? modifiedDate = default(DateTime?), string modifiedByName = default(string), string createdByName = default(string), string createdByInitials = default(string), string createdByPhoto = default(string), string modifiedByInitials = default(string), string modifiedByPhoto = default(string), int? status = default(int?), DocumentDetailStatusData statusData = default(DocumentDetailStatusData), int? assignee = default(int?), DateTime? assignDate = default(DateTime?), DocumentDetailAssigneeData assigneeData = default(DocumentDetailAssigneeData), List<DocumentDetailAvailableAssigneesData> availableAssigneesData = default(List<DocumentDetailAvailableAssigneesData>), string description = default(string), string title = default(string))
        {
            this.Name = name;
            this.DocumentType = documentType;
            this.Folder = folder;
            this.CreatedDate = createdDate;
            this.ModifiedDate = modifiedDate;
            // to ensure "modifiedByName" is required (not null)
            if (modifiedByName == null)
            {
                throw new InvalidDataException("modifiedByName is a required property for DocumentDetail and cannot be null");
            }
            else
            {
                this.ModifiedByName = modifiedByName;
            }

            // to ensure "createdByName" is required (not null)
            if (createdByName == null)
            {
                throw new InvalidDataException("createdByName is a required property for DocumentDetail and cannot be null");
            }
            else
            {
                this.CreatedByName = createdByName;
            }

            // to ensure "createdByInitials" is required (not null)
            if (createdByInitials == null)
            {
                throw new InvalidDataException("createdByInitials is a required property for DocumentDetail and cannot be null");
            }
            else
            {
                this.CreatedByInitials = createdByInitials;
            }

            // to ensure "createdByPhoto" is required (not null)
            if (createdByPhoto == null)
            {
                throw new InvalidDataException("createdByPhoto is a required property for DocumentDetail and cannot be null");
            }
            else
            {
                this.CreatedByPhoto = createdByPhoto;
            }

            // to ensure "modifiedByInitials" is required (not null)
            if (modifiedByInitials == null)
            {
                throw new InvalidDataException("modifiedByInitials is a required property for DocumentDetail and cannot be null");
            }
            else
            {
                this.ModifiedByInitials = modifiedByInitials;
            }

            // to ensure "modifiedByPhoto" is required (not null)
            if (modifiedByPhoto == null)
            {
                throw new InvalidDataException("modifiedByPhoto is a required property for DocumentDetail and cannot be null");
            }
            else
            {
                this.ModifiedByPhoto = modifiedByPhoto;
            }

            this.Status = status;
            // to ensure "statusData" is required (not null)
            if (statusData == null)
            {
                throw new InvalidDataException("statusData is a required property for DocumentDetail and cannot be null");
            }
            else
            {
                this.StatusData = statusData;
            }

            this.Assignee = assignee;
            this.AssignDate = assignDate;
            // to ensure "assigneeData" is required (not null)
            if (assigneeData == null)
            {
                throw new InvalidDataException("assigneeData is a required property for DocumentDetail and cannot be null");
            }
            else
            {
                this.AssigneeData = assigneeData;
            }

            this.AssigneeData = assigneeData;
            // to ensure "availableAssigneesData" is required (not null)
            if (availableAssigneesData == null)
            {
                throw new InvalidDataException("availableAssigneesData is a required property for DocumentDetail and cannot be null");
            }
            else
            {
                this.AvailableAssigneesData = availableAssigneesData;
            }

            this.AvailableAssigneesData = availableAssigneesData;
            this.Description = description;
            this.Title = title;
            this.Name = name;
            this.DocumentType = documentType;
            this.FileSize = fileSize;
            this.Folder = folder;
            this.CreatedDate = createdDate;
            this.ModifiedDate = modifiedDate;
            this.Status = status;
            this.Assignee = assignee;
            this.AssignDate = assignDate;
            this.Description = description;
            this.Title = title;
        }

        /// <summary>
        /// Gets or Sets Pk
        /// </summary>
        [DataMember(Name="pk", EmitDefaultValue=false)]
        public int Pk { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name="document_type", EmitDefaultValue=true)]
        public string DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name="file_size", EmitDefaultValue=false)]
        public int FileSize { get; set; }

        /// <summary>
        /// Gets or Sets Folder
        /// </summary>
        [DataMember(Name="folder", EmitDefaultValue=true)]
        public string Folder { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="created_date", EmitDefaultValue=true)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="modified_date", EmitDefaultValue=true)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedByName
        /// </summary>
        [DataMember(Name="modified_by_name", EmitDefaultValue=true)]
        public string ModifiedByName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByName
        /// </summary>
        [DataMember(Name="created_by_name", EmitDefaultValue=true)]
        public string CreatedByName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByInitials
        /// </summary>
        [DataMember(Name="created_by_initials", EmitDefaultValue=true)]
        public string CreatedByInitials { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByPhoto
        /// </summary>
        [DataMember(Name="created_by_photo", EmitDefaultValue=true)]
        public string CreatedByPhoto { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedByInitials
        /// </summary>
        [DataMember(Name="modified_by_initials", EmitDefaultValue=true)]
        public string ModifiedByInitials { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedByPhoto
        /// </summary>
        [DataMember(Name="modified_by_photo", EmitDefaultValue=true)]
        public string ModifiedByPhoto { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusData
        /// </summary>
        [DataMember(Name="status_data", EmitDefaultValue=true)]
        public DocumentDetailStatusData StatusData { get; set; }

        /// <summary>
        /// Gets or Sets AvailableStatusesData
        /// </summary>
        [DataMember(Name="available_statuses_data", EmitDefaultValue=false)]
        public List<Object> AvailableStatusesData { get; private set; }

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name="assignee", EmitDefaultValue=true)]
        public int? Assignee { get; set; }

        /// <summary>
        /// Gets or Sets AssignDate
        /// </summary>
        [DataMember(Name="assign_date", EmitDefaultValue=true)]
        public DateTime? AssignDate { get; set; }

        /// <summary>
        /// Gets or Sets AssigneeData
        /// </summary>
        [DataMember(Name="assignee_data", EmitDefaultValue=true)]
        public DocumentDetailAssigneeData AssigneeData { get; set; }

        /// <summary>
        /// Gets or Sets AvailableAssigneesData
        /// </summary>
        [DataMember(Name="available_assignees_data", EmitDefaultValue=true)]
        public List<DocumentDetailAvailableAssigneesData> AvailableAssigneesData { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets InitialAnnotationId
        /// </summary>
        [DataMember(Name="initial_annotation_id", EmitDefaultValue=false)]
        public string InitialAnnotationId { get; private set; }

        /// <summary>
        /// Gets or Sets PageLocations
        /// </summary>
        [DataMember(Name="page_locations", EmitDefaultValue=false)]
        public List<List<int>> PageLocations { get; private set; }

        /// <summary>
        /// Gets or Sets PageBounds
        /// </summary>
        [DataMember(Name="page_bounds", EmitDefaultValue=false)]
        public List<List<decimal>> PageBounds { get; private set; }

        /// <summary>
        /// Gets or Sets FieldValues
        /// </summary>
        [DataMember(Name="field_values", EmitDefaultValue=false)]
        public Object FieldValues { get; private set; }

        /// <summary>
        /// Gets or Sets FieldValueObjects
        /// </summary>
        [DataMember(Name="field_value_objects", EmitDefaultValue=false)]
        public Object FieldValueObjects { get; private set; }

        /// <summary>
        /// Gets or Sets PrevId
        /// </summary>
        [DataMember(Name="prev_id", EmitDefaultValue=false)]
        public int PrevId { get; private set; }

        /// <summary>
        /// Gets or Sets NextId
        /// </summary>
        [DataMember(Name="next_id", EmitDefaultValue=false)]
        public int NextId { get; private set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public string Position { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentsCount
        /// </summary>
        [DataMember(Name="documents_count", EmitDefaultValue=false)]
        public string DocumentsCount { get; private set; }

        /// <summary>
        /// Gets or Sets Sections
        /// </summary>
        [DataMember(Name="sections", EmitDefaultValue=false)]
        public List<Object> Sections { get; private set; }

        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        [DataMember(Name="cluster_id", EmitDefaultValue=false)]
        public string ClusterId { get; private set; }

        /// <summary>
        /// Gets or Sets UserPermissions
        /// </summary>
        [DataMember(Name="user_permissions", EmitDefaultValue=false)]
        public Object UserPermissions { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentDetail {\n");
            sb.Append("  Pk: ").Append(Pk).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  Folder: ").Append(Folder).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedByName: ").Append(ModifiedByName).Append("\n");
            sb.Append("  CreatedByName: ").Append(CreatedByName).Append("\n");
            sb.Append("  CreatedByInitials: ").Append(CreatedByInitials).Append("\n");
            sb.Append("  CreatedByPhoto: ").Append(CreatedByPhoto).Append("\n");
            sb.Append("  ModifiedByInitials: ").Append(ModifiedByInitials).Append("\n");
            sb.Append("  ModifiedByPhoto: ").Append(ModifiedByPhoto).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusData: ").Append(StatusData).Append("\n");
            sb.Append("  AvailableStatusesData: ").Append(AvailableStatusesData).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  AssignDate: ").Append(AssignDate).Append("\n");
            sb.Append("  AssigneeData: ").Append(AssigneeData).Append("\n");
            sb.Append("  AvailableAssigneesData: ").Append(AvailableAssigneesData).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  InitialAnnotationId: ").Append(InitialAnnotationId).Append("\n");
            sb.Append("  PageLocations: ").Append(PageLocations).Append("\n");
            sb.Append("  PageBounds: ").Append(PageBounds).Append("\n");
            sb.Append("  FieldValues: ").Append(FieldValues).Append("\n");
            sb.Append("  FieldValueObjects: ").Append(FieldValueObjects).Append("\n");
            sb.Append("  PrevId: ").Append(PrevId).Append("\n");
            sb.Append("  NextId: ").Append(NextId).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  DocumentsCount: ").Append(DocumentsCount).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  UserPermissions: ").Append(UserPermissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentDetail);
        }

        /// <summary>
        /// Returns true if DocumentDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pk == input.Pk ||
                    (this.Pk != null &&
                    this.Pk.Equals(input.Pk))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.Folder == input.Folder ||
                    (this.Folder != null &&
                    this.Folder.Equals(input.Folder))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                ) && 
                (
                    this.ModifiedByName == input.ModifiedByName ||
                    (this.ModifiedByName != null &&
                    this.ModifiedByName.Equals(input.ModifiedByName))
                ) && 
                (
                    this.CreatedByName == input.CreatedByName ||
                    (this.CreatedByName != null &&
                    this.CreatedByName.Equals(input.CreatedByName))
                ) && 
                (
                    this.CreatedByInitials == input.CreatedByInitials ||
                    (this.CreatedByInitials != null &&
                    this.CreatedByInitials.Equals(input.CreatedByInitials))
                ) && 
                (
                    this.CreatedByPhoto == input.CreatedByPhoto ||
                    (this.CreatedByPhoto != null &&
                    this.CreatedByPhoto.Equals(input.CreatedByPhoto))
                ) && 
                (
                    this.ModifiedByInitials == input.ModifiedByInitials ||
                    (this.ModifiedByInitials != null &&
                    this.ModifiedByInitials.Equals(input.ModifiedByInitials))
                ) && 
                (
                    this.ModifiedByPhoto == input.ModifiedByPhoto ||
                    (this.ModifiedByPhoto != null &&
                    this.ModifiedByPhoto.Equals(input.ModifiedByPhoto))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusData == input.StatusData ||
                    (this.StatusData != null &&
                    this.StatusData.Equals(input.StatusData))
                ) && 
                (
                    this.AvailableStatusesData == input.AvailableStatusesData ||
                    this.AvailableStatusesData != null &&
                    input.AvailableStatusesData != null &&
                    this.AvailableStatusesData.SequenceEqual(input.AvailableStatusesData)
                ) && 
                (
                    this.Assignee == input.Assignee ||
                    (this.Assignee != null &&
                    this.Assignee.Equals(input.Assignee))
                ) && 
                (
                    this.AssignDate == input.AssignDate ||
                    (this.AssignDate != null &&
                    this.AssignDate.Equals(input.AssignDate))
                ) && 
                (
                    this.AssigneeData == input.AssigneeData ||
                    (this.AssigneeData != null &&
                    this.AssigneeData.Equals(input.AssigneeData))
                ) && 
                (
                    this.AvailableAssigneesData == input.AvailableAssigneesData ||
                    this.AvailableAssigneesData != null &&
                    input.AvailableAssigneesData != null &&
                    this.AvailableAssigneesData.SequenceEqual(input.AvailableAssigneesData)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.InitialAnnotationId == input.InitialAnnotationId ||
                    (this.InitialAnnotationId != null &&
                    this.InitialAnnotationId.Equals(input.InitialAnnotationId))
                ) && 
                (
                    this.PageLocations == input.PageLocations ||
                    this.PageLocations != null &&
                    input.PageLocations != null &&
                    this.PageLocations.SequenceEqual(input.PageLocations)
                ) && 
                (
                    this.PageBounds == input.PageBounds ||
                    this.PageBounds != null &&
                    input.PageBounds != null &&
                    this.PageBounds.SequenceEqual(input.PageBounds)
                ) && 
                (
                    this.FieldValues == input.FieldValues ||
                    (this.FieldValues != null &&
                    this.FieldValues.Equals(input.FieldValues))
                ) && 
                (
                    this.FieldValueObjects == input.FieldValueObjects ||
                    (this.FieldValueObjects != null &&
                    this.FieldValueObjects.Equals(input.FieldValueObjects))
                ) && 
                (
                    this.PrevId == input.PrevId ||
                    (this.PrevId != null &&
                    this.PrevId.Equals(input.PrevId))
                ) && 
                (
                    this.NextId == input.NextId ||
                    (this.NextId != null &&
                    this.NextId.Equals(input.NextId))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.DocumentsCount == input.DocumentsCount ||
                    (this.DocumentsCount != null &&
                    this.DocumentsCount.Equals(input.DocumentsCount))
                ) && 
                (
                    this.Sections == input.Sections ||
                    this.Sections != null &&
                    input.Sections != null &&
                    this.Sections.SequenceEqual(input.Sections)
                ) && 
                (
                    this.ClusterId == input.ClusterId ||
                    (this.ClusterId != null &&
                    this.ClusterId.Equals(input.ClusterId))
                ) && 
                (
                    this.UserPermissions == input.UserPermissions ||
                    (this.UserPermissions != null &&
                    this.UserPermissions.Equals(input.UserPermissions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pk != null)
                    hashCode = hashCode * 59 + this.Pk.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.Folder != null)
                    hashCode = hashCode * 59 + this.Folder.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.ModifiedDate != null)
                    hashCode = hashCode * 59 + this.ModifiedDate.GetHashCode();
                if (this.ModifiedByName != null)
                    hashCode = hashCode * 59 + this.ModifiedByName.GetHashCode();
                if (this.CreatedByName != null)
                    hashCode = hashCode * 59 + this.CreatedByName.GetHashCode();
                if (this.CreatedByInitials != null)
                    hashCode = hashCode * 59 + this.CreatedByInitials.GetHashCode();
                if (this.CreatedByPhoto != null)
                    hashCode = hashCode * 59 + this.CreatedByPhoto.GetHashCode();
                if (this.ModifiedByInitials != null)
                    hashCode = hashCode * 59 + this.ModifiedByInitials.GetHashCode();
                if (this.ModifiedByPhoto != null)
                    hashCode = hashCode * 59 + this.ModifiedByPhoto.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusData != null)
                    hashCode = hashCode * 59 + this.StatusData.GetHashCode();
                if (this.AvailableStatusesData != null)
                    hashCode = hashCode * 59 + this.AvailableStatusesData.GetHashCode();
                if (this.Assignee != null)
                    hashCode = hashCode * 59 + this.Assignee.GetHashCode();
                if (this.AssignDate != null)
                    hashCode = hashCode * 59 + this.AssignDate.GetHashCode();
                if (this.AssigneeData != null)
                    hashCode = hashCode * 59 + this.AssigneeData.GetHashCode();
                if (this.AvailableAssigneesData != null)
                    hashCode = hashCode * 59 + this.AvailableAssigneesData.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.InitialAnnotationId != null)
                    hashCode = hashCode * 59 + this.InitialAnnotationId.GetHashCode();
                if (this.PageLocations != null)
                    hashCode = hashCode * 59 + this.PageLocations.GetHashCode();
                if (this.PageBounds != null)
                    hashCode = hashCode * 59 + this.PageBounds.GetHashCode();
                if (this.FieldValues != null)
                    hashCode = hashCode * 59 + this.FieldValues.GetHashCode();
                if (this.FieldValueObjects != null)
                    hashCode = hashCode * 59 + this.FieldValueObjects.GetHashCode();
                if (this.PrevId != null)
                    hashCode = hashCode * 59 + this.PrevId.GetHashCode();
                if (this.NextId != null)
                    hashCode = hashCode * 59 + this.NextId.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.DocumentsCount != null)
                    hashCode = hashCode * 59 + this.DocumentsCount.GetHashCode();
                if (this.Sections != null)
                    hashCode = hashCode * 59 + this.Sections.GetHashCode();
                if (this.ClusterId != null)
                    hashCode = hashCode * 59 + this.ClusterId.GetHashCode();
                if (this.UserPermissions != null)
                    hashCode = hashCode * 59 + this.UserPermissions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 1024.", new [] { "Name" });
            }

 

 
            // FileSize (int) maximum
            if(this.FileSize > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileSize, must be a value less than or equal to 2147483647.", new [] { "FileSize" });
            }

            // FileSize (int) minimum
            if(this.FileSize < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileSize, must be a value greater than or equal to 0.", new [] { "FileSize" });
            }

            // Folder (string) maxLength
            if(this.Folder != null && this.Folder.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Folder, length must be less than 1024.", new [] { "Folder" });
            }

 
            // Title (string) maxLength
            if(this.Title != null && this.Title.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 1024.", new [] { "Title" });
            }

 
            yield break;
        }
    }

}
