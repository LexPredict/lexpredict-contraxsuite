/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DumpFixture
    /// </summary>
    [DataContract]
    public partial class DumpFixture :  IEquatable<DumpFixture>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DumpFixture" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DumpFixture() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DumpFixture" /> class.
        /// </summary>
        /// <param name="appName">appName (required).</param>
        /// <param name="modelName">modelName (required).</param>
        /// <param name="fileName">fileName (required).</param>
        /// <param name="filterOptions">filterOptions.</param>
        /// <param name="indent">indent (default to 4).</param>
        public DumpFixture(string appName = default(string), string modelName = default(string), string fileName = default(string), Object filterOptions = default(Object), int indent = 4)
        {
            // to ensure "appName" is required (not null)
            if (appName == null)
            {
                throw new InvalidDataException("appName is a required property for DumpFixture and cannot be null");
            }
            else
            {
                this.AppName = appName;
            }

            // to ensure "modelName" is required (not null)
            if (modelName == null)
            {
                throw new InvalidDataException("modelName is a required property for DumpFixture and cannot be null");
            }
            else
            {
                this.ModelName = modelName;
            }

            // to ensure "fileName" is required (not null)
            if (fileName == null)
            {
                throw new InvalidDataException("fileName is a required property for DumpFixture and cannot be null");
            }
            else
            {
                this.FileName = fileName;
            }

            this.FilterOptions = filterOptions;
            // use default value if no "indent" provided
            if (indent == null)
            {
                this.Indent = 4;
            }
            else
            {
                this.Indent = indent;
            }
        }

        /// <summary>
        /// Gets or Sets AppName
        /// </summary>
        [DataMember(Name="app_name", EmitDefaultValue=true)]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or Sets ModelName
        /// </summary>
        [DataMember(Name="model_name", EmitDefaultValue=true)]
        public string ModelName { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="file_name", EmitDefaultValue=true)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets FilterOptions
        /// </summary>
        [DataMember(Name="filter_options", EmitDefaultValue=false)]
        public Object FilterOptions { get; set; }

        /// <summary>
        /// Gets or Sets Indent
        /// </summary>
        [DataMember(Name="indent", EmitDefaultValue=false)]
        public int Indent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DumpFixture {\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FilterOptions: ").Append(FilterOptions).Append("\n");
            sb.Append("  Indent: ").Append(Indent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DumpFixture);
        }

        /// <summary>
        /// Returns true if DumpFixture instances are equal
        /// </summary>
        /// <param name="input">Instance of DumpFixture to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DumpFixture input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.ModelName == input.ModelName ||
                    (this.ModelName != null &&
                    this.ModelName.Equals(input.ModelName))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.FilterOptions == input.FilterOptions ||
                    (this.FilterOptions != null &&
                    this.FilterOptions.Equals(input.FilterOptions))
                ) && 
                (
                    this.Indent == input.Indent ||
                    (this.Indent != null &&
                    this.Indent.Equals(input.Indent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppName != null)
                    hashCode = hashCode * 59 + this.AppName.GetHashCode();
                if (this.ModelName != null)
                    hashCode = hashCode * 59 + this.ModelName.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.FilterOptions != null)
                    hashCode = hashCode * 59 + this.FilterOptions.GetHashCode();
                if (this.Indent != null)
                    hashCode = hashCode * 59 + this.Indent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
