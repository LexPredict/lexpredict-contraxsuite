/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentCluster
    /// </summary>
    [DataContract]
    public partial class DocumentCluster :  IEquatable<DocumentCluster>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentCluster" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentCluster() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentCluster" /> class.
        /// </summary>
        /// <param name="clusterId">clusterId.</param>
        /// <param name="name">name (required).</param>
        /// <param name="selfName">selfName (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="clusterBy">clusterBy (required).</param>
        /// <param name="_using">_using (required).</param>
        /// <param name="createdDate">createdDate.</param>
        public DocumentCluster(int clusterId = default(int), string name = default(string), string selfName = default(string), string description = default(string), string clusterBy = default(string), string _using = default(string), DateTime createdDate = default(DateTime))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for DocumentCluster and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "selfName" is required (not null)
            if (selfName == null)
            {
                throw new InvalidDataException("selfName is a required property for DocumentCluster and cannot be null");
            }
            else
            {
                this.SelfName = selfName;
            }

            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for DocumentCluster and cannot be null");
            }
            else
            {
                this.Description = description;
            }

            // to ensure "clusterBy" is required (not null)
            if (clusterBy == null)
            {
                throw new InvalidDataException("clusterBy is a required property for DocumentCluster and cannot be null");
            }
            else
            {
                this.ClusterBy = clusterBy;
            }

            // to ensure "_using" is required (not null)
            if (_using == null)
            {
                throw new InvalidDataException("_using is a required property for DocumentCluster and cannot be null");
            }
            else
            {
                this.Using = _using;
            }

            this.ClusterId = clusterId;
            this.CreatedDate = createdDate;
        }

        /// <summary>
        /// Gets or Sets Pk
        /// </summary>
        [DataMember(Name="pk", EmitDefaultValue=false)]
        public int Pk { get; private set; }

        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        [DataMember(Name="cluster_id", EmitDefaultValue=false)]
        public int ClusterId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SelfName
        /// </summary>
        [DataMember(Name="self_name", EmitDefaultValue=true)]
        public string SelfName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ClusterBy
        /// </summary>
        [DataMember(Name="cluster_by", EmitDefaultValue=true)]
        public string ClusterBy { get; set; }

        /// <summary>
        /// Gets or Sets Using
        /// </summary>
        [DataMember(Name="using", EmitDefaultValue=true)]
        public string Using { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsCount
        /// </summary>
        [DataMember(Name="documents_count", EmitDefaultValue=false)]
        public int DocumentsCount { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentData
        /// </summary>
        [DataMember(Name="document_data", EmitDefaultValue=false)]
        public List<DocumentClusterDocumentDataInner> DocumentData { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentCluster {\n");
            sb.Append("  Pk: ").Append(Pk).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SelfName: ").Append(SelfName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ClusterBy: ").Append(ClusterBy).Append("\n");
            sb.Append("  Using: ").Append(Using).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  DocumentsCount: ").Append(DocumentsCount).Append("\n");
            sb.Append("  DocumentData: ").Append(DocumentData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentCluster);
        }

        /// <summary>
        /// Returns true if DocumentCluster instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentCluster to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentCluster input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pk == input.Pk ||
                    (this.Pk != null &&
                    this.Pk.Equals(input.Pk))
                ) && 
                (
                    this.ClusterId == input.ClusterId ||
                    (this.ClusterId != null &&
                    this.ClusterId.Equals(input.ClusterId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SelfName == input.SelfName ||
                    (this.SelfName != null &&
                    this.SelfName.Equals(input.SelfName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ClusterBy == input.ClusterBy ||
                    (this.ClusterBy != null &&
                    this.ClusterBy.Equals(input.ClusterBy))
                ) && 
                (
                    this.Using == input.Using ||
                    (this.Using != null &&
                    this.Using.Equals(input.Using))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.DocumentsCount == input.DocumentsCount ||
                    (this.DocumentsCount != null &&
                    this.DocumentsCount.Equals(input.DocumentsCount))
                ) && 
                (
                    this.DocumentData == input.DocumentData ||
                    this.DocumentData != null &&
                    input.DocumentData != null &&
                    this.DocumentData.SequenceEqual(input.DocumentData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pk != null)
                    hashCode = hashCode * 59 + this.Pk.GetHashCode();
                if (this.ClusterId != null)
                    hashCode = hashCode * 59 + this.ClusterId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SelfName != null)
                    hashCode = hashCode * 59 + this.SelfName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ClusterBy != null)
                    hashCode = hashCode * 59 + this.ClusterBy.GetHashCode();
                if (this.Using != null)
                    hashCode = hashCode * 59 + this.Using.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.DocumentsCount != null)
                    hashCode = hashCode * 59 + this.DocumentsCount.GetHashCode();
                if (this.DocumentData != null)
                    hashCode = hashCode * 59 + this.DocumentData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // ClusterId (int) maximum
            if(this.ClusterId > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClusterId, must be a value less than or equal to 2147483647.", new [] { "ClusterId" });
            }

            // ClusterId (int) minimum
            if(this.ClusterId < (int)-2147483648)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClusterId, must be a value greater than or equal to -2147483648.", new [] { "ClusterId" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 300.", new [] { "Name" });
            }


            // SelfName (string) maxLength
            if(this.SelfName != null && this.SelfName.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SelfName, length must be less than 200.", new [] { "SelfName" });
            }


            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 300.", new [] { "Description" });
            }


            // ClusterBy (string) maxLength
            if(this.ClusterBy != null && this.ClusterBy.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClusterBy, length must be less than 100.", new [] { "ClusterBy" });
            }


            // Using (string) maxLength
            if(this.Using != null && this.Using.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Using, length must be less than 20.", new [] { "Using" });
            }


            yield break;
        }
    }

}
