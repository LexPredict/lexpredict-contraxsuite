/* 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DateUsageTimeline
    /// </summary>
    [DataContract]
    public partial class DateUsageTimeline :  IEquatable<DateUsageTimeline>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateUsageTimeline" /> class.
        /// </summary>
        /// <param name="documentId">documentId.</param>
        /// <param name="perMonth">perMonth (default to false).</param>
        public DateUsageTimeline(int documentId = default(int), bool perMonth = false)
        {
            this.DocumentId = documentId;
            // use default value if no "perMonth" provided
            if (perMonth == null)
            {
                this.PerMonth = false;
            }
            else
            {
                this.PerMonth = perMonth;
            }
        }
        
        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name="document_id", EmitDefaultValue=false)]
        public int DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets PerMonth
        /// </summary>
        [DataMember(Name="per_month", EmitDefaultValue=false)]
        public bool PerMonth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateUsageTimeline {\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  PerMonth: ").Append(PerMonth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateUsageTimeline);
        }

        /// <summary>
        /// Returns true if DateUsageTimeline instances are equal
        /// </summary>
        /// <param name="input">Instance of DateUsageTimeline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateUsageTimeline input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.PerMonth == input.PerMonth ||
                    (this.PerMonth != null &&
                    this.PerMonth.Equals(input.PerMonth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.PerMonth != null)
                    hashCode = hashCode * 59 + this.PerMonth.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
