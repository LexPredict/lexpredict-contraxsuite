/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentFieldAnnotation
    /// </summary>
    [DataContract]
    public partial class DocumentFieldAnnotation :  IEquatable<DocumentFieldAnnotation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentFieldAnnotation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentFieldAnnotation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentFieldAnnotation" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="locationStart">locationStart.</param>
        /// <param name="locationEnd">locationEnd.</param>
        /// <param name="locationText">locationText.</param>
        /// <param name="assigneeId">assigneeId (required).</param>
        /// <param name="assignDate">assignDate.</param>
        /// <param name="statusId">statusId (required).</param>
        public DocumentFieldAnnotation(Object value = default(Object), int? locationStart = default(int?), int? locationEnd = default(int?), string locationText = default(string), int assigneeId = default(int), DateTime? assignDate = default(DateTime?), int statusId = default(int))
        {
            this.Value = value;
            this.LocationStart = locationStart;
            this.LocationEnd = locationEnd;
            this.LocationText = locationText;
            // to ensure "assigneeId" is required (not null)
            if (assigneeId == null)
            {
                throw new InvalidDataException("assigneeId is a required property for DocumentFieldAnnotation and cannot be null");
            }
            else
            {
                this.AssigneeId = assigneeId;
            }

            this.AssignDate = assignDate;
            // to ensure "statusId" is required (not null)
            if (statusId == null)
            {
                throw new InvalidDataException("statusId is a required property for DocumentFieldAnnotation and cannot be null");
            }
            else
            {
                this.StatusId = statusId;
            }

            this.Value = value;
            this.LocationStart = locationStart;
            this.LocationEnd = locationEnd;
            this.LocationText = locationText;
            this.AssignDate = assignDate;
        }

        /// <summary>
        /// Gets or Sets Pk
        /// </summary>
        [DataMember(Name="pk", EmitDefaultValue=false)]
        public int Pk { get; private set; }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public Guid Uid { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="project_id", EmitDefaultValue=false)]
        public int ProjectId { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectName
        /// </summary>
        [DataMember(Name="project_name", EmitDefaultValue=false)]
        public string ProjectName { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name="document_id", EmitDefaultValue=false)]
        public string DocumentId { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentName
        /// </summary>
        [DataMember(Name="document_name", EmitDefaultValue=false)]
        public string DocumentName { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name="document_type", EmitDefaultValue=false)]
        public string DocumentType { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentStatus
        /// </summary>
        [DataMember(Name="document_status", EmitDefaultValue=false)]
        public string DocumentStatus { get; private set; }

        /// <summary>
        /// Gets or Sets FieldId
        /// </summary>
        [DataMember(Name="field_id", EmitDefaultValue=false)]
        public string FieldId { get; private set; }

        /// <summary>
        /// Gets or Sets FieldName
        /// </summary>
        [DataMember(Name="field_name", EmitDefaultValue=false)]
        public string FieldName { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public Object Value { get; set; }

        /// <summary>
        /// Gets or Sets LocationStart
        /// </summary>
        [DataMember(Name="location_start", EmitDefaultValue=true)]
        public int? LocationStart { get; set; }

        /// <summary>
        /// Gets or Sets LocationEnd
        /// </summary>
        [DataMember(Name="location_end", EmitDefaultValue=true)]
        public int? LocationEnd { get; set; }

        /// <summary>
        /// Gets or Sets LocationText
        /// </summary>
        [DataMember(Name="location_text", EmitDefaultValue=true)]
        public string LocationText { get; set; }

        /// <summary>
        /// Gets or Sets AssigneeId
        /// </summary>
        [DataMember(Name="assignee_id", EmitDefaultValue=true)]
        public int AssigneeId { get; set; }

        /// <summary>
        /// Gets or Sets AssignDate
        /// </summary>
        [DataMember(Name="assign_date", EmitDefaultValue=true)]
        public DateTime? AssignDate { get; set; }

        /// <summary>
        /// Gets or Sets StatusId
        /// </summary>
        [DataMember(Name="status_id", EmitDefaultValue=true)]
        public int StatusId { get; set; }

        /// <summary>
        /// Gets or Sets StatusName
        /// </summary>
        [DataMember(Name="status_name", EmitDefaultValue=false)]
        public string StatusName { get; private set; }

        /// <summary>
        /// Gets or Sets AssigneeName
        /// </summary>
        [DataMember(Name="assignee_name", EmitDefaultValue=false)]
        public string AssigneeName { get; private set; }

        /// <summary>
        /// Gets or Sets ModifiedById
        /// </summary>
        [DataMember(Name="modified_by_id", EmitDefaultValue=false)]
        public string ModifiedById { get; private set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="modified_date", EmitDefaultValue=false)]
        public DateTime ModifiedDate { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentFieldAnnotation {\n");
            sb.Append("  Pk: ").Append(Pk).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentName: ").Append(DocumentName).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  DocumentStatus: ").Append(DocumentStatus).Append("\n");
            sb.Append("  FieldId: ").Append(FieldId).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  LocationStart: ").Append(LocationStart).Append("\n");
            sb.Append("  LocationEnd: ").Append(LocationEnd).Append("\n");
            sb.Append("  LocationText: ").Append(LocationText).Append("\n");
            sb.Append("  AssigneeId: ").Append(AssigneeId).Append("\n");
            sb.Append("  AssignDate: ").Append(AssignDate).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  StatusName: ").Append(StatusName).Append("\n");
            sb.Append("  AssigneeName: ").Append(AssigneeName).Append("\n");
            sb.Append("  ModifiedById: ").Append(ModifiedById).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentFieldAnnotation);
        }

        /// <summary>
        /// Returns true if DocumentFieldAnnotation instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentFieldAnnotation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentFieldAnnotation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pk == input.Pk ||
                    (this.Pk != null &&
                    this.Pk.Equals(input.Pk))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.DocumentName == input.DocumentName ||
                    (this.DocumentName != null &&
                    this.DocumentName.Equals(input.DocumentName))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.DocumentStatus == input.DocumentStatus ||
                    (this.DocumentStatus != null &&
                    this.DocumentStatus.Equals(input.DocumentStatus))
                ) && 
                (
                    this.FieldId == input.FieldId ||
                    (this.FieldId != null &&
                    this.FieldId.Equals(input.FieldId))
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.LocationStart == input.LocationStart ||
                    (this.LocationStart != null &&
                    this.LocationStart.Equals(input.LocationStart))
                ) && 
                (
                    this.LocationEnd == input.LocationEnd ||
                    (this.LocationEnd != null &&
                    this.LocationEnd.Equals(input.LocationEnd))
                ) && 
                (
                    this.LocationText == input.LocationText ||
                    (this.LocationText != null &&
                    this.LocationText.Equals(input.LocationText))
                ) && 
                (
                    this.AssigneeId == input.AssigneeId ||
                    (this.AssigneeId != null &&
                    this.AssigneeId.Equals(input.AssigneeId))
                ) && 
                (
                    this.AssignDate == input.AssignDate ||
                    (this.AssignDate != null &&
                    this.AssignDate.Equals(input.AssignDate))
                ) && 
                (
                    this.StatusId == input.StatusId ||
                    (this.StatusId != null &&
                    this.StatusId.Equals(input.StatusId))
                ) && 
                (
                    this.StatusName == input.StatusName ||
                    (this.StatusName != null &&
                    this.StatusName.Equals(input.StatusName))
                ) && 
                (
                    this.AssigneeName == input.AssigneeName ||
                    (this.AssigneeName != null &&
                    this.AssigneeName.Equals(input.AssigneeName))
                ) && 
                (
                    this.ModifiedById == input.ModifiedById ||
                    (this.ModifiedById != null &&
                    this.ModifiedById.Equals(input.ModifiedById))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pk != null)
                    hashCode = hashCode * 59 + this.Pk.GetHashCode();
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.DocumentName != null)
                    hashCode = hashCode * 59 + this.DocumentName.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.DocumentStatus != null)
                    hashCode = hashCode * 59 + this.DocumentStatus.GetHashCode();
                if (this.FieldId != null)
                    hashCode = hashCode * 59 + this.FieldId.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.LocationStart != null)
                    hashCode = hashCode * 59 + this.LocationStart.GetHashCode();
                if (this.LocationEnd != null)
                    hashCode = hashCode * 59 + this.LocationEnd.GetHashCode();
                if (this.LocationText != null)
                    hashCode = hashCode * 59 + this.LocationText.GetHashCode();
                if (this.AssigneeId != null)
                    hashCode = hashCode * 59 + this.AssigneeId.GetHashCode();
                if (this.AssignDate != null)
                    hashCode = hashCode * 59 + this.AssignDate.GetHashCode();
                if (this.StatusId != null)
                    hashCode = hashCode * 59 + this.StatusId.GetHashCode();
                if (this.StatusName != null)
                    hashCode = hashCode * 59 + this.StatusName.GetHashCode();
                if (this.AssigneeName != null)
                    hashCode = hashCode * 59 + this.AssigneeName.GetHashCode();
                if (this.ModifiedById != null)
                    hashCode = hashCode * 59 + this.ModifiedById.GetHashCode();
                if (this.ModifiedDate != null)
                    hashCode = hashCode * 59 + this.ModifiedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // LocationStart (int?) maximum
            if(this.LocationStart > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationStart, must be a value less than or equal to 2147483647.", new [] { "LocationStart" });
            }

            // LocationStart (int?) minimum
            if(this.LocationStart < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationStart, must be a value greater than or equal to 0.", new [] { "LocationStart" });
            }



            // LocationEnd (int?) maximum
            if(this.LocationEnd > (int?)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationEnd, must be a value less than or equal to 2147483647.", new [] { "LocationEnd" });
            }

            // LocationEnd (int?) minimum
            if(this.LocationEnd < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationEnd, must be a value greater than or equal to 0.", new [] { "LocationEnd" });
            }

            yield break;
        }
    }

}
