/* 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MarkUnmarkForDeleteDocumentsRequest
    /// </summary>
    [DataContract]
    public partial class MarkUnmarkForDeleteDocumentsRequest :  IEquatable<MarkUnmarkForDeleteDocumentsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarkUnmarkForDeleteDocumentsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarkUnmarkForDeleteDocumentsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarkUnmarkForDeleteDocumentsRequest" /> class.
        /// </summary>
        /// <param name="all">all.</param>
        /// <param name="projectId">projectId (required).</param>
        /// <param name="documentIds">documentIds.</param>
        public MarkUnmarkForDeleteDocumentsRequest(bool all = default(bool), int projectId = default(int), List<int> documentIds = default(List<int>))
        {
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new InvalidDataException("projectId is a required property for MarkUnmarkForDeleteDocumentsRequest and cannot be null");
            }
            else
            {
                this.ProjectId = projectId;
            }
            
            this.All = all;
            this.DocumentIds = documentIds;
        }
        
        /// <summary>
        /// Gets or Sets All
        /// </summary>
        [DataMember(Name="all", EmitDefaultValue=false)]
        public bool All { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="project_id", EmitDefaultValue=true)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentIds
        /// </summary>
        [DataMember(Name="document_ids", EmitDefaultValue=false)]
        public List<int> DocumentIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarkUnmarkForDeleteDocumentsRequest {\n");
            sb.Append("  All: ").Append(All).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  DocumentIds: ").Append(DocumentIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarkUnmarkForDeleteDocumentsRequest);
        }

        /// <summary>
        /// Returns true if MarkUnmarkForDeleteDocumentsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MarkUnmarkForDeleteDocumentsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarkUnmarkForDeleteDocumentsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.All == input.All ||
                    (this.All != null &&
                    this.All.Equals(input.All))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.DocumentIds == input.DocumentIds ||
                    this.DocumentIds != null &&
                    input.DocumentIds != null &&
                    this.DocumentIds.SequenceEqual(input.DocumentIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.All != null)
                    hashCode = hashCode * 59 + this.All.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.DocumentIds != null)
                    hashCode = hashCode * 59 + this.DocumentIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
