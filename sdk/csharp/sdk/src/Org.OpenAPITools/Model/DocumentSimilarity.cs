/* 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentSimilarity
    /// </summary>
    [DataContract]
    public partial class DocumentSimilarity :  IEquatable<DocumentSimilarity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSimilarity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentSimilarity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSimilarity" /> class.
        /// </summary>
        /// <param name="similarity">similarity (required).</param>
        public DocumentSimilarity(string similarity = default(string))
        {
            // to ensure "similarity" is required (not null)
            if (similarity == null)
            {
                throw new InvalidDataException("similarity is a required property for DocumentSimilarity and cannot be null");
            }
            else
            {
                this.Similarity = similarity;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Pk
        /// </summary>
        [DataMember(Name="pk", EmitDefaultValue=false)]
        public int Pk { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentAName
        /// </summary>
        [DataMember(Name="document_a__name", EmitDefaultValue=false)]
        public string DocumentAName { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentADescription
        /// </summary>
        [DataMember(Name="document_a__description", EmitDefaultValue=false)]
        public string DocumentADescription { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentAPk
        /// </summary>
        [DataMember(Name="document_a__pk", EmitDefaultValue=false)]
        public string DocumentAPk { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentADocumentType
        /// </summary>
        [DataMember(Name="document_a__document_type", EmitDefaultValue=false)]
        public string DocumentADocumentType { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentBName
        /// </summary>
        [DataMember(Name="document_b__name", EmitDefaultValue=false)]
        public string DocumentBName { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentBDescription
        /// </summary>
        [DataMember(Name="document_b__description", EmitDefaultValue=false)]
        public string DocumentBDescription { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentBPk
        /// </summary>
        [DataMember(Name="document_b__pk", EmitDefaultValue=false)]
        public string DocumentBPk { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentBDocumentType
        /// </summary>
        [DataMember(Name="document_b__document_type", EmitDefaultValue=false)]
        public string DocumentBDocumentType { get; private set; }

        /// <summary>
        /// Gets or Sets Similarity
        /// </summary>
        [DataMember(Name="similarity", EmitDefaultValue=true)]
        public string Similarity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentSimilarity {\n");
            sb.Append("  Pk: ").Append(Pk).Append("\n");
            sb.Append("  DocumentAName: ").Append(DocumentAName).Append("\n");
            sb.Append("  DocumentADescription: ").Append(DocumentADescription).Append("\n");
            sb.Append("  DocumentAPk: ").Append(DocumentAPk).Append("\n");
            sb.Append("  DocumentADocumentType: ").Append(DocumentADocumentType).Append("\n");
            sb.Append("  DocumentBName: ").Append(DocumentBName).Append("\n");
            sb.Append("  DocumentBDescription: ").Append(DocumentBDescription).Append("\n");
            sb.Append("  DocumentBPk: ").Append(DocumentBPk).Append("\n");
            sb.Append("  DocumentBDocumentType: ").Append(DocumentBDocumentType).Append("\n");
            sb.Append("  Similarity: ").Append(Similarity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentSimilarity);
        }

        /// <summary>
        /// Returns true if DocumentSimilarity instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentSimilarity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentSimilarity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pk == input.Pk ||
                    (this.Pk != null &&
                    this.Pk.Equals(input.Pk))
                ) && 
                (
                    this.DocumentAName == input.DocumentAName ||
                    (this.DocumentAName != null &&
                    this.DocumentAName.Equals(input.DocumentAName))
                ) && 
                (
                    this.DocumentADescription == input.DocumentADescription ||
                    (this.DocumentADescription != null &&
                    this.DocumentADescription.Equals(input.DocumentADescription))
                ) && 
                (
                    this.DocumentAPk == input.DocumentAPk ||
                    (this.DocumentAPk != null &&
                    this.DocumentAPk.Equals(input.DocumentAPk))
                ) && 
                (
                    this.DocumentADocumentType == input.DocumentADocumentType ||
                    (this.DocumentADocumentType != null &&
                    this.DocumentADocumentType.Equals(input.DocumentADocumentType))
                ) && 
                (
                    this.DocumentBName == input.DocumentBName ||
                    (this.DocumentBName != null &&
                    this.DocumentBName.Equals(input.DocumentBName))
                ) && 
                (
                    this.DocumentBDescription == input.DocumentBDescription ||
                    (this.DocumentBDescription != null &&
                    this.DocumentBDescription.Equals(input.DocumentBDescription))
                ) && 
                (
                    this.DocumentBPk == input.DocumentBPk ||
                    (this.DocumentBPk != null &&
                    this.DocumentBPk.Equals(input.DocumentBPk))
                ) && 
                (
                    this.DocumentBDocumentType == input.DocumentBDocumentType ||
                    (this.DocumentBDocumentType != null &&
                    this.DocumentBDocumentType.Equals(input.DocumentBDocumentType))
                ) && 
                (
                    this.Similarity == input.Similarity ||
                    (this.Similarity != null &&
                    this.Similarity.Equals(input.Similarity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pk != null)
                    hashCode = hashCode * 59 + this.Pk.GetHashCode();
                if (this.DocumentAName != null)
                    hashCode = hashCode * 59 + this.DocumentAName.GetHashCode();
                if (this.DocumentADescription != null)
                    hashCode = hashCode * 59 + this.DocumentADescription.GetHashCode();
                if (this.DocumentAPk != null)
                    hashCode = hashCode * 59 + this.DocumentAPk.GetHashCode();
                if (this.DocumentADocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentADocumentType.GetHashCode();
                if (this.DocumentBName != null)
                    hashCode = hashCode * 59 + this.DocumentBName.GetHashCode();
                if (this.DocumentBDescription != null)
                    hashCode = hashCode * 59 + this.DocumentBDescription.GetHashCode();
                if (this.DocumentBPk != null)
                    hashCode = hashCode * 59 + this.DocumentBPk.GetHashCode();
                if (this.DocumentBDocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentBDocumentType.GetHashCode();
                if (this.Similarity != null)
                    hashCode = hashCode * 59 + this.Similarity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
