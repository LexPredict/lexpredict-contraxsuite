/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.188
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProjectClustering
    /// </summary>
    [DataContract]
    public partial class ProjectClustering :  IEquatable<ProjectClustering>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectClustering" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectClustering() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectClustering" /> class.
        /// </summary>
        /// <param name="metadata">metadata.</param>
        /// <param name="reason">reason.</param>
        /// <param name="projectClustersDocumentsCount">projectClustersDocumentsCount (required).</param>
        public ProjectClustering(Object metadata = default(Object), string reason = default(string), int projectClustersDocumentsCount = default(int))
        {
            this.Metadata = metadata;
            this.Reason = reason;
            // to ensure "projectClustersDocumentsCount" is required (not null)
            if (projectClustersDocumentsCount == null)
            {
                throw new InvalidDataException("projectClustersDocumentsCount is a required property for ProjectClustering and cannot be null");
            }
            else
            {
                this.ProjectClustersDocumentsCount = projectClustersDocumentsCount;
            }

            this.Metadata = metadata;
            this.Reason = reason;
        }

        /// <summary>
        /// Gets or Sets Pk
        /// </summary>
        [DataMember(Name="pk", EmitDefaultValue=false)]
        public int Pk { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentClusters
        /// </summary>
        [DataMember(Name="document_clusters", EmitDefaultValue=false)]
        public List<ProjectClusteringDocumentClusters> DocumentClusters { get; private set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public DateTime CreatedDate { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; private set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=true)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets ProjectClustersDocumentsCount
        /// </summary>
        [DataMember(Name="project_clusters_documents_count", EmitDefaultValue=true)]
        public int ProjectClustersDocumentsCount { get; set; }

        /// <summary>
        /// Gets or Sets ProjectClustersActionsCount
        /// </summary>
        [DataMember(Name="project_clusters_actions_count", EmitDefaultValue=false)]
        public int ProjectClustersActionsCount { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectClustering {\n");
            sb.Append("  Pk: ").Append(Pk).Append("\n");
            sb.Append("  DocumentClusters: ").Append(DocumentClusters).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ProjectClustersDocumentsCount: ").Append(ProjectClustersDocumentsCount).Append("\n");
            sb.Append("  ProjectClustersActionsCount: ").Append(ProjectClustersActionsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectClustering);
        }

        /// <summary>
        /// Returns true if ProjectClustering instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectClustering to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectClustering input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pk == input.Pk ||
                    (this.Pk != null &&
                    this.Pk.Equals(input.Pk))
                ) && 
                (
                    this.DocumentClusters == input.DocumentClusters ||
                    this.DocumentClusters != null &&
                    input.DocumentClusters != null &&
                    this.DocumentClusters.SequenceEqual(input.DocumentClusters)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ProjectClustersDocumentsCount == input.ProjectClustersDocumentsCount ||
                    (this.ProjectClustersDocumentsCount != null &&
                    this.ProjectClustersDocumentsCount.Equals(input.ProjectClustersDocumentsCount))
                ) && 
                (
                    this.ProjectClustersActionsCount == input.ProjectClustersActionsCount ||
                    (this.ProjectClustersActionsCount != null &&
                    this.ProjectClustersActionsCount.Equals(input.ProjectClustersActionsCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pk != null)
                    hashCode = hashCode * 59 + this.Pk.GetHashCode();
                if (this.DocumentClusters != null)
                    hashCode = hashCode * 59 + this.DocumentClusters.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.ProjectClustersDocumentsCount != null)
                    hashCode = hashCode * 59 + this.ProjectClustersDocumentsCount.GetHashCode();
                if (this.ProjectClustersActionsCount != null)
                    hashCode = hashCode * 59 + this.ProjectClustersActionsCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
