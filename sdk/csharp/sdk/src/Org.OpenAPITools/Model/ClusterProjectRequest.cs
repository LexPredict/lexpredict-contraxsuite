/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ClusterProjectRequest
    /// </summary>
    [DataContract]
    public partial class ClusterProjectRequest :  IEquatable<ClusterProjectRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines ClusterBy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClusterByEnum
        {
            /// <summary>
            /// Enum Term for value: term
            /// </summary>
            [EnumMember(Value = "term")]
            Term = 1,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 2,

            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 3,

            /// <summary>
            /// Enum Definition for value: definition
            /// </summary>
            [EnumMember(Value = "definition")]
            Definition = 4,

            /// <summary>
            /// Enum Duration for value: duration
            /// </summary>
            [EnumMember(Value = "duration")]
            Duration = 5,

            /// <summary>
            /// Enum Party for value: party
            /// </summary>
            [EnumMember(Value = "party")]
            Party = 6,

            /// <summary>
            /// Enum Geoentity for value: geoentity
            /// </summary>
            [EnumMember(Value = "geoentity")]
            Geoentity = 7,

            /// <summary>
            /// Enum Currencyname for value: currency_name
            /// </summary>
            [EnumMember(Value = "currency_name")]
            Currencyname = 8,

            /// <summary>
            /// Enum Currencyvalue for value: currency_value
            /// </summary>
            [EnumMember(Value = "currency_value")]
            Currencyvalue = 9

        }

        /// <summary>
        /// Gets or Sets ClusterBy
        /// </summary>
        [DataMember(Name="cluster_by", EmitDefaultValue=true)]
        public ClusterByEnum ClusterBy { get; set; }
        /// <summary>
        /// Defines Method
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            /// <summary>
            /// Enum Kmeans for value: kmeans
            /// </summary>
            [EnumMember(Value = "kmeans")]
            Kmeans = 1,

            /// <summary>
            /// Enum Minibatchkmeans for value: minibatchkmeans
            /// </summary>
            [EnumMember(Value = "minibatchkmeans")]
            Minibatchkmeans = 2,

            /// <summary>
            /// Enum Birch for value: birch
            /// </summary>
            [EnumMember(Value = "birch")]
            Birch = 3

        }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name="method", EmitDefaultValue=true)]
        public MethodEnum Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterProjectRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClusterProjectRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterProjectRequest" /> class.
        /// </summary>
        /// <param name="nClusters">nClusters (required).</param>
        /// <param name="force">force.</param>
        /// <param name="clusterBy">clusterBy (required).</param>
        /// <param name="method">method (required).</param>
        /// <param name="requireConfirmation">requireConfirmation.</param>
        public ClusterProjectRequest(int nClusters = default(int), bool force = default(bool), ClusterByEnum clusterBy = default(ClusterByEnum), MethodEnum method = default(MethodEnum), bool requireConfirmation = default(bool))
        {
            // to ensure "nClusters" is required (not null)
            if (nClusters == null)
            {
                throw new InvalidDataException("nClusters is a required property for ClusterProjectRequest and cannot be null");
            }
            else
            {
                this.NClusters = nClusters;
            }

            // to ensure "clusterBy" is required (not null)
            if (clusterBy == null)
            {
                throw new InvalidDataException("clusterBy is a required property for ClusterProjectRequest and cannot be null");
            }
            else
            {
                this.ClusterBy = clusterBy;
            }

            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new InvalidDataException("method is a required property for ClusterProjectRequest and cannot be null");
            }
            else
            {
                this.Method = method;
            }

            this.Force = force;
            this.RequireConfirmation = requireConfirmation;
        }

        /// <summary>
        /// Gets or Sets NClusters
        /// </summary>
        [DataMember(Name="n_clusters", EmitDefaultValue=true)]
        public int NClusters { get; set; }

        /// <summary>
        /// Gets or Sets Force
        /// </summary>
        [DataMember(Name="force", EmitDefaultValue=false)]
        public bool Force { get; set; }



        /// <summary>
        /// Gets or Sets RequireConfirmation
        /// </summary>
        [DataMember(Name="require_confirmation", EmitDefaultValue=false)]
        public bool RequireConfirmation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClusterProjectRequest {\n");
            sb.Append("  NClusters: ").Append(NClusters).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("  ClusterBy: ").Append(ClusterBy).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  RequireConfirmation: ").Append(RequireConfirmation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClusterProjectRequest);
        }

        /// <summary>
        /// Returns true if ClusterProjectRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ClusterProjectRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClusterProjectRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NClusters == input.NClusters ||
                    (this.NClusters != null &&
                    this.NClusters.Equals(input.NClusters))
                ) && 
                (
                    this.Force == input.Force ||
                    (this.Force != null &&
                    this.Force.Equals(input.Force))
                ) && 
                (
                    this.ClusterBy == input.ClusterBy ||
                    (this.ClusterBy != null &&
                    this.ClusterBy.Equals(input.ClusterBy))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.RequireConfirmation == input.RequireConfirmation ||
                    (this.RequireConfirmation != null &&
                    this.RequireConfirmation.Equals(input.RequireConfirmation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NClusters != null)
                    hashCode = hashCode * 59 + this.NClusters.GetHashCode();
                if (this.Force != null)
                    hashCode = hashCode * 59 + this.Force.GetHashCode();
                if (this.ClusterBy != null)
                    hashCode = hashCode * 59 + this.ClusterBy.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.RequireConfirmation != null)
                    hashCode = hashCode * 59 + this.RequireConfirmation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
