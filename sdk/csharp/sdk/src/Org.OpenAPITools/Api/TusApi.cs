/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITusApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer file data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="guid"></param>
        /// <param name="uploadOffset">Upload offset, bytes.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse400</returns>
        InlineResponse400 TusUploadSessionUploadSessionIdUploadGuidPATCH (string uploadSessionId, string guid, int uploadOffset, string tusResumable, bool? force = default(bool?), System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer file data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="guid"></param>
        /// <param name="uploadOffset">Upload offset, bytes.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse400</returns>
        ApiResponse<InlineResponse400> TusUploadSessionUploadSessionIdUploadGuidPATCHWithHttpInfo (string uploadSessionId, string guid, int uploadOffset, string tusResumable, bool? force = default(bool?), System.IO.Stream body = default(System.IO.Stream));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="uploadLength">File length.</param>
        /// <param name="uploadMetadata">Upload metadata include file name, relative path, etc.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        void TusUploadSessionUploadSessionIdUploadPOST (string uploadSessionId, int uploadLength, string uploadMetadata, string tusResumable, bool? force = default(bool?), Dictionary<string, Object> requestBody = default(Dictionary<string, Object>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="uploadLength">File length.</param>
        /// <param name="uploadMetadata">Upload metadata include file name, relative path, etc.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TusUploadSessionUploadSessionIdUploadPOSTWithHttpInfo (string uploadSessionId, int uploadLength, string uploadMetadata, string tusResumable, bool? force = default(bool?), Dictionary<string, Object> requestBody = default(Dictionary<string, Object>));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer file data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="guid"></param>
        /// <param name="uploadOffset">Upload offset, bytes.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse400</returns>
        System.Threading.Tasks.Task<InlineResponse400> TusUploadSessionUploadSessionIdUploadGuidPATCHAsync (string uploadSessionId, string guid, int uploadOffset, string tusResumable, bool? force = default(bool?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer file data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="guid"></param>
        /// <param name="uploadOffset">Upload offset, bytes.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse400)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse400>> TusUploadSessionUploadSessionIdUploadGuidPATCHWithHttpInfoAsync (string uploadSessionId, string guid, int uploadOffset, string tusResumable, bool? force = default(bool?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="uploadLength">File length.</param>
        /// <param name="uploadMetadata">Upload metadata include file name, relative path, etc.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TusUploadSessionUploadSessionIdUploadPOSTAsync (string uploadSessionId, int uploadLength, string uploadMetadata, string tusResumable, bool? force = default(bool?), Dictionary<string, Object> requestBody = default(Dictionary<string, Object>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="uploadLength">File length.</param>
        /// <param name="uploadMetadata">Upload metadata include file name, relative path, etc.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TusUploadSessionUploadSessionIdUploadPOSTWithHttpInfoAsync (string uploadSessionId, int uploadLength, string uploadMetadata, string tusResumable, bool? force = default(bool?), Dictionary<string, Object> requestBody = default(Dictionary<string, Object>), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TusApi : ITusApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TusApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TusApi"/> class
        /// </summary>
        /// <returns></returns>
        public TusApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TusApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TusApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Transfer file data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="guid"></param>
        /// <param name="uploadOffset">Upload offset, bytes.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse400</returns>
        public InlineResponse400 TusUploadSessionUploadSessionIdUploadGuidPATCH (string uploadSessionId, string guid, int uploadOffset, string tusResumable, bool? force = default(bool?), System.IO.Stream body = default(System.IO.Stream))
        {
             ApiResponse<InlineResponse400> localVarResponse = TusUploadSessionUploadSessionIdUploadGuidPATCHWithHttpInfo(uploadSessionId, guid, uploadOffset, tusResumable, force, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Transfer file data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="guid"></param>
        /// <param name="uploadOffset">Upload offset, bytes.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse400</returns>
        public ApiResponse<InlineResponse400> TusUploadSessionUploadSessionIdUploadGuidPATCHWithHttpInfo (string uploadSessionId, string guid, int uploadOffset, string tusResumable, bool? force = default(bool?), System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'uploadSessionId' is set
            if (uploadSessionId == null)
                throw new ApiException(400, "Missing required parameter 'uploadSessionId' when calling TusApi->TusUploadSessionUploadSessionIdUploadGuidPATCH");
            // verify the required parameter 'guid' is set
            if (guid == null)
                throw new ApiException(400, "Missing required parameter 'guid' when calling TusApi->TusUploadSessionUploadSessionIdUploadGuidPATCH");
            // verify the required parameter 'uploadOffset' is set
            if (uploadOffset == null)
                throw new ApiException(400, "Missing required parameter 'uploadOffset' when calling TusApi->TusUploadSessionUploadSessionIdUploadGuidPATCH");
            // verify the required parameter 'tusResumable' is set
            if (tusResumable == null)
                throw new ApiException(400, "Missing required parameter 'tusResumable' when calling TusApi->TusUploadSessionUploadSessionIdUploadGuidPATCH");

            var localVarPath = "/api/v1/tus/upload-session/{upload_session_id}/upload/{guid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/offset+octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadSessionId != null) localVarPathParams.Add("upload_session_id", this.Configuration.ApiClient.ParameterToString(uploadSessionId)); // path parameter
            if (guid != null) localVarPathParams.Add("guid", this.Configuration.ApiClient.ParameterToString(guid)); // path parameter
            if (force != null) localVarHeaderParams.Add("force", this.Configuration.ApiClient.ParameterToString(force)); // header parameter
            if (uploadOffset != null) localVarHeaderParams.Add("Upload-Offset", this.Configuration.ApiClient.ParameterToString(uploadOffset)); // header parameter
            if (tusResumable != null) localVarHeaderParams.Add("Tus-Resumable", this.Configuration.ApiClient.ParameterToString(tusResumable)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TusUploadSessionUploadSessionIdUploadGuidPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse400>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse400) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse400)));
        }

        /// <summary>
        ///  Transfer file data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="guid"></param>
        /// <param name="uploadOffset">Upload offset, bytes.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse400</returns>
        public async System.Threading.Tasks.Task<InlineResponse400> TusUploadSessionUploadSessionIdUploadGuidPATCHAsync (string uploadSessionId, string guid, int uploadOffset, string tusResumable, bool? force = default(bool?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse400> localVarResponse = await TusUploadSessionUploadSessionIdUploadGuidPATCHWithHttpInfoAsync(uploadSessionId, guid, uploadOffset, tusResumable, force, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Transfer file data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="guid"></param>
        /// <param name="uploadOffset">Upload offset, bytes.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse400)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse400>> TusUploadSessionUploadSessionIdUploadGuidPATCHWithHttpInfoAsync (string uploadSessionId, string guid, int uploadOffset, string tusResumable, bool? force = default(bool?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uploadSessionId' is set
            if (uploadSessionId == null)
                throw new ApiException(400, "Missing required parameter 'uploadSessionId' when calling TusApi->TusUploadSessionUploadSessionIdUploadGuidPATCH");
            // verify the required parameter 'guid' is set
            if (guid == null)
                throw new ApiException(400, "Missing required parameter 'guid' when calling TusApi->TusUploadSessionUploadSessionIdUploadGuidPATCH");
            // verify the required parameter 'uploadOffset' is set
            if (uploadOffset == null)
                throw new ApiException(400, "Missing required parameter 'uploadOffset' when calling TusApi->TusUploadSessionUploadSessionIdUploadGuidPATCH");
            // verify the required parameter 'tusResumable' is set
            if (tusResumable == null)
                throw new ApiException(400, "Missing required parameter 'tusResumable' when calling TusApi->TusUploadSessionUploadSessionIdUploadGuidPATCH");

            var localVarPath = "/api/v1/tus/upload-session/{upload_session_id}/upload/{guid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/offset+octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadSessionId != null) localVarPathParams.Add("upload_session_id", this.Configuration.ApiClient.ParameterToString(uploadSessionId)); // path parameter
            if (guid != null) localVarPathParams.Add("guid", this.Configuration.ApiClient.ParameterToString(guid)); // path parameter
            if (force != null) localVarHeaderParams.Add("force", this.Configuration.ApiClient.ParameterToString(force)); // header parameter
            if (uploadOffset != null) localVarHeaderParams.Add("Upload-Offset", this.Configuration.ApiClient.ParameterToString(uploadOffset)); // header parameter
            if (tusResumable != null) localVarHeaderParams.Add("Tus-Resumable", this.Configuration.ApiClient.ParameterToString(tusResumable)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TusUploadSessionUploadSessionIdUploadGuidPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse400>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse400) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse400)));
        }

        /// <summary>
        ///  Create an Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="uploadLength">File length.</param>
        /// <param name="uploadMetadata">Upload metadata include file name, relative path, etc.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns></returns>
        public void TusUploadSessionUploadSessionIdUploadPOST (string uploadSessionId, int uploadLength, string uploadMetadata, string tusResumable, bool? force = default(bool?), Dictionary<string, Object> requestBody = default(Dictionary<string, Object>))
        {
             TusUploadSessionUploadSessionIdUploadPOSTWithHttpInfo(uploadSessionId, uploadLength, uploadMetadata, tusResumable, force, requestBody);
        }

        /// <summary>
        ///  Create an Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="uploadLength">File length.</param>
        /// <param name="uploadMetadata">Upload metadata include file name, relative path, etc.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TusUploadSessionUploadSessionIdUploadPOSTWithHttpInfo (string uploadSessionId, int uploadLength, string uploadMetadata, string tusResumable, bool? force = default(bool?), Dictionary<string, Object> requestBody = default(Dictionary<string, Object>))
        {
            // verify the required parameter 'uploadSessionId' is set
            if (uploadSessionId == null)
                throw new ApiException(400, "Missing required parameter 'uploadSessionId' when calling TusApi->TusUploadSessionUploadSessionIdUploadPOST");
            // verify the required parameter 'uploadLength' is set
            if (uploadLength == null)
                throw new ApiException(400, "Missing required parameter 'uploadLength' when calling TusApi->TusUploadSessionUploadSessionIdUploadPOST");
            // verify the required parameter 'uploadMetadata' is set
            if (uploadMetadata == null)
                throw new ApiException(400, "Missing required parameter 'uploadMetadata' when calling TusApi->TusUploadSessionUploadSessionIdUploadPOST");
            // verify the required parameter 'tusResumable' is set
            if (tusResumable == null)
                throw new ApiException(400, "Missing required parameter 'tusResumable' when calling TusApi->TusUploadSessionUploadSessionIdUploadPOST");

            var localVarPath = "/api/v1/tus/upload-session/{upload_session_id}/upload/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadSessionId != null) localVarPathParams.Add("upload_session_id", this.Configuration.ApiClient.ParameterToString(uploadSessionId)); // path parameter
            if (force != null) localVarHeaderParams.Add("force", this.Configuration.ApiClient.ParameterToString(force)); // header parameter
            if (uploadLength != null) localVarHeaderParams.Add("Upload-Length", this.Configuration.ApiClient.ParameterToString(uploadLength)); // header parameter
            if (uploadMetadata != null) localVarHeaderParams.Add("Upload-Metadata", this.Configuration.ApiClient.ParameterToString(uploadMetadata)); // header parameter
            if (tusResumable != null) localVarHeaderParams.Add("Tus-Resumable", this.Configuration.ApiClient.ParameterToString(tusResumable)); // header parameter
            if (requestBody != null && requestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestBody; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TusUploadSessionUploadSessionIdUploadPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Create an Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="uploadLength">File length.</param>
        /// <param name="uploadMetadata">Upload metadata include file name, relative path, etc.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TusUploadSessionUploadSessionIdUploadPOSTAsync (string uploadSessionId, int uploadLength, string uploadMetadata, string tusResumable, bool? force = default(bool?), Dictionary<string, Object> requestBody = default(Dictionary<string, Object>), CancellationToken cancellationToken = default(CancellationToken))
        {
             await TusUploadSessionUploadSessionIdUploadPOSTWithHttpInfoAsync(uploadSessionId, uploadLength, uploadMetadata, tusResumable, force, requestBody, cancellationToken);

        }

        /// <summary>
        ///  Create an Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionId"></param>
        /// <param name="uploadLength">File length.</param>
        /// <param name="uploadMetadata">Upload metadata include file name, relative path, etc.</param>
        /// <param name="tusResumable">1.0.0</param>
        /// <param name="force">Upload a file even if it exists. (optional)</param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TusUploadSessionUploadSessionIdUploadPOSTWithHttpInfoAsync (string uploadSessionId, int uploadLength, string uploadMetadata, string tusResumable, bool? force = default(bool?), Dictionary<string, Object> requestBody = default(Dictionary<string, Object>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uploadSessionId' is set
            if (uploadSessionId == null)
                throw new ApiException(400, "Missing required parameter 'uploadSessionId' when calling TusApi->TusUploadSessionUploadSessionIdUploadPOST");
            // verify the required parameter 'uploadLength' is set
            if (uploadLength == null)
                throw new ApiException(400, "Missing required parameter 'uploadLength' when calling TusApi->TusUploadSessionUploadSessionIdUploadPOST");
            // verify the required parameter 'uploadMetadata' is set
            if (uploadMetadata == null)
                throw new ApiException(400, "Missing required parameter 'uploadMetadata' when calling TusApi->TusUploadSessionUploadSessionIdUploadPOST");
            // verify the required parameter 'tusResumable' is set
            if (tusResumable == null)
                throw new ApiException(400, "Missing required parameter 'tusResumable' when calling TusApi->TusUploadSessionUploadSessionIdUploadPOST");

            var localVarPath = "/api/v1/tus/upload-session/{upload_session_id}/upload/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadSessionId != null) localVarPathParams.Add("upload_session_id", this.Configuration.ApiClient.ParameterToString(uploadSessionId)); // path parameter
            if (force != null) localVarHeaderParams.Add("force", this.Configuration.ApiClient.ParameterToString(force)); // header parameter
            if (uploadLength != null) localVarHeaderParams.Add("Upload-Length", this.Configuration.ApiClient.ParameterToString(uploadLength)); // header parameter
            if (uploadMetadata != null) localVarHeaderParams.Add("Upload-Metadata", this.Configuration.ApiClient.ParameterToString(uploadMetadata)); // header parameter
            if (tusResumable != null) localVarHeaderParams.Add("Tus-Resumable", this.Configuration.ApiClient.ParameterToString(tusResumable)); // header parameter
            if (requestBody != null && requestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestBody; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TusUploadSessionUploadSessionIdUploadPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
