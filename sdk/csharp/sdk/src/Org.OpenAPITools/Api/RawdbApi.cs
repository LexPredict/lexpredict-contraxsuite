/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRawdbApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> RawdbConfigGET ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> RawdbConfigGETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <param name="columns">Column names separated by commas (optional)</param>
        /// <param name="associatedText">Boolean - show associated text (optional)</param>
        /// <param name="asZip">Boolean - export as zip (optional)</param>
        /// <param name="fmt">Export format (optional)</param>
        /// <param name="limit">Page Size (optional)</param>
        /// <param name="orderBy">Sort order - column names separated by commas (optional)</param>
        /// <param name="savedFilters">Saved filter ids separated by commas (optional)</param>
        /// <param name="saveFilter">Save filter (optional)</param>
        /// <param name="returnReviewed">Return Reviewed documents count (optional)</param>
        /// <param name="returnTotal">Return total documents count (optional)</param>
        /// <param name="returnData">Return data (optional)</param>
        /// <param name="ignoreErrors">Ignore errors (optional)</param>
        /// <param name="filters">Filter params (optional)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> RawdbDocumentsDocumentTypeCodeGET (string documentTypeCode, string projectIds = default(string), string columns = default(string), bool? associatedText = default(bool?), bool? asZip = default(bool?), string fmt = default(string), int? limit = default(int?), string orderBy = default(string), string savedFilters = default(string), bool? saveFilter = default(bool?), bool? returnReviewed = default(bool?), bool? returnTotal = default(bool?), bool? returnData = default(bool?), bool? ignoreErrors = default(bool?), Dictionary<string, string> filters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <param name="columns">Column names separated by commas (optional)</param>
        /// <param name="associatedText">Boolean - show associated text (optional)</param>
        /// <param name="asZip">Boolean - export as zip (optional)</param>
        /// <param name="fmt">Export format (optional)</param>
        /// <param name="limit">Page Size (optional)</param>
        /// <param name="orderBy">Sort order - column names separated by commas (optional)</param>
        /// <param name="savedFilters">Saved filter ids separated by commas (optional)</param>
        /// <param name="saveFilter">Save filter (optional)</param>
        /// <param name="returnReviewed">Return Reviewed documents count (optional)</param>
        /// <param name="returnTotal">Return total documents count (optional)</param>
        /// <param name="returnData">Return data (optional)</param>
        /// <param name="ignoreErrors">Ignore errors (optional)</param>
        /// <param name="filters">Filter params (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> RawdbDocumentsDocumentTypeCodeGETWithHttpInfo (string documentTypeCode, string projectIds = default(string), string columns = default(string), bool? associatedText = default(bool?), bool? asZip = default(bool?), string fmt = default(string), int? limit = default(int?), string orderBy = default(string), string savedFilters = default(string), bool? saveFilter = default(bool?), bool? returnReviewed = default(bool?), bool? returnTotal = default(bool?), bool? returnData = default(bool?), bool? ignoreErrors = default(bool?), Dictionary<string, string> filters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// See .get() method signature, .post() method just reflects it and uses the same request.GET params to get data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="rawdbDocumentsPOSTRequest"> (optional)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> RawdbDocumentsDocumentTypeCodePOST (string documentTypeCode, RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest = default(RawdbDocumentsPOSTRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// See .get() method signature, .post() method just reflects it and uses the same request.GET params to get data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="rawdbDocumentsPOSTRequest"> (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> RawdbDocumentsDocumentTypeCodePOSTWithHttpInfo (string documentTypeCode, RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest = default(RawdbDocumentsPOSTRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> RawdbProjectStatsProjectIdGET (string projectId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> RawdbProjectStatsProjectIdGETWithHttpInfo (string projectId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SocialAccountsResponse</returns>
        SocialAccountsResponse RawdbSocialAccountsGET ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SocialAccountsResponse</returns>
        ApiResponse<SocialAccountsResponse> RawdbSocialAccountsGETWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> RawdbConfigGETAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RawdbConfigGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <param name="columns">Column names separated by commas (optional)</param>
        /// <param name="associatedText">Boolean - show associated text (optional)</param>
        /// <param name="asZip">Boolean - export as zip (optional)</param>
        /// <param name="fmt">Export format (optional)</param>
        /// <param name="limit">Page Size (optional)</param>
        /// <param name="orderBy">Sort order - column names separated by commas (optional)</param>
        /// <param name="savedFilters">Saved filter ids separated by commas (optional)</param>
        /// <param name="saveFilter">Save filter (optional)</param>
        /// <param name="returnReviewed">Return Reviewed documents count (optional)</param>
        /// <param name="returnTotal">Return total documents count (optional)</param>
        /// <param name="returnData">Return data (optional)</param>
        /// <param name="ignoreErrors">Ignore errors (optional)</param>
        /// <param name="filters">Filter params (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> RawdbDocumentsDocumentTypeCodeGETAsync (string documentTypeCode, string projectIds = default(string), string columns = default(string), bool? associatedText = default(bool?), bool? asZip = default(bool?), string fmt = default(string), int? limit = default(int?), string orderBy = default(string), string savedFilters = default(string), bool? saveFilter = default(bool?), bool? returnReviewed = default(bool?), bool? returnTotal = default(bool?), bool? returnData = default(bool?), bool? ignoreErrors = default(bool?), Dictionary<string, string> filters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <param name="columns">Column names separated by commas (optional)</param>
        /// <param name="associatedText">Boolean - show associated text (optional)</param>
        /// <param name="asZip">Boolean - export as zip (optional)</param>
        /// <param name="fmt">Export format (optional)</param>
        /// <param name="limit">Page Size (optional)</param>
        /// <param name="orderBy">Sort order - column names separated by commas (optional)</param>
        /// <param name="savedFilters">Saved filter ids separated by commas (optional)</param>
        /// <param name="saveFilter">Save filter (optional)</param>
        /// <param name="returnReviewed">Return Reviewed documents count (optional)</param>
        /// <param name="returnTotal">Return total documents count (optional)</param>
        /// <param name="returnData">Return data (optional)</param>
        /// <param name="ignoreErrors">Ignore errors (optional)</param>
        /// <param name="filters">Filter params (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RawdbDocumentsDocumentTypeCodeGETWithHttpInfoAsync (string documentTypeCode, string projectIds = default(string), string columns = default(string), bool? associatedText = default(bool?), bool? asZip = default(bool?), string fmt = default(string), int? limit = default(int?), string orderBy = default(string), string savedFilters = default(string), bool? saveFilter = default(bool?), bool? returnReviewed = default(bool?), bool? returnTotal = default(bool?), bool? returnData = default(bool?), bool? ignoreErrors = default(bool?), Dictionary<string, string> filters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// See .get() method signature, .post() method just reflects it and uses the same request.GET params to get data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="rawdbDocumentsPOSTRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> RawdbDocumentsDocumentTypeCodePOSTAsync (string documentTypeCode, RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest = default(RawdbDocumentsPOSTRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// See .get() method signature, .post() method just reflects it and uses the same request.GET params to get data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="rawdbDocumentsPOSTRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RawdbDocumentsDocumentTypeCodePOSTWithHttpInfoAsync (string documentTypeCode, RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest = default(RawdbDocumentsPOSTRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> RawdbProjectStatsProjectIdGETAsync (string projectId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RawdbProjectStatsProjectIdGETWithHttpInfoAsync (string projectId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SocialAccountsResponse</returns>
        System.Threading.Tasks.Task<SocialAccountsResponse> RawdbSocialAccountsGETAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SocialAccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SocialAccountsResponse>> RawdbSocialAccountsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RawdbApi : IRawdbApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RawdbApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RawdbApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RawdbApi"/> class
        /// </summary>
        /// <returns></returns>
        public RawdbApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RawdbApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RawdbApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> RawdbConfigGET ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = RawdbConfigGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> RawdbConfigGETWithHttpInfo ()
        {

            var localVarPath = "/api/v1/rawdb/config/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawdbConfigGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> RawdbConfigGETAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await RawdbConfigGETWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RawdbConfigGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/rawdb/config/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawdbConfigGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <param name="columns">Column names separated by commas (optional)</param>
        /// <param name="associatedText">Boolean - show associated text (optional)</param>
        /// <param name="asZip">Boolean - export as zip (optional)</param>
        /// <param name="fmt">Export format (optional)</param>
        /// <param name="limit">Page Size (optional)</param>
        /// <param name="orderBy">Sort order - column names separated by commas (optional)</param>
        /// <param name="savedFilters">Saved filter ids separated by commas (optional)</param>
        /// <param name="saveFilter">Save filter (optional)</param>
        /// <param name="returnReviewed">Return Reviewed documents count (optional)</param>
        /// <param name="returnTotal">Return total documents count (optional)</param>
        /// <param name="returnData">Return data (optional)</param>
        /// <param name="ignoreErrors">Ignore errors (optional)</param>
        /// <param name="filters">Filter params (optional)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> RawdbDocumentsDocumentTypeCodeGET (string documentTypeCode, string projectIds = default(string), string columns = default(string), bool? associatedText = default(bool?), bool? asZip = default(bool?), string fmt = default(string), int? limit = default(int?), string orderBy = default(string), string savedFilters = default(string), bool? saveFilter = default(bool?), bool? returnReviewed = default(bool?), bool? returnTotal = default(bool?), bool? returnData = default(bool?), bool? ignoreErrors = default(bool?), Dictionary<string, string> filters = default(Dictionary<string, string>))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = RawdbDocumentsDocumentTypeCodeGETWithHttpInfo(documentTypeCode, projectIds, columns, associatedText, asZip, fmt, limit, orderBy, savedFilters, saveFilter, returnReviewed, returnTotal, returnData, ignoreErrors, filters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <param name="columns">Column names separated by commas (optional)</param>
        /// <param name="associatedText">Boolean - show associated text (optional)</param>
        /// <param name="asZip">Boolean - export as zip (optional)</param>
        /// <param name="fmt">Export format (optional)</param>
        /// <param name="limit">Page Size (optional)</param>
        /// <param name="orderBy">Sort order - column names separated by commas (optional)</param>
        /// <param name="savedFilters">Saved filter ids separated by commas (optional)</param>
        /// <param name="saveFilter">Save filter (optional)</param>
        /// <param name="returnReviewed">Return Reviewed documents count (optional)</param>
        /// <param name="returnTotal">Return total documents count (optional)</param>
        /// <param name="returnData">Return data (optional)</param>
        /// <param name="ignoreErrors">Ignore errors (optional)</param>
        /// <param name="filters">Filter params (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> RawdbDocumentsDocumentTypeCodeGETWithHttpInfo (string documentTypeCode, string projectIds = default(string), string columns = default(string), bool? associatedText = default(bool?), bool? asZip = default(bool?), string fmt = default(string), int? limit = default(int?), string orderBy = default(string), string savedFilters = default(string), bool? saveFilter = default(bool?), bool? returnReviewed = default(bool?), bool? returnTotal = default(bool?), bool? returnData = default(bool?), bool? ignoreErrors = default(bool?), Dictionary<string, string> filters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'documentTypeCode' is set
            if (documentTypeCode == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeCode' when calling RawdbApi->RawdbDocumentsDocumentTypeCodeGET");

            var localVarPath = "/api/v1/rawdb/documents/{document_type_code}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeCode != null) localVarPathParams.Add("document_type_code", this.Configuration.ApiClient.ParameterToString(documentTypeCode)); // path parameter
            if (projectIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_ids", projectIds)); // query parameter
            if (columns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "columns", columns)); // query parameter
            if (associatedText != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "associated_text", associatedText)); // query parameter
            if (asZip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "as_zip", asZip)); // query parameter
            if (fmt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fmt", fmt)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (savedFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "saved_filters", savedFilters)); // query parameter
            if (saveFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "save_filter", saveFilter)); // query parameter
            if (returnReviewed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "return_reviewed", returnReviewed)); // query parameter
            if (returnTotal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "return_total", returnTotal)); // query parameter
            if (returnData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "return_data", returnData)); // query parameter
            if (ignoreErrors != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignore_errors", ignoreErrors)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawdbDocumentsDocumentTypeCodeGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <param name="columns">Column names separated by commas (optional)</param>
        /// <param name="associatedText">Boolean - show associated text (optional)</param>
        /// <param name="asZip">Boolean - export as zip (optional)</param>
        /// <param name="fmt">Export format (optional)</param>
        /// <param name="limit">Page Size (optional)</param>
        /// <param name="orderBy">Sort order - column names separated by commas (optional)</param>
        /// <param name="savedFilters">Saved filter ids separated by commas (optional)</param>
        /// <param name="saveFilter">Save filter (optional)</param>
        /// <param name="returnReviewed">Return Reviewed documents count (optional)</param>
        /// <param name="returnTotal">Return total documents count (optional)</param>
        /// <param name="returnData">Return data (optional)</param>
        /// <param name="ignoreErrors">Ignore errors (optional)</param>
        /// <param name="filters">Filter params (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> RawdbDocumentsDocumentTypeCodeGETAsync (string documentTypeCode, string projectIds = default(string), string columns = default(string), bool? associatedText = default(bool?), bool? asZip = default(bool?), string fmt = default(string), int? limit = default(int?), string orderBy = default(string), string savedFilters = default(string), bool? saveFilter = default(bool?), bool? returnReviewed = default(bool?), bool? returnTotal = default(bool?), bool? returnData = default(bool?), bool? ignoreErrors = default(bool?), Dictionary<string, string> filters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await RawdbDocumentsDocumentTypeCodeGETWithHttpInfoAsync(documentTypeCode, projectIds, columns, associatedText, asZip, fmt, limit, orderBy, savedFilters, saveFilter, returnReviewed, returnTotal, returnData, ignoreErrors, filters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <param name="columns">Column names separated by commas (optional)</param>
        /// <param name="associatedText">Boolean - show associated text (optional)</param>
        /// <param name="asZip">Boolean - export as zip (optional)</param>
        /// <param name="fmt">Export format (optional)</param>
        /// <param name="limit">Page Size (optional)</param>
        /// <param name="orderBy">Sort order - column names separated by commas (optional)</param>
        /// <param name="savedFilters">Saved filter ids separated by commas (optional)</param>
        /// <param name="saveFilter">Save filter (optional)</param>
        /// <param name="returnReviewed">Return Reviewed documents count (optional)</param>
        /// <param name="returnTotal">Return total documents count (optional)</param>
        /// <param name="returnData">Return data (optional)</param>
        /// <param name="ignoreErrors">Ignore errors (optional)</param>
        /// <param name="filters">Filter params (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RawdbDocumentsDocumentTypeCodeGETWithHttpInfoAsync (string documentTypeCode, string projectIds = default(string), string columns = default(string), bool? associatedText = default(bool?), bool? asZip = default(bool?), string fmt = default(string), int? limit = default(int?), string orderBy = default(string), string savedFilters = default(string), bool? saveFilter = default(bool?), bool? returnReviewed = default(bool?), bool? returnTotal = default(bool?), bool? returnData = default(bool?), bool? ignoreErrors = default(bool?), Dictionary<string, string> filters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentTypeCode' is set
            if (documentTypeCode == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeCode' when calling RawdbApi->RawdbDocumentsDocumentTypeCodeGET");

            var localVarPath = "/api/v1/rawdb/documents/{document_type_code}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeCode != null) localVarPathParams.Add("document_type_code", this.Configuration.ApiClient.ParameterToString(documentTypeCode)); // path parameter
            if (projectIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_ids", projectIds)); // query parameter
            if (columns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "columns", columns)); // query parameter
            if (associatedText != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "associated_text", associatedText)); // query parameter
            if (asZip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "as_zip", asZip)); // query parameter
            if (fmt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fmt", fmt)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (savedFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "saved_filters", savedFilters)); // query parameter
            if (saveFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "save_filter", saveFilter)); // query parameter
            if (returnReviewed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "return_reviewed", returnReviewed)); // query parameter
            if (returnTotal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "return_total", returnTotal)); // query parameter
            if (returnData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "return_data", returnData)); // query parameter
            if (ignoreErrors != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignore_errors", ignoreErrors)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawdbDocumentsDocumentTypeCodeGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  See .get() method signature, .post() method just reflects it and uses the same request.GET params to get data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="rawdbDocumentsPOSTRequest"> (optional)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> RawdbDocumentsDocumentTypeCodePOST (string documentTypeCode, RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest = default(RawdbDocumentsPOSTRequest))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = RawdbDocumentsDocumentTypeCodePOSTWithHttpInfo(documentTypeCode, rawdbDocumentsPOSTRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See .get() method signature, .post() method just reflects it and uses the same request.GET params to get data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="rawdbDocumentsPOSTRequest"> (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> RawdbDocumentsDocumentTypeCodePOSTWithHttpInfo (string documentTypeCode, RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest = default(RawdbDocumentsPOSTRequest))
        {
            // verify the required parameter 'documentTypeCode' is set
            if (documentTypeCode == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeCode' when calling RawdbApi->RawdbDocumentsDocumentTypeCodePOST");

            var localVarPath = "/api/v1/rawdb/documents/{document_type_code}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeCode != null) localVarPathParams.Add("document_type_code", this.Configuration.ApiClient.ParameterToString(documentTypeCode)); // path parameter
            if (rawdbDocumentsPOSTRequest != null && rawdbDocumentsPOSTRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rawdbDocumentsPOSTRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rawdbDocumentsPOSTRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawdbDocumentsDocumentTypeCodePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  See .get() method signature, .post() method just reflects it and uses the same request.GET params to get data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="rawdbDocumentsPOSTRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> RawdbDocumentsDocumentTypeCodePOSTAsync (string documentTypeCode, RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest = default(RawdbDocumentsPOSTRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await RawdbDocumentsDocumentTypeCodePOSTWithHttpInfoAsync(documentTypeCode, rawdbDocumentsPOSTRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See .get() method signature, .post() method just reflects it and uses the same request.GET params to get data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCode"></param>
        /// <param name="rawdbDocumentsPOSTRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RawdbDocumentsDocumentTypeCodePOSTWithHttpInfoAsync (string documentTypeCode, RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest = default(RawdbDocumentsPOSTRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentTypeCode' is set
            if (documentTypeCode == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeCode' when calling RawdbApi->RawdbDocumentsDocumentTypeCodePOST");

            var localVarPath = "/api/v1/rawdb/documents/{document_type_code}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeCode != null) localVarPathParams.Add("document_type_code", this.Configuration.ApiClient.ParameterToString(documentTypeCode)); // path parameter
            if (rawdbDocumentsPOSTRequest != null && rawdbDocumentsPOSTRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(rawdbDocumentsPOSTRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rawdbDocumentsPOSTRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawdbDocumentsDocumentTypeCodePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> RawdbProjectStatsProjectIdGET (string projectId)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = RawdbProjectStatsProjectIdGETWithHttpInfo(projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> RawdbProjectStatsProjectIdGETWithHttpInfo (string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling RawdbApi->RawdbProjectStatsProjectIdGET");

            var localVarPath = "/api/v1/rawdb/project_stats/{project_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawdbProjectStatsProjectIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> RawdbProjectStatsProjectIdGETAsync (string projectId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await RawdbProjectStatsProjectIdGETWithHttpInfoAsync(projectId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RawdbProjectStatsProjectIdGETWithHttpInfoAsync (string projectId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling RawdbApi->RawdbProjectStatsProjectIdGET");

            var localVarPath = "/api/v1/rawdb/project_stats/{project_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawdbProjectStatsProjectIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SocialAccountsResponse</returns>
        public SocialAccountsResponse RawdbSocialAccountsGET ()
        {
             ApiResponse<SocialAccountsResponse> localVarResponse = RawdbSocialAccountsGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SocialAccountsResponse</returns>
        public ApiResponse<SocialAccountsResponse> RawdbSocialAccountsGETWithHttpInfo ()
        {

            var localVarPath = "/api/v1/rawdb/social_accounts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawdbSocialAccountsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SocialAccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SocialAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SocialAccountsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SocialAccountsResponse</returns>
        public async System.Threading.Tasks.Task<SocialAccountsResponse> RawdbSocialAccountsGETAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SocialAccountsResponse> localVarResponse = await RawdbSocialAccountsGETWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SocialAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SocialAccountsResponse>> RawdbSocialAccountsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/rawdb/social_accounts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawdbSocialAccountsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SocialAccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SocialAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SocialAccountsResponse)));
        }

    }
}
