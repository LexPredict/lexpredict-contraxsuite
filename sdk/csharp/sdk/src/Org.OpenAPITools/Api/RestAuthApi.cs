/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRestAuthApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object&#39;s key.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login"> (optional)</param>
        /// <returns>LoginResponse</returns>
        LoginResponse RestAuthLoginPOST (Login login = default(Login));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object&#39;s key.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login"> (optional)</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        ApiResponse<LoginResponse> RestAuthLoginPOSTWithHttpInfo (Login login = default(Login));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RestAuthCommonResponse&gt;</returns>
        List<RestAuthCommonResponse> RestAuthLogoutGET ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RestAuthCommonResponse&gt;</returns>
        ApiResponse<List<RestAuthCommonResponse>> RestAuthLogoutGETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>RestAuthCommonResponse</returns>
        RestAuthCommonResponse RestAuthLogoutPOST (Dictionary<string, Object> requestBody = default(Dictionary<string, Object>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of RestAuthCommonResponse</returns>
        ApiResponse<RestAuthCommonResponse> RestAuthLogoutPOSTWithHttpInfo (Dictionary<string, Object> requestBody = default(Dictionary<string, Object>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordChange"> (optional)</param>
        /// <returns>RestAuthCommonResponse</returns>
        RestAuthCommonResponse RestAuthPasswordChangePOST (CustomPasswordChange customPasswordChange = default(CustomPasswordChange));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordChange"> (optional)</param>
        /// <returns>ApiResponse of RestAuthCommonResponse</returns>
        ApiResponse<RestAuthCommonResponse> RestAuthPasswordChangePOSTWithHttpInfo (CustomPasswordChange customPasswordChange = default(CustomPasswordChange));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Password reset e-mail link is confirmed, therefore this resets the user&#39;s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordResetConfirm"> (optional)</param>
        /// <returns>RestAuthCommonResponse</returns>
        RestAuthCommonResponse RestAuthPasswordResetConfirmPOST (CustomPasswordResetConfirm customPasswordResetConfirm = default(CustomPasswordResetConfirm));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Password reset e-mail link is confirmed, therefore this resets the user&#39;s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordResetConfirm"> (optional)</param>
        /// <returns>ApiResponse of RestAuthCommonResponse</returns>
        ApiResponse<RestAuthCommonResponse> RestAuthPasswordResetConfirmPOSTWithHttpInfo (CustomPasswordResetConfirm customPasswordResetConfirm = default(CustomPasswordResetConfirm));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordReset"> (optional)</param>
        /// <returns>RestAuthCommonResponse</returns>
        RestAuthCommonResponse RestAuthPasswordResetPOST (CustomPasswordReset customPasswordReset = default(CustomPasswordReset));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordReset"> (optional)</param>
        /// <returns>ApiResponse of RestAuthCommonResponse</returns>
        ApiResponse<RestAuthCommonResponse> RestAuthPasswordResetPOSTWithHttpInfo (CustomPasswordReset customPasswordReset = default(CustomPasswordReset));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="register"> (optional)</param>
        /// <returns>Register</returns>
        Register RestAuthRegistrationPOST (Register register = default(Register));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="register"> (optional)</param>
        /// <returns>ApiResponse of Register</returns>
        ApiResponse<Register> RestAuthRegistrationPOSTWithHttpInfo (Register register = default(Register));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyEmail"> (optional)</param>
        /// <returns>VerifyEmail</returns>
        VerifyEmail RestAuthRegistrationVerifyEmailPOST (VerifyEmail verifyEmail = default(VerifyEmail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyEmail"> (optional)</param>
        /// <returns>ApiResponse of VerifyEmail</returns>
        ApiResponse<VerifyEmail> RestAuthRegistrationVerifyEmailPOSTWithHttpInfo (VerifyEmail verifyEmail = default(VerifyEmail));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object&#39;s key.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LoginResponse</returns>
        System.Threading.Tasks.Task<LoginResponse> RestAuthLoginPOSTAsync (Login login = default(Login), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object&#39;s key.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginResponse>> RestAuthLoginPOSTWithHttpInfoAsync (Login login = default(Login), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;RestAuthCommonResponse&gt;</returns>
        System.Threading.Tasks.Task<List<RestAuthCommonResponse>> RestAuthLogoutGETAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;RestAuthCommonResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RestAuthCommonResponse>>> RestAuthLogoutGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RestAuthCommonResponse</returns>
        System.Threading.Tasks.Task<RestAuthCommonResponse> RestAuthLogoutPOSTAsync (Dictionary<string, Object> requestBody = default(Dictionary<string, Object>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RestAuthCommonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestAuthCommonResponse>> RestAuthLogoutPOSTWithHttpInfoAsync (Dictionary<string, Object> requestBody = default(Dictionary<string, Object>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordChange"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RestAuthCommonResponse</returns>
        System.Threading.Tasks.Task<RestAuthCommonResponse> RestAuthPasswordChangePOSTAsync (CustomPasswordChange customPasswordChange = default(CustomPasswordChange), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordChange"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RestAuthCommonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestAuthCommonResponse>> RestAuthPasswordChangePOSTWithHttpInfoAsync (CustomPasswordChange customPasswordChange = default(CustomPasswordChange), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Password reset e-mail link is confirmed, therefore this resets the user&#39;s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordResetConfirm"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RestAuthCommonResponse</returns>
        System.Threading.Tasks.Task<RestAuthCommonResponse> RestAuthPasswordResetConfirmPOSTAsync (CustomPasswordResetConfirm customPasswordResetConfirm = default(CustomPasswordResetConfirm), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Password reset e-mail link is confirmed, therefore this resets the user&#39;s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordResetConfirm"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RestAuthCommonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestAuthCommonResponse>> RestAuthPasswordResetConfirmPOSTWithHttpInfoAsync (CustomPasswordResetConfirm customPasswordResetConfirm = default(CustomPasswordResetConfirm), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordReset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RestAuthCommonResponse</returns>
        System.Threading.Tasks.Task<RestAuthCommonResponse> RestAuthPasswordResetPOSTAsync (CustomPasswordReset customPasswordReset = default(CustomPasswordReset), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordReset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RestAuthCommonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestAuthCommonResponse>> RestAuthPasswordResetPOSTWithHttpInfoAsync (CustomPasswordReset customPasswordReset = default(CustomPasswordReset), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="register"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Register</returns>
        System.Threading.Tasks.Task<Register> RestAuthRegistrationPOSTAsync (Register register = default(Register), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="register"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Register)</returns>
        System.Threading.Tasks.Task<ApiResponse<Register>> RestAuthRegistrationPOSTWithHttpInfoAsync (Register register = default(Register), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyEmail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VerifyEmail</returns>
        System.Threading.Tasks.Task<VerifyEmail> RestAuthRegistrationVerifyEmailPOSTAsync (VerifyEmail verifyEmail = default(VerifyEmail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyEmail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VerifyEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyEmail>> RestAuthRegistrationVerifyEmailPOSTWithHttpInfoAsync (VerifyEmail verifyEmail = default(VerifyEmail), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RestAuthApi : IRestAuthApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RestAuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RestAuthApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RestAuthApi"/> class
        /// </summary>
        /// <returns></returns>
        public RestAuthApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RestAuthApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RestAuthApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object&#39;s key.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login"> (optional)</param>
        /// <returns>LoginResponse</returns>
        public LoginResponse RestAuthLoginPOST (Login login = default(Login))
        {
             ApiResponse<LoginResponse> localVarResponse = RestAuthLoginPOSTWithHttpInfo(login);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object&#39;s key.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login"> (optional)</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        public ApiResponse<LoginResponse> RestAuthLoginPOSTWithHttpInfo (Login login = default(Login))
        {

            var localVarPath = "/rest-auth/login/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (login != null && login.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(login); // http body (model) parameter
            }
            else
            {
                localVarPostBody = login; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthLoginPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoginResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoginResponse)));
        }

        /// <summary>
        ///  Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object&#39;s key.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LoginResponse</returns>
        public async System.Threading.Tasks.Task<LoginResponse> RestAuthLoginPOSTAsync (Login login = default(Login), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LoginResponse> localVarResponse = await RestAuthLoginPOSTWithHttpInfoAsync(login, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object&#39;s key.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="login"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoginResponse>> RestAuthLoginPOSTWithHttpInfoAsync (Login login = default(Login), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/rest-auth/login/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (login != null && login.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(login); // http body (model) parameter
            }
            else
            {
                localVarPostBody = login; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthLoginPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoginResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoginResponse)));
        }

        /// <summary>
        ///  Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RestAuthCommonResponse&gt;</returns>
        public List<RestAuthCommonResponse> RestAuthLogoutGET ()
        {
             ApiResponse<List<RestAuthCommonResponse>> localVarResponse = RestAuthLogoutGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RestAuthCommonResponse&gt;</returns>
        public ApiResponse<List<RestAuthCommonResponse>> RestAuthLogoutGETWithHttpInfo ()
        {

            var localVarPath = "/rest-auth/logout/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthLogoutGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestAuthCommonResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RestAuthCommonResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestAuthCommonResponse>)));
        }

        /// <summary>
        ///  Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;RestAuthCommonResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<RestAuthCommonResponse>> RestAuthLogoutGETAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<RestAuthCommonResponse>> localVarResponse = await RestAuthLogoutGETWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;RestAuthCommonResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RestAuthCommonResponse>>> RestAuthLogoutGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/rest-auth/logout/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthLogoutGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestAuthCommonResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RestAuthCommonResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestAuthCommonResponse>)));
        }

        /// <summary>
        ///  Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>RestAuthCommonResponse</returns>
        public RestAuthCommonResponse RestAuthLogoutPOST (Dictionary<string, Object> requestBody = default(Dictionary<string, Object>))
        {
             ApiResponse<RestAuthCommonResponse> localVarResponse = RestAuthLogoutPOSTWithHttpInfo(requestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of RestAuthCommonResponse</returns>
        public ApiResponse<RestAuthCommonResponse> RestAuthLogoutPOSTWithHttpInfo (Dictionary<string, Object> requestBody = default(Dictionary<string, Object>))
        {

            var localVarPath = "/rest-auth/logout/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestBody != null && requestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestBody; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthLogoutPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestAuthCommonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RestAuthCommonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestAuthCommonResponse)));
        }

        /// <summary>
        ///  Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RestAuthCommonResponse</returns>
        public async System.Threading.Tasks.Task<RestAuthCommonResponse> RestAuthLogoutPOSTAsync (Dictionary<string, Object> requestBody = default(Dictionary<string, Object>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RestAuthCommonResponse> localVarResponse = await RestAuthLogoutPOSTWithHttpInfoAsync(requestBody, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RestAuthCommonResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestAuthCommonResponse>> RestAuthLogoutPOSTWithHttpInfoAsync (Dictionary<string, Object> requestBody = default(Dictionary<string, Object>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/rest-auth/logout/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestBody != null && requestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestBody; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthLogoutPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestAuthCommonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RestAuthCommonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestAuthCommonResponse)));
        }

        /// <summary>
        ///  Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordChange"> (optional)</param>
        /// <returns>RestAuthCommonResponse</returns>
        public RestAuthCommonResponse RestAuthPasswordChangePOST (CustomPasswordChange customPasswordChange = default(CustomPasswordChange))
        {
             ApiResponse<RestAuthCommonResponse> localVarResponse = RestAuthPasswordChangePOSTWithHttpInfo(customPasswordChange);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordChange"> (optional)</param>
        /// <returns>ApiResponse of RestAuthCommonResponse</returns>
        public ApiResponse<RestAuthCommonResponse> RestAuthPasswordChangePOSTWithHttpInfo (CustomPasswordChange customPasswordChange = default(CustomPasswordChange))
        {

            var localVarPath = "/rest-auth/password/change/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customPasswordChange != null && customPasswordChange.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customPasswordChange); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customPasswordChange; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthPasswordChangePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestAuthCommonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RestAuthCommonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestAuthCommonResponse)));
        }

        /// <summary>
        ///  Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordChange"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RestAuthCommonResponse</returns>
        public async System.Threading.Tasks.Task<RestAuthCommonResponse> RestAuthPasswordChangePOSTAsync (CustomPasswordChange customPasswordChange = default(CustomPasswordChange), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RestAuthCommonResponse> localVarResponse = await RestAuthPasswordChangePOSTWithHttpInfoAsync(customPasswordChange, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordChange"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RestAuthCommonResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestAuthCommonResponse>> RestAuthPasswordChangePOSTWithHttpInfoAsync (CustomPasswordChange customPasswordChange = default(CustomPasswordChange), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/rest-auth/password/change/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customPasswordChange != null && customPasswordChange.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customPasswordChange); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customPasswordChange; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthPasswordChangePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestAuthCommonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RestAuthCommonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestAuthCommonResponse)));
        }

        /// <summary>
        ///  Password reset e-mail link is confirmed, therefore this resets the user&#39;s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordResetConfirm"> (optional)</param>
        /// <returns>RestAuthCommonResponse</returns>
        public RestAuthCommonResponse RestAuthPasswordResetConfirmPOST (CustomPasswordResetConfirm customPasswordResetConfirm = default(CustomPasswordResetConfirm))
        {
             ApiResponse<RestAuthCommonResponse> localVarResponse = RestAuthPasswordResetConfirmPOSTWithHttpInfo(customPasswordResetConfirm);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Password reset e-mail link is confirmed, therefore this resets the user&#39;s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordResetConfirm"> (optional)</param>
        /// <returns>ApiResponse of RestAuthCommonResponse</returns>
        public ApiResponse<RestAuthCommonResponse> RestAuthPasswordResetConfirmPOSTWithHttpInfo (CustomPasswordResetConfirm customPasswordResetConfirm = default(CustomPasswordResetConfirm))
        {

            var localVarPath = "/rest-auth/password/reset/confirm/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customPasswordResetConfirm != null && customPasswordResetConfirm.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customPasswordResetConfirm); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customPasswordResetConfirm; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthPasswordResetConfirmPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestAuthCommonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RestAuthCommonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestAuthCommonResponse)));
        }

        /// <summary>
        ///  Password reset e-mail link is confirmed, therefore this resets the user&#39;s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordResetConfirm"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RestAuthCommonResponse</returns>
        public async System.Threading.Tasks.Task<RestAuthCommonResponse> RestAuthPasswordResetConfirmPOSTAsync (CustomPasswordResetConfirm customPasswordResetConfirm = default(CustomPasswordResetConfirm), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RestAuthCommonResponse> localVarResponse = await RestAuthPasswordResetConfirmPOSTWithHttpInfoAsync(customPasswordResetConfirm, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Password reset e-mail link is confirmed, therefore this resets the user&#39;s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordResetConfirm"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RestAuthCommonResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestAuthCommonResponse>> RestAuthPasswordResetConfirmPOSTWithHttpInfoAsync (CustomPasswordResetConfirm customPasswordResetConfirm = default(CustomPasswordResetConfirm), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/rest-auth/password/reset/confirm/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customPasswordResetConfirm != null && customPasswordResetConfirm.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customPasswordResetConfirm); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customPasswordResetConfirm; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthPasswordResetConfirmPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestAuthCommonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RestAuthCommonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestAuthCommonResponse)));
        }

        /// <summary>
        ///  Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordReset"> (optional)</param>
        /// <returns>RestAuthCommonResponse</returns>
        public RestAuthCommonResponse RestAuthPasswordResetPOST (CustomPasswordReset customPasswordReset = default(CustomPasswordReset))
        {
             ApiResponse<RestAuthCommonResponse> localVarResponse = RestAuthPasswordResetPOSTWithHttpInfo(customPasswordReset);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordReset"> (optional)</param>
        /// <returns>ApiResponse of RestAuthCommonResponse</returns>
        public ApiResponse<RestAuthCommonResponse> RestAuthPasswordResetPOSTWithHttpInfo (CustomPasswordReset customPasswordReset = default(CustomPasswordReset))
        {

            var localVarPath = "/rest-auth/password/reset/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customPasswordReset != null && customPasswordReset.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customPasswordReset); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customPasswordReset; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthPasswordResetPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestAuthCommonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RestAuthCommonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestAuthCommonResponse)));
        }

        /// <summary>
        ///  Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordReset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RestAuthCommonResponse</returns>
        public async System.Threading.Tasks.Task<RestAuthCommonResponse> RestAuthPasswordResetPOSTAsync (CustomPasswordReset customPasswordReset = default(CustomPasswordReset), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RestAuthCommonResponse> localVarResponse = await RestAuthPasswordResetPOSTWithHttpInfoAsync(customPasswordReset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customPasswordReset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RestAuthCommonResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestAuthCommonResponse>> RestAuthPasswordResetPOSTWithHttpInfoAsync (CustomPasswordReset customPasswordReset = default(CustomPasswordReset), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/rest-auth/password/reset/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customPasswordReset != null && customPasswordReset.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customPasswordReset); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customPasswordReset; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthPasswordResetPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestAuthCommonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RestAuthCommonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestAuthCommonResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="register"> (optional)</param>
        /// <returns>Register</returns>
        public Register RestAuthRegistrationPOST (Register register = default(Register))
        {
             ApiResponse<Register> localVarResponse = RestAuthRegistrationPOSTWithHttpInfo(register);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="register"> (optional)</param>
        /// <returns>ApiResponse of Register</returns>
        public ApiResponse<Register> RestAuthRegistrationPOSTWithHttpInfo (Register register = default(Register))
        {

            var localVarPath = "/rest-auth/registration/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (register != null && register.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(register); // http body (model) parameter
            }
            else
            {
                localVarPostBody = register; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthRegistrationPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Register>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Register) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Register)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="register"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Register</returns>
        public async System.Threading.Tasks.Task<Register> RestAuthRegistrationPOSTAsync (Register register = default(Register), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Register> localVarResponse = await RestAuthRegistrationPOSTWithHttpInfoAsync(register, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="register"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Register)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Register>> RestAuthRegistrationPOSTWithHttpInfoAsync (Register register = default(Register), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/rest-auth/registration/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (register != null && register.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(register); // http body (model) parameter
            }
            else
            {
                localVarPostBody = register; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthRegistrationPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Register>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Register) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Register)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyEmail"> (optional)</param>
        /// <returns>VerifyEmail</returns>
        public VerifyEmail RestAuthRegistrationVerifyEmailPOST (VerifyEmail verifyEmail = default(VerifyEmail))
        {
             ApiResponse<VerifyEmail> localVarResponse = RestAuthRegistrationVerifyEmailPOSTWithHttpInfo(verifyEmail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyEmail"> (optional)</param>
        /// <returns>ApiResponse of VerifyEmail</returns>
        public ApiResponse<VerifyEmail> RestAuthRegistrationVerifyEmailPOSTWithHttpInfo (VerifyEmail verifyEmail = default(VerifyEmail))
        {

            var localVarPath = "/rest-auth/registration/verify-email/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verifyEmail != null && verifyEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verifyEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verifyEmail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthRegistrationVerifyEmailPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyEmail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerifyEmail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyEmail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyEmail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VerifyEmail</returns>
        public async System.Threading.Tasks.Task<VerifyEmail> RestAuthRegistrationVerifyEmailPOSTAsync (VerifyEmail verifyEmail = default(VerifyEmail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<VerifyEmail> localVarResponse = await RestAuthRegistrationVerifyEmailPOSTWithHttpInfoAsync(verifyEmail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyEmail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VerifyEmail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerifyEmail>> RestAuthRegistrationVerifyEmailPOSTWithHttpInfoAsync (VerifyEmail verifyEmail = default(VerifyEmail), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/rest-auth/registration/verify-email/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verifyEmail != null && verifyEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verifyEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verifyEmail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestAuthRegistrationVerifyEmailPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyEmail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerifyEmail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyEmail)));
        }

    }
}
