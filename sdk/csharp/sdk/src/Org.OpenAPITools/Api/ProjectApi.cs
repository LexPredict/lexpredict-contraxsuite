/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ProjectCluster List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;ProjectClustering&gt;</returns>
        List<ProjectClustering> ProjectProjectClusteringGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ProjectCluster List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectClustering&gt;</returns>
        ApiResponse<List<ProjectClustering>> ProjectProjectClusteringGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ProjectCluster Details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project clustering.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ProjectClustering</returns>
        ProjectClustering ProjectProjectClusteringIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ProjectCluster Details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project clustering.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of ProjectClustering</returns>
        ApiResponse<ProjectClustering> ProjectProjectClusteringIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> ProjectProjectsFormFieldsGET ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> ProjectProjectsFormFieldsGETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Project List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;ProjectList&gt;</returns>
        List<ProjectList> ProjectProjectsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Project List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectList&gt;</returns>
        ApiResponse<List<ProjectList>> ProjectProjectsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;ProjectActiveTasks&gt;</returns>
        List<ProjectActiveTasks> ProjectProjectsIdActiveTasksGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectActiveTasks&gt;</returns>
        ApiResponse<List<ProjectActiveTasks>> ProjectProjectsIdActiveTasksGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get assignees data for FieldAnnotations
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>List&lt;ProjectAnnotationsAssigneesResponse&gt;</returns>
        List<ProjectAnnotationsAssigneesResponse> ProjectProjectsIdAnnotationsAssigneesGET (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get assignees data for FieldAnnotations
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ApiResponse of List&lt;ProjectAnnotationsAssigneesResponse&gt;</returns>
        ApiResponse<List<ProjectAnnotationsAssigneesResponse>> ProjectProjectsIdAnnotationsAssigneesGETWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk assign batch of annotations to a review team member      Params:         annotation_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned annotations)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectAnnotationsRequest"> (optional)</param>
        /// <returns>CountSuccessResponse</returns>
        CountSuccessResponse ProjectProjectsIdAssignAnnotationsPOST (string id, AssignProjectAnnotationsRequest assignProjectAnnotationsRequest = default(AssignProjectAnnotationsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk assign batch of annotations to a review team member      Params:         annotation_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned annotations)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectAnnotationsRequest"> (optional)</param>
        /// <returns>ApiResponse of CountSuccessResponse</returns>
        ApiResponse<CountSuccessResponse> ProjectProjectsIdAssignAnnotationsPOSTWithHttpInfo (string id, AssignProjectAnnotationsRequest assignProjectAnnotationsRequest = default(AssignProjectAnnotationsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk assign batch of documents to a review team member      Params:         document_id: int         assignee_id: int     Returns:         bool (number of reassigned documents)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentRequest"> (optional)</param>
        /// <returns>CountSuccessResponse</returns>
        CountSuccessResponse ProjectProjectsIdAssignDocumentPOST (string id, AssignProjectDocumentRequest assignProjectDocumentRequest = default(AssignProjectDocumentRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk assign batch of documents to a review team member      Params:         document_id: int         assignee_id: int     Returns:         bool (number of reassigned documents)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentRequest"> (optional)</param>
        /// <returns>ApiResponse of CountSuccessResponse</returns>
        ApiResponse<CountSuccessResponse> ProjectProjectsIdAssignDocumentPOSTWithHttpInfo (string id, AssignProjectDocumentRequest assignProjectDocumentRequest = default(AssignProjectDocumentRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk assign batch of documents to a review team member      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned documents)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentsRequest"> (optional)</param>
        /// <returns>CountSuccessResponse</returns>
        CountSuccessResponse ProjectProjectsIdAssignDocumentsPOST (string id, AssignProjectDocumentsRequest assignProjectDocumentsRequest = default(AssignProjectDocumentsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk assign batch of documents to a review team member      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned documents)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentsRequest"> (optional)</param>
        /// <returns>ApiResponse of CountSuccessResponse</returns>
        ApiResponse<CountSuccessResponse> ProjectProjectsIdAssignDocumentsPOSTWithHttpInfo (string id, AssignProjectDocumentsRequest assignProjectDocumentsRequest = default(AssignProjectDocumentsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get assignees data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>List&lt;ProjectDocumentsAssigneesResponse&gt;</returns>
        List<ProjectDocumentsAssigneesResponse> ProjectProjectsIdAssigneesGET (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get assignees data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ApiResponse of List&lt;ProjectDocumentsAssigneesResponse&gt;</returns>
        ApiResponse<List<ProjectDocumentsAssigneesResponse>> ProjectProjectsIdAssigneesGETWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <returns>ProjectDetail</returns>
        ProjectDetail ProjectProjectsIdCheckSimilarityProcessAllowedPOST (string id, ProjectDetail projectDetail = default(ProjectDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <returns>ApiResponse of ProjectDetail</returns>
        ApiResponse<ProjectDetail> ProjectProjectsIdCheckSimilarityProcessAllowedPOSTWithHttpInfo (string id, ProjectDetail projectDetail = default(ProjectDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clean project (Generic Contract Type project)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cleanupProjectRequest"> (optional)</param>
        /// <returns>string</returns>
        string ProjectProjectsIdCleanupPOST (string id, CleanupProjectRequest cleanupProjectRequest = default(CleanupProjectRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clean project (Generic Contract Type project)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cleanupProjectRequest"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ProjectProjectsIdCleanupPOSTWithHttpInfo (string id, CleanupProjectRequest cleanupProjectRequest = default(CleanupProjectRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ProjectDetail</returns>
        ProjectDetail ProjectProjectsIdClusterActionsGET (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of ProjectDetail</returns>
        ApiResponse<ProjectDetail> ProjectProjectsIdClusterActionsGETWithHttpInfo (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cluster Project Documents      Params:         - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]         - cluster_by: str[term, date, text, definition, duration, party,                           geoentity, currency_name, currency_value]         - n_clusters: int         - force: bool (optional) - force clustering if uncompleted tasks exist
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="clusterProjectRequest"> (optional)</param>
        /// <returns>ClusterProjectResponse</returns>
        ClusterProjectResponse ProjectProjectsIdClusterPOST (string id, ClusterProjectRequest clusterProjectRequest = default(ClusterProjectRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cluster Project Documents      Params:         - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]         - cluster_by: str[term, date, text, definition, duration, party,                           geoentity, currency_name, currency_value]         - n_clusters: int         - force: bool (optional) - force clustering if uncompleted tasks exist
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="clusterProjectRequest"> (optional)</param>
        /// <returns>ApiResponse of ClusterProjectResponse</returns>
        ApiResponse<ClusterProjectResponse> ProjectProjectsIdClusterPOSTWithHttpInfo (string id, ClusterProjectRequest clusterProjectRequest = default(ClusterProjectRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Last Clustering task status/data      Params:         - project_clustering_id: int (optional) - return last if not provided
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectClusteringId">Get by project_clustering_id (optional)</param>
        /// <returns>ProjectClusteringStatusResponse</returns>
        ProjectClusteringStatusResponse ProjectProjectsIdClusteringStatusGET (string id, int? projectClusteringId = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Last Clustering task status/data      Params:         - project_clustering_id: int (optional) - return last if not provided
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectClusteringId">Get by project_clustering_id (optional)</param>
        /// <returns>ApiResponse of ProjectClusteringStatusResponse</returns>
        ApiResponse<ProjectClusteringStatusResponse> ProjectProjectsIdClusteringStatusGETWithHttpInfo (string id, int? projectClusteringId = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns></returns>
        void ProjectProjectsIdDELETE (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectProjectsIdDELETEWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns></returns>
        void ProjectProjectsIdDeleteDocumentSimilarityResultsDELETE (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectProjectsIdDeleteDocumentSimilarityResultsDELETEWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns></returns>
        void ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETE (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETEWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="detectProjectFieldValuesRequest"> (optional)</param>
        /// <returns>TaskIdResponse</returns>
        TaskIdResponse ProjectProjectsIdDetectFieldValuesPOST (string id, DetectProjectFieldValuesRequest detectProjectFieldValuesRequest = default(DetectProjectFieldValuesRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="detectProjectFieldValuesRequest"> (optional)</param>
        /// <returns>ApiResponse of TaskIdResponse</returns>
        ApiResponse<TaskIdResponse> ProjectProjectsIdDetectFieldValuesPOSTWithHttpInfo (string id, DetectProjectFieldValuesRequest detectProjectFieldValuesRequest = default(DetectProjectFieldValuesRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> ProjectProjectsIdFormFieldsGET (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> ProjectProjectsIdFormFieldsGETWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ProjectDetail</returns>
        ProjectDetail ProjectProjectsIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of ProjectDetail</returns>
        ApiResponse<ProjectDetail> ProjectProjectsIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <returns>ProjectDetail</returns>
        ProjectDetail ProjectProjectsIdLocateItemsPOST (string id, ProjectDetail projectDetail = default(ProjectDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <returns>ApiResponse of ProjectDetail</returns>
        ApiResponse<ProjectDetail> ProjectProjectsIdLocateItemsPOSTWithHttpInfo (string id, ProjectDetail projectDetail = default(ProjectDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method marks the whole project (remove_all&#x3D;True) / the project&#39;s documents (remove_all&#x3D;False) for deleting. These marked documents (and the project) will become hidden in API. Documents, listed in excluded_ids list, will not be marked for deleting.      Params:         - all: bool - mark all filtered by a user documents         - remove_all: bool - mark project+documents         - exclude_document_ids: list[int]
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <returns>MarkUnmarkForDeleteProjectsReponse</returns>
        MarkUnmarkForDeleteProjectsReponse ProjectProjectsIdMarkDeletePOST (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method marks the whole project (remove_all&#x3D;True) / the project&#39;s documents (remove_all&#x3D;False) for deleting. These marked documents (and the project) will become hidden in API. Documents, listed in excluded_ids list, will not be marked for deleting.      Params:         - all: bool - mark all filtered by a user documents         - remove_all: bool - mark project+documents         - exclude_document_ids: list[int]
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <returns>ApiResponse of MarkUnmarkForDeleteProjectsReponse</returns>
        ApiResponse<MarkUnmarkForDeleteProjectsReponse> ProjectProjectsIdMarkDeletePOSTWithHttpInfo (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <returns>ProjectUpdate</returns>
        ProjectUpdate ProjectProjectsIdPATCH (string id, ProjectUpdate projectUpdate = default(ProjectUpdate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <returns>ApiResponse of ProjectUpdate</returns>
        ApiResponse<ProjectUpdate> ProjectProjectsIdPATCHWithHttpInfo (string id, ProjectUpdate projectUpdate = default(ProjectUpdate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document/TextUnit Vectors if needed Update ocr_enable project app var if needed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <returns>ProjectUpdate</returns>
        ProjectUpdate ProjectProjectsIdPUT (string id, ProjectUpdate projectUpdate = default(ProjectUpdate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document/TextUnit Vectors if needed Update ocr_enable project app var if needed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <returns>ApiResponse of ProjectUpdate</returns>
        ApiResponse<ProjectUpdate> ProjectProjectsIdPUTWithHttpInfo (string id, ProjectUpdate projectUpdate = default(ProjectUpdate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get current progress of all project sessions / clusterings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ProjectProgressResponse</returns>
        ProjectProgressResponse ProjectProjectsIdProgressGET (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get current progress of all project sessions / clusterings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ApiResponse of ProjectProgressResponse</returns>
        ApiResponse<ProjectProgressResponse> ProjectProjectsIdProgressGETWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarDocumentsRequest"> (optional)</param>
        /// <returns>TaskIdResponse</returns>
        TaskIdResponse ProjectProjectsIdSearchSimilarDocumentsPOST (string id, ProjectSearchSimilarDocumentsRequest projectSearchSimilarDocumentsRequest = default(ProjectSearchSimilarDocumentsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarDocumentsRequest"> (optional)</param>
        /// <returns>ApiResponse of TaskIdResponse</returns>
        ApiResponse<TaskIdResponse> ProjectProjectsIdSearchSimilarDocumentsPOSTWithHttpInfo (string id, ProjectSearchSimilarDocumentsRequest projectSearchSimilarDocumentsRequest = default(ProjectSearchSimilarDocumentsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarTextUnitsRequest"> (optional)</param>
        /// <returns>TaskIdResponse</returns>
        TaskIdResponse ProjectProjectsIdSearchSimilarTextUnitsPOST (string id, ProjectSearchSimilarTextUnitsRequest projectSearchSimilarTextUnitsRequest = default(ProjectSearchSimilarTextUnitsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarTextUnitsRequest"> (optional)</param>
        /// <returns>ApiResponse of TaskIdResponse</returns>
        ApiResponse<TaskIdResponse> ProjectProjectsIdSearchSimilarTextUnitsPOSTWithHttpInfo (string id, ProjectSearchSimilarTextUnitsRequest projectSearchSimilarTextUnitsRequest = default(ProjectSearchSimilarTextUnitsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send clusters to another Project      Params:         - cluster_ids: list[int]         - project_id: int
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="sendClusterToProjectRequest"> (optional)</param>
        /// <returns>string</returns>
        string ProjectProjectsIdSendClustersToProjectPOST (string id, SendClusterToProjectRequest sendClusterToProjectRequest = default(SendClusterToProjectRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send clusters to another Project      Params:         - cluster_ids: list[int]         - project_id: int
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="sendClusterToProjectRequest"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ProjectProjectsIdSendClustersToProjectPOSTWithHttpInfo (string id, SendClusterToProjectRequest sendClusterToProjectRequest = default(SendClusterToProjectRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk set status for batch of annotations      Params:         document_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         status_id: int - field annotation status id         run_mode: str - &#39;sync&#39;, &#39;background&#39;, &#39;smart&#39;     Returns:         int (number of reassigned annotations)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectAnnotationsStatusRequest"> (optional)</param>
        /// <returns>OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse</returns>
        OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse ProjectProjectsIdSetAnnotationStatusPOST (string id, SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest = default(SetProjectAnnotationsStatusRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk set status for batch of annotations      Params:         document_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         status_id: int - field annotation status id         run_mode: str - &#39;sync&#39;, &#39;background&#39;, &#39;smart&#39;     Returns:         int (number of reassigned annotations)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectAnnotationsStatusRequest"> (optional)</param>
        /// <returns>ApiResponse of OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse</returns>
        ApiResponse<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse> ProjectProjectsIdSetAnnotationStatusPOSTWithHttpInfo (string id, SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest = default(SetProjectAnnotationsStatusRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk set status for batch of documents      Params:         document_ids: list[int]         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         all: any value - update all documents if any value         status_id: int     Returns:         int (number of reassigned documents)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectDocumentsStatusRequest"> (optional)</param>
        /// <returns>CountSuccessResponse</returns>
        CountSuccessResponse ProjectProjectsIdSetStatusPOST (string id, SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest = default(SetProjectDocumentsStatusRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk set status for batch of documents      Params:         document_ids: list[int]         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         all: any value - update all documents if any value         status_id: int     Returns:         int (number of reassigned documents)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectDocumentsStatusRequest"> (optional)</param>
        /// <returns>ApiResponse of CountSuccessResponse</returns>
        ApiResponse<CountSuccessResponse> ProjectProjectsIdSetStatusPOSTWithHttpInfo (string id, SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest = default(SetProjectDocumentsStatusRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ProjectDetail</returns>
        ProjectDetail ProjectProjectsIdSettingsActionsGET (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of ProjectDetail</returns>
        ApiResponse<ProjectDetail> ProjectProjectsIdSettingsActionsGETWithHttpInfo (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="taskId"></param>
        /// <param name="recordsLimit"> (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>TaskLogResponse</returns>
        TaskLogResponse ProjectProjectsIdTaskTaskIdTaskLogsGET (string id, string taskId, int? recordsLimit = default(int?), Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="taskId"></param>
        /// <param name="recordsLimit"> (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of TaskLogResponse</returns>
        ApiResponse<TaskLogResponse> ProjectProjectsIdTaskTaskIdTaskLogsGETWithHttpInfo (string id, string taskId, int? recordsLimit = default(int?), Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;ProjectTasks&gt;</returns>
        List<ProjectTasks> ProjectProjectsIdTasksGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectTasks&gt;</returns>
        ApiResponse<List<ProjectTasks>> ProjectProjectsIdTasksGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method removes soft delete sign from project only (remove_all&#x3D;False) or from the project and the project&#39;s documents (remove_all&#x3D;True)     Body params:         - all: bool - unmark all filtered by a user documents         - remove_all: bool - unmark project+documents         - exclude_document_ids: List[int]
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <returns>MarkUnmarkForDeleteProjectsReponse</returns>
        MarkUnmarkForDeleteProjectsReponse ProjectProjectsIdUnmarkDeletePOST (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method removes soft delete sign from project only (remove_all&#x3D;False) or from the project and the project&#39;s documents (remove_all&#x3D;True)     Body params:         - all: bool - unmark all filtered by a user documents         - remove_all: bool - unmark project+documents         - exclude_document_ids: List[int]
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <returns>ApiResponse of MarkUnmarkForDeleteProjectsReponse</returns>
        ApiResponse<MarkUnmarkForDeleteProjectsReponse> ProjectProjectsIdUnmarkDeletePOSTWithHttpInfo (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk update project documents field, similar to /fields/ API in document app      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         fields_data: - dict {field_code: [values]}         on_existing_value: \&quot;replace_all\&quot; | \&quot;add_new\&quot; (for multi-choice fields)     Returns:         task_id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="updateProjectDocumentsFieldsRequest"> (optional)</param>
        /// <returns>TaskIdResponse</returns>
        TaskIdResponse ProjectProjectsIdUpdateDocumentFieldsPOST (string id, UpdateProjectDocumentsFieldsRequest updateProjectDocumentsFieldsRequest = default(UpdateProjectDocumentsFieldsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk update project documents field, similar to /fields/ API in document app      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         fields_data: - dict {field_code: [values]}         on_existing_value: \&quot;replace_all\&quot; | \&quot;add_new\&quot; (for multi-choice fields)     Returns:         task_id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="updateProjectDocumentsFieldsRequest"> (optional)</param>
        /// <returns>ApiResponse of TaskIdResponse</returns>
        ApiResponse<TaskIdResponse> ProjectProjectsIdUpdateDocumentFieldsPOSTWithHttpInfo (string id, UpdateProjectDocumentsFieldsRequest updateProjectDocumentsFieldsRequest = default(UpdateProjectDocumentsFieldsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document/TextUnit Vectors if needed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"> (optional)</param>
        /// <returns>ProjectCreate</returns>
        ProjectCreate ProjectProjectsPOST (ProjectCreate projectCreate = default(ProjectCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document/TextUnit Vectors if needed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"> (optional)</param>
        /// <returns>ApiResponse of ProjectCreate</returns>
        ApiResponse<ProjectCreate> ProjectProjectsPOSTWithHttpInfo (ProjectCreate projectCreate = default(ProjectCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get project stats across all projects see related code in get_queryset() and serializer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <returns>List&lt;ProjectStats&gt;</returns>
        List<ProjectStats> ProjectProjectsProjectStatsGET (string projectIds = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get project stats across all projects see related code in get_queryset() and serializer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectStats&gt;</returns>
        ApiResponse<List<ProjectStats>> ProjectProjectsProjectStatsGETWithHttpInfo (string projectIds = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get recent N projects      Params:         n: int - default is 5
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">Max rows number (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        List<Dictionary<string, Object>> ProjectProjectsRecentGET (int? n = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get recent N projects      Params:         n: int - default is 5
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">Max rows number (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        ApiResponse<List<Dictionary<string, Object>>> ProjectProjectsRecentGETWithHttpInfo (int? n = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Select projects for review in Explorer UI
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectProjectsRequest"> (optional)</param>
        /// <returns>SelectProjectsResponse</returns>
        SelectProjectsResponse ProjectProjectsSelectProjectsPOST (SelectProjectsRequest selectProjectsRequest = default(SelectProjectsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Select projects for review in Explorer UI
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectProjectsRequest"> (optional)</param>
        /// <returns>ApiResponse of SelectProjectsResponse</returns>
        ApiResponse<SelectProjectsResponse> ProjectProjectsSelectProjectsPOSTWithHttpInfo (SelectProjectsRequest selectProjectsRequest = default(SelectProjectsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Task Queue List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;TaskQueue&gt;</returns>
        List<TaskQueue> ProjectTaskQueuesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Task Queue List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskQueue&gt;</returns>
        ApiResponse<List<TaskQueue>> ProjectTaskQueuesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <returns></returns>
        void ProjectTaskQueuesIdDELETE (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectTaskQueuesIdDELETEWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>TaskQueue</returns>
        TaskQueue ProjectTaskQueuesIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of TaskQueue</returns>
        ApiResponse<TaskQueue> ProjectTaskQueuesIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <returns>TaskQueue</returns>
        TaskQueue ProjectTaskQueuesIdPATCH (string id, TaskQueue taskQueue = default(TaskQueue));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <returns>ApiResponse of TaskQueue</returns>
        ApiResponse<TaskQueue> ProjectTaskQueuesIdPATCHWithHttpInfo (string id, TaskQueue taskQueue = default(TaskQueue));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Task Queue      PUT params:         - pk: int         - description: str         - documents: list[int]         - completed_documents: list[int]         - reviewers: list[int]     Optional params for add/remove document from/to a TaskQueue:         - add_document: int         - remove_document: int     Optional params for complete/reopen document in a TaskQueue:         - complete_document: int         - open_document: int     Optional param to add documents from DocumentCluster:         - add_documents_from_cluster: int (cluster id)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <returns>TaskQueue</returns>
        TaskQueue ProjectTaskQueuesIdPUT (string id, TaskQueue taskQueue = default(TaskQueue));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Task Queue      PUT params:         - pk: int         - description: str         - documents: list[int]         - completed_documents: list[int]         - reviewers: list[int]     Optional params for add/remove document from/to a TaskQueue:         - add_document: int         - remove_document: int     Optional params for complete/reopen document in a TaskQueue:         - complete_document: int         - open_document: int     Optional param to add documents from DocumentCluster:         - add_documents_from_cluster: int (cluster id)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <returns>ApiResponse of TaskQueue</returns>
        ApiResponse<TaskQueue> ProjectTaskQueuesIdPUTWithHttpInfo (string id, TaskQueue taskQueue = default(TaskQueue));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueue"> (optional)</param>
        /// <returns>TaskQueue</returns>
        TaskQueue ProjectTaskQueuesPOST (TaskQueue taskQueue = default(TaskQueue));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueue"> (optional)</param>
        /// <returns>ApiResponse of TaskQueue</returns>
        ApiResponse<TaskQueue> ProjectTaskQueuesPOSTWithHttpInfo (TaskQueue taskQueue = default(TaskQueue));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Session Upload List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;UploadSessionDetail&gt;</returns>
        List<UploadSessionDetail> ProjectUploadSessionGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Session Upload List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;UploadSessionDetail&gt;</returns>
        ApiResponse<List<UploadSessionDetail>> ProjectUploadSessionGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionCreate"> (optional)</param>
        /// <returns>UploadSessionCreate</returns>
        UploadSessionCreate ProjectUploadSessionPOST (UploadSessionCreate uploadSessionCreate = default(UploadSessionCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionCreate"> (optional)</param>
        /// <returns>ApiResponse of UploadSessionCreate</returns>
        ApiResponse<UploadSessionCreate> ProjectUploadSessionPOSTWithHttpInfo (UploadSessionCreate uploadSessionCreate = default(UploadSessionCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get status of Upload Sessions     Params:         - project_id: int
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project id (optional)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> ProjectUploadSessionStatusGET (string projectId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get status of Upload Sessions     Params:         - project_id: int
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project id (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> ProjectUploadSessionStatusGETWithHttpInfo (string projectId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload batch of files      Params:         - folder (source_path): str - absolute path to a directory containing files         - force: bool (optional) - whether rewrite existing file and Document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDetail"> (optional)</param>
        /// <returns>UploadSessionDetail</returns>
        UploadSessionDetail ProjectUploadSessionUidBatchUploadPOST (string uid, UploadSessionDetail uploadSessionDetail = default(UploadSessionDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload batch of files      Params:         - folder (source_path): str - absolute path to a directory containing files         - force: bool (optional) - whether rewrite existing file and Document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDetail"> (optional)</param>
        /// <returns>ApiResponse of UploadSessionDetail</returns>
        ApiResponse<UploadSessionDetail> ProjectUploadSessionUidBatchUploadPOSTWithHttpInfo (string uid, UploadSessionDetail uploadSessionDetail = default(UploadSessionDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload files from given sub-folder in media/data/documents folder      Params:         - source_path: relative path to a folder with documents
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionBatchUploadRequest"> (optional)</param>
        /// <returns>UploadSessionDetail</returns>
        UploadSessionDetail ProjectUploadSessionUidBatchUploadPOST_0 (string uid, UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest = default(UploadSessionBatchUploadRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload files from given sub-folder in media/data/documents folder      Params:         - source_path: relative path to a folder with documents
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionBatchUploadRequest"> (optional)</param>
        /// <returns>ApiResponse of UploadSessionDetail</returns>
        ApiResponse<UploadSessionDetail> ProjectUploadSessionUidBatchUploadPOST_0WithHttpInfo (string uid, UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest = default(UploadSessionBatchUploadRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file from session      Params:         - filename: str
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <returns></returns>
        void ProjectUploadSessionUidCancelDELETE (string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file from session      Params:         - filename: str
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectUploadSessionUidCancelDELETEWithHttpInfo (string uid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <returns></returns>
        void ProjectUploadSessionUidDELETE (string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectUploadSessionUidDELETEWithHttpInfo (string uid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file from session      Params:         - filename: str
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDeleteFileRequest"> (optional)</param>
        /// <returns>string</returns>
        string ProjectUploadSessionUidDeleteFileDELETE (string uid, UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest = default(UploadSessionDeleteFileRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file from session      Params:         - filename: str
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDeleteFileRequest"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ProjectUploadSessionUidDeleteFileDELETEWithHttpInfo (string uid, UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest = default(UploadSessionDeleteFileRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="contentLength">Content Length</param>
        /// <param name="fileName">Content Length</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="force2">Force upload (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProjectUploadSessionFilesResponse</returns>
        ProjectUploadSessionFilesResponse ProjectUploadSessionUidFilesPOST (string uid, int contentLength, string fileName, bool? force = default(bool?), bool? directoryPath = default(bool?), bool? force2 = default(bool?), System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="contentLength">Content Length</param>
        /// <param name="fileName">Content Length</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="force2">Force upload (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProjectUploadSessionFilesResponse</returns>
        ApiResponse<ProjectUploadSessionFilesResponse> ProjectUploadSessionUidFilesPOSTWithHttpInfo (string uid, int contentLength, string fileName, bool? force = default(bool?), bool? directoryPath = default(bool?), bool? force2 = default(bool?), System.IO.Stream body = default(System.IO.Stream));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>UploadSessionDetail</returns>
        UploadSessionDetail ProjectUploadSessionUidGET (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of UploadSessionDetail</returns>
        ApiResponse<UploadSessionDetail> ProjectUploadSessionUidGETWithHttpInfo (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionUpdate"> (optional)</param>
        /// <returns>UploadSessionUpdate</returns>
        UploadSessionUpdate ProjectUploadSessionUidPATCH (string uid, UploadSessionUpdate uploadSessionUpdate = default(UploadSessionUpdate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionUpdate"> (optional)</param>
        /// <returns>ApiResponse of UploadSessionUpdate</returns>
        ApiResponse<UploadSessionUpdate> ProjectUploadSessionUidPATCHWithHttpInfo (string uid, UploadSessionUpdate uploadSessionUpdate = default(UploadSessionUpdate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Progress for a session per files (short form)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <returns>ProjectUploadSessionProgressResponse</returns>
        ProjectUploadSessionProgressResponse ProjectUploadSessionUidProgressGET (string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Progress for a session per files (short form)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <returns>ApiResponse of ProjectUploadSessionProgressResponse</returns>
        ApiResponse<ProjectUploadSessionProgressResponse> ProjectUploadSessionUidProgressGETWithHttpInfo (string uid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a File      Params:         - file: file object         - force: bool (optional) - whether rewrite existing file and Document         - review_file: bool - whether skip file check (exists or not)         - directory_path: str - may be passed from TUS plugin
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="fileName">File Name</param>
        /// <param name="fileEncoding">File Encoding</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="reviewFile">Review File (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProjectUploadSessionPOSTResponse</returns>
        ProjectUploadSessionPOSTResponse ProjectUploadSessionUidUploadPOST (string uid, bool fileName, string fileEncoding, bool? force = default(bool?), bool? reviewFile = default(bool?), bool? directoryPath = default(bool?), System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a File      Params:         - file: file object         - force: bool (optional) - whether rewrite existing file and Document         - review_file: bool - whether skip file check (exists or not)         - directory_path: str - may be passed from TUS plugin
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="fileName">File Name</param>
        /// <param name="fileEncoding">File Encoding</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="reviewFile">Review File (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProjectUploadSessionPOSTResponse</returns>
        ApiResponse<ProjectUploadSessionPOSTResponse> ProjectUploadSessionUidUploadPOSTWithHttpInfo (string uid, bool fileName, string fileEncoding, bool? force = default(bool?), bool? reviewFile = default(bool?), bool? directoryPath = default(bool?), System.IO.Stream body = default(System.IO.Stream));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ProjectCluster List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectClustering&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectClustering>> ProjectProjectClusteringGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ProjectCluster List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectClustering&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectClustering>>> ProjectProjectClusteringGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ProjectCluster Details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project clustering.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectClustering</returns>
        System.Threading.Tasks.Task<ProjectClustering> ProjectProjectClusteringIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ProjectCluster Details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project clustering.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectClustering)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectClustering>> ProjectProjectClusteringIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> ProjectProjectsFormFieldsGETAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> ProjectProjectsFormFieldsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Project List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectList&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectList>> ProjectProjectsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Project List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectList>>> ProjectProjectsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectActiveTasks&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectActiveTasks>> ProjectProjectsIdActiveTasksGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectActiveTasks&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectActiveTasks>>> ProjectProjectsIdActiveTasksGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get assignees data for FieldAnnotations
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectAnnotationsAssigneesResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectAnnotationsAssigneesResponse>> ProjectProjectsIdAnnotationsAssigneesGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get assignees data for FieldAnnotations
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectAnnotationsAssigneesResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectAnnotationsAssigneesResponse>>> ProjectProjectsIdAnnotationsAssigneesGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk assign batch of annotations to a review team member      Params:         annotation_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned annotations)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectAnnotationsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CountSuccessResponse</returns>
        System.Threading.Tasks.Task<CountSuccessResponse> ProjectProjectsIdAssignAnnotationsPOSTAsync (string id, AssignProjectAnnotationsRequest assignProjectAnnotationsRequest = default(AssignProjectAnnotationsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk assign batch of annotations to a review team member      Params:         annotation_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned annotations)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectAnnotationsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CountSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountSuccessResponse>> ProjectProjectsIdAssignAnnotationsPOSTWithHttpInfoAsync (string id, AssignProjectAnnotationsRequest assignProjectAnnotationsRequest = default(AssignProjectAnnotationsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk assign batch of documents to a review team member      Params:         document_id: int         assignee_id: int     Returns:         bool (number of reassigned documents)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CountSuccessResponse</returns>
        System.Threading.Tasks.Task<CountSuccessResponse> ProjectProjectsIdAssignDocumentPOSTAsync (string id, AssignProjectDocumentRequest assignProjectDocumentRequest = default(AssignProjectDocumentRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk assign batch of documents to a review team member      Params:         document_id: int         assignee_id: int     Returns:         bool (number of reassigned documents)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CountSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountSuccessResponse>> ProjectProjectsIdAssignDocumentPOSTWithHttpInfoAsync (string id, AssignProjectDocumentRequest assignProjectDocumentRequest = default(AssignProjectDocumentRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk assign batch of documents to a review team member      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned documents)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CountSuccessResponse</returns>
        System.Threading.Tasks.Task<CountSuccessResponse> ProjectProjectsIdAssignDocumentsPOSTAsync (string id, AssignProjectDocumentsRequest assignProjectDocumentsRequest = default(AssignProjectDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk assign batch of documents to a review team member      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned documents)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CountSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountSuccessResponse>> ProjectProjectsIdAssignDocumentsPOSTWithHttpInfoAsync (string id, AssignProjectDocumentsRequest assignProjectDocumentsRequest = default(AssignProjectDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get assignees data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectDocumentsAssigneesResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectDocumentsAssigneesResponse>> ProjectProjectsIdAssigneesGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get assignees data
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectDocumentsAssigneesResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectDocumentsAssigneesResponse>>> ProjectProjectsIdAssigneesGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectDetail</returns>
        System.Threading.Tasks.Task<ProjectDetail> ProjectProjectsIdCheckSimilarityProcessAllowedPOSTAsync (string id, ProjectDetail projectDetail = default(ProjectDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDetail>> ProjectProjectsIdCheckSimilarityProcessAllowedPOSTWithHttpInfoAsync (string id, ProjectDetail projectDetail = default(ProjectDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clean project (Generic Contract Type project)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cleanupProjectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ProjectProjectsIdCleanupPOSTAsync (string id, CleanupProjectRequest cleanupProjectRequest = default(CleanupProjectRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clean project (Generic Contract Type project)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cleanupProjectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ProjectProjectsIdCleanupPOSTWithHttpInfoAsync (string id, CleanupProjectRequest cleanupProjectRequest = default(CleanupProjectRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectDetail</returns>
        System.Threading.Tasks.Task<ProjectDetail> ProjectProjectsIdClusterActionsGETAsync (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDetail>> ProjectProjectsIdClusterActionsGETWithHttpInfoAsync (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cluster Project Documents      Params:         - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]         - cluster_by: str[term, date, text, definition, duration, party,                           geoentity, currency_name, currency_value]         - n_clusters: int         - force: bool (optional) - force clustering if uncompleted tasks exist
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="clusterProjectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ClusterProjectResponse</returns>
        System.Threading.Tasks.Task<ClusterProjectResponse> ProjectProjectsIdClusterPOSTAsync (string id, ClusterProjectRequest clusterProjectRequest = default(ClusterProjectRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cluster Project Documents      Params:         - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]         - cluster_by: str[term, date, text, definition, duration, party,                           geoentity, currency_name, currency_value]         - n_clusters: int         - force: bool (optional) - force clustering if uncompleted tasks exist
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="clusterProjectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ClusterProjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClusterProjectResponse>> ProjectProjectsIdClusterPOSTWithHttpInfoAsync (string id, ClusterProjectRequest clusterProjectRequest = default(ClusterProjectRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Last Clustering task status/data      Params:         - project_clustering_id: int (optional) - return last if not provided
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectClusteringId">Get by project_clustering_id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectClusteringStatusResponse</returns>
        System.Threading.Tasks.Task<ProjectClusteringStatusResponse> ProjectProjectsIdClusteringStatusGETAsync (string id, int? projectClusteringId = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Last Clustering task status/data      Params:         - project_clustering_id: int (optional) - return last if not provided
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectClusteringId">Get by project_clustering_id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectClusteringStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectClusteringStatusResponse>> ProjectProjectsIdClusteringStatusGETWithHttpInfoAsync (string id, int? projectClusteringId = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectProjectsIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectProjectsIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectProjectsIdDeleteDocumentSimilarityResultsDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectProjectsIdDeleteDocumentSimilarityResultsDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="detectProjectFieldValuesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskIdResponse</returns>
        System.Threading.Tasks.Task<TaskIdResponse> ProjectProjectsIdDetectFieldValuesPOSTAsync (string id, DetectProjectFieldValuesRequest detectProjectFieldValuesRequest = default(DetectProjectFieldValuesRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="detectProjectFieldValuesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskIdResponse>> ProjectProjectsIdDetectFieldValuesPOSTWithHttpInfoAsync (string id, DetectProjectFieldValuesRequest detectProjectFieldValuesRequest = default(DetectProjectFieldValuesRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> ProjectProjectsIdFormFieldsGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> ProjectProjectsIdFormFieldsGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectDetail</returns>
        System.Threading.Tasks.Task<ProjectDetail> ProjectProjectsIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDetail>> ProjectProjectsIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectDetail</returns>
        System.Threading.Tasks.Task<ProjectDetail> ProjectProjectsIdLocateItemsPOSTAsync (string id, ProjectDetail projectDetail = default(ProjectDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDetail>> ProjectProjectsIdLocateItemsPOSTWithHttpInfoAsync (string id, ProjectDetail projectDetail = default(ProjectDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method marks the whole project (remove_all&#x3D;True) / the project&#39;s documents (remove_all&#x3D;False) for deleting. These marked documents (and the project) will become hidden in API. Documents, listed in excluded_ids list, will not be marked for deleting.      Params:         - all: bool - mark all filtered by a user documents         - remove_all: bool - mark project+documents         - exclude_document_ids: list[int]
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkUnmarkForDeleteProjectsReponse</returns>
        System.Threading.Tasks.Task<MarkUnmarkForDeleteProjectsReponse> ProjectProjectsIdMarkDeletePOSTAsync (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method marks the whole project (remove_all&#x3D;True) / the project&#39;s documents (remove_all&#x3D;False) for deleting. These marked documents (and the project) will become hidden in API. Documents, listed in excluded_ids list, will not be marked for deleting.      Params:         - all: bool - mark all filtered by a user documents         - remove_all: bool - mark project+documents         - exclude_document_ids: list[int]
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkUnmarkForDeleteProjectsReponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkUnmarkForDeleteProjectsReponse>> ProjectProjectsIdMarkDeletePOSTWithHttpInfoAsync (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectUpdate</returns>
        System.Threading.Tasks.Task<ProjectUpdate> ProjectProjectsIdPATCHAsync (string id, ProjectUpdate projectUpdate = default(ProjectUpdate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Project
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectUpdate>> ProjectProjectsIdPATCHWithHttpInfoAsync (string id, ProjectUpdate projectUpdate = default(ProjectUpdate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document/TextUnit Vectors if needed Update ocr_enable project app var if needed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectUpdate</returns>
        System.Threading.Tasks.Task<ProjectUpdate> ProjectProjectsIdPUTAsync (string id, ProjectUpdate projectUpdate = default(ProjectUpdate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document/TextUnit Vectors if needed Update ocr_enable project app var if needed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectUpdate>> ProjectProjectsIdPUTWithHttpInfoAsync (string id, ProjectUpdate projectUpdate = default(ProjectUpdate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get current progress of all project sessions / clusterings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectProgressResponse</returns>
        System.Threading.Tasks.Task<ProjectProgressResponse> ProjectProjectsIdProgressGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get current progress of all project sessions / clusterings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectProgressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectProgressResponse>> ProjectProjectsIdProgressGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskIdResponse</returns>
        System.Threading.Tasks.Task<TaskIdResponse> ProjectProjectsIdSearchSimilarDocumentsPOSTAsync (string id, ProjectSearchSimilarDocumentsRequest projectSearchSimilarDocumentsRequest = default(ProjectSearchSimilarDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskIdResponse>> ProjectProjectsIdSearchSimilarDocumentsPOSTWithHttpInfoAsync (string id, ProjectSearchSimilarDocumentsRequest projectSearchSimilarDocumentsRequest = default(ProjectSearchSimilarDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarTextUnitsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskIdResponse</returns>
        System.Threading.Tasks.Task<TaskIdResponse> ProjectProjectsIdSearchSimilarTextUnitsPOSTAsync (string id, ProjectSearchSimilarTextUnitsRequest projectSearchSimilarTextUnitsRequest = default(ProjectSearchSimilarTextUnitsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarTextUnitsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskIdResponse>> ProjectProjectsIdSearchSimilarTextUnitsPOSTWithHttpInfoAsync (string id, ProjectSearchSimilarTextUnitsRequest projectSearchSimilarTextUnitsRequest = default(ProjectSearchSimilarTextUnitsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send clusters to another Project      Params:         - cluster_ids: list[int]         - project_id: int
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="sendClusterToProjectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ProjectProjectsIdSendClustersToProjectPOSTAsync (string id, SendClusterToProjectRequest sendClusterToProjectRequest = default(SendClusterToProjectRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send clusters to another Project      Params:         - cluster_ids: list[int]         - project_id: int
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="sendClusterToProjectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ProjectProjectsIdSendClustersToProjectPOSTWithHttpInfoAsync (string id, SendClusterToProjectRequest sendClusterToProjectRequest = default(SendClusterToProjectRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk set status for batch of annotations      Params:         document_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         status_id: int - field annotation status id         run_mode: str - &#39;sync&#39;, &#39;background&#39;, &#39;smart&#39;     Returns:         int (number of reassigned annotations)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectAnnotationsStatusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse</returns>
        System.Threading.Tasks.Task<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse> ProjectProjectsIdSetAnnotationStatusPOSTAsync (string id, SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest = default(SetProjectAnnotationsStatusRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk set status for batch of annotations      Params:         document_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         status_id: int - field annotation status id         run_mode: str - &#39;sync&#39;, &#39;background&#39;, &#39;smart&#39;     Returns:         int (number of reassigned annotations)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectAnnotationsStatusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse>> ProjectProjectsIdSetAnnotationStatusPOSTWithHttpInfoAsync (string id, SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest = default(SetProjectAnnotationsStatusRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk set status for batch of documents      Params:         document_ids: list[int]         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         all: any value - update all documents if any value         status_id: int     Returns:         int (number of reassigned documents)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectDocumentsStatusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CountSuccessResponse</returns>
        System.Threading.Tasks.Task<CountSuccessResponse> ProjectProjectsIdSetStatusPOSTAsync (string id, SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest = default(SetProjectDocumentsStatusRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk set status for batch of documents      Params:         document_ids: list[int]         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         all: any value - update all documents if any value         status_id: int     Returns:         int (number of reassigned documents)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectDocumentsStatusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CountSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountSuccessResponse>> ProjectProjectsIdSetStatusPOSTWithHttpInfoAsync (string id, SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest = default(SetProjectDocumentsStatusRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectDetail</returns>
        System.Threading.Tasks.Task<ProjectDetail> ProjectProjectsIdSettingsActionsGETAsync (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDetail>> ProjectProjectsIdSettingsActionsGETWithHttpInfoAsync (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="taskId"></param>
        /// <param name="recordsLimit"> (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskLogResponse</returns>
        System.Threading.Tasks.Task<TaskLogResponse> ProjectProjectsIdTaskTaskIdTaskLogsGETAsync (string id, string taskId, int? recordsLimit = default(int?), Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="taskId"></param>
        /// <param name="recordsLimit"> (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskLogResponse>> ProjectProjectsIdTaskTaskIdTaskLogsGETWithHttpInfoAsync (string id, string taskId, int? recordsLimit = default(int?), Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectTasks&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectTasks>> ProjectProjectsIdTasksGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectTasks&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectTasks>>> ProjectProjectsIdTasksGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method removes soft delete sign from project only (remove_all&#x3D;False) or from the project and the project&#39;s documents (remove_all&#x3D;True)     Body params:         - all: bool - unmark all filtered by a user documents         - remove_all: bool - unmark project+documents         - exclude_document_ids: List[int]
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkUnmarkForDeleteProjectsReponse</returns>
        System.Threading.Tasks.Task<MarkUnmarkForDeleteProjectsReponse> ProjectProjectsIdUnmarkDeletePOSTAsync (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method removes soft delete sign from project only (remove_all&#x3D;False) or from the project and the project&#39;s documents (remove_all&#x3D;True)     Body params:         - all: bool - unmark all filtered by a user documents         - remove_all: bool - unmark project+documents         - exclude_document_ids: List[int]
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkUnmarkForDeleteProjectsReponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkUnmarkForDeleteProjectsReponse>> ProjectProjectsIdUnmarkDeletePOSTWithHttpInfoAsync (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk update project documents field, similar to /fields/ API in document app      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         fields_data: - dict {field_code: [values]}         on_existing_value: \&quot;replace_all\&quot; | \&quot;add_new\&quot; (for multi-choice fields)     Returns:         task_id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="updateProjectDocumentsFieldsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskIdResponse</returns>
        System.Threading.Tasks.Task<TaskIdResponse> ProjectProjectsIdUpdateDocumentFieldsPOSTAsync (string id, UpdateProjectDocumentsFieldsRequest updateProjectDocumentsFieldsRequest = default(UpdateProjectDocumentsFieldsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bulk update project documents field, similar to /fields/ API in document app      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         fields_data: - dict {field_code: [values]}         on_existing_value: \&quot;replace_all\&quot; | \&quot;add_new\&quot; (for multi-choice fields)     Returns:         task_id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="updateProjectDocumentsFieldsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskIdResponse>> ProjectProjectsIdUpdateDocumentFieldsPOSTWithHttpInfoAsync (string id, UpdateProjectDocumentsFieldsRequest updateProjectDocumentsFieldsRequest = default(UpdateProjectDocumentsFieldsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document/TextUnit Vectors if needed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectCreate</returns>
        System.Threading.Tasks.Task<ProjectCreate> ProjectProjectsPOSTAsync (ProjectCreate projectCreate = default(ProjectCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document/TextUnit Vectors if needed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectCreate>> ProjectProjectsPOSTWithHttpInfoAsync (ProjectCreate projectCreate = default(ProjectCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get project stats across all projects see related code in get_queryset() and serializer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectStats&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectStats>> ProjectProjectsProjectStatsGETAsync (string projectIds = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get project stats across all projects see related code in get_queryset() and serializer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectStats&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectStats>>> ProjectProjectsProjectStatsGETWithHttpInfoAsync (string projectIds = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get recent N projects      Params:         n: int - default is 5
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">Max rows number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary<string, Object>>> ProjectProjectsRecentGETAsync (int? n = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get recent N projects      Params:         n: int - default is 5
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">Max rows number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> ProjectProjectsRecentGETWithHttpInfoAsync (int? n = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Select projects for review in Explorer UI
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectProjectsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SelectProjectsResponse</returns>
        System.Threading.Tasks.Task<SelectProjectsResponse> ProjectProjectsSelectProjectsPOSTAsync (SelectProjectsRequest selectProjectsRequest = default(SelectProjectsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Select projects for review in Explorer UI
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectProjectsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SelectProjectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SelectProjectsResponse>> ProjectProjectsSelectProjectsPOSTWithHttpInfoAsync (SelectProjectsRequest selectProjectsRequest = default(SelectProjectsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Task Queue List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TaskQueue&gt;</returns>
        System.Threading.Tasks.Task<List<TaskQueue>> ProjectTaskQueuesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Task Queue List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TaskQueue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskQueue>>> ProjectTaskQueuesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectTaskQueuesIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectTaskQueuesIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskQueue</returns>
        System.Threading.Tasks.Task<TaskQueue> ProjectTaskQueuesIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskQueue)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskQueue>> ProjectTaskQueuesIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskQueue</returns>
        System.Threading.Tasks.Task<TaskQueue> ProjectTaskQueuesIdPATCHAsync (string id, TaskQueue taskQueue = default(TaskQueue), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskQueue)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskQueue>> ProjectTaskQueuesIdPATCHWithHttpInfoAsync (string id, TaskQueue taskQueue = default(TaskQueue), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Task Queue      PUT params:         - pk: int         - description: str         - documents: list[int]         - completed_documents: list[int]         - reviewers: list[int]     Optional params for add/remove document from/to a TaskQueue:         - add_document: int         - remove_document: int     Optional params for complete/reopen document in a TaskQueue:         - complete_document: int         - open_document: int     Optional param to add documents from DocumentCluster:         - add_documents_from_cluster: int (cluster id)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskQueue</returns>
        System.Threading.Tasks.Task<TaskQueue> ProjectTaskQueuesIdPUTAsync (string id, TaskQueue taskQueue = default(TaskQueue), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Task Queue      PUT params:         - pk: int         - description: str         - documents: list[int]         - completed_documents: list[int]         - reviewers: list[int]     Optional params for add/remove document from/to a TaskQueue:         - add_document: int         - remove_document: int     Optional params for complete/reopen document in a TaskQueue:         - complete_document: int         - open_document: int     Optional param to add documents from DocumentCluster:         - add_documents_from_cluster: int (cluster id)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskQueue)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskQueue>> ProjectTaskQueuesIdPUTWithHttpInfoAsync (string id, TaskQueue taskQueue = default(TaskQueue), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueue"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskQueue</returns>
        System.Threading.Tasks.Task<TaskQueue> ProjectTaskQueuesPOSTAsync (TaskQueue taskQueue = default(TaskQueue), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Task Queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueue"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskQueue)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskQueue>> ProjectTaskQueuesPOSTWithHttpInfoAsync (TaskQueue taskQueue = default(TaskQueue), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Session Upload List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;UploadSessionDetail&gt;</returns>
        System.Threading.Tasks.Task<List<UploadSessionDetail>> ProjectUploadSessionGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Session Upload List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UploadSessionDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UploadSessionDetail>>> ProjectUploadSessionGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UploadSessionCreate</returns>
        System.Threading.Tasks.Task<UploadSessionCreate> ProjectUploadSessionPOSTAsync (UploadSessionCreate uploadSessionCreate = default(UploadSessionCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UploadSessionCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadSessionCreate>> ProjectUploadSessionPOSTWithHttpInfoAsync (UploadSessionCreate uploadSessionCreate = default(UploadSessionCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get status of Upload Sessions     Params:         - project_id: int
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> ProjectUploadSessionStatusGETAsync (string projectId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get status of Upload Sessions     Params:         - project_id: int
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> ProjectUploadSessionStatusGETWithHttpInfoAsync (string projectId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload batch of files      Params:         - folder (source_path): str - absolute path to a directory containing files         - force: bool (optional) - whether rewrite existing file and Document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UploadSessionDetail</returns>
        System.Threading.Tasks.Task<UploadSessionDetail> ProjectUploadSessionUidBatchUploadPOSTAsync (string uid, UploadSessionDetail uploadSessionDetail = default(UploadSessionDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload batch of files      Params:         - folder (source_path): str - absolute path to a directory containing files         - force: bool (optional) - whether rewrite existing file and Document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UploadSessionDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadSessionDetail>> ProjectUploadSessionUidBatchUploadPOSTWithHttpInfoAsync (string uid, UploadSessionDetail uploadSessionDetail = default(UploadSessionDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload files from given sub-folder in media/data/documents folder      Params:         - source_path: relative path to a folder with documents
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionBatchUploadRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UploadSessionDetail</returns>
        System.Threading.Tasks.Task<UploadSessionDetail> ProjectUploadSessionUidBatchUploadPOST_0Async (string uid, UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest = default(UploadSessionBatchUploadRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload files from given sub-folder in media/data/documents folder      Params:         - source_path: relative path to a folder with documents
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionBatchUploadRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UploadSessionDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadSessionDetail>> ProjectUploadSessionUidBatchUploadPOST_0WithHttpInfoAsync (string uid, UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest = default(UploadSessionBatchUploadRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file from session      Params:         - filename: str
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectUploadSessionUidCancelDELETEAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file from session      Params:         - filename: str
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectUploadSessionUidCancelDELETEWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectUploadSessionUidDELETEAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectUploadSessionUidDELETEWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file from session      Params:         - filename: str
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDeleteFileRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ProjectUploadSessionUidDeleteFileDELETEAsync (string uid, UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest = default(UploadSessionDeleteFileRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a file from session      Params:         - filename: str
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDeleteFileRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ProjectUploadSessionUidDeleteFileDELETEWithHttpInfoAsync (string uid, UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest = default(UploadSessionDeleteFileRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="contentLength">Content Length</param>
        /// <param name="fileName">Content Length</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="force2">Force upload (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectUploadSessionFilesResponse</returns>
        System.Threading.Tasks.Task<ProjectUploadSessionFilesResponse> ProjectUploadSessionUidFilesPOSTAsync (string uid, int contentLength, string fileName, bool? force = default(bool?), bool? directoryPath = default(bool?), bool? force2 = default(bool?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="contentLength">Content Length</param>
        /// <param name="fileName">Content Length</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="force2">Force upload (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectUploadSessionFilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectUploadSessionFilesResponse>> ProjectUploadSessionUidFilesPOSTWithHttpInfoAsync (string uid, int contentLength, string fileName, bool? force = default(bool?), bool? directoryPath = default(bool?), bool? force2 = default(bool?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UploadSessionDetail</returns>
        System.Threading.Tasks.Task<UploadSessionDetail> ProjectUploadSessionUidGETAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UploadSessionDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadSessionDetail>> ProjectUploadSessionUidGETWithHttpInfoAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UploadSessionUpdate</returns>
        System.Threading.Tasks.Task<UploadSessionUpdate> ProjectUploadSessionUidPATCHAsync (string uid, UploadSessionUpdate uploadSessionUpdate = default(UploadSessionUpdate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Session Upload
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UploadSessionUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadSessionUpdate>> ProjectUploadSessionUidPATCHWithHttpInfoAsync (string uid, UploadSessionUpdate uploadSessionUpdate = default(UploadSessionUpdate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Progress for a session per files (short form)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectUploadSessionProgressResponse</returns>
        System.Threading.Tasks.Task<ProjectUploadSessionProgressResponse> ProjectUploadSessionUidProgressGETAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Progress for a session per files (short form)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectUploadSessionProgressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectUploadSessionProgressResponse>> ProjectUploadSessionUidProgressGETWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a File      Params:         - file: file object         - force: bool (optional) - whether rewrite existing file and Document         - review_file: bool - whether skip file check (exists or not)         - directory_path: str - may be passed from TUS plugin
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="fileName">File Name</param>
        /// <param name="fileEncoding">File Encoding</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="reviewFile">Review File (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectUploadSessionPOSTResponse</returns>
        System.Threading.Tasks.Task<ProjectUploadSessionPOSTResponse> ProjectUploadSessionUidUploadPOSTAsync (string uid, bool fileName, string fileEncoding, bool? force = default(bool?), bool? reviewFile = default(bool?), bool? directoryPath = default(bool?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a File      Params:         - file: file object         - force: bool (optional) - whether rewrite existing file and Document         - review_file: bool - whether skip file check (exists or not)         - directory_path: str - may be passed from TUS plugin
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="fileName">File Name</param>
        /// <param name="fileEncoding">File Encoding</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="reviewFile">Review File (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectUploadSessionPOSTResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectUploadSessionPOSTResponse>> ProjectUploadSessionUidUploadPOSTWithHttpInfoAsync (string uid, bool fileName, string fileEncoding, bool? force = default(bool?), bool? reviewFile = default(bool?), bool? directoryPath = default(bool?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectApi : IProjectApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProjectApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  ProjectCluster List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;ProjectClustering&gt;</returns>
        public List<ProjectClustering> ProjectProjectClusteringGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<ProjectClustering>> localVarResponse = ProjectProjectClusteringGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ProjectCluster List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectClustering&gt;</returns>
        public ApiResponse<List<ProjectClustering>> ProjectProjectClusteringGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/project/project-clustering/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectClusteringGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectClustering>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectClustering>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectClustering>)));
        }

        /// <summary>
        ///  ProjectCluster List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectClustering&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectClustering>> ProjectProjectClusteringGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ProjectClustering>> localVarResponse = await ProjectProjectClusteringGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ProjectCluster List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectClustering&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectClustering>>> ProjectProjectClusteringGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/project/project-clustering/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectClusteringGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectClustering>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectClustering>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectClustering>)));
        }

        /// <summary>
        ///  ProjectCluster Details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project clustering.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ProjectClustering</returns>
        public ProjectClustering ProjectProjectClusteringIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<ProjectClustering> localVarResponse = ProjectProjectClusteringIdGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  ProjectCluster Details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project clustering.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of ProjectClustering</returns>
        public ApiResponse<ProjectClustering> ProjectProjectClusteringIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectClusteringIdGET");

            var localVarPath = "/api/v1/project/project-clustering/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectClusteringIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectClustering>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectClustering) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectClustering)));
        }

        /// <summary>
        ///  ProjectCluster Details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project clustering.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectClustering</returns>
        public async System.Threading.Tasks.Task<ProjectClustering> ProjectProjectClusteringIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectClustering> localVarResponse = await ProjectProjectClusteringIdGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  ProjectCluster Details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project clustering.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectClustering)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectClustering>> ProjectProjectClusteringIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectClusteringIdGET");

            var localVarPath = "/api/v1/project/project-clustering/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectClusteringIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectClustering>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectClustering) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectClustering)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> ProjectProjectsFormFieldsGET ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = ProjectProjectsFormFieldsGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> ProjectProjectsFormFieldsGETWithHttpInfo ()
        {

            var localVarPath = "/api/v1/project/projects/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> ProjectProjectsFormFieldsGETAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await ProjectProjectsFormFieldsGETWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> ProjectProjectsFormFieldsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/project/projects/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Project List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;ProjectList&gt;</returns>
        public List<ProjectList> ProjectProjectsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<ProjectList>> localVarResponse = ProjectProjectsGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Project List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectList&gt;</returns>
        public ApiResponse<List<ProjectList>> ProjectProjectsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/project/projects/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectList>)));
        }

        /// <summary>
        ///  Project List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectList&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectList>> ProjectProjectsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ProjectList>> localVarResponse = await ProjectProjectsGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Project List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectList&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectList>>> ProjectProjectsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/project/projects/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectList>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;ProjectActiveTasks&gt;</returns>
        public List<ProjectActiveTasks> ProjectProjectsIdActiveTasksGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<ProjectActiveTasks>> localVarResponse = ProjectProjectsIdActiveTasksGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectActiveTasks&gt;</returns>
        public ApiResponse<List<ProjectActiveTasks>> ProjectProjectsIdActiveTasksGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdActiveTasksGET");

            var localVarPath = "/api/v1/project/projects/{id}/active_tasks/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdActiveTasksGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectActiveTasks>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectActiveTasks>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectActiveTasks>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectActiveTasks&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectActiveTasks>> ProjectProjectsIdActiveTasksGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ProjectActiveTasks>> localVarResponse = await ProjectProjectsIdActiveTasksGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectActiveTasks&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectActiveTasks>>> ProjectProjectsIdActiveTasksGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdActiveTasksGET");

            var localVarPath = "/api/v1/project/projects/{id}/active_tasks/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdActiveTasksGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectActiveTasks>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectActiveTasks>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectActiveTasks>)));
        }

        /// <summary>
        ///  Get assignees data for FieldAnnotations
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>List&lt;ProjectAnnotationsAssigneesResponse&gt;</returns>
        public List<ProjectAnnotationsAssigneesResponse> ProjectProjectsIdAnnotationsAssigneesGET (string id)
        {
             ApiResponse<List<ProjectAnnotationsAssigneesResponse>> localVarResponse = ProjectProjectsIdAnnotationsAssigneesGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get assignees data for FieldAnnotations
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ApiResponse of List&lt;ProjectAnnotationsAssigneesResponse&gt;</returns>
        public ApiResponse<List<ProjectAnnotationsAssigneesResponse>> ProjectProjectsIdAnnotationsAssigneesGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdAnnotationsAssigneesGET");

            var localVarPath = "/api/v1/project/projects/{id}/annotations_assignees/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdAnnotationsAssigneesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectAnnotationsAssigneesResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectAnnotationsAssigneesResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectAnnotationsAssigneesResponse>)));
        }

        /// <summary>
        ///  Get assignees data for FieldAnnotations
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectAnnotationsAssigneesResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectAnnotationsAssigneesResponse>> ProjectProjectsIdAnnotationsAssigneesGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ProjectAnnotationsAssigneesResponse>> localVarResponse = await ProjectProjectsIdAnnotationsAssigneesGETWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get assignees data for FieldAnnotations
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectAnnotationsAssigneesResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectAnnotationsAssigneesResponse>>> ProjectProjectsIdAnnotationsAssigneesGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdAnnotationsAssigneesGET");

            var localVarPath = "/api/v1/project/projects/{id}/annotations_assignees/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdAnnotationsAssigneesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectAnnotationsAssigneesResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectAnnotationsAssigneesResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectAnnotationsAssigneesResponse>)));
        }

        /// <summary>
        ///  Bulk assign batch of annotations to a review team member      Params:         annotation_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned annotations)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectAnnotationsRequest"> (optional)</param>
        /// <returns>CountSuccessResponse</returns>
        public CountSuccessResponse ProjectProjectsIdAssignAnnotationsPOST (string id, AssignProjectAnnotationsRequest assignProjectAnnotationsRequest = default(AssignProjectAnnotationsRequest))
        {
             ApiResponse<CountSuccessResponse> localVarResponse = ProjectProjectsIdAssignAnnotationsPOSTWithHttpInfo(id, assignProjectAnnotationsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Bulk assign batch of annotations to a review team member      Params:         annotation_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned annotations)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectAnnotationsRequest"> (optional)</param>
        /// <returns>ApiResponse of CountSuccessResponse</returns>
        public ApiResponse<CountSuccessResponse> ProjectProjectsIdAssignAnnotationsPOSTWithHttpInfo (string id, AssignProjectAnnotationsRequest assignProjectAnnotationsRequest = default(AssignProjectAnnotationsRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdAssignAnnotationsPOST");

            var localVarPath = "/api/v1/project/projects/{id}/assign_annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assignProjectAnnotationsRequest != null && assignProjectAnnotationsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignProjectAnnotationsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignProjectAnnotationsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdAssignAnnotationsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountSuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountSuccessResponse)));
        }

        /// <summary>
        ///  Bulk assign batch of annotations to a review team member      Params:         annotation_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned annotations)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectAnnotationsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CountSuccessResponse</returns>
        public async System.Threading.Tasks.Task<CountSuccessResponse> ProjectProjectsIdAssignAnnotationsPOSTAsync (string id, AssignProjectAnnotationsRequest assignProjectAnnotationsRequest = default(AssignProjectAnnotationsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CountSuccessResponse> localVarResponse = await ProjectProjectsIdAssignAnnotationsPOSTWithHttpInfoAsync(id, assignProjectAnnotationsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Bulk assign batch of annotations to a review team member      Params:         annotation_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned annotations)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectAnnotationsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CountSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountSuccessResponse>> ProjectProjectsIdAssignAnnotationsPOSTWithHttpInfoAsync (string id, AssignProjectAnnotationsRequest assignProjectAnnotationsRequest = default(AssignProjectAnnotationsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdAssignAnnotationsPOST");

            var localVarPath = "/api/v1/project/projects/{id}/assign_annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assignProjectAnnotationsRequest != null && assignProjectAnnotationsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignProjectAnnotationsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignProjectAnnotationsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdAssignAnnotationsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountSuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountSuccessResponse)));
        }

        /// <summary>
        ///  Bulk assign batch of documents to a review team member      Params:         document_id: int         assignee_id: int     Returns:         bool (number of reassigned documents)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentRequest"> (optional)</param>
        /// <returns>CountSuccessResponse</returns>
        public CountSuccessResponse ProjectProjectsIdAssignDocumentPOST (string id, AssignProjectDocumentRequest assignProjectDocumentRequest = default(AssignProjectDocumentRequest))
        {
             ApiResponse<CountSuccessResponse> localVarResponse = ProjectProjectsIdAssignDocumentPOSTWithHttpInfo(id, assignProjectDocumentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Bulk assign batch of documents to a review team member      Params:         document_id: int         assignee_id: int     Returns:         bool (number of reassigned documents)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentRequest"> (optional)</param>
        /// <returns>ApiResponse of CountSuccessResponse</returns>
        public ApiResponse<CountSuccessResponse> ProjectProjectsIdAssignDocumentPOSTWithHttpInfo (string id, AssignProjectDocumentRequest assignProjectDocumentRequest = default(AssignProjectDocumentRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdAssignDocumentPOST");

            var localVarPath = "/api/v1/project/projects/{id}/assign_document/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assignProjectDocumentRequest != null && assignProjectDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignProjectDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignProjectDocumentRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdAssignDocumentPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountSuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountSuccessResponse)));
        }

        /// <summary>
        ///  Bulk assign batch of documents to a review team member      Params:         document_id: int         assignee_id: int     Returns:         bool (number of reassigned documents)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CountSuccessResponse</returns>
        public async System.Threading.Tasks.Task<CountSuccessResponse> ProjectProjectsIdAssignDocumentPOSTAsync (string id, AssignProjectDocumentRequest assignProjectDocumentRequest = default(AssignProjectDocumentRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CountSuccessResponse> localVarResponse = await ProjectProjectsIdAssignDocumentPOSTWithHttpInfoAsync(id, assignProjectDocumentRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Bulk assign batch of documents to a review team member      Params:         document_id: int         assignee_id: int     Returns:         bool (number of reassigned documents)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CountSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountSuccessResponse>> ProjectProjectsIdAssignDocumentPOSTWithHttpInfoAsync (string id, AssignProjectDocumentRequest assignProjectDocumentRequest = default(AssignProjectDocumentRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdAssignDocumentPOST");

            var localVarPath = "/api/v1/project/projects/{id}/assign_document/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assignProjectDocumentRequest != null && assignProjectDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignProjectDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignProjectDocumentRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdAssignDocumentPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountSuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountSuccessResponse)));
        }

        /// <summary>
        ///  Bulk assign batch of documents to a review team member      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned documents)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentsRequest"> (optional)</param>
        /// <returns>CountSuccessResponse</returns>
        public CountSuccessResponse ProjectProjectsIdAssignDocumentsPOST (string id, AssignProjectDocumentsRequest assignProjectDocumentsRequest = default(AssignProjectDocumentsRequest))
        {
             ApiResponse<CountSuccessResponse> localVarResponse = ProjectProjectsIdAssignDocumentsPOSTWithHttpInfo(id, assignProjectDocumentsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Bulk assign batch of documents to a review team member      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned documents)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentsRequest"> (optional)</param>
        /// <returns>ApiResponse of CountSuccessResponse</returns>
        public ApiResponse<CountSuccessResponse> ProjectProjectsIdAssignDocumentsPOSTWithHttpInfo (string id, AssignProjectDocumentsRequest assignProjectDocumentsRequest = default(AssignProjectDocumentsRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdAssignDocumentsPOST");

            var localVarPath = "/api/v1/project/projects/{id}/assign_documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assignProjectDocumentsRequest != null && assignProjectDocumentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignProjectDocumentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignProjectDocumentsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdAssignDocumentsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountSuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountSuccessResponse)));
        }

        /// <summary>
        ///  Bulk assign batch of documents to a review team member      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned documents)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CountSuccessResponse</returns>
        public async System.Threading.Tasks.Task<CountSuccessResponse> ProjectProjectsIdAssignDocumentsPOSTAsync (string id, AssignProjectDocumentsRequest assignProjectDocumentsRequest = default(AssignProjectDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CountSuccessResponse> localVarResponse = await ProjectProjectsIdAssignDocumentsPOSTWithHttpInfoAsync(id, assignProjectDocumentsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Bulk assign batch of documents to a review team member      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned documents)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="assignProjectDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CountSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountSuccessResponse>> ProjectProjectsIdAssignDocumentsPOSTWithHttpInfoAsync (string id, AssignProjectDocumentsRequest assignProjectDocumentsRequest = default(AssignProjectDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdAssignDocumentsPOST");

            var localVarPath = "/api/v1/project/projects/{id}/assign_documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assignProjectDocumentsRequest != null && assignProjectDocumentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignProjectDocumentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignProjectDocumentsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdAssignDocumentsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountSuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountSuccessResponse)));
        }

        /// <summary>
        ///  Get assignees data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>List&lt;ProjectDocumentsAssigneesResponse&gt;</returns>
        public List<ProjectDocumentsAssigneesResponse> ProjectProjectsIdAssigneesGET (string id)
        {
             ApiResponse<List<ProjectDocumentsAssigneesResponse>> localVarResponse = ProjectProjectsIdAssigneesGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get assignees data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ApiResponse of List&lt;ProjectDocumentsAssigneesResponse&gt;</returns>
        public ApiResponse<List<ProjectDocumentsAssigneesResponse>> ProjectProjectsIdAssigneesGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdAssigneesGET");

            var localVarPath = "/api/v1/project/projects/{id}/assignees/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdAssigneesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectDocumentsAssigneesResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectDocumentsAssigneesResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectDocumentsAssigneesResponse>)));
        }

        /// <summary>
        ///  Get assignees data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectDocumentsAssigneesResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectDocumentsAssigneesResponse>> ProjectProjectsIdAssigneesGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ProjectDocumentsAssigneesResponse>> localVarResponse = await ProjectProjectsIdAssigneesGETWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get assignees data
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectDocumentsAssigneesResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectDocumentsAssigneesResponse>>> ProjectProjectsIdAssigneesGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdAssigneesGET");

            var localVarPath = "/api/v1/project/projects/{id}/assignees/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdAssigneesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectDocumentsAssigneesResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectDocumentsAssigneesResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectDocumentsAssigneesResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <returns>ProjectDetail</returns>
        public ProjectDetail ProjectProjectsIdCheckSimilarityProcessAllowedPOST (string id, ProjectDetail projectDetail = default(ProjectDetail))
        {
             ApiResponse<ProjectDetail> localVarResponse = ProjectProjectsIdCheckSimilarityProcessAllowedPOSTWithHttpInfo(id, projectDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <returns>ApiResponse of ProjectDetail</returns>
        public ApiResponse<ProjectDetail> ProjectProjectsIdCheckSimilarityProcessAllowedPOSTWithHttpInfo (string id, ProjectDetail projectDetail = default(ProjectDetail))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdCheckSimilarityProcessAllowedPOST");

            var localVarPath = "/api/v1/project/projects/{id}/check_similarity_process_allowed/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectDetail != null && projectDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdCheckSimilarityProcessAllowedPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectDetail</returns>
        public async System.Threading.Tasks.Task<ProjectDetail> ProjectProjectsIdCheckSimilarityProcessAllowedPOSTAsync (string id, ProjectDetail projectDetail = default(ProjectDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectDetail> localVarResponse = await ProjectProjectsIdCheckSimilarityProcessAllowedPOSTWithHttpInfoAsync(id, projectDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectDetail>> ProjectProjectsIdCheckSimilarityProcessAllowedPOSTWithHttpInfoAsync (string id, ProjectDetail projectDetail = default(ProjectDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdCheckSimilarityProcessAllowedPOST");

            var localVarPath = "/api/v1/project/projects/{id}/check_similarity_process_allowed/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectDetail != null && projectDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdCheckSimilarityProcessAllowedPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDetail)));
        }

        /// <summary>
        ///  Clean project (Generic Contract Type project)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cleanupProjectRequest"> (optional)</param>
        /// <returns>string</returns>
        public string ProjectProjectsIdCleanupPOST (string id, CleanupProjectRequest cleanupProjectRequest = default(CleanupProjectRequest))
        {
             ApiResponse<string> localVarResponse = ProjectProjectsIdCleanupPOSTWithHttpInfo(id, cleanupProjectRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Clean project (Generic Contract Type project)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cleanupProjectRequest"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ProjectProjectsIdCleanupPOSTWithHttpInfo (string id, CleanupProjectRequest cleanupProjectRequest = default(CleanupProjectRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdCleanupPOST");

            var localVarPath = "/api/v1/project/projects/{id}/cleanup/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cleanupProjectRequest != null && cleanupProjectRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cleanupProjectRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cleanupProjectRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdCleanupPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Clean project (Generic Contract Type project)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cleanupProjectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ProjectProjectsIdCleanupPOSTAsync (string id, CleanupProjectRequest cleanupProjectRequest = default(CleanupProjectRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await ProjectProjectsIdCleanupPOSTWithHttpInfoAsync(id, cleanupProjectRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Clean project (Generic Contract Type project)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cleanupProjectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ProjectProjectsIdCleanupPOSTWithHttpInfoAsync (string id, CleanupProjectRequest cleanupProjectRequest = default(CleanupProjectRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdCleanupPOST");

            var localVarPath = "/api/v1/project/projects/{id}/cleanup/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cleanupProjectRequest != null && cleanupProjectRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cleanupProjectRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cleanupProjectRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdCleanupPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ProjectDetail</returns>
        public ProjectDetail ProjectProjectsIdClusterActionsGET (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<ProjectDetail> localVarResponse = ProjectProjectsIdClusterActionsGETWithHttpInfo(id, projectId, documentId, viewActions, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of ProjectDetail</returns>
        public ApiResponse<ProjectDetail> ProjectProjectsIdClusterActionsGETWithHttpInfo (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdClusterActionsGET");

            var localVarPath = "/api/v1/project/projects/{id}/cluster_actions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_id", projectId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_id", documentId)); // query parameter
            if (viewActions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "view_actions", viewActions)); // query parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdClusterActionsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectDetail</returns>
        public async System.Threading.Tasks.Task<ProjectDetail> ProjectProjectsIdClusterActionsGETAsync (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectDetail> localVarResponse = await ProjectProjectsIdClusterActionsGETWithHttpInfoAsync(id, projectId, documentId, viewActions, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectDetail>> ProjectProjectsIdClusterActionsGETWithHttpInfoAsync (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdClusterActionsGET");

            var localVarPath = "/api/v1/project/projects/{id}/cluster_actions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_id", projectId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_id", documentId)); // query parameter
            if (viewActions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "view_actions", viewActions)); // query parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdClusterActionsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDetail)));
        }

        /// <summary>
        ///  Cluster Project Documents      Params:         - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]         - cluster_by: str[term, date, text, definition, duration, party,                           geoentity, currency_name, currency_value]         - n_clusters: int         - force: bool (optional) - force clustering if uncompleted tasks exist
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="clusterProjectRequest"> (optional)</param>
        /// <returns>ClusterProjectResponse</returns>
        public ClusterProjectResponse ProjectProjectsIdClusterPOST (string id, ClusterProjectRequest clusterProjectRequest = default(ClusterProjectRequest))
        {
             ApiResponse<ClusterProjectResponse> localVarResponse = ProjectProjectsIdClusterPOSTWithHttpInfo(id, clusterProjectRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Cluster Project Documents      Params:         - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]         - cluster_by: str[term, date, text, definition, duration, party,                           geoentity, currency_name, currency_value]         - n_clusters: int         - force: bool (optional) - force clustering if uncompleted tasks exist
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="clusterProjectRequest"> (optional)</param>
        /// <returns>ApiResponse of ClusterProjectResponse</returns>
        public ApiResponse<ClusterProjectResponse> ProjectProjectsIdClusterPOSTWithHttpInfo (string id, ClusterProjectRequest clusterProjectRequest = default(ClusterProjectRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdClusterPOST");

            var localVarPath = "/api/v1/project/projects/{id}/cluster/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clusterProjectRequest != null && clusterProjectRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clusterProjectRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clusterProjectRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdClusterPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClusterProjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClusterProjectResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClusterProjectResponse)));
        }

        /// <summary>
        ///  Cluster Project Documents      Params:         - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]         - cluster_by: str[term, date, text, definition, duration, party,                           geoentity, currency_name, currency_value]         - n_clusters: int         - force: bool (optional) - force clustering if uncompleted tasks exist
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="clusterProjectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ClusterProjectResponse</returns>
        public async System.Threading.Tasks.Task<ClusterProjectResponse> ProjectProjectsIdClusterPOSTAsync (string id, ClusterProjectRequest clusterProjectRequest = default(ClusterProjectRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ClusterProjectResponse> localVarResponse = await ProjectProjectsIdClusterPOSTWithHttpInfoAsync(id, clusterProjectRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Cluster Project Documents      Params:         - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]         - cluster_by: str[term, date, text, definition, duration, party,                           geoentity, currency_name, currency_value]         - n_clusters: int         - force: bool (optional) - force clustering if uncompleted tasks exist
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="clusterProjectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ClusterProjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClusterProjectResponse>> ProjectProjectsIdClusterPOSTWithHttpInfoAsync (string id, ClusterProjectRequest clusterProjectRequest = default(ClusterProjectRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdClusterPOST");

            var localVarPath = "/api/v1/project/projects/{id}/cluster/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clusterProjectRequest != null && clusterProjectRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clusterProjectRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clusterProjectRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdClusterPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClusterProjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClusterProjectResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClusterProjectResponse)));
        }

        /// <summary>
        ///  Last Clustering task status/data      Params:         - project_clustering_id: int (optional) - return last if not provided
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectClusteringId">Get by project_clustering_id (optional)</param>
        /// <returns>ProjectClusteringStatusResponse</returns>
        public ProjectClusteringStatusResponse ProjectProjectsIdClusteringStatusGET (string id, int? projectClusteringId = default(int?))
        {
             ApiResponse<ProjectClusteringStatusResponse> localVarResponse = ProjectProjectsIdClusteringStatusGETWithHttpInfo(id, projectClusteringId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Last Clustering task status/data      Params:         - project_clustering_id: int (optional) - return last if not provided
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectClusteringId">Get by project_clustering_id (optional)</param>
        /// <returns>ApiResponse of ProjectClusteringStatusResponse</returns>
        public ApiResponse<ProjectClusteringStatusResponse> ProjectProjectsIdClusteringStatusGETWithHttpInfo (string id, int? projectClusteringId = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdClusteringStatusGET");

            var localVarPath = "/api/v1/project/projects/{id}/clustering-status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectClusteringId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_clustering_id", projectClusteringId)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdClusteringStatusGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectClusteringStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectClusteringStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectClusteringStatusResponse)));
        }

        /// <summary>
        ///  Last Clustering task status/data      Params:         - project_clustering_id: int (optional) - return last if not provided
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectClusteringId">Get by project_clustering_id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectClusteringStatusResponse</returns>
        public async System.Threading.Tasks.Task<ProjectClusteringStatusResponse> ProjectProjectsIdClusteringStatusGETAsync (string id, int? projectClusteringId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectClusteringStatusResponse> localVarResponse = await ProjectProjectsIdClusteringStatusGETWithHttpInfoAsync(id, projectClusteringId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Last Clustering task status/data      Params:         - project_clustering_id: int (optional) - return last if not provided
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectClusteringId">Get by project_clustering_id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectClusteringStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectClusteringStatusResponse>> ProjectProjectsIdClusteringStatusGETWithHttpInfoAsync (string id, int? projectClusteringId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdClusteringStatusGET");

            var localVarPath = "/api/v1/project/projects/{id}/clustering-status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectClusteringId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_clustering_id", projectClusteringId)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdClusteringStatusGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectClusteringStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectClusteringStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectClusteringStatusResponse)));
        }

        /// <summary>
        ///  Delete Project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns></returns>
        public void ProjectProjectsIdDELETE (string id)
        {
             ProjectProjectsIdDELETEWithHttpInfo(id);
        }

        /// <summary>
        ///  Delete Project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectProjectsIdDELETEWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdDELETE");

            var localVarPath = "/api/v1/project/projects/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete Project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectProjectsIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ProjectProjectsIdDELETEWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        ///  Delete Project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectProjectsIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdDELETE");

            var localVarPath = "/api/v1/project/projects/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns></returns>
        public void ProjectProjectsIdDeleteDocumentSimilarityResultsDELETE (string id)
        {
             ProjectProjectsIdDeleteDocumentSimilarityResultsDELETEWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectProjectsIdDeleteDocumentSimilarityResultsDELETEWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdDeleteDocumentSimilarityResultsDELETE");

            var localVarPath = "/api/v1/project/projects/{id}/delete_document_similarity_results/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdDeleteDocumentSimilarityResultsDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectProjectsIdDeleteDocumentSimilarityResultsDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ProjectProjectsIdDeleteDocumentSimilarityResultsDELETEWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectProjectsIdDeleteDocumentSimilarityResultsDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdDeleteDocumentSimilarityResultsDELETE");

            var localVarPath = "/api/v1/project/projects/{id}/delete_document_similarity_results/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdDeleteDocumentSimilarityResultsDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns></returns>
        public void ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETE (string id)
        {
             ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETEWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETEWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETE");

            var localVarPath = "/api/v1/project/projects/{id}/delete_text_unit_similarity_results/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETEWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETE");

            var localVarPath = "/api/v1/project/projects/{id}/delete_text_unit_similarity_results/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="detectProjectFieldValuesRequest"> (optional)</param>
        /// <returns>TaskIdResponse</returns>
        public TaskIdResponse ProjectProjectsIdDetectFieldValuesPOST (string id, DetectProjectFieldValuesRequest detectProjectFieldValuesRequest = default(DetectProjectFieldValuesRequest))
        {
             ApiResponse<TaskIdResponse> localVarResponse = ProjectProjectsIdDetectFieldValuesPOSTWithHttpInfo(id, detectProjectFieldValuesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="detectProjectFieldValuesRequest"> (optional)</param>
        /// <returns>ApiResponse of TaskIdResponse</returns>
        public ApiResponse<TaskIdResponse> ProjectProjectsIdDetectFieldValuesPOSTWithHttpInfo (string id, DetectProjectFieldValuesRequest detectProjectFieldValuesRequest = default(DetectProjectFieldValuesRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdDetectFieldValuesPOST");

            var localVarPath = "/api/v1/project/projects/{id}/detect_field_values/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (detectProjectFieldValuesRequest != null && detectProjectFieldValuesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(detectProjectFieldValuesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = detectProjectFieldValuesRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdDetectFieldValuesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskIdResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="detectProjectFieldValuesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskIdResponse</returns>
        public async System.Threading.Tasks.Task<TaskIdResponse> ProjectProjectsIdDetectFieldValuesPOSTAsync (string id, DetectProjectFieldValuesRequest detectProjectFieldValuesRequest = default(DetectProjectFieldValuesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaskIdResponse> localVarResponse = await ProjectProjectsIdDetectFieldValuesPOSTWithHttpInfoAsync(id, detectProjectFieldValuesRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="detectProjectFieldValuesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskIdResponse>> ProjectProjectsIdDetectFieldValuesPOSTWithHttpInfoAsync (string id, DetectProjectFieldValuesRequest detectProjectFieldValuesRequest = default(DetectProjectFieldValuesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdDetectFieldValuesPOST");

            var localVarPath = "/api/v1/project/projects/{id}/detect_field_values/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (detectProjectFieldValuesRequest != null && detectProjectFieldValuesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(detectProjectFieldValuesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = detectProjectFieldValuesRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdDetectFieldValuesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskIdResponse)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> ProjectProjectsIdFormFieldsGET (string id)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = ProjectProjectsIdFormFieldsGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> ProjectProjectsIdFormFieldsGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdFormFieldsGET");

            var localVarPath = "/api/v1/project/projects/{id}/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> ProjectProjectsIdFormFieldsGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await ProjectProjectsIdFormFieldsGETWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> ProjectProjectsIdFormFieldsGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdFormFieldsGET");

            var localVarPath = "/api/v1/project/projects/{id}/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Retrieve Project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ProjectDetail</returns>
        public ProjectDetail ProjectProjectsIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<ProjectDetail> localVarResponse = ProjectProjectsIdGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve Project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of ProjectDetail</returns>
        public ApiResponse<ProjectDetail> ProjectProjectsIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdGET");

            var localVarPath = "/api/v1/project/projects/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDetail)));
        }

        /// <summary>
        ///  Retrieve Project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectDetail</returns>
        public async System.Threading.Tasks.Task<ProjectDetail> ProjectProjectsIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectDetail> localVarResponse = await ProjectProjectsIdGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve Project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectDetail>> ProjectProjectsIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdGET");

            var localVarPath = "/api/v1/project/projects/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <returns>ProjectDetail</returns>
        public ProjectDetail ProjectProjectsIdLocateItemsPOST (string id, ProjectDetail projectDetail = default(ProjectDetail))
        {
             ApiResponse<ProjectDetail> localVarResponse = ProjectProjectsIdLocateItemsPOSTWithHttpInfo(id, projectDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <returns>ApiResponse of ProjectDetail</returns>
        public ApiResponse<ProjectDetail> ProjectProjectsIdLocateItemsPOSTWithHttpInfo (string id, ProjectDetail projectDetail = default(ProjectDetail))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdLocateItemsPOST");

            var localVarPath = "/api/v1/project/projects/{id}/locate_items/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectDetail != null && projectDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdLocateItemsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectDetail</returns>
        public async System.Threading.Tasks.Task<ProjectDetail> ProjectProjectsIdLocateItemsPOSTAsync (string id, ProjectDetail projectDetail = default(ProjectDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectDetail> localVarResponse = await ProjectProjectsIdLocateItemsPOSTWithHttpInfoAsync(id, projectDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectDetail>> ProjectProjectsIdLocateItemsPOSTWithHttpInfoAsync (string id, ProjectDetail projectDetail = default(ProjectDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdLocateItemsPOST");

            var localVarPath = "/api/v1/project/projects/{id}/locate_items/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectDetail != null && projectDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdLocateItemsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDetail)));
        }

        /// <summary>
        ///  Method marks the whole project (remove_all&#x3D;True) / the project&#39;s documents (remove_all&#x3D;False) for deleting. These marked documents (and the project) will become hidden in API. Documents, listed in excluded_ids list, will not be marked for deleting.      Params:         - all: bool - mark all filtered by a user documents         - remove_all: bool - mark project+documents         - exclude_document_ids: list[int]
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <returns>MarkUnmarkForDeleteProjectsReponse</returns>
        public MarkUnmarkForDeleteProjectsReponse ProjectProjectsIdMarkDeletePOST (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest))
        {
             ApiResponse<MarkUnmarkForDeleteProjectsReponse> localVarResponse = ProjectProjectsIdMarkDeletePOSTWithHttpInfo(id, markUnmarkForDeleteProjectsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Method marks the whole project (remove_all&#x3D;True) / the project&#39;s documents (remove_all&#x3D;False) for deleting. These marked documents (and the project) will become hidden in API. Documents, listed in excluded_ids list, will not be marked for deleting.      Params:         - all: bool - mark all filtered by a user documents         - remove_all: bool - mark project+documents         - exclude_document_ids: list[int]
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <returns>ApiResponse of MarkUnmarkForDeleteProjectsReponse</returns>
        public ApiResponse<MarkUnmarkForDeleteProjectsReponse> ProjectProjectsIdMarkDeletePOSTWithHttpInfo (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdMarkDeletePOST");

            var localVarPath = "/api/v1/project/projects/{id}/mark_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (markUnmarkForDeleteProjectsRequest != null && markUnmarkForDeleteProjectsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markUnmarkForDeleteProjectsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markUnmarkForDeleteProjectsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdMarkDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnmarkForDeleteProjectsReponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkUnmarkForDeleteProjectsReponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnmarkForDeleteProjectsReponse)));
        }

        /// <summary>
        ///  Method marks the whole project (remove_all&#x3D;True) / the project&#39;s documents (remove_all&#x3D;False) for deleting. These marked documents (and the project) will become hidden in API. Documents, listed in excluded_ids list, will not be marked for deleting.      Params:         - all: bool - mark all filtered by a user documents         - remove_all: bool - mark project+documents         - exclude_document_ids: list[int]
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkUnmarkForDeleteProjectsReponse</returns>
        public async System.Threading.Tasks.Task<MarkUnmarkForDeleteProjectsReponse> ProjectProjectsIdMarkDeletePOSTAsync (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MarkUnmarkForDeleteProjectsReponse> localVarResponse = await ProjectProjectsIdMarkDeletePOSTWithHttpInfoAsync(id, markUnmarkForDeleteProjectsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Method marks the whole project (remove_all&#x3D;True) / the project&#39;s documents (remove_all&#x3D;False) for deleting. These marked documents (and the project) will become hidden in API. Documents, listed in excluded_ids list, will not be marked for deleting.      Params:         - all: bool - mark all filtered by a user documents         - remove_all: bool - mark project+documents         - exclude_document_ids: list[int]
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkUnmarkForDeleteProjectsReponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkUnmarkForDeleteProjectsReponse>> ProjectProjectsIdMarkDeletePOSTWithHttpInfoAsync (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdMarkDeletePOST");

            var localVarPath = "/api/v1/project/projects/{id}/mark_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (markUnmarkForDeleteProjectsRequest != null && markUnmarkForDeleteProjectsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markUnmarkForDeleteProjectsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markUnmarkForDeleteProjectsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdMarkDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnmarkForDeleteProjectsReponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkUnmarkForDeleteProjectsReponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnmarkForDeleteProjectsReponse)));
        }

        /// <summary>
        ///  Partial Update Project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <returns>ProjectUpdate</returns>
        public ProjectUpdate ProjectProjectsIdPATCH (string id, ProjectUpdate projectUpdate = default(ProjectUpdate))
        {
             ApiResponse<ProjectUpdate> localVarResponse = ProjectProjectsIdPATCHWithHttpInfo(id, projectUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Partial Update Project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <returns>ApiResponse of ProjectUpdate</returns>
        public ApiResponse<ProjectUpdate> ProjectProjectsIdPATCHWithHttpInfo (string id, ProjectUpdate projectUpdate = default(ProjectUpdate))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdPATCH");

            var localVarPath = "/api/v1/project/projects/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectUpdate != null && projectUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectUpdate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectUpdate)));
        }

        /// <summary>
        ///  Partial Update Project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectUpdate</returns>
        public async System.Threading.Tasks.Task<ProjectUpdate> ProjectProjectsIdPATCHAsync (string id, ProjectUpdate projectUpdate = default(ProjectUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectUpdate> localVarResponse = await ProjectProjectsIdPATCHWithHttpInfoAsync(id, projectUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Partial Update Project
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectUpdate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectUpdate>> ProjectProjectsIdPATCHWithHttpInfoAsync (string id, ProjectUpdate projectUpdate = default(ProjectUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdPATCH");

            var localVarPath = "/api/v1/project/projects/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectUpdate != null && projectUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectUpdate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectUpdate)));
        }

        /// <summary>
        ///  Create Document/TextUnit Vectors if needed Update ocr_enable project app var if needed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <returns>ProjectUpdate</returns>
        public ProjectUpdate ProjectProjectsIdPUT (string id, ProjectUpdate projectUpdate = default(ProjectUpdate))
        {
             ApiResponse<ProjectUpdate> localVarResponse = ProjectProjectsIdPUTWithHttpInfo(id, projectUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Document/TextUnit Vectors if needed Update ocr_enable project app var if needed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <returns>ApiResponse of ProjectUpdate</returns>
        public ApiResponse<ProjectUpdate> ProjectProjectsIdPUTWithHttpInfo (string id, ProjectUpdate projectUpdate = default(ProjectUpdate))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdPUT");

            var localVarPath = "/api/v1/project/projects/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectUpdate != null && projectUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectUpdate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectUpdate)));
        }

        /// <summary>
        ///  Create Document/TextUnit Vectors if needed Update ocr_enable project app var if needed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectUpdate</returns>
        public async System.Threading.Tasks.Task<ProjectUpdate> ProjectProjectsIdPUTAsync (string id, ProjectUpdate projectUpdate = default(ProjectUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectUpdate> localVarResponse = await ProjectProjectsIdPUTWithHttpInfoAsync(id, projectUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create Document/TextUnit Vectors if needed Update ocr_enable project app var if needed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectUpdate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectUpdate>> ProjectProjectsIdPUTWithHttpInfoAsync (string id, ProjectUpdate projectUpdate = default(ProjectUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdPUT");

            var localVarPath = "/api/v1/project/projects/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectUpdate != null && projectUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectUpdate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectUpdate)));
        }

        /// <summary>
        ///  Get current progress of all project sessions / clusterings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ProjectProgressResponse</returns>
        public ProjectProgressResponse ProjectProjectsIdProgressGET (string id)
        {
             ApiResponse<ProjectProgressResponse> localVarResponse = ProjectProjectsIdProgressGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get current progress of all project sessions / clusterings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <returns>ApiResponse of ProjectProgressResponse</returns>
        public ApiResponse<ProjectProgressResponse> ProjectProjectsIdProgressGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdProgressGET");

            var localVarPath = "/api/v1/project/projects/{id}/progress/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdProgressGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectProgressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectProgressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectProgressResponse)));
        }

        /// <summary>
        ///  Get current progress of all project sessions / clusterings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectProgressResponse</returns>
        public async System.Threading.Tasks.Task<ProjectProgressResponse> ProjectProjectsIdProgressGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectProgressResponse> localVarResponse = await ProjectProjectsIdProgressGETWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get current progress of all project sessions / clusterings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectProgressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectProgressResponse>> ProjectProjectsIdProgressGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdProgressGET");

            var localVarPath = "/api/v1/project/projects/{id}/progress/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdProgressGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectProgressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectProgressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectProgressResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarDocumentsRequest"> (optional)</param>
        /// <returns>TaskIdResponse</returns>
        public TaskIdResponse ProjectProjectsIdSearchSimilarDocumentsPOST (string id, ProjectSearchSimilarDocumentsRequest projectSearchSimilarDocumentsRequest = default(ProjectSearchSimilarDocumentsRequest))
        {
             ApiResponse<TaskIdResponse> localVarResponse = ProjectProjectsIdSearchSimilarDocumentsPOSTWithHttpInfo(id, projectSearchSimilarDocumentsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarDocumentsRequest"> (optional)</param>
        /// <returns>ApiResponse of TaskIdResponse</returns>
        public ApiResponse<TaskIdResponse> ProjectProjectsIdSearchSimilarDocumentsPOSTWithHttpInfo (string id, ProjectSearchSimilarDocumentsRequest projectSearchSimilarDocumentsRequest = default(ProjectSearchSimilarDocumentsRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdSearchSimilarDocumentsPOST");

            var localVarPath = "/api/v1/project/projects/{id}/search_similar_documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectSearchSimilarDocumentsRequest != null && projectSearchSimilarDocumentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectSearchSimilarDocumentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectSearchSimilarDocumentsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdSearchSimilarDocumentsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskIdResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskIdResponse</returns>
        public async System.Threading.Tasks.Task<TaskIdResponse> ProjectProjectsIdSearchSimilarDocumentsPOSTAsync (string id, ProjectSearchSimilarDocumentsRequest projectSearchSimilarDocumentsRequest = default(ProjectSearchSimilarDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaskIdResponse> localVarResponse = await ProjectProjectsIdSearchSimilarDocumentsPOSTWithHttpInfoAsync(id, projectSearchSimilarDocumentsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskIdResponse>> ProjectProjectsIdSearchSimilarDocumentsPOSTWithHttpInfoAsync (string id, ProjectSearchSimilarDocumentsRequest projectSearchSimilarDocumentsRequest = default(ProjectSearchSimilarDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdSearchSimilarDocumentsPOST");

            var localVarPath = "/api/v1/project/projects/{id}/search_similar_documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectSearchSimilarDocumentsRequest != null && projectSearchSimilarDocumentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectSearchSimilarDocumentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectSearchSimilarDocumentsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdSearchSimilarDocumentsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskIdResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarTextUnitsRequest"> (optional)</param>
        /// <returns>TaskIdResponse</returns>
        public TaskIdResponse ProjectProjectsIdSearchSimilarTextUnitsPOST (string id, ProjectSearchSimilarTextUnitsRequest projectSearchSimilarTextUnitsRequest = default(ProjectSearchSimilarTextUnitsRequest))
        {
             ApiResponse<TaskIdResponse> localVarResponse = ProjectProjectsIdSearchSimilarTextUnitsPOSTWithHttpInfo(id, projectSearchSimilarTextUnitsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarTextUnitsRequest"> (optional)</param>
        /// <returns>ApiResponse of TaskIdResponse</returns>
        public ApiResponse<TaskIdResponse> ProjectProjectsIdSearchSimilarTextUnitsPOSTWithHttpInfo (string id, ProjectSearchSimilarTextUnitsRequest projectSearchSimilarTextUnitsRequest = default(ProjectSearchSimilarTextUnitsRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdSearchSimilarTextUnitsPOST");

            var localVarPath = "/api/v1/project/projects/{id}/search_similar_text_units/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectSearchSimilarTextUnitsRequest != null && projectSearchSimilarTextUnitsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectSearchSimilarTextUnitsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectSearchSimilarTextUnitsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdSearchSimilarTextUnitsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskIdResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarTextUnitsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskIdResponse</returns>
        public async System.Threading.Tasks.Task<TaskIdResponse> ProjectProjectsIdSearchSimilarTextUnitsPOSTAsync (string id, ProjectSearchSimilarTextUnitsRequest projectSearchSimilarTextUnitsRequest = default(ProjectSearchSimilarTextUnitsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaskIdResponse> localVarResponse = await ProjectProjectsIdSearchSimilarTextUnitsPOSTWithHttpInfoAsync(id, projectSearchSimilarTextUnitsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectSearchSimilarTextUnitsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskIdResponse>> ProjectProjectsIdSearchSimilarTextUnitsPOSTWithHttpInfoAsync (string id, ProjectSearchSimilarTextUnitsRequest projectSearchSimilarTextUnitsRequest = default(ProjectSearchSimilarTextUnitsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdSearchSimilarTextUnitsPOST");

            var localVarPath = "/api/v1/project/projects/{id}/search_similar_text_units/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectSearchSimilarTextUnitsRequest != null && projectSearchSimilarTextUnitsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectSearchSimilarTextUnitsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectSearchSimilarTextUnitsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdSearchSimilarTextUnitsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskIdResponse)));
        }

        /// <summary>
        ///  Send clusters to another Project      Params:         - cluster_ids: list[int]         - project_id: int
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="sendClusterToProjectRequest"> (optional)</param>
        /// <returns>string</returns>
        public string ProjectProjectsIdSendClustersToProjectPOST (string id, SendClusterToProjectRequest sendClusterToProjectRequest = default(SendClusterToProjectRequest))
        {
             ApiResponse<string> localVarResponse = ProjectProjectsIdSendClustersToProjectPOSTWithHttpInfo(id, sendClusterToProjectRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Send clusters to another Project      Params:         - cluster_ids: list[int]         - project_id: int
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="sendClusterToProjectRequest"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ProjectProjectsIdSendClustersToProjectPOSTWithHttpInfo (string id, SendClusterToProjectRequest sendClusterToProjectRequest = default(SendClusterToProjectRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdSendClustersToProjectPOST");

            var localVarPath = "/api/v1/project/projects/{id}/send-clusters-to-project/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendClusterToProjectRequest != null && sendClusterToProjectRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendClusterToProjectRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendClusterToProjectRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdSendClustersToProjectPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Send clusters to another Project      Params:         - cluster_ids: list[int]         - project_id: int
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="sendClusterToProjectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ProjectProjectsIdSendClustersToProjectPOSTAsync (string id, SendClusterToProjectRequest sendClusterToProjectRequest = default(SendClusterToProjectRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await ProjectProjectsIdSendClustersToProjectPOSTWithHttpInfoAsync(id, sendClusterToProjectRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Send clusters to another Project      Params:         - cluster_ids: list[int]         - project_id: int
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="sendClusterToProjectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ProjectProjectsIdSendClustersToProjectPOSTWithHttpInfoAsync (string id, SendClusterToProjectRequest sendClusterToProjectRequest = default(SendClusterToProjectRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdSendClustersToProjectPOST");

            var localVarPath = "/api/v1/project/projects/{id}/send-clusters-to-project/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendClusterToProjectRequest != null && sendClusterToProjectRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendClusterToProjectRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendClusterToProjectRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdSendClustersToProjectPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Bulk set status for batch of annotations      Params:         document_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         status_id: int - field annotation status id         run_mode: str - &#39;sync&#39;, &#39;background&#39;, &#39;smart&#39;     Returns:         int (number of reassigned annotations)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectAnnotationsStatusRequest"> (optional)</param>
        /// <returns>OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse</returns>
        public OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse ProjectProjectsIdSetAnnotationStatusPOST (string id, SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest = default(SetProjectAnnotationsStatusRequest))
        {
             ApiResponse<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse> localVarResponse = ProjectProjectsIdSetAnnotationStatusPOSTWithHttpInfo(id, setProjectAnnotationsStatusRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Bulk set status for batch of annotations      Params:         document_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         status_id: int - field annotation status id         run_mode: str - &#39;sync&#39;, &#39;background&#39;, &#39;smart&#39;     Returns:         int (number of reassigned annotations)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectAnnotationsStatusRequest"> (optional)</param>
        /// <returns>ApiResponse of OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse</returns>
        public ApiResponse<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse> ProjectProjectsIdSetAnnotationStatusPOSTWithHttpInfo (string id, SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest = default(SetProjectAnnotationsStatusRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdSetAnnotationStatusPOST");

            var localVarPath = "/api/v1/project/projects/{id}/set_annotation_status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (setProjectAnnotationsStatusRequest != null && setProjectAnnotationsStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setProjectAnnotationsStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setProjectAnnotationsStatusRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdSetAnnotationStatusPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse)));
        }

        /// <summary>
        ///  Bulk set status for batch of annotations      Params:         document_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         status_id: int - field annotation status id         run_mode: str - &#39;sync&#39;, &#39;background&#39;, &#39;smart&#39;     Returns:         int (number of reassigned annotations)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectAnnotationsStatusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse</returns>
        public async System.Threading.Tasks.Task<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse> ProjectProjectsIdSetAnnotationStatusPOSTAsync (string id, SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest = default(SetProjectAnnotationsStatusRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse> localVarResponse = await ProjectProjectsIdSetAnnotationStatusPOSTWithHttpInfoAsync(id, setProjectAnnotationsStatusRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Bulk set status for batch of annotations      Params:         document_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         status_id: int - field annotation status id         run_mode: str - &#39;sync&#39;, &#39;background&#39;, &#39;smart&#39;     Returns:         int (number of reassigned annotations)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectAnnotationsStatusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse>> ProjectProjectsIdSetAnnotationStatusPOSTWithHttpInfoAsync (string id, SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest = default(SetProjectAnnotationsStatusRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdSetAnnotationStatusPOST");

            var localVarPath = "/api/v1/project/projects/{id}/set_annotation_status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (setProjectAnnotationsStatusRequest != null && setProjectAnnotationsStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setProjectAnnotationsStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setProjectAnnotationsStatusRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdSetAnnotationStatusPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse)));
        }

        /// <summary>
        ///  Bulk set status for batch of documents      Params:         document_ids: list[int]         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         all: any value - update all documents if any value         status_id: int     Returns:         int (number of reassigned documents)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectDocumentsStatusRequest"> (optional)</param>
        /// <returns>CountSuccessResponse</returns>
        public CountSuccessResponse ProjectProjectsIdSetStatusPOST (string id, SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest = default(SetProjectDocumentsStatusRequest))
        {
             ApiResponse<CountSuccessResponse> localVarResponse = ProjectProjectsIdSetStatusPOSTWithHttpInfo(id, setProjectDocumentsStatusRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Bulk set status for batch of documents      Params:         document_ids: list[int]         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         all: any value - update all documents if any value         status_id: int     Returns:         int (number of reassigned documents)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectDocumentsStatusRequest"> (optional)</param>
        /// <returns>ApiResponse of CountSuccessResponse</returns>
        public ApiResponse<CountSuccessResponse> ProjectProjectsIdSetStatusPOSTWithHttpInfo (string id, SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest = default(SetProjectDocumentsStatusRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdSetStatusPOST");

            var localVarPath = "/api/v1/project/projects/{id}/set_status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (setProjectDocumentsStatusRequest != null && setProjectDocumentsStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setProjectDocumentsStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setProjectDocumentsStatusRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdSetStatusPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountSuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountSuccessResponse)));
        }

        /// <summary>
        ///  Bulk set status for batch of documents      Params:         document_ids: list[int]         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         all: any value - update all documents if any value         status_id: int     Returns:         int (number of reassigned documents)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectDocumentsStatusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CountSuccessResponse</returns>
        public async System.Threading.Tasks.Task<CountSuccessResponse> ProjectProjectsIdSetStatusPOSTAsync (string id, SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest = default(SetProjectDocumentsStatusRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CountSuccessResponse> localVarResponse = await ProjectProjectsIdSetStatusPOSTWithHttpInfoAsync(id, setProjectDocumentsStatusRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Bulk set status for batch of documents      Params:         document_ids: list[int]         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         all: any value - update all documents if any value         status_id: int     Returns:         int (number of reassigned documents)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="setProjectDocumentsStatusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CountSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountSuccessResponse>> ProjectProjectsIdSetStatusPOSTWithHttpInfoAsync (string id, SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest = default(SetProjectDocumentsStatusRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdSetStatusPOST");

            var localVarPath = "/api/v1/project/projects/{id}/set_status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (setProjectDocumentsStatusRequest != null && setProjectDocumentsStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setProjectDocumentsStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setProjectDocumentsStatusRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdSetStatusPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CountSuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountSuccessResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ProjectDetail</returns>
        public ProjectDetail ProjectProjectsIdSettingsActionsGET (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<ProjectDetail> localVarResponse = ProjectProjectsIdSettingsActionsGETWithHttpInfo(id, projectId, documentId, viewActions, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of ProjectDetail</returns>
        public ApiResponse<ProjectDetail> ProjectProjectsIdSettingsActionsGETWithHttpInfo (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdSettingsActionsGET");

            var localVarPath = "/api/v1/project/projects/{id}/settings_actions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_id", projectId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_id", documentId)); // query parameter
            if (viewActions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "view_actions", viewActions)); // query parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdSettingsActionsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectDetail</returns>
        public async System.Threading.Tasks.Task<ProjectDetail> ProjectProjectsIdSettingsActionsGETAsync (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectDetail> localVarResponse = await ProjectProjectsIdSettingsActionsGETWithHttpInfoAsync(id, projectId, documentId, viewActions, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="projectId">Project ID (optional)</param>
        /// <param name="documentId">Document ID (optional)</param>
        /// <param name="viewActions">Action names (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectDetail>> ProjectProjectsIdSettingsActionsGETWithHttpInfoAsync (string id, int? projectId = default(int?), int? documentId = default(int?), List<string> viewActions = default(List<string>), Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdSettingsActionsGET");

            var localVarPath = "/api/v1/project/projects/{id}/settings_actions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_id", projectId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_id", documentId)); // query parameter
            if (viewActions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "view_actions", viewActions)); // query parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdSettingsActionsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="taskId"></param>
        /// <param name="recordsLimit"> (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>TaskLogResponse</returns>
        public TaskLogResponse ProjectProjectsIdTaskTaskIdTaskLogsGET (string id, string taskId, int? recordsLimit = default(int?), Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<TaskLogResponse> localVarResponse = ProjectProjectsIdTaskTaskIdTaskLogsGETWithHttpInfo(id, taskId, recordsLimit, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="taskId"></param>
        /// <param name="recordsLimit"> (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of TaskLogResponse</returns>
        public ApiResponse<TaskLogResponse> ProjectProjectsIdTaskTaskIdTaskLogsGETWithHttpInfo (string id, string taskId, int? recordsLimit = default(int?), Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdTaskTaskIdTaskLogsGET");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProjectApi->ProjectProjectsIdTaskTaskIdTaskLogsGET");

            var localVarPath = "/api/v1/project/projects/{id}/task/{task_id}/task-logs/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (recordsLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "records_limit", recordsLimit)); // query parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdTaskTaskIdTaskLogsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLogResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="taskId"></param>
        /// <param name="recordsLimit"> (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskLogResponse</returns>
        public async System.Threading.Tasks.Task<TaskLogResponse> ProjectProjectsIdTaskTaskIdTaskLogsGETAsync (string id, string taskId, int? recordsLimit = default(int?), Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaskLogResponse> localVarResponse = await ProjectProjectsIdTaskTaskIdTaskLogsGETWithHttpInfoAsync(id, taskId, recordsLimit, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="taskId"></param>
        /// <param name="recordsLimit"> (optional)</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskLogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskLogResponse>> ProjectProjectsIdTaskTaskIdTaskLogsGETWithHttpInfoAsync (string id, string taskId, int? recordsLimit = default(int?), Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdTaskTaskIdTaskLogsGET");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProjectApi->ProjectProjectsIdTaskTaskIdTaskLogsGET");

            var localVarPath = "/api/v1/project/projects/{id}/task/{task_id}/task-logs/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (recordsLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "records_limit", recordsLimit)); // query parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdTaskTaskIdTaskLogsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskLogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskLogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskLogResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;ProjectTasks&gt;</returns>
        public List<ProjectTasks> ProjectProjectsIdTasksGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<ProjectTasks>> localVarResponse = ProjectProjectsIdTasksGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectTasks&gt;</returns>
        public ApiResponse<List<ProjectTasks>> ProjectProjectsIdTasksGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdTasksGET");

            var localVarPath = "/api/v1/project/projects/{id}/tasks/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdTasksGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectTasks>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectTasks>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectTasks>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectTasks&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectTasks>> ProjectProjectsIdTasksGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ProjectTasks>> localVarResponse = await ProjectProjectsIdTasksGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectTasks&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectTasks>>> ProjectProjectsIdTasksGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdTasksGET");

            var localVarPath = "/api/v1/project/projects/{id}/tasks/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdTasksGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectTasks>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectTasks>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectTasks>)));
        }

        /// <summary>
        ///  Method removes soft delete sign from project only (remove_all&#x3D;False) or from the project and the project&#39;s documents (remove_all&#x3D;True)     Body params:         - all: bool - unmark all filtered by a user documents         - remove_all: bool - unmark project+documents         - exclude_document_ids: List[int]
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <returns>MarkUnmarkForDeleteProjectsReponse</returns>
        public MarkUnmarkForDeleteProjectsReponse ProjectProjectsIdUnmarkDeletePOST (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest))
        {
             ApiResponse<MarkUnmarkForDeleteProjectsReponse> localVarResponse = ProjectProjectsIdUnmarkDeletePOSTWithHttpInfo(id, markUnmarkForDeleteProjectsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Method removes soft delete sign from project only (remove_all&#x3D;False) or from the project and the project&#39;s documents (remove_all&#x3D;True)     Body params:         - all: bool - unmark all filtered by a user documents         - remove_all: bool - unmark project+documents         - exclude_document_ids: List[int]
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <returns>ApiResponse of MarkUnmarkForDeleteProjectsReponse</returns>
        public ApiResponse<MarkUnmarkForDeleteProjectsReponse> ProjectProjectsIdUnmarkDeletePOSTWithHttpInfo (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdUnmarkDeletePOST");

            var localVarPath = "/api/v1/project/projects/{id}/unmark_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (markUnmarkForDeleteProjectsRequest != null && markUnmarkForDeleteProjectsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markUnmarkForDeleteProjectsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markUnmarkForDeleteProjectsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdUnmarkDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnmarkForDeleteProjectsReponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkUnmarkForDeleteProjectsReponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnmarkForDeleteProjectsReponse)));
        }

        /// <summary>
        ///  Method removes soft delete sign from project only (remove_all&#x3D;False) or from the project and the project&#39;s documents (remove_all&#x3D;True)     Body params:         - all: bool - unmark all filtered by a user documents         - remove_all: bool - unmark project+documents         - exclude_document_ids: List[int]
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkUnmarkForDeleteProjectsReponse</returns>
        public async System.Threading.Tasks.Task<MarkUnmarkForDeleteProjectsReponse> ProjectProjectsIdUnmarkDeletePOSTAsync (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MarkUnmarkForDeleteProjectsReponse> localVarResponse = await ProjectProjectsIdUnmarkDeletePOSTWithHttpInfoAsync(id, markUnmarkForDeleteProjectsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Method removes soft delete sign from project only (remove_all&#x3D;False) or from the project and the project&#39;s documents (remove_all&#x3D;True)     Body params:         - all: bool - unmark all filtered by a user documents         - remove_all: bool - unmark project+documents         - exclude_document_ids: List[int]
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="markUnmarkForDeleteProjectsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkUnmarkForDeleteProjectsReponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkUnmarkForDeleteProjectsReponse>> ProjectProjectsIdUnmarkDeletePOSTWithHttpInfoAsync (string id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = default(MarkUnmarkForDeleteProjectsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdUnmarkDeletePOST");

            var localVarPath = "/api/v1/project/projects/{id}/unmark_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (markUnmarkForDeleteProjectsRequest != null && markUnmarkForDeleteProjectsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markUnmarkForDeleteProjectsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markUnmarkForDeleteProjectsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdUnmarkDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnmarkForDeleteProjectsReponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkUnmarkForDeleteProjectsReponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnmarkForDeleteProjectsReponse)));
        }

        /// <summary>
        ///  Bulk update project documents field, similar to /fields/ API in document app      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         fields_data: - dict {field_code: [values]}         on_existing_value: \&quot;replace_all\&quot; | \&quot;add_new\&quot; (for multi-choice fields)     Returns:         task_id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="updateProjectDocumentsFieldsRequest"> (optional)</param>
        /// <returns>TaskIdResponse</returns>
        public TaskIdResponse ProjectProjectsIdUpdateDocumentFieldsPOST (string id, UpdateProjectDocumentsFieldsRequest updateProjectDocumentsFieldsRequest = default(UpdateProjectDocumentsFieldsRequest))
        {
             ApiResponse<TaskIdResponse> localVarResponse = ProjectProjectsIdUpdateDocumentFieldsPOSTWithHttpInfo(id, updateProjectDocumentsFieldsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Bulk update project documents field, similar to /fields/ API in document app      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         fields_data: - dict {field_code: [values]}         on_existing_value: \&quot;replace_all\&quot; | \&quot;add_new\&quot; (for multi-choice fields)     Returns:         task_id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="updateProjectDocumentsFieldsRequest"> (optional)</param>
        /// <returns>ApiResponse of TaskIdResponse</returns>
        public ApiResponse<TaskIdResponse> ProjectProjectsIdUpdateDocumentFieldsPOSTWithHttpInfo (string id, UpdateProjectDocumentsFieldsRequest updateProjectDocumentsFieldsRequest = default(UpdateProjectDocumentsFieldsRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdUpdateDocumentFieldsPOST");

            var localVarPath = "/api/v1/project/projects/{id}/update_document_fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateProjectDocumentsFieldsRequest != null && updateProjectDocumentsFieldsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateProjectDocumentsFieldsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateProjectDocumentsFieldsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdUpdateDocumentFieldsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskIdResponse)));
        }

        /// <summary>
        ///  Bulk update project documents field, similar to /fields/ API in document app      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         fields_data: - dict {field_code: [values]}         on_existing_value: \&quot;replace_all\&quot; | \&quot;add_new\&quot; (for multi-choice fields)     Returns:         task_id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="updateProjectDocumentsFieldsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskIdResponse</returns>
        public async System.Threading.Tasks.Task<TaskIdResponse> ProjectProjectsIdUpdateDocumentFieldsPOSTAsync (string id, UpdateProjectDocumentsFieldsRequest updateProjectDocumentsFieldsRequest = default(UpdateProjectDocumentsFieldsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaskIdResponse> localVarResponse = await ProjectProjectsIdUpdateDocumentFieldsPOSTWithHttpInfoAsync(id, updateProjectDocumentsFieldsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Bulk update project documents field, similar to /fields/ API in document app      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         fields_data: - dict {field_code: [values]}         on_existing_value: \&quot;replace_all\&quot; | \&quot;add_new\&quot; (for multi-choice fields)     Returns:         task_id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this project.</param>
        /// <param name="updateProjectDocumentsFieldsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskIdResponse>> ProjectProjectsIdUpdateDocumentFieldsPOSTWithHttpInfoAsync (string id, UpdateProjectDocumentsFieldsRequest updateProjectDocumentsFieldsRequest = default(UpdateProjectDocumentsFieldsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectProjectsIdUpdateDocumentFieldsPOST");

            var localVarPath = "/api/v1/project/projects/{id}/update_document_fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateProjectDocumentsFieldsRequest != null && updateProjectDocumentsFieldsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateProjectDocumentsFieldsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateProjectDocumentsFieldsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsIdUpdateDocumentFieldsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskIdResponse)));
        }

        /// <summary>
        ///  Create Document/TextUnit Vectors if needed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"> (optional)</param>
        /// <returns>ProjectCreate</returns>
        public ProjectCreate ProjectProjectsPOST (ProjectCreate projectCreate = default(ProjectCreate))
        {
             ApiResponse<ProjectCreate> localVarResponse = ProjectProjectsPOSTWithHttpInfo(projectCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Document/TextUnit Vectors if needed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"> (optional)</param>
        /// <returns>ApiResponse of ProjectCreate</returns>
        public ApiResponse<ProjectCreate> ProjectProjectsPOSTWithHttpInfo (ProjectCreate projectCreate = default(ProjectCreate))
        {

            var localVarPath = "/api/v1/project/projects/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectCreate != null && projectCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectCreate)));
        }

        /// <summary>
        ///  Create Document/TextUnit Vectors if needed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectCreate</returns>
        public async System.Threading.Tasks.Task<ProjectCreate> ProjectProjectsPOSTAsync (ProjectCreate projectCreate = default(ProjectCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectCreate> localVarResponse = await ProjectProjectsPOSTWithHttpInfoAsync(projectCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create Document/TextUnit Vectors if needed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectCreate>> ProjectProjectsPOSTWithHttpInfoAsync (ProjectCreate projectCreate = default(ProjectCreate), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/project/projects/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectCreate != null && projectCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectCreate)));
        }

        /// <summary>
        ///  Get project stats across all projects see related code in get_queryset() and serializer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <returns>List&lt;ProjectStats&gt;</returns>
        public List<ProjectStats> ProjectProjectsProjectStatsGET (string projectIds = default(string))
        {
             ApiResponse<List<ProjectStats>> localVarResponse = ProjectProjectsProjectStatsGETWithHttpInfo(projectIds);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get project stats across all projects see related code in get_queryset() and serializer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectStats&gt;</returns>
        public ApiResponse<List<ProjectStats>> ProjectProjectsProjectStatsGETWithHttpInfo (string projectIds = default(string))
        {

            var localVarPath = "/api/v1/project/projects/project_stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_ids", projectIds)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsProjectStatsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectStats>)));
        }

        /// <summary>
        ///  Get project stats across all projects see related code in get_queryset() and serializer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ProjectStats&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectStats>> ProjectProjectsProjectStatsGETAsync (string projectIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ProjectStats>> localVarResponse = await ProjectProjectsProjectStatsGETWithHttpInfoAsync(projectIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get project stats across all projects see related code in get_queryset() and serializer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectIds">Project ids separated by commas (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ProjectStats&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectStats>>> ProjectProjectsProjectStatsGETWithHttpInfoAsync (string projectIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/project/projects/project_stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_ids", projectIds)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsProjectStatsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectStats>)));
        }

        /// <summary>
        ///  Get recent N projects      Params:         n: int - default is 5
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">Max rows number (optional)</param>
        /// <returns>List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public List<Dictionary<string, Object>> ProjectProjectsRecentGET (int? n = default(int?))
        {
             ApiResponse<List<Dictionary<string, Object>>> localVarResponse = ProjectProjectsRecentGETWithHttpInfo(n);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get recent N projects      Params:         n: int - default is 5
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">Max rows number (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public ApiResponse<List<Dictionary<string, Object>>> ProjectProjectsRecentGETWithHttpInfo (int? n = default(int?))
        {

            var localVarPath = "/api/v1/project/projects/recent/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsRecentGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dictionary<string, Object>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Dictionary<string, Object>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dictionary<string, Object>>)));
        }

        /// <summary>
        ///  Get recent N projects      Params:         n: int - default is 5
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">Max rows number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Dictionary&lt;string, Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary<string, Object>>> ProjectProjectsRecentGETAsync (int? n = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Dictionary<string, Object>>> localVarResponse = await ProjectProjectsRecentGETWithHttpInfoAsync(n, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get recent N projects      Params:         n: int - default is 5
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">Max rows number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&lt;string, Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Dictionary<string, Object>>>> ProjectProjectsRecentGETWithHttpInfoAsync (int? n = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/project/projects/recent/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsRecentGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dictionary<string, Object>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Dictionary<string, Object>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dictionary<string, Object>>)));
        }

        /// <summary>
        ///  Select projects for review in Explorer UI
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectProjectsRequest"> (optional)</param>
        /// <returns>SelectProjectsResponse</returns>
        public SelectProjectsResponse ProjectProjectsSelectProjectsPOST (SelectProjectsRequest selectProjectsRequest = default(SelectProjectsRequest))
        {
             ApiResponse<SelectProjectsResponse> localVarResponse = ProjectProjectsSelectProjectsPOSTWithHttpInfo(selectProjectsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Select projects for review in Explorer UI
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectProjectsRequest"> (optional)</param>
        /// <returns>ApiResponse of SelectProjectsResponse</returns>
        public ApiResponse<SelectProjectsResponse> ProjectProjectsSelectProjectsPOSTWithHttpInfo (SelectProjectsRequest selectProjectsRequest = default(SelectProjectsRequest))
        {

            var localVarPath = "/api/v1/project/projects/select_projects/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (selectProjectsRequest != null && selectProjectsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(selectProjectsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectProjectsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsSelectProjectsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectProjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SelectProjectsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectProjectsResponse)));
        }

        /// <summary>
        ///  Select projects for review in Explorer UI
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectProjectsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SelectProjectsResponse</returns>
        public async System.Threading.Tasks.Task<SelectProjectsResponse> ProjectProjectsSelectProjectsPOSTAsync (SelectProjectsRequest selectProjectsRequest = default(SelectProjectsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SelectProjectsResponse> localVarResponse = await ProjectProjectsSelectProjectsPOSTWithHttpInfoAsync(selectProjectsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Select projects for review in Explorer UI
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="selectProjectsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SelectProjectsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SelectProjectsResponse>> ProjectProjectsSelectProjectsPOSTWithHttpInfoAsync (SelectProjectsRequest selectProjectsRequest = default(SelectProjectsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/project/projects/select_projects/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (selectProjectsRequest != null && selectProjectsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(selectProjectsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectProjectsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectProjectsSelectProjectsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SelectProjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SelectProjectsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SelectProjectsResponse)));
        }

        /// <summary>
        ///  Task Queue List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;TaskQueue&gt;</returns>
        public List<TaskQueue> ProjectTaskQueuesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<TaskQueue>> localVarResponse = ProjectTaskQueuesGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Task Queue List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskQueue&gt;</returns>
        public ApiResponse<List<TaskQueue>> ProjectTaskQueuesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/project/task-queues/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectTaskQueuesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskQueue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TaskQueue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskQueue>)));
        }

        /// <summary>
        ///  Task Queue List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TaskQueue&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskQueue>> ProjectTaskQueuesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TaskQueue>> localVarResponse = await ProjectTaskQueuesGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Task Queue List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TaskQueue&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaskQueue>>> ProjectTaskQueuesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/project/task-queues/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectTaskQueuesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskQueue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TaskQueue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskQueue>)));
        }

        /// <summary>
        ///  Delete Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <returns></returns>
        public void ProjectTaskQueuesIdDELETE (string id)
        {
             ProjectTaskQueuesIdDELETEWithHttpInfo(id);
        }

        /// <summary>
        ///  Delete Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectTaskQueuesIdDELETEWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectTaskQueuesIdDELETE");

            var localVarPath = "/api/v1/project/task-queues/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectTaskQueuesIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectTaskQueuesIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ProjectTaskQueuesIdDELETEWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        ///  Delete Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectTaskQueuesIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectTaskQueuesIdDELETE");

            var localVarPath = "/api/v1/project/task-queues/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectTaskQueuesIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Retrieve Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>TaskQueue</returns>
        public TaskQueue ProjectTaskQueuesIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<TaskQueue> localVarResponse = ProjectTaskQueuesIdGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of TaskQueue</returns>
        public ApiResponse<TaskQueue> ProjectTaskQueuesIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectTaskQueuesIdGET");

            var localVarPath = "/api/v1/project/task-queues/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectTaskQueuesIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskQueue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskQueue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskQueue)));
        }

        /// <summary>
        ///  Retrieve Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskQueue</returns>
        public async System.Threading.Tasks.Task<TaskQueue> ProjectTaskQueuesIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaskQueue> localVarResponse = await ProjectTaskQueuesIdGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskQueue)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskQueue>> ProjectTaskQueuesIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectTaskQueuesIdGET");

            var localVarPath = "/api/v1/project/task-queues/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectTaskQueuesIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskQueue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskQueue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskQueue)));
        }

        /// <summary>
        ///  Partial Update Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <returns>TaskQueue</returns>
        public TaskQueue ProjectTaskQueuesIdPATCH (string id, TaskQueue taskQueue = default(TaskQueue))
        {
             ApiResponse<TaskQueue> localVarResponse = ProjectTaskQueuesIdPATCHWithHttpInfo(id, taskQueue);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Partial Update Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <returns>ApiResponse of TaskQueue</returns>
        public ApiResponse<TaskQueue> ProjectTaskQueuesIdPATCHWithHttpInfo (string id, TaskQueue taskQueue = default(TaskQueue))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectTaskQueuesIdPATCH");

            var localVarPath = "/api/v1/project/task-queues/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (taskQueue != null && taskQueue.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskQueue); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskQueue; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectTaskQueuesIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskQueue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskQueue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskQueue)));
        }

        /// <summary>
        ///  Partial Update Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskQueue</returns>
        public async System.Threading.Tasks.Task<TaskQueue> ProjectTaskQueuesIdPATCHAsync (string id, TaskQueue taskQueue = default(TaskQueue), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaskQueue> localVarResponse = await ProjectTaskQueuesIdPATCHWithHttpInfoAsync(id, taskQueue, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Partial Update Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskQueue)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskQueue>> ProjectTaskQueuesIdPATCHWithHttpInfoAsync (string id, TaskQueue taskQueue = default(TaskQueue), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectTaskQueuesIdPATCH");

            var localVarPath = "/api/v1/project/task-queues/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (taskQueue != null && taskQueue.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskQueue); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskQueue; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectTaskQueuesIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskQueue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskQueue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskQueue)));
        }

        /// <summary>
        ///  Update Task Queue      PUT params:         - pk: int         - description: str         - documents: list[int]         - completed_documents: list[int]         - reviewers: list[int]     Optional params for add/remove document from/to a TaskQueue:         - add_document: int         - remove_document: int     Optional params for complete/reopen document in a TaskQueue:         - complete_document: int         - open_document: int     Optional param to add documents from DocumentCluster:         - add_documents_from_cluster: int (cluster id)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <returns>TaskQueue</returns>
        public TaskQueue ProjectTaskQueuesIdPUT (string id, TaskQueue taskQueue = default(TaskQueue))
        {
             ApiResponse<TaskQueue> localVarResponse = ProjectTaskQueuesIdPUTWithHttpInfo(id, taskQueue);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Task Queue      PUT params:         - pk: int         - description: str         - documents: list[int]         - completed_documents: list[int]         - reviewers: list[int]     Optional params for add/remove document from/to a TaskQueue:         - add_document: int         - remove_document: int     Optional params for complete/reopen document in a TaskQueue:         - complete_document: int         - open_document: int     Optional param to add documents from DocumentCluster:         - add_documents_from_cluster: int (cluster id)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <returns>ApiResponse of TaskQueue</returns>
        public ApiResponse<TaskQueue> ProjectTaskQueuesIdPUTWithHttpInfo (string id, TaskQueue taskQueue = default(TaskQueue))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectTaskQueuesIdPUT");

            var localVarPath = "/api/v1/project/task-queues/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (taskQueue != null && taskQueue.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskQueue); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskQueue; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectTaskQueuesIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskQueue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskQueue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskQueue)));
        }

        /// <summary>
        ///  Update Task Queue      PUT params:         - pk: int         - description: str         - documents: list[int]         - completed_documents: list[int]         - reviewers: list[int]     Optional params for add/remove document from/to a TaskQueue:         - add_document: int         - remove_document: int     Optional params for complete/reopen document in a TaskQueue:         - complete_document: int         - open_document: int     Optional param to add documents from DocumentCluster:         - add_documents_from_cluster: int (cluster id)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskQueue</returns>
        public async System.Threading.Tasks.Task<TaskQueue> ProjectTaskQueuesIdPUTAsync (string id, TaskQueue taskQueue = default(TaskQueue), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaskQueue> localVarResponse = await ProjectTaskQueuesIdPUTWithHttpInfoAsync(id, taskQueue, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update Task Queue      PUT params:         - pk: int         - description: str         - documents: list[int]         - completed_documents: list[int]         - reviewers: list[int]     Optional params for add/remove document from/to a TaskQueue:         - add_document: int         - remove_document: int     Optional params for complete/reopen document in a TaskQueue:         - complete_document: int         - open_document: int     Optional param to add documents from DocumentCluster:         - add_documents_from_cluster: int (cluster id)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this task queue.</param>
        /// <param name="taskQueue"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskQueue)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskQueue>> ProjectTaskQueuesIdPUTWithHttpInfoAsync (string id, TaskQueue taskQueue = default(TaskQueue), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->ProjectTaskQueuesIdPUT");

            var localVarPath = "/api/v1/project/task-queues/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (taskQueue != null && taskQueue.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskQueue); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskQueue; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectTaskQueuesIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskQueue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskQueue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskQueue)));
        }

        /// <summary>
        ///  Create Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueue"> (optional)</param>
        /// <returns>TaskQueue</returns>
        public TaskQueue ProjectTaskQueuesPOST (TaskQueue taskQueue = default(TaskQueue))
        {
             ApiResponse<TaskQueue> localVarResponse = ProjectTaskQueuesPOSTWithHttpInfo(taskQueue);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueue"> (optional)</param>
        /// <returns>ApiResponse of TaskQueue</returns>
        public ApiResponse<TaskQueue> ProjectTaskQueuesPOSTWithHttpInfo (TaskQueue taskQueue = default(TaskQueue))
        {

            var localVarPath = "/api/v1/project/task-queues/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskQueue != null && taskQueue.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskQueue); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskQueue; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectTaskQueuesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskQueue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskQueue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskQueue)));
        }

        /// <summary>
        ///  Create Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueue"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TaskQueue</returns>
        public async System.Threading.Tasks.Task<TaskQueue> ProjectTaskQueuesPOSTAsync (TaskQueue taskQueue = default(TaskQueue), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TaskQueue> localVarResponse = await ProjectTaskQueuesPOSTWithHttpInfoAsync(taskQueue, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create Task Queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskQueue"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TaskQueue)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskQueue>> ProjectTaskQueuesPOSTWithHttpInfoAsync (TaskQueue taskQueue = default(TaskQueue), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/project/task-queues/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskQueue != null && taskQueue.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskQueue); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskQueue; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectTaskQueuesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskQueue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TaskQueue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskQueue)));
        }

        /// <summary>
        ///  Session Upload List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;UploadSessionDetail&gt;</returns>
        public List<UploadSessionDetail> ProjectUploadSessionGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<UploadSessionDetail>> localVarResponse = ProjectUploadSessionGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Session Upload List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;UploadSessionDetail&gt;</returns>
        public ApiResponse<List<UploadSessionDetail>> ProjectUploadSessionGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/project/upload-session/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UploadSessionDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UploadSessionDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UploadSessionDetail>)));
        }

        /// <summary>
        ///  Session Upload List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;UploadSessionDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<UploadSessionDetail>> ProjectUploadSessionGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UploadSessionDetail>> localVarResponse = await ProjectUploadSessionGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Session Upload List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UploadSessionDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UploadSessionDetail>>> ProjectUploadSessionGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/project/upload-session/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UploadSessionDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UploadSessionDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UploadSessionDetail>)));
        }

        /// <summary>
        ///  Create Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionCreate"> (optional)</param>
        /// <returns>UploadSessionCreate</returns>
        public UploadSessionCreate ProjectUploadSessionPOST (UploadSessionCreate uploadSessionCreate = default(UploadSessionCreate))
        {
             ApiResponse<UploadSessionCreate> localVarResponse = ProjectUploadSessionPOSTWithHttpInfo(uploadSessionCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionCreate"> (optional)</param>
        /// <returns>ApiResponse of UploadSessionCreate</returns>
        public ApiResponse<UploadSessionCreate> ProjectUploadSessionPOSTWithHttpInfo (UploadSessionCreate uploadSessionCreate = default(UploadSessionCreate))
        {

            var localVarPath = "/api/v1/project/upload-session/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadSessionCreate != null && uploadSessionCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadSessionCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadSessionCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSessionCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadSessionCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSessionCreate)));
        }

        /// <summary>
        ///  Create Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UploadSessionCreate</returns>
        public async System.Threading.Tasks.Task<UploadSessionCreate> ProjectUploadSessionPOSTAsync (UploadSessionCreate uploadSessionCreate = default(UploadSessionCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UploadSessionCreate> localVarResponse = await ProjectUploadSessionPOSTWithHttpInfoAsync(uploadSessionCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadSessionCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UploadSessionCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadSessionCreate>> ProjectUploadSessionPOSTWithHttpInfoAsync (UploadSessionCreate uploadSessionCreate = default(UploadSessionCreate), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/project/upload-session/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadSessionCreate != null && uploadSessionCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadSessionCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadSessionCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSessionCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadSessionCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSessionCreate)));
        }

        /// <summary>
        ///  Get status of Upload Sessions     Params:         - project_id: int
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project id (optional)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> ProjectUploadSessionStatusGET (string projectId = default(string))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = ProjectUploadSessionStatusGETWithHttpInfo(projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get status of Upload Sessions     Params:         - project_id: int
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project id (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> ProjectUploadSessionStatusGETWithHttpInfo (string projectId = default(string))
        {

            var localVarPath = "/api/v1/project/upload-session/status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_id", projectId)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionStatusGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Get status of Upload Sessions     Params:         - project_id: int
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> ProjectUploadSessionStatusGETAsync (string projectId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await ProjectUploadSessionStatusGETWithHttpInfoAsync(projectId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get status of Upload Sessions     Params:         - project_id: int
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> ProjectUploadSessionStatusGETWithHttpInfoAsync (string projectId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/project/upload-session/status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_id", projectId)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionStatusGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Upload batch of files      Params:         - folder (source_path): str - absolute path to a directory containing files         - force: bool (optional) - whether rewrite existing file and Document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDetail"> (optional)</param>
        /// <returns>UploadSessionDetail</returns>
        public UploadSessionDetail ProjectUploadSessionUidBatchUploadPOST (string uid, UploadSessionDetail uploadSessionDetail = default(UploadSessionDetail))
        {
             ApiResponse<UploadSessionDetail> localVarResponse = ProjectUploadSessionUidBatchUploadPOSTWithHttpInfo(uid, uploadSessionDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload batch of files      Params:         - folder (source_path): str - absolute path to a directory containing files         - force: bool (optional) - whether rewrite existing file and Document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDetail"> (optional)</param>
        /// <returns>ApiResponse of UploadSessionDetail</returns>
        public ApiResponse<UploadSessionDetail> ProjectUploadSessionUidBatchUploadPOSTWithHttpInfo (string uid, UploadSessionDetail uploadSessionDetail = default(UploadSessionDetail))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidBatchUploadPOST");

            var localVarPath = "/api/v1/project/upload-session/{uid}/_batch_upload/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (uploadSessionDetail != null && uploadSessionDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadSessionDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadSessionDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidBatchUploadPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSessionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadSessionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSessionDetail)));
        }

        /// <summary>
        ///  Upload batch of files      Params:         - folder (source_path): str - absolute path to a directory containing files         - force: bool (optional) - whether rewrite existing file and Document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UploadSessionDetail</returns>
        public async System.Threading.Tasks.Task<UploadSessionDetail> ProjectUploadSessionUidBatchUploadPOSTAsync (string uid, UploadSessionDetail uploadSessionDetail = default(UploadSessionDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UploadSessionDetail> localVarResponse = await ProjectUploadSessionUidBatchUploadPOSTWithHttpInfoAsync(uid, uploadSessionDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Upload batch of files      Params:         - folder (source_path): str - absolute path to a directory containing files         - force: bool (optional) - whether rewrite existing file and Document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UploadSessionDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadSessionDetail>> ProjectUploadSessionUidBatchUploadPOSTWithHttpInfoAsync (string uid, UploadSessionDetail uploadSessionDetail = default(UploadSessionDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidBatchUploadPOST");

            var localVarPath = "/api/v1/project/upload-session/{uid}/_batch_upload/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (uploadSessionDetail != null && uploadSessionDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadSessionDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadSessionDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidBatchUploadPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSessionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadSessionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSessionDetail)));
        }

        /// <summary>
        ///  Upload files from given sub-folder in media/data/documents folder      Params:         - source_path: relative path to a folder with documents
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionBatchUploadRequest"> (optional)</param>
        /// <returns>UploadSessionDetail</returns>
        public UploadSessionDetail ProjectUploadSessionUidBatchUploadPOST_0 (string uid, UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest = default(UploadSessionBatchUploadRequest))
        {
             ApiResponse<UploadSessionDetail> localVarResponse = ProjectUploadSessionUidBatchUploadPOST_0WithHttpInfo(uid, uploadSessionBatchUploadRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload files from given sub-folder in media/data/documents folder      Params:         - source_path: relative path to a folder with documents
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionBatchUploadRequest"> (optional)</param>
        /// <returns>ApiResponse of UploadSessionDetail</returns>
        public ApiResponse<UploadSessionDetail> ProjectUploadSessionUidBatchUploadPOST_0WithHttpInfo (string uid, UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest = default(UploadSessionBatchUploadRequest))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidBatchUploadPOST_0");

            var localVarPath = "/api/v1/project/upload-session/{uid}/batch_upload/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (uploadSessionBatchUploadRequest != null && uploadSessionBatchUploadRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadSessionBatchUploadRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadSessionBatchUploadRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidBatchUploadPOST_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSessionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadSessionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSessionDetail)));
        }

        /// <summary>
        ///  Upload files from given sub-folder in media/data/documents folder      Params:         - source_path: relative path to a folder with documents
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionBatchUploadRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UploadSessionDetail</returns>
        public async System.Threading.Tasks.Task<UploadSessionDetail> ProjectUploadSessionUidBatchUploadPOST_0Async (string uid, UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest = default(UploadSessionBatchUploadRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UploadSessionDetail> localVarResponse = await ProjectUploadSessionUidBatchUploadPOST_0WithHttpInfoAsync(uid, uploadSessionBatchUploadRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Upload files from given sub-folder in media/data/documents folder      Params:         - source_path: relative path to a folder with documents
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionBatchUploadRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UploadSessionDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadSessionDetail>> ProjectUploadSessionUidBatchUploadPOST_0WithHttpInfoAsync (string uid, UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest = default(UploadSessionBatchUploadRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidBatchUploadPOST_0");

            var localVarPath = "/api/v1/project/upload-session/{uid}/batch_upload/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (uploadSessionBatchUploadRequest != null && uploadSessionBatchUploadRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadSessionBatchUploadRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadSessionBatchUploadRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidBatchUploadPOST_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSessionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadSessionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSessionDetail)));
        }

        /// <summary>
        ///  Delete a file from session      Params:         - filename: str
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <returns></returns>
        public void ProjectUploadSessionUidCancelDELETE (string uid)
        {
             ProjectUploadSessionUidCancelDELETEWithHttpInfo(uid);
        }

        /// <summary>
        ///  Delete a file from session      Params:         - filename: str
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectUploadSessionUidCancelDELETEWithHttpInfo (string uid)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidCancelDELETE");

            var localVarPath = "/api/v1/project/upload-session/{uid}/cancel/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidCancelDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete a file from session      Params:         - filename: str
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectUploadSessionUidCancelDELETEAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ProjectUploadSessionUidCancelDELETEWithHttpInfoAsync(uid, cancellationToken);

        }

        /// <summary>
        ///  Delete a file from session      Params:         - filename: str
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectUploadSessionUidCancelDELETEWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidCancelDELETE");

            var localVarPath = "/api/v1/project/upload-session/{uid}/cancel/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidCancelDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <returns></returns>
        public void ProjectUploadSessionUidDELETE (string uid)
        {
             ProjectUploadSessionUidDELETEWithHttpInfo(uid);
        }

        /// <summary>
        ///  Delete Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectUploadSessionUidDELETEWithHttpInfo (string uid)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidDELETE");

            var localVarPath = "/api/v1/project/upload-session/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectUploadSessionUidDELETEAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ProjectUploadSessionUidDELETEWithHttpInfoAsync(uid, cancellationToken);

        }

        /// <summary>
        ///  Delete Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectUploadSessionUidDELETEWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidDELETE");

            var localVarPath = "/api/v1/project/upload-session/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete a file from session      Params:         - filename: str
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDeleteFileRequest"> (optional)</param>
        /// <returns>string</returns>
        public string ProjectUploadSessionUidDeleteFileDELETE (string uid, UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest = default(UploadSessionDeleteFileRequest))
        {
             ApiResponse<string> localVarResponse = ProjectUploadSessionUidDeleteFileDELETEWithHttpInfo(uid, uploadSessionDeleteFileRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete a file from session      Params:         - filename: str
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDeleteFileRequest"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ProjectUploadSessionUidDeleteFileDELETEWithHttpInfo (string uid, UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest = default(UploadSessionDeleteFileRequest))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidDeleteFileDELETE");

            var localVarPath = "/api/v1/project/upload-session/{uid}/delete-file/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (uploadSessionDeleteFileRequest != null && uploadSessionDeleteFileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadSessionDeleteFileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadSessionDeleteFileRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidDeleteFileDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Delete a file from session      Params:         - filename: str
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDeleteFileRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ProjectUploadSessionUidDeleteFileDELETEAsync (string uid, UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest = default(UploadSessionDeleteFileRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await ProjectUploadSessionUidDeleteFileDELETEWithHttpInfoAsync(uid, uploadSessionDeleteFileRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Delete a file from session      Params:         - filename: str
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionDeleteFileRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ProjectUploadSessionUidDeleteFileDELETEWithHttpInfoAsync (string uid, UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest = default(UploadSessionDeleteFileRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidDeleteFileDELETE");

            var localVarPath = "/api/v1/project/upload-session/{uid}/delete-file/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (uploadSessionDeleteFileRequest != null && uploadSessionDeleteFileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadSessionDeleteFileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadSessionDeleteFileRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidDeleteFileDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="contentLength">Content Length</param>
        /// <param name="fileName">Content Length</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="force2">Force upload (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProjectUploadSessionFilesResponse</returns>
        public ProjectUploadSessionFilesResponse ProjectUploadSessionUidFilesPOST (string uid, int contentLength, string fileName, bool? force = default(bool?), bool? directoryPath = default(bool?), bool? force2 = default(bool?), System.IO.Stream body = default(System.IO.Stream))
        {
             ApiResponse<ProjectUploadSessionFilesResponse> localVarResponse = ProjectUploadSessionUidFilesPOSTWithHttpInfo(uid, contentLength, fileName, force, directoryPath, force2, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="contentLength">Content Length</param>
        /// <param name="fileName">Content Length</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="force2">Force upload (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProjectUploadSessionFilesResponse</returns>
        public ApiResponse<ProjectUploadSessionFilesResponse> ProjectUploadSessionUidFilesPOSTWithHttpInfo (string uid, int contentLength, string fileName, bool? force = default(bool?), bool? directoryPath = default(bool?), bool? force2 = default(bool?), System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidFilesPOST");
            // verify the required parameter 'contentLength' is set
            if (contentLength == null)
                throw new ApiException(400, "Missing required parameter 'contentLength' when calling ProjectApi->ProjectUploadSessionUidFilesPOST");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ProjectApi->ProjectUploadSessionUidFilesPOST");

            var localVarPath = "/api/v1/project/upload-session/{uid}/files/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/offset+octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (force2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force2)); // query parameter
            if (contentLength != null) localVarHeaderParams.Add("Content-Length", this.Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            if (fileName != null) localVarHeaderParams.Add("File-Name", this.Configuration.ApiClient.ParameterToString(fileName)); // header parameter
            if (force != null) localVarHeaderParams.Add("Force", this.Configuration.ApiClient.ParameterToString(force)); // header parameter
            if (directoryPath != null) localVarHeaderParams.Add("Directory-Path", this.Configuration.ApiClient.ParameterToString(directoryPath)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidFilesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectUploadSessionFilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectUploadSessionFilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectUploadSessionFilesResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="contentLength">Content Length</param>
        /// <param name="fileName">Content Length</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="force2">Force upload (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectUploadSessionFilesResponse</returns>
        public async System.Threading.Tasks.Task<ProjectUploadSessionFilesResponse> ProjectUploadSessionUidFilesPOSTAsync (string uid, int contentLength, string fileName, bool? force = default(bool?), bool? directoryPath = default(bool?), bool? force2 = default(bool?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectUploadSessionFilesResponse> localVarResponse = await ProjectUploadSessionUidFilesPOSTWithHttpInfoAsync(uid, contentLength, fileName, force, directoryPath, force2, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="contentLength">Content Length</param>
        /// <param name="fileName">Content Length</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="force2">Force upload (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectUploadSessionFilesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectUploadSessionFilesResponse>> ProjectUploadSessionUidFilesPOSTWithHttpInfoAsync (string uid, int contentLength, string fileName, bool? force = default(bool?), bool? directoryPath = default(bool?), bool? force2 = default(bool?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidFilesPOST");
            // verify the required parameter 'contentLength' is set
            if (contentLength == null)
                throw new ApiException(400, "Missing required parameter 'contentLength' when calling ProjectApi->ProjectUploadSessionUidFilesPOST");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ProjectApi->ProjectUploadSessionUidFilesPOST");

            var localVarPath = "/api/v1/project/upload-session/{uid}/files/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/offset+octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (force2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force2)); // query parameter
            if (contentLength != null) localVarHeaderParams.Add("Content-Length", this.Configuration.ApiClient.ParameterToString(contentLength)); // header parameter
            if (fileName != null) localVarHeaderParams.Add("File-Name", this.Configuration.ApiClient.ParameterToString(fileName)); // header parameter
            if (force != null) localVarHeaderParams.Add("Force", this.Configuration.ApiClient.ParameterToString(force)); // header parameter
            if (directoryPath != null) localVarHeaderParams.Add("Directory-Path", this.Configuration.ApiClient.ParameterToString(directoryPath)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidFilesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectUploadSessionFilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectUploadSessionFilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectUploadSessionFilesResponse)));
        }

        /// <summary>
        ///  Retrieve Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>UploadSessionDetail</returns>
        public UploadSessionDetail ProjectUploadSessionUidGET (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<UploadSessionDetail> localVarResponse = ProjectUploadSessionUidGETWithHttpInfo(uid, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of UploadSessionDetail</returns>
        public ApiResponse<UploadSessionDetail> ProjectUploadSessionUidGETWithHttpInfo (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidGET");

            var localVarPath = "/api/v1/project/upload-session/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSessionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadSessionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSessionDetail)));
        }

        /// <summary>
        ///  Retrieve Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UploadSessionDetail</returns>
        public async System.Threading.Tasks.Task<UploadSessionDetail> ProjectUploadSessionUidGETAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UploadSessionDetail> localVarResponse = await ProjectUploadSessionUidGETWithHttpInfoAsync(uid, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UploadSessionDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadSessionDetail>> ProjectUploadSessionUidGETWithHttpInfoAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidGET");

            var localVarPath = "/api/v1/project/upload-session/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSessionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadSessionDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSessionDetail)));
        }

        /// <summary>
        ///  Partial Update Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionUpdate"> (optional)</param>
        /// <returns>UploadSessionUpdate</returns>
        public UploadSessionUpdate ProjectUploadSessionUidPATCH (string uid, UploadSessionUpdate uploadSessionUpdate = default(UploadSessionUpdate))
        {
             ApiResponse<UploadSessionUpdate> localVarResponse = ProjectUploadSessionUidPATCHWithHttpInfo(uid, uploadSessionUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Partial Update Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionUpdate"> (optional)</param>
        /// <returns>ApiResponse of UploadSessionUpdate</returns>
        public ApiResponse<UploadSessionUpdate> ProjectUploadSessionUidPATCHWithHttpInfo (string uid, UploadSessionUpdate uploadSessionUpdate = default(UploadSessionUpdate))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidPATCH");

            var localVarPath = "/api/v1/project/upload-session/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (uploadSessionUpdate != null && uploadSessionUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadSessionUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadSessionUpdate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSessionUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadSessionUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSessionUpdate)));
        }

        /// <summary>
        ///  Partial Update Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UploadSessionUpdate</returns>
        public async System.Threading.Tasks.Task<UploadSessionUpdate> ProjectUploadSessionUidPATCHAsync (string uid, UploadSessionUpdate uploadSessionUpdate = default(UploadSessionUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UploadSessionUpdate> localVarResponse = await ProjectUploadSessionUidPATCHWithHttpInfoAsync(uid, uploadSessionUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Partial Update Session Upload
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="uploadSessionUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UploadSessionUpdate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadSessionUpdate>> ProjectUploadSessionUidPATCHWithHttpInfoAsync (string uid, UploadSessionUpdate uploadSessionUpdate = default(UploadSessionUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidPATCH");

            var localVarPath = "/api/v1/project/upload-session/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (uploadSessionUpdate != null && uploadSessionUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(uploadSessionUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadSessionUpdate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadSessionUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UploadSessionUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadSessionUpdate)));
        }

        /// <summary>
        ///  Get Progress for a session per files (short form)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <returns>ProjectUploadSessionProgressResponse</returns>
        public ProjectUploadSessionProgressResponse ProjectUploadSessionUidProgressGET (string uid)
        {
             ApiResponse<ProjectUploadSessionProgressResponse> localVarResponse = ProjectUploadSessionUidProgressGETWithHttpInfo(uid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get Progress for a session per files (short form)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <returns>ApiResponse of ProjectUploadSessionProgressResponse</returns>
        public ApiResponse<ProjectUploadSessionProgressResponse> ProjectUploadSessionUidProgressGETWithHttpInfo (string uid)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidProgressGET");

            var localVarPath = "/api/v1/project/upload-session/{uid}/progress/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidProgressGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectUploadSessionProgressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectUploadSessionProgressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectUploadSessionProgressResponse)));
        }

        /// <summary>
        ///  Get Progress for a session per files (short form)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectUploadSessionProgressResponse</returns>
        public async System.Threading.Tasks.Task<ProjectUploadSessionProgressResponse> ProjectUploadSessionUidProgressGETAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectUploadSessionProgressResponse> localVarResponse = await ProjectUploadSessionUidProgressGETWithHttpInfoAsync(uid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get Progress for a session per files (short form)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectUploadSessionProgressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectUploadSessionProgressResponse>> ProjectUploadSessionUidProgressGETWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidProgressGET");

            var localVarPath = "/api/v1/project/upload-session/{uid}/progress/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidProgressGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectUploadSessionProgressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectUploadSessionProgressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectUploadSessionProgressResponse)));
        }

        /// <summary>
        ///  Upload a File      Params:         - file: file object         - force: bool (optional) - whether rewrite existing file and Document         - review_file: bool - whether skip file check (exists or not)         - directory_path: str - may be passed from TUS plugin
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="fileName">File Name</param>
        /// <param name="fileEncoding">File Encoding</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="reviewFile">Review File (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProjectUploadSessionPOSTResponse</returns>
        public ProjectUploadSessionPOSTResponse ProjectUploadSessionUidUploadPOST (string uid, bool fileName, string fileEncoding, bool? force = default(bool?), bool? reviewFile = default(bool?), bool? directoryPath = default(bool?), System.IO.Stream body = default(System.IO.Stream))
        {
             ApiResponse<ProjectUploadSessionPOSTResponse> localVarResponse = ProjectUploadSessionUidUploadPOSTWithHttpInfo(uid, fileName, fileEncoding, force, reviewFile, directoryPath, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload a File      Params:         - file: file object         - force: bool (optional) - whether rewrite existing file and Document         - review_file: bool - whether skip file check (exists or not)         - directory_path: str - may be passed from TUS plugin
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="fileName">File Name</param>
        /// <param name="fileEncoding">File Encoding</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="reviewFile">Review File (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProjectUploadSessionPOSTResponse</returns>
        public ApiResponse<ProjectUploadSessionPOSTResponse> ProjectUploadSessionUidUploadPOSTWithHttpInfo (string uid, bool fileName, string fileEncoding, bool? force = default(bool?), bool? reviewFile = default(bool?), bool? directoryPath = default(bool?), System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidUploadPOST");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ProjectApi->ProjectUploadSessionUidUploadPOST");
            // verify the required parameter 'fileEncoding' is set
            if (fileEncoding == null)
                throw new ApiException(400, "Missing required parameter 'fileEncoding' when calling ProjectApi->ProjectUploadSessionUidUploadPOST");

            var localVarPath = "/api/v1/project/upload-session/{uid}/upload/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (fileName != null) localVarHeaderParams.Add("File-Name", this.Configuration.ApiClient.ParameterToString(fileName)); // header parameter
            if (fileEncoding != null) localVarHeaderParams.Add("File-Encoding", this.Configuration.ApiClient.ParameterToString(fileEncoding)); // header parameter
            if (force != null) localVarHeaderParams.Add("Force", this.Configuration.ApiClient.ParameterToString(force)); // header parameter
            if (reviewFile != null) localVarHeaderParams.Add("Review-File", this.Configuration.ApiClient.ParameterToString(reviewFile)); // header parameter
            if (directoryPath != null) localVarHeaderParams.Add("Directory-Path", this.Configuration.ApiClient.ParameterToString(directoryPath)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidUploadPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectUploadSessionPOSTResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectUploadSessionPOSTResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectUploadSessionPOSTResponse)));
        }

        /// <summary>
        ///  Upload a File      Params:         - file: file object         - force: bool (optional) - whether rewrite existing file and Document         - review_file: bool - whether skip file check (exists or not)         - directory_path: str - may be passed from TUS plugin
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="fileName">File Name</param>
        /// <param name="fileEncoding">File Encoding</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="reviewFile">Review File (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProjectUploadSessionPOSTResponse</returns>
        public async System.Threading.Tasks.Task<ProjectUploadSessionPOSTResponse> ProjectUploadSessionUidUploadPOSTAsync (string uid, bool fileName, string fileEncoding, bool? force = default(bool?), bool? reviewFile = default(bool?), bool? directoryPath = default(bool?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProjectUploadSessionPOSTResponse> localVarResponse = await ProjectUploadSessionUidUploadPOSTWithHttpInfoAsync(uid, fileName, fileEncoding, force, reviewFile, directoryPath, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Upload a File      Params:         - file: file object         - force: bool (optional) - whether rewrite existing file and Document         - review_file: bool - whether skip file check (exists or not)         - directory_path: str - may be passed from TUS plugin
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this upload session.</param>
        /// <param name="fileName">File Name</param>
        /// <param name="fileEncoding">File Encoding</param>
        /// <param name="force">Force upload (optional)</param>
        /// <param name="reviewFile">Review File (optional)</param>
        /// <param name="directoryPath">Directory Path (optional)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProjectUploadSessionPOSTResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectUploadSessionPOSTResponse>> ProjectUploadSessionUidUploadPOSTWithHttpInfoAsync (string uid, bool fileName, string fileEncoding, bool? force = default(bool?), bool? reviewFile = default(bool?), bool? directoryPath = default(bool?), System.IO.Stream body = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling ProjectApi->ProjectUploadSessionUidUploadPOST");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ProjectApi->ProjectUploadSessionUidUploadPOST");
            // verify the required parameter 'fileEncoding' is set
            if (fileEncoding == null)
                throw new ApiException(400, "Missing required parameter 'fileEncoding' when calling ProjectApi->ProjectUploadSessionUidUploadPOST");

            var localVarPath = "/api/v1/project/upload-session/{uid}/upload/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (fileName != null) localVarHeaderParams.Add("File-Name", this.Configuration.ApiClient.ParameterToString(fileName)); // header parameter
            if (fileEncoding != null) localVarHeaderParams.Add("File-Encoding", this.Configuration.ApiClient.ParameterToString(fileEncoding)); // header parameter
            if (force != null) localVarHeaderParams.Add("Force", this.Configuration.ApiClient.ParameterToString(force)); // header parameter
            if (reviewFile != null) localVarHeaderParams.Add("Review-File", this.Configuration.ApiClient.ParameterToString(reviewFile)); // header parameter
            if (directoryPath != null) localVarHeaderParams.Add("Directory-Path", this.Configuration.ApiClient.ParameterToString(directoryPath)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectUploadSessionUidUploadPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectUploadSessionPOSTResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectUploadSessionPOSTResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectUploadSessionPOSTResponse)));
        }

    }
}
