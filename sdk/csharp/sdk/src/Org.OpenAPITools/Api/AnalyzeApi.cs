/* 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyzeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Cluster List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentCluster&gt;</returns>
        List<DocumentCluster> AnalyzeDocumentClusterGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Cluster List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentCluster&gt;</returns>
        ApiResponse<List<DocumentCluster>> AnalyzeDocumentClusterGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Cluster
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentCluster</returns>
        DocumentCluster AnalyzeDocumentClusterIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Cluster
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentCluster</returns>
        ApiResponse<DocumentCluster> AnalyzeDocumentClusterIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Cluster (name)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <returns>DocumentClusterUpdate</returns>
        DocumentClusterUpdate AnalyzeDocumentClusterIdPATCH (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Cluster (name)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <returns>ApiResponse of DocumentClusterUpdate</returns>
        ApiResponse<DocumentClusterUpdate> AnalyzeDocumentClusterIdPATCHWithHttpInfo (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Cluster (name)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <returns>DocumentClusterUpdate</returns>
        DocumentClusterUpdate AnalyzeDocumentClusterIdPUT (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Cluster (name)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <returns>ApiResponse of DocumentClusterUpdate</returns>
        ApiResponse<DocumentClusterUpdate> AnalyzeDocumentClusterIdPUTWithHttpInfo (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Similarity List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentSimilarity&gt;</returns>
        List<DocumentSimilarity> AnalyzeDocumentSimilarityListGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Similarity List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentSimilarity&gt;</returns>
        ApiResponse<List<DocumentSimilarity>> AnalyzeDocumentSimilarityListGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Party Similarity List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;PartySimilarity&gt;</returns>
        List<PartySimilarity> AnalyzePartySimilarityListGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Party Similarity List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;PartySimilarity&gt;</returns>
        ApiResponse<List<PartySimilarity>> AnalyzePartySimilarityListGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Classification List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;TextUnitClassification&gt;</returns>
        List<TextUnitClassification> AnalyzeTextUnitClassificationsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Classification List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;TextUnitClassification&gt;</returns>
        ApiResponse<List<TextUnitClassification>> AnalyzeTextUnitClassificationsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Text Unit Classification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <returns></returns>
        void AnalyzeTextUnitClassificationsIdDELETE (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Text Unit Classification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AnalyzeTextUnitClassificationsIdDELETEWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Text Unit Classification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>TextUnitClassification</returns>
        TextUnitClassification AnalyzeTextUnitClassificationsIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Text Unit Classification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of TextUnitClassification</returns>
        ApiResponse<TextUnitClassification> AnalyzeTextUnitClassificationsIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Text Unit Classification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textUnitClassificationCreate"> (optional)</param>
        /// <returns>TextUnitClassificationCreate</returns>
        TextUnitClassificationCreate AnalyzeTextUnitClassificationsPOST (TextUnitClassificationCreate textUnitClassificationCreate = default(TextUnitClassificationCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Text Unit Classification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textUnitClassificationCreate"> (optional)</param>
        /// <returns>ApiResponse of TextUnitClassificationCreate</returns>
        ApiResponse<TextUnitClassificationCreate> AnalyzeTextUnitClassificationsPOSTWithHttpInfo (TextUnitClassificationCreate textUnitClassificationCreate = default(TextUnitClassificationCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Classifier Suggestion List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;TextUnitClassifierSuggestion&gt;</returns>
        List<TextUnitClassifierSuggestion> AnalyzeTextUnitClassifierSuggestionsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Classifier Suggestion List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;TextUnitClassifierSuggestion&gt;</returns>
        ApiResponse<List<TextUnitClassifierSuggestion>> AnalyzeTextUnitClassifierSuggestionsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Text Unit Classifier Suggestion
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <returns></returns>
        void AnalyzeTextUnitClassifierSuggestionsIdDELETE (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Text Unit Classifier Suggestion
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AnalyzeTextUnitClassifierSuggestionsIdDELETEWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>TextUnitClassifierSuggestion</returns>
        TextUnitClassifierSuggestion AnalyzeTextUnitClassifierSuggestionsIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of TextUnitClassifierSuggestion</returns>
        ApiResponse<TextUnitClassifierSuggestion> AnalyzeTextUnitClassifierSuggestionsIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Classifier List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;TextUnitClassifier&gt;</returns>
        List<TextUnitClassifier> AnalyzeTextUnitClassifiersGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Classifier List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;TextUnitClassifier&gt;</returns>
        ApiResponse<List<TextUnitClassifier>> AnalyzeTextUnitClassifiersGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Text Unit Classifier
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <returns></returns>
        void AnalyzeTextUnitClassifiersIdDELETE (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Text Unit Classifier
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AnalyzeTextUnitClassifiersIdDELETEWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>TextUnitClassifier</returns>
        TextUnitClassifier AnalyzeTextUnitClassifiersIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of TextUnitClassifier</returns>
        ApiResponse<TextUnitClassifier> AnalyzeTextUnitClassifiersIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Cluster List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;TextUnitCluster&gt;</returns>
        List<TextUnitCluster> AnalyzeTextUnitClusterListGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Cluster List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;TextUnitCluster&gt;</returns>
        ApiResponse<List<TextUnitCluster>> AnalyzeTextUnitClusterListGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Similarity List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;TextUnitSimilarity&gt;</returns>
        List<TextUnitSimilarity> AnalyzeTextUnitSimilarityListGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Similarity List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;TextUnitSimilarity&gt;</returns>
        ApiResponse<List<TextUnitSimilarity>> AnalyzeTextUnitSimilarityListGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Typeahead TextUnitClassification      Kwargs: field_name: [class_name, class_value]     GET params:       - q: str
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="q">Typeahead string</param>
        /// <returns>Typeahead</returns>
        Typeahead AnalyzeTypeaheadTextUnitClassificationFieldNameGET (string fieldName, string q);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Typeahead TextUnitClassification      Kwargs: field_name: [class_name, class_value]     GET params:       - q: str
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="q">Typeahead string</param>
        /// <returns>ApiResponse of Typeahead</returns>
        ApiResponse<Typeahead> AnalyzeTypeaheadTextUnitClassificationFieldNameGETWithHttpInfo (string fieldName, string q);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Cluster List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentCluster&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentCluster>> AnalyzeDocumentClusterGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Cluster List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentCluster&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentCluster>>> AnalyzeDocumentClusterGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Cluster
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentCluster</returns>
        System.Threading.Tasks.Task<DocumentCluster> AnalyzeDocumentClusterIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Cluster
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentCluster)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentCluster>> AnalyzeDocumentClusterIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Cluster (name)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentClusterUpdate</returns>
        System.Threading.Tasks.Task<DocumentClusterUpdate> AnalyzeDocumentClusterIdPATCHAsync (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Cluster (name)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentClusterUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentClusterUpdate>> AnalyzeDocumentClusterIdPATCHWithHttpInfoAsync (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Cluster (name)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentClusterUpdate</returns>
        System.Threading.Tasks.Task<DocumentClusterUpdate> AnalyzeDocumentClusterIdPUTAsync (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Cluster (name)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentClusterUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentClusterUpdate>> AnalyzeDocumentClusterIdPUTWithHttpInfoAsync (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Similarity List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentSimilarity&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentSimilarity>> AnalyzeDocumentSimilarityListGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Similarity List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentSimilarity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentSimilarity>>> AnalyzeDocumentSimilarityListGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Party Similarity List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;PartySimilarity&gt;</returns>
        System.Threading.Tasks.Task<List<PartySimilarity>> AnalyzePartySimilarityListGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Party Similarity List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;PartySimilarity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PartySimilarity>>> AnalyzePartySimilarityListGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Classification List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TextUnitClassification&gt;</returns>
        System.Threading.Tasks.Task<List<TextUnitClassification>> AnalyzeTextUnitClassificationsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Classification List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TextUnitClassification&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TextUnitClassification>>> AnalyzeTextUnitClassificationsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Text Unit Classification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AnalyzeTextUnitClassificationsIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Text Unit Classification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyzeTextUnitClassificationsIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Text Unit Classification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TextUnitClassification</returns>
        System.Threading.Tasks.Task<TextUnitClassification> AnalyzeTextUnitClassificationsIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Text Unit Classification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TextUnitClassification)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextUnitClassification>> AnalyzeTextUnitClassificationsIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Text Unit Classification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textUnitClassificationCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TextUnitClassificationCreate</returns>
        System.Threading.Tasks.Task<TextUnitClassificationCreate> AnalyzeTextUnitClassificationsPOSTAsync (TextUnitClassificationCreate textUnitClassificationCreate = default(TextUnitClassificationCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Text Unit Classification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textUnitClassificationCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TextUnitClassificationCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextUnitClassificationCreate>> AnalyzeTextUnitClassificationsPOSTWithHttpInfoAsync (TextUnitClassificationCreate textUnitClassificationCreate = default(TextUnitClassificationCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Classifier Suggestion List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TextUnitClassifierSuggestion&gt;</returns>
        System.Threading.Tasks.Task<List<TextUnitClassifierSuggestion>> AnalyzeTextUnitClassifierSuggestionsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Classifier Suggestion List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TextUnitClassifierSuggestion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TextUnitClassifierSuggestion>>> AnalyzeTextUnitClassifierSuggestionsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Text Unit Classifier Suggestion
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AnalyzeTextUnitClassifierSuggestionsIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Text Unit Classifier Suggestion
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyzeTextUnitClassifierSuggestionsIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TextUnitClassifierSuggestion</returns>
        System.Threading.Tasks.Task<TextUnitClassifierSuggestion> AnalyzeTextUnitClassifierSuggestionsIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TextUnitClassifierSuggestion)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextUnitClassifierSuggestion>> AnalyzeTextUnitClassifierSuggestionsIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Classifier List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TextUnitClassifier&gt;</returns>
        System.Threading.Tasks.Task<List<TextUnitClassifier>> AnalyzeTextUnitClassifiersGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Classifier List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TextUnitClassifier&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TextUnitClassifier>>> AnalyzeTextUnitClassifiersGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Text Unit Classifier
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AnalyzeTextUnitClassifiersIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Text Unit Classifier
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyzeTextUnitClassifiersIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TextUnitClassifier</returns>
        System.Threading.Tasks.Task<TextUnitClassifier> AnalyzeTextUnitClassifiersIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TextUnitClassifier)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextUnitClassifier>> AnalyzeTextUnitClassifiersIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Cluster List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TextUnitCluster&gt;</returns>
        System.Threading.Tasks.Task<List<TextUnitCluster>> AnalyzeTextUnitClusterListGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Cluster List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TextUnitCluster&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TextUnitCluster>>> AnalyzeTextUnitClusterListGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Similarity List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TextUnitSimilarity&gt;</returns>
        System.Threading.Tasks.Task<List<TextUnitSimilarity>> AnalyzeTextUnitSimilarityListGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text Unit Similarity List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TextUnitSimilarity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TextUnitSimilarity>>> AnalyzeTextUnitSimilarityListGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Typeahead TextUnitClassification      Kwargs: field_name: [class_name, class_value]     GET params:       - q: str
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="q">Typeahead string</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Typeahead</returns>
        System.Threading.Tasks.Task<Typeahead> AnalyzeTypeaheadTextUnitClassificationFieldNameGETAsync (string fieldName, string q, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Typeahead TextUnitClassification      Kwargs: field_name: [class_name, class_value]     GET params:       - q: str
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="q">Typeahead string</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Typeahead)</returns>
        System.Threading.Tasks.Task<ApiResponse<Typeahead>> AnalyzeTypeaheadTextUnitClassificationFieldNameGETWithHttpInfoAsync (string fieldName, string q, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnalyzeApi : IAnalyzeApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyzeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalyzeApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyzeApi"/> class
        /// </summary>
        /// <returns></returns>
        public AnalyzeApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyzeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnalyzeApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Document Cluster List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentCluster&gt;</returns>
        public List<DocumentCluster> AnalyzeDocumentClusterGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<DocumentCluster>> localVarResponse = AnalyzeDocumentClusterGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document Cluster List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentCluster&gt;</returns>
        public ApiResponse<List<DocumentCluster>> AnalyzeDocumentClusterGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/analyze/document-cluster/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeDocumentClusterGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentCluster>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentCluster>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentCluster>)));
        }

        /// <summary>
        ///  Document Cluster List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentCluster&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentCluster>> AnalyzeDocumentClusterGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentCluster>> localVarResponse = await AnalyzeDocumentClusterGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document Cluster List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentCluster&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentCluster>>> AnalyzeDocumentClusterGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/analyze/document-cluster/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeDocumentClusterGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentCluster>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentCluster>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentCluster>)));
        }

        /// <summary>
        ///  Retrieve Document Cluster
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentCluster</returns>
        public DocumentCluster AnalyzeDocumentClusterIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentCluster> localVarResponse = AnalyzeDocumentClusterIdGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve Document Cluster
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentCluster</returns>
        public ApiResponse<DocumentCluster> AnalyzeDocumentClusterIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeDocumentClusterIdGET");

            var localVarPath = "/api/v1/analyze/document-cluster/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeDocumentClusterIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentCluster>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentCluster) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentCluster)));
        }

        /// <summary>
        ///  Retrieve Document Cluster
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentCluster</returns>
        public async System.Threading.Tasks.Task<DocumentCluster> AnalyzeDocumentClusterIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentCluster> localVarResponse = await AnalyzeDocumentClusterIdGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve Document Cluster
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentCluster)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentCluster>> AnalyzeDocumentClusterIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeDocumentClusterIdGET");

            var localVarPath = "/api/v1/analyze/document-cluster/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeDocumentClusterIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentCluster>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentCluster) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentCluster)));
        }

        /// <summary>
        ///  Partial Update Document Cluster (name)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <returns>DocumentClusterUpdate</returns>
        public DocumentClusterUpdate AnalyzeDocumentClusterIdPATCH (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate))
        {
             ApiResponse<DocumentClusterUpdate> localVarResponse = AnalyzeDocumentClusterIdPATCHWithHttpInfo(id, documentClusterUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Partial Update Document Cluster (name)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <returns>ApiResponse of DocumentClusterUpdate</returns>
        public ApiResponse<DocumentClusterUpdate> AnalyzeDocumentClusterIdPATCHWithHttpInfo (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeDocumentClusterIdPATCH");

            var localVarPath = "/api/v1/analyze/document-cluster/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentClusterUpdate != null && documentClusterUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentClusterUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentClusterUpdate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeDocumentClusterIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentClusterUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentClusterUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentClusterUpdate)));
        }

        /// <summary>
        ///  Partial Update Document Cluster (name)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentClusterUpdate</returns>
        public async System.Threading.Tasks.Task<DocumentClusterUpdate> AnalyzeDocumentClusterIdPATCHAsync (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentClusterUpdate> localVarResponse = await AnalyzeDocumentClusterIdPATCHWithHttpInfoAsync(id, documentClusterUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Partial Update Document Cluster (name)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentClusterUpdate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentClusterUpdate>> AnalyzeDocumentClusterIdPATCHWithHttpInfoAsync (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeDocumentClusterIdPATCH");

            var localVarPath = "/api/v1/analyze/document-cluster/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentClusterUpdate != null && documentClusterUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentClusterUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentClusterUpdate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeDocumentClusterIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentClusterUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentClusterUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentClusterUpdate)));
        }

        /// <summary>
        ///  Update Document Cluster (name)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <returns>DocumentClusterUpdate</returns>
        public DocumentClusterUpdate AnalyzeDocumentClusterIdPUT (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate))
        {
             ApiResponse<DocumentClusterUpdate> localVarResponse = AnalyzeDocumentClusterIdPUTWithHttpInfo(id, documentClusterUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Document Cluster (name)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <returns>ApiResponse of DocumentClusterUpdate</returns>
        public ApiResponse<DocumentClusterUpdate> AnalyzeDocumentClusterIdPUTWithHttpInfo (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeDocumentClusterIdPUT");

            var localVarPath = "/api/v1/analyze/document-cluster/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentClusterUpdate != null && documentClusterUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentClusterUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentClusterUpdate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeDocumentClusterIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentClusterUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentClusterUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentClusterUpdate)));
        }

        /// <summary>
        ///  Update Document Cluster (name)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentClusterUpdate</returns>
        public async System.Threading.Tasks.Task<DocumentClusterUpdate> AnalyzeDocumentClusterIdPUTAsync (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentClusterUpdate> localVarResponse = await AnalyzeDocumentClusterIdPUTWithHttpInfoAsync(id, documentClusterUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update Document Cluster (name)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document cluster.</param>
        /// <param name="documentClusterUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentClusterUpdate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentClusterUpdate>> AnalyzeDocumentClusterIdPUTWithHttpInfoAsync (string id, DocumentClusterUpdate documentClusterUpdate = default(DocumentClusterUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeDocumentClusterIdPUT");

            var localVarPath = "/api/v1/analyze/document-cluster/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentClusterUpdate != null && documentClusterUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentClusterUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentClusterUpdate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeDocumentClusterIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentClusterUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentClusterUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentClusterUpdate)));
        }

        /// <summary>
        ///  Document Similarity List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentSimilarity&gt;</returns>
        public List<DocumentSimilarity> AnalyzeDocumentSimilarityListGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<DocumentSimilarity>> localVarResponse = AnalyzeDocumentSimilarityListGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document Similarity List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentSimilarity&gt;</returns>
        public ApiResponse<List<DocumentSimilarity>> AnalyzeDocumentSimilarityListGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/analyze/document-similarity/list/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeDocumentSimilarityListGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentSimilarity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentSimilarity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentSimilarity>)));
        }

        /// <summary>
        ///  Document Similarity List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentSimilarity&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentSimilarity>> AnalyzeDocumentSimilarityListGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentSimilarity>> localVarResponse = await AnalyzeDocumentSimilarityListGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document Similarity List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentSimilarity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentSimilarity>>> AnalyzeDocumentSimilarityListGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/analyze/document-similarity/list/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeDocumentSimilarityListGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentSimilarity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentSimilarity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentSimilarity>)));
        }

        /// <summary>
        ///  Party Similarity List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;PartySimilarity&gt;</returns>
        public List<PartySimilarity> AnalyzePartySimilarityListGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<PartySimilarity>> localVarResponse = AnalyzePartySimilarityListGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Party Similarity List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;PartySimilarity&gt;</returns>
        public ApiResponse<List<PartySimilarity>> AnalyzePartySimilarityListGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/analyze/party-similarity/list/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzePartySimilarityListGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PartySimilarity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PartySimilarity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PartySimilarity>)));
        }

        /// <summary>
        ///  Party Similarity List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;PartySimilarity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PartySimilarity>> AnalyzePartySimilarityListGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<PartySimilarity>> localVarResponse = await AnalyzePartySimilarityListGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Party Similarity List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;PartySimilarity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PartySimilarity>>> AnalyzePartySimilarityListGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/analyze/party-similarity/list/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzePartySimilarityListGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PartySimilarity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PartySimilarity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PartySimilarity>)));
        }

        /// <summary>
        ///  Text Unit Classification List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;TextUnitClassification&gt;</returns>
        public List<TextUnitClassification> AnalyzeTextUnitClassificationsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<TextUnitClassification>> localVarResponse = AnalyzeTextUnitClassificationsGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Text Unit Classification List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;TextUnitClassification&gt;</returns>
        public ApiResponse<List<TextUnitClassification>> AnalyzeTextUnitClassificationsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/analyze/text-unit-classifications/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassificationsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TextUnitClassification>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TextUnitClassification>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TextUnitClassification>)));
        }

        /// <summary>
        ///  Text Unit Classification List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TextUnitClassification&gt;</returns>
        public async System.Threading.Tasks.Task<List<TextUnitClassification>> AnalyzeTextUnitClassificationsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TextUnitClassification>> localVarResponse = await AnalyzeTextUnitClassificationsGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Text Unit Classification List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TextUnitClassification&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TextUnitClassification>>> AnalyzeTextUnitClassificationsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/analyze/text-unit-classifications/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassificationsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TextUnitClassification>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TextUnitClassification>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TextUnitClassification>)));
        }

        /// <summary>
        ///  Delete Text Unit Classification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <returns></returns>
        public void AnalyzeTextUnitClassificationsIdDELETE (string id)
        {
             AnalyzeTextUnitClassificationsIdDELETEWithHttpInfo(id);
        }

        /// <summary>
        ///  Delete Text Unit Classification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AnalyzeTextUnitClassificationsIdDELETEWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeTextUnitClassificationsIdDELETE");

            var localVarPath = "/api/v1/analyze/text-unit-classifications/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassificationsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete Text Unit Classification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AnalyzeTextUnitClassificationsIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await AnalyzeTextUnitClassificationsIdDELETEWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        ///  Delete Text Unit Classification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyzeTextUnitClassificationsIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeTextUnitClassificationsIdDELETE");

            var localVarPath = "/api/v1/analyze/text-unit-classifications/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassificationsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Retrieve Text Unit Classification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>TextUnitClassification</returns>
        public TextUnitClassification AnalyzeTextUnitClassificationsIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<TextUnitClassification> localVarResponse = AnalyzeTextUnitClassificationsIdGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve Text Unit Classification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of TextUnitClassification</returns>
        public ApiResponse<TextUnitClassification> AnalyzeTextUnitClassificationsIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeTextUnitClassificationsIdGET");

            var localVarPath = "/api/v1/analyze/text-unit-classifications/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassificationsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextUnitClassification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TextUnitClassification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextUnitClassification)));
        }

        /// <summary>
        ///  Retrieve Text Unit Classification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TextUnitClassification</returns>
        public async System.Threading.Tasks.Task<TextUnitClassification> AnalyzeTextUnitClassificationsIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TextUnitClassification> localVarResponse = await AnalyzeTextUnitClassificationsIdGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve Text Unit Classification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classification.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TextUnitClassification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextUnitClassification>> AnalyzeTextUnitClassificationsIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeTextUnitClassificationsIdGET");

            var localVarPath = "/api/v1/analyze/text-unit-classifications/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassificationsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextUnitClassification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TextUnitClassification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextUnitClassification)));
        }

        /// <summary>
        ///  Create Text Unit Classification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textUnitClassificationCreate"> (optional)</param>
        /// <returns>TextUnitClassificationCreate</returns>
        public TextUnitClassificationCreate AnalyzeTextUnitClassificationsPOST (TextUnitClassificationCreate textUnitClassificationCreate = default(TextUnitClassificationCreate))
        {
             ApiResponse<TextUnitClassificationCreate> localVarResponse = AnalyzeTextUnitClassificationsPOSTWithHttpInfo(textUnitClassificationCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Text Unit Classification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textUnitClassificationCreate"> (optional)</param>
        /// <returns>ApiResponse of TextUnitClassificationCreate</returns>
        public ApiResponse<TextUnitClassificationCreate> AnalyzeTextUnitClassificationsPOSTWithHttpInfo (TextUnitClassificationCreate textUnitClassificationCreate = default(TextUnitClassificationCreate))
        {

            var localVarPath = "/api/v1/analyze/text-unit-classifications/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (textUnitClassificationCreate != null && textUnitClassificationCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(textUnitClassificationCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textUnitClassificationCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassificationsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextUnitClassificationCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TextUnitClassificationCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextUnitClassificationCreate)));
        }

        /// <summary>
        ///  Create Text Unit Classification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textUnitClassificationCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TextUnitClassificationCreate</returns>
        public async System.Threading.Tasks.Task<TextUnitClassificationCreate> AnalyzeTextUnitClassificationsPOSTAsync (TextUnitClassificationCreate textUnitClassificationCreate = default(TextUnitClassificationCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TextUnitClassificationCreate> localVarResponse = await AnalyzeTextUnitClassificationsPOSTWithHttpInfoAsync(textUnitClassificationCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create Text Unit Classification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textUnitClassificationCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TextUnitClassificationCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextUnitClassificationCreate>> AnalyzeTextUnitClassificationsPOSTWithHttpInfoAsync (TextUnitClassificationCreate textUnitClassificationCreate = default(TextUnitClassificationCreate), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/analyze/text-unit-classifications/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (textUnitClassificationCreate != null && textUnitClassificationCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(textUnitClassificationCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textUnitClassificationCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassificationsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextUnitClassificationCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TextUnitClassificationCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextUnitClassificationCreate)));
        }

        /// <summary>
        ///  Text Unit Classifier Suggestion List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;TextUnitClassifierSuggestion&gt;</returns>
        public List<TextUnitClassifierSuggestion> AnalyzeTextUnitClassifierSuggestionsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<TextUnitClassifierSuggestion>> localVarResponse = AnalyzeTextUnitClassifierSuggestionsGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Text Unit Classifier Suggestion List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;TextUnitClassifierSuggestion&gt;</returns>
        public ApiResponse<List<TextUnitClassifierSuggestion>> AnalyzeTextUnitClassifierSuggestionsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/analyze/text-unit-classifier-suggestions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassifierSuggestionsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TextUnitClassifierSuggestion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TextUnitClassifierSuggestion>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TextUnitClassifierSuggestion>)));
        }

        /// <summary>
        ///  Text Unit Classifier Suggestion List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TextUnitClassifierSuggestion&gt;</returns>
        public async System.Threading.Tasks.Task<List<TextUnitClassifierSuggestion>> AnalyzeTextUnitClassifierSuggestionsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TextUnitClassifierSuggestion>> localVarResponse = await AnalyzeTextUnitClassifierSuggestionsGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Text Unit Classifier Suggestion List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TextUnitClassifierSuggestion&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TextUnitClassifierSuggestion>>> AnalyzeTextUnitClassifierSuggestionsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/analyze/text-unit-classifier-suggestions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassifierSuggestionsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TextUnitClassifierSuggestion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TextUnitClassifierSuggestion>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TextUnitClassifierSuggestion>)));
        }

        /// <summary>
        ///  Delete Text Unit Classifier Suggestion
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <returns></returns>
        public void AnalyzeTextUnitClassifierSuggestionsIdDELETE (string id)
        {
             AnalyzeTextUnitClassifierSuggestionsIdDELETEWithHttpInfo(id);
        }

        /// <summary>
        ///  Delete Text Unit Classifier Suggestion
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AnalyzeTextUnitClassifierSuggestionsIdDELETEWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeTextUnitClassifierSuggestionsIdDELETE");

            var localVarPath = "/api/v1/analyze/text-unit-classifier-suggestions/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassifierSuggestionsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete Text Unit Classifier Suggestion
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AnalyzeTextUnitClassifierSuggestionsIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await AnalyzeTextUnitClassifierSuggestionsIdDELETEWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        ///  Delete Text Unit Classifier Suggestion
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyzeTextUnitClassifierSuggestionsIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeTextUnitClassifierSuggestionsIdDELETE");

            var localVarPath = "/api/v1/analyze/text-unit-classifier-suggestions/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassifierSuggestionsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>TextUnitClassifierSuggestion</returns>
        public TextUnitClassifierSuggestion AnalyzeTextUnitClassifierSuggestionsIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<TextUnitClassifierSuggestion> localVarResponse = AnalyzeTextUnitClassifierSuggestionsIdGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of TextUnitClassifierSuggestion</returns>
        public ApiResponse<TextUnitClassifierSuggestion> AnalyzeTextUnitClassifierSuggestionsIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeTextUnitClassifierSuggestionsIdGET");

            var localVarPath = "/api/v1/analyze/text-unit-classifier-suggestions/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassifierSuggestionsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextUnitClassifierSuggestion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TextUnitClassifierSuggestion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextUnitClassifierSuggestion)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TextUnitClassifierSuggestion</returns>
        public async System.Threading.Tasks.Task<TextUnitClassifierSuggestion> AnalyzeTextUnitClassifierSuggestionsIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TextUnitClassifierSuggestion> localVarResponse = await AnalyzeTextUnitClassifierSuggestionsIdGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier suggestion.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TextUnitClassifierSuggestion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextUnitClassifierSuggestion>> AnalyzeTextUnitClassifierSuggestionsIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeTextUnitClassifierSuggestionsIdGET");

            var localVarPath = "/api/v1/analyze/text-unit-classifier-suggestions/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassifierSuggestionsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextUnitClassifierSuggestion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TextUnitClassifierSuggestion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextUnitClassifierSuggestion)));
        }

        /// <summary>
        ///  Text Unit Classifier List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;TextUnitClassifier&gt;</returns>
        public List<TextUnitClassifier> AnalyzeTextUnitClassifiersGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<TextUnitClassifier>> localVarResponse = AnalyzeTextUnitClassifiersGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Text Unit Classifier List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;TextUnitClassifier&gt;</returns>
        public ApiResponse<List<TextUnitClassifier>> AnalyzeTextUnitClassifiersGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/analyze/text-unit-classifiers/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassifiersGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TextUnitClassifier>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TextUnitClassifier>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TextUnitClassifier>)));
        }

        /// <summary>
        ///  Text Unit Classifier List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TextUnitClassifier&gt;</returns>
        public async System.Threading.Tasks.Task<List<TextUnitClassifier>> AnalyzeTextUnitClassifiersGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TextUnitClassifier>> localVarResponse = await AnalyzeTextUnitClassifiersGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Text Unit Classifier List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TextUnitClassifier&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TextUnitClassifier>>> AnalyzeTextUnitClassifiersGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/analyze/text-unit-classifiers/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassifiersGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TextUnitClassifier>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TextUnitClassifier>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TextUnitClassifier>)));
        }

        /// <summary>
        ///  Delete Text Unit Classifier
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <returns></returns>
        public void AnalyzeTextUnitClassifiersIdDELETE (string id)
        {
             AnalyzeTextUnitClassifiersIdDELETEWithHttpInfo(id);
        }

        /// <summary>
        ///  Delete Text Unit Classifier
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AnalyzeTextUnitClassifiersIdDELETEWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeTextUnitClassifiersIdDELETE");

            var localVarPath = "/api/v1/analyze/text-unit-classifiers/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassifiersIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete Text Unit Classifier
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AnalyzeTextUnitClassifiersIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await AnalyzeTextUnitClassifiersIdDELETEWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        ///  Delete Text Unit Classifier
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AnalyzeTextUnitClassifiersIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeTextUnitClassifiersIdDELETE");

            var localVarPath = "/api/v1/analyze/text-unit-classifiers/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassifiersIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>TextUnitClassifier</returns>
        public TextUnitClassifier AnalyzeTextUnitClassifiersIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<TextUnitClassifier> localVarResponse = AnalyzeTextUnitClassifiersIdGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of TextUnitClassifier</returns>
        public ApiResponse<TextUnitClassifier> AnalyzeTextUnitClassifiersIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeTextUnitClassifiersIdGET");

            var localVarPath = "/api/v1/analyze/text-unit-classifiers/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassifiersIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextUnitClassifier>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TextUnitClassifier) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextUnitClassifier)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TextUnitClassifier</returns>
        public async System.Threading.Tasks.Task<TextUnitClassifier> AnalyzeTextUnitClassifiersIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TextUnitClassifier> localVarResponse = await AnalyzeTextUnitClassifiersIdGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit classifier.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TextUnitClassifier)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextUnitClassifier>> AnalyzeTextUnitClassifiersIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyzeApi->AnalyzeTextUnitClassifiersIdGET");

            var localVarPath = "/api/v1/analyze/text-unit-classifiers/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClassifiersIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextUnitClassifier>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TextUnitClassifier) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextUnitClassifier)));
        }

        /// <summary>
        ///  Text Unit Cluster List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;TextUnitCluster&gt;</returns>
        public List<TextUnitCluster> AnalyzeTextUnitClusterListGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<TextUnitCluster>> localVarResponse = AnalyzeTextUnitClusterListGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Text Unit Cluster List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;TextUnitCluster&gt;</returns>
        public ApiResponse<List<TextUnitCluster>> AnalyzeTextUnitClusterListGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/analyze/text-unit-cluster/list/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClusterListGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TextUnitCluster>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TextUnitCluster>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TextUnitCluster>)));
        }

        /// <summary>
        ///  Text Unit Cluster List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TextUnitCluster&gt;</returns>
        public async System.Threading.Tasks.Task<List<TextUnitCluster>> AnalyzeTextUnitClusterListGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TextUnitCluster>> localVarResponse = await AnalyzeTextUnitClusterListGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Text Unit Cluster List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TextUnitCluster&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TextUnitCluster>>> AnalyzeTextUnitClusterListGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/analyze/text-unit-cluster/list/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitClusterListGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TextUnitCluster>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TextUnitCluster>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TextUnitCluster>)));
        }

        /// <summary>
        ///  Text Unit Similarity List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;TextUnitSimilarity&gt;</returns>
        public List<TextUnitSimilarity> AnalyzeTextUnitSimilarityListGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<TextUnitSimilarity>> localVarResponse = AnalyzeTextUnitSimilarityListGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Text Unit Similarity List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;TextUnitSimilarity&gt;</returns>
        public ApiResponse<List<TextUnitSimilarity>> AnalyzeTextUnitSimilarityListGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/analyze/text-unit-similarity/list/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitSimilarityListGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TextUnitSimilarity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TextUnitSimilarity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TextUnitSimilarity>)));
        }

        /// <summary>
        ///  Text Unit Similarity List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TextUnitSimilarity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TextUnitSimilarity>> AnalyzeTextUnitSimilarityListGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TextUnitSimilarity>> localVarResponse = await AnalyzeTextUnitSimilarityListGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Text Unit Similarity List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TextUnitSimilarity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TextUnitSimilarity>>> AnalyzeTextUnitSimilarityListGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/analyze/text-unit-similarity/list/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTextUnitSimilarityListGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TextUnitSimilarity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TextUnitSimilarity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TextUnitSimilarity>)));
        }

        /// <summary>
        ///  Typeahead TextUnitClassification      Kwargs: field_name: [class_name, class_value]     GET params:       - q: str
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="q">Typeahead string</param>
        /// <returns>Typeahead</returns>
        public Typeahead AnalyzeTypeaheadTextUnitClassificationFieldNameGET (string fieldName, string q)
        {
             ApiResponse<Typeahead> localVarResponse = AnalyzeTypeaheadTextUnitClassificationFieldNameGETWithHttpInfo(fieldName, q);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Typeahead TextUnitClassification      Kwargs: field_name: [class_name, class_value]     GET params:       - q: str
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="q">Typeahead string</param>
        /// <returns>ApiResponse of Typeahead</returns>
        public ApiResponse<Typeahead> AnalyzeTypeaheadTextUnitClassificationFieldNameGETWithHttpInfo (string fieldName, string q)
        {
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling AnalyzeApi->AnalyzeTypeaheadTextUnitClassificationFieldNameGET");
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling AnalyzeApi->AnalyzeTypeaheadTextUnitClassificationFieldNameGET");

            var localVarPath = "/api/v1/analyze/typeahead/text-unit-classification/{field_name}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarPathParams.Add("field_name", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTypeaheadTextUnitClassificationFieldNameGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Typeahead>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Typeahead) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Typeahead)));
        }

        /// <summary>
        ///  Typeahead TextUnitClassification      Kwargs: field_name: [class_name, class_value]     GET params:       - q: str
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="q">Typeahead string</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Typeahead</returns>
        public async System.Threading.Tasks.Task<Typeahead> AnalyzeTypeaheadTextUnitClassificationFieldNameGETAsync (string fieldName, string q, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Typeahead> localVarResponse = await AnalyzeTypeaheadTextUnitClassificationFieldNameGETWithHttpInfoAsync(fieldName, q, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Typeahead TextUnitClassification      Kwargs: field_name: [class_name, class_value]     GET params:       - q: str
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldName"></param>
        /// <param name="q">Typeahead string</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Typeahead)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Typeahead>> AnalyzeTypeaheadTextUnitClassificationFieldNameGETWithHttpInfoAsync (string fieldName, string q, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling AnalyzeApi->AnalyzeTypeaheadTextUnitClassificationFieldNameGET");
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling AnalyzeApi->AnalyzeTypeaheadTextUnitClassificationFieldNameGET");

            var localVarPath = "/api/v1/analyze/typeahead/text-unit-classification/{field_name}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldName != null) localVarPathParams.Add("field_name", this.Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeTypeaheadTextUnitClassificationFieldNameGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Typeahead>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Typeahead) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Typeahead)));
        }

    }
}
