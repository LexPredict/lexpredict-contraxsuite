/* 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <returns>AnnotationUpdateResponse</returns>
        AnnotationUpdateResponse DocumentAnnotationsAnnotatePUT (Annotation annotation = default(Annotation));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <returns>ApiResponse of AnnotationUpdateResponse</returns>
        ApiResponse<AnnotationUpdateResponse> DocumentAnnotationsAnnotatePUTWithHttpInfo (Annotation annotation = default(Annotation));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create batch of annotations      PUT Params:          - operation_uid: uid          - action: str [\&quot;save\&quot;, \&quot;delete\&quot;]          - id: int - PK of DocumentFieldValue          - data: {\&quot;document\&quot;: id, \&quot;field\&quot;: uid, \&quot;location_start\&quot;: int, \&quot;location_end\&quot;: int, \&quot;value\&quot;: val}
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationBatchRequest"> (optional)</param>
        /// <returns>List&lt;AnnotationBatchResponse&gt;</returns>
        List<AnnotationBatchResponse> DocumentAnnotationsBatchPUT (List<AnnotationBatchRequest> annotationBatchRequest = default(List<AnnotationBatchRequest>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create batch of annotations      PUT Params:          - operation_uid: uid          - action: str [\&quot;save\&quot;, \&quot;delete\&quot;]          - id: int - PK of DocumentFieldValue          - data: {\&quot;document\&quot;: id, \&quot;field\&quot;: uid, \&quot;location_start\&quot;: int, \&quot;location_end\&quot;: int, \&quot;value\&quot;: val}
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationBatchRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AnnotationBatchResponse&gt;</returns>
        ApiResponse<List<AnnotationBatchResponse>> DocumentAnnotationsBatchPUTWithHttpInfo (List<AnnotationBatchRequest> annotationBatchRequest = default(List<AnnotationBatchRequest>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Annotation (Document Field Value) List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Annotation&gt;</returns>
        List<Annotation> DocumentAnnotationsGET ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Annotation (Document Field Value) List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Annotation&gt;</returns>
        ApiResponse<List<Annotation>> DocumentAnnotationsGETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <returns></returns>
        void DocumentAnnotationsIdDELETE (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentAnnotationsIdDELETEWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <returns>Annotation</returns>
        Annotation DocumentAnnotationsIdGET (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <returns>ApiResponse of Annotation</returns>
        ApiResponse<Annotation> DocumentAnnotationsIdGETWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="annotation"> (optional)</param>
        /// <returns>Annotation</returns>
        Annotation DocumentAnnotationsIdPUT (string id, Annotation annotation = default(Annotation));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="annotation"> (optional)</param>
        /// <returns>ApiResponse of Annotation</returns>
        ApiResponse<Annotation> DocumentAnnotationsIdPUTWithHttpInfo (string id, Annotation annotation = default(Annotation));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <returns>Annotation</returns>
        Annotation DocumentAnnotationsPOST (Annotation annotation = default(Annotation));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <returns>ApiResponse of Annotation</returns>
        ApiResponse<Annotation> DocumentAnnotationsPOSTWithHttpInfo (Annotation annotation = default(Annotation));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Suggest field value before creating an annotation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationSuggestRequest"> (optional)</param>
        /// <returns>Annotation</returns>
        Annotation DocumentAnnotationsSuggestPOST (AnnotationSuggestRequest annotationSuggestRequest = default(AnnotationSuggestRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Suggest field value before creating an annotation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationSuggestRequest"> (optional)</param>
        /// <returns>ApiResponse of Annotation</returns>
        ApiResponse<Annotation> DocumentAnnotationsSuggestPOSTWithHttpInfo (AnnotationSuggestRequest annotationSuggestRequest = default(AnnotationSuggestRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldAnnotation</returns>
        DocumentFieldAnnotation DocumentDocumentFieldAnnotationsForUserGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldAnnotation</returns>
        ApiResponse<DocumentFieldAnnotation> DocumentDocumentFieldAnnotationsForUserGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation List + Field Annotation False Match List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldAnnotation&gt;</returns>
        List<DocumentFieldAnnotation> DocumentDocumentFieldAnnotationsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation List + Field Annotation False Match List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldAnnotation&gt;</returns>
        ApiResponse<List<DocumentFieldAnnotation>> DocumentDocumentFieldAnnotationsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation Details (not Field Annotation False Match)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldAnnotation</returns>
        DocumentFieldAnnotation DocumentDocumentFieldAnnotationsUidGET (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation Details (not Field Annotation False Match)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldAnnotation</returns>
        ApiResponse<DocumentFieldAnnotation> DocumentDocumentFieldAnnotationsUidGETWithHttpInfo (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentDocumentFieldCategoriesFormFieldsGET ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldCategoriesFormFieldsGETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DocumentFieldCategory List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldCategoryList&gt;</returns>
        List<DocumentFieldCategoryList> DocumentDocumentFieldCategoriesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DocumentFieldCategory List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldCategoryList&gt;</returns>
        ApiResponse<List<DocumentFieldCategoryList>> DocumentDocumentFieldCategoriesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete DocumentFieldCategory
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <returns></returns>
        void DocumentDocumentFieldCategoriesIdDELETE (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete DocumentFieldCategory
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentDocumentFieldCategoriesIdDELETEWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentDocumentFieldCategoriesIdFormFieldsGET (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldCategoriesIdFormFieldsGETWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve DocumentFieldCategory
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldCategoryList</returns>
        DocumentFieldCategoryList DocumentDocumentFieldCategoriesIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve DocumentFieldCategory
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCategoryList</returns>
        ApiResponse<DocumentFieldCategoryList> DocumentDocumentFieldCategoriesIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update DocumentFieldCategory
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <returns>DocumentFieldCategoryCreate</returns>
        DocumentFieldCategoryCreate DocumentDocumentFieldCategoriesIdPATCH (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update DocumentFieldCategory
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCategoryCreate</returns>
        ApiResponse<DocumentFieldCategoryCreate> DocumentDocumentFieldCategoriesIdPATCHWithHttpInfo (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Type     Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <returns>DocumentFieldCategoryCreate</returns>
        DocumentFieldCategoryCreate DocumentDocumentFieldCategoriesIdPUT (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Type     Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCategoryCreate</returns>
        ApiResponse<DocumentFieldCategoryCreate> DocumentDocumentFieldCategoriesIdPUTWithHttpInfo (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create DocumentFieldCategory      Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <returns>DocumentFieldCategoryCreate</returns>
        DocumentFieldCategoryCreate DocumentDocumentFieldCategoriesPOST (DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create DocumentFieldCategory      Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCategoryCreate</returns>
        ApiResponse<DocumentFieldCategoryCreate> DocumentDocumentFieldCategoriesPOSTWithHttpInfo (DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentDocumentFieldDetectorsFormFieldsGET ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldDetectorsFormFieldsGETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldDetectorDetail&gt;</returns>
        List<DocumentFieldDetectorDetail> DocumentDocumentFieldDetectorsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldDetectorDetail&gt;</returns>
        ApiResponse<List<DocumentFieldDetectorDetail>> DocumentDocumentFieldDetectorsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <returns>DocumentFieldDetectorCreate</returns>
        DocumentFieldDetectorCreate DocumentDocumentFieldDetectorsPOST (DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldDetectorCreate</returns>
        ApiResponse<DocumentFieldDetectorCreate> DocumentDocumentFieldDetectorsPOSTWithHttpInfo (DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <returns></returns>
        void DocumentDocumentFieldDetectorsUidDELETE (string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentDocumentFieldDetectorsUidDELETEWithHttpInfo (string uid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentDocumentFieldDetectorsUidFormFieldsGET (string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldDetectorsUidFormFieldsGETWithHttpInfo (string uid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldDetectorDetail</returns>
        DocumentFieldDetectorDetail DocumentDocumentFieldDetectorsUidGET (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldDetectorDetail</returns>
        ApiResponse<DocumentFieldDetectorDetail> DocumentDocumentFieldDetectorsUidGETWithHttpInfo (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <returns>DocumentFieldDetectorCreate</returns>
        DocumentFieldDetectorCreate DocumentDocumentFieldDetectorsUidPATCH (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldDetectorCreate</returns>
        ApiResponse<DocumentFieldDetectorCreate> DocumentDocumentFieldDetectorsUidPATCHWithHttpInfo (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <returns>DocumentFieldDetectorCreate</returns>
        DocumentFieldDetectorCreate DocumentDocumentFieldDetectorsUidPUT (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldDetectorCreate</returns>
        ApiResponse<DocumentFieldDetectorCreate> DocumentDocumentFieldDetectorsUidPUTWithHttpInfo (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldValue&gt;</returns>
        List<DocumentFieldValue> DocumentDocumentFieldValuesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldValue&gt;</returns>
        ApiResponse<List<DocumentFieldValue>> DocumentDocumentFieldValuesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value Details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldValue</returns>
        DocumentFieldValue DocumentDocumentFieldValuesIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value Details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldValue</returns>
        ApiResponse<DocumentFieldValue> DocumentDocumentFieldValuesIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentDocumentFieldsFormFieldsGET ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldsFormFieldsGETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldList&gt;</returns>
        List<DocumentFieldList> DocumentDocumentFieldsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldList&gt;</returns>
        ApiResponse<List<DocumentFieldList>> DocumentDocumentFieldsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeUid">Filter by document type uid (optional)</param>
        /// <returns>List&lt;DocumentFieldStatsResponse&gt;</returns>
        List<DocumentFieldStatsResponse> DocumentDocumentFieldsStatsGET (string documentTypeUid = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeUid">Filter by document type uid (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldStatsResponse&gt;</returns>
        ApiResponse<List<DocumentFieldStatsResponse>> DocumentDocumentFieldsStatsGETWithHttpInfo (string documentTypeUid = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check formula for EXISTING Document Field Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="checkDocumentFieldFormulaRequest"> (optional)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentDocumentFieldsUidCheckFormulaPOST (string uid, CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest = default(CheckDocumentFieldFormulaRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check formula for EXISTING Document Field Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="checkDocumentFieldFormulaRequest"> (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldsUidCheckFormulaPOSTWithHttpInfo (string uid, CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest = default(CheckDocumentFieldFormulaRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clone existing DocumentField and its depends_on_fields and detectors
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="cloneDocumentFieldRequest"> (optional)</param>
        /// <returns>DocumentFieldDetail</returns>
        DocumentFieldDetail DocumentDocumentFieldsUidClonePOST (string uid, CloneDocumentFieldRequest cloneDocumentFieldRequest = default(CloneDocumentFieldRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clone existing DocumentField and its depends_on_fields and detectors
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="cloneDocumentFieldRequest"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldDetail</returns>
        ApiResponse<DocumentFieldDetail> DocumentDocumentFieldsUidClonePOSTWithHttpInfo (string uid, CloneDocumentFieldRequest cloneDocumentFieldRequest = default(CloneDocumentFieldRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <returns></returns>
        void DocumentDocumentFieldsUidDELETE (string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentDocumentFieldsUidDELETEWithHttpInfo (string uid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentDocumentFieldsUidFormFieldsGET (string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldsUidFormFieldsGETWithHttpInfo (string uid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldDetail</returns>
        DocumentFieldDetail DocumentDocumentFieldsUidGET (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldDetail</returns>
        ApiResponse<DocumentFieldDetail> DocumentDocumentFieldsUidGETWithHttpInfo (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <returns>DocumentFieldCreate</returns>
        DocumentFieldCreate DocumentDocumentFieldsUidPATCH (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCreate</returns>
        ApiResponse<DocumentFieldCreate> DocumentDocumentFieldsUidPATCHWithHttpInfo (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <returns>DocumentFieldCreate</returns>
        DocumentFieldCreate DocumentDocumentFieldsUidPUT (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCreate</returns>
        ApiResponse<DocumentFieldCreate> DocumentDocumentFieldsUidPUTWithHttpInfo (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get info about related objects for ready-to-delete document type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldDetail"> (optional)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentDocumentFieldsUidPreDeletePOST (string uid, DocumentFieldDetail documentFieldDetail = default(DocumentFieldDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get info about related objects for ready-to-delete document type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldDetail"> (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldsUidPreDeletePOSTWithHttpInfo (string uid, DocumentFieldDetail documentFieldDetail = default(DocumentFieldDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Note List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="projectId">Filter by project id (optional)</param>
        /// <param name="documentId">Filter by document id (optional)</param>
        /// <param name="force">For deleted documents as well (optional)</param>
        /// <param name="exportTo">Export data (optional)</param>
        /// <returns>List&lt;DocumentNoteDetail&gt;</returns>
        List<DocumentNoteDetail> DocumentDocumentNotesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), string projectId = default(string), string documentId = default(string), bool? force = default(bool?), bool? exportTo = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Note List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="projectId">Filter by project id (optional)</param>
        /// <param name="documentId">Filter by document id (optional)</param>
        /// <param name="force">For deleted documents as well (optional)</param>
        /// <param name="exportTo">Export data (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentNoteDetail&gt;</returns>
        ApiResponse<List<DocumentNoteDetail>> DocumentDocumentNotesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), string projectId = default(string), string documentId = default(string), bool? force = default(bool?), bool? exportTo = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <returns></returns>
        void DocumentDocumentNotesIdDELETE (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentDocumentNotesIdDELETEWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentNoteDetail</returns>
        DocumentNoteDetail DocumentDocumentNotesIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentNoteDetail</returns>
        ApiResponse<DocumentNoteDetail> DocumentDocumentNotesIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteDetail"> (optional)</param>
        /// <returns>DocumentNoteDetail</returns>
        DocumentNoteDetail DocumentDocumentNotesIdPATCH (string id, DocumentNoteDetail documentNoteDetail = default(DocumentNoteDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentNoteDetail</returns>
        ApiResponse<DocumentNoteDetail> DocumentDocumentNotesIdPATCHWithHttpInfo (string id, DocumentNoteDetail documentNoteDetail = default(DocumentNoteDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteUpdate"> (optional)</param>
        /// <returns>DocumentNoteUpdate</returns>
        DocumentNoteUpdate DocumentDocumentNotesIdPUT (string id, DocumentNoteUpdate documentNoteUpdate = default(DocumentNoteUpdate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteUpdate"> (optional)</param>
        /// <returns>ApiResponse of DocumentNoteUpdate</returns>
        ApiResponse<DocumentNoteUpdate> DocumentDocumentNotesIdPUTWithHttpInfo (string id, DocumentNoteUpdate documentNoteUpdate = default(DocumentNoteUpdate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNoteCreate"> (optional)</param>
        /// <returns>DocumentNoteCreate</returns>
        DocumentNoteCreate DocumentDocumentNotesPOST (DocumentNoteCreate documentNoteCreate = default(DocumentNoteCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNoteCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentNoteCreate</returns>
        ApiResponse<DocumentNoteCreate> DocumentDocumentNotesPOSTWithHttpInfo (DocumentNoteCreate documentNoteCreate = default(DocumentNoteCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentDocumentTypesFormFieldsGET ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentDocumentTypesFormFieldsGETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Type List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentTypeDetail&gt;</returns>
        List<DocumentTypeDetail> DocumentDocumentTypesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Type List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeDetail&gt;</returns>
        ApiResponse<List<DocumentTypeDetail>> DocumentDocumentTypesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeImportRequest"> (optional)</param>
        /// <returns>DocumentTypeImportResponse</returns>
        DocumentTypeImportResponse DocumentDocumentTypesImportDocTypePUT (DocumentTypeImportRequest documentTypeImportRequest = default(DocumentTypeImportRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeImportRequest"> (optional)</param>
        /// <returns>ApiResponse of DocumentTypeImportResponse</returns>
        ApiResponse<DocumentTypeImportResponse> DocumentDocumentTypesImportDocTypePUTWithHttpInfo (DocumentTypeImportRequest documentTypeImportRequest = default(DocumentTypeImportRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document Type      Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <returns>DocumentTypeCreate</returns>
        DocumentTypeCreate DocumentDocumentTypesPOST (DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document Type      Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentTypeCreate</returns>
        ApiResponse<DocumentTypeCreate> DocumentDocumentTypesPOSTWithHttpInfo (DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentTypeStats&gt;</returns>
        List<DocumentTypeStats> DocumentDocumentTypesStatsGET ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentTypeStats&gt;</returns>
        ApiResponse<List<DocumentTypeStats>> DocumentDocumentTypesStatsGETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clone existing Document Type and its fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="cloneDocumentTypeRequest"> (optional)</param>
        /// <returns>DocumentTypeDetail</returns>
        DocumentTypeDetail DocumentDocumentTypesUidClonePOST (string uid, CloneDocumentTypeRequest cloneDocumentTypeRequest = default(CloneDocumentTypeRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clone existing Document Type and its fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="cloneDocumentTypeRequest"> (optional)</param>
        /// <returns>ApiResponse of DocumentTypeDetail</returns>
        ApiResponse<DocumentTypeDetail> DocumentDocumentTypesUidClonePOSTWithHttpInfo (string uid, CloneDocumentTypeRequest cloneDocumentTypeRequest = default(CloneDocumentTypeRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <returns></returns>
        void DocumentDocumentTypesUidDELETE (string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentDocumentTypesUidDELETEWithHttpInfo (string uid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="targetVersion">Version number (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentDocumentTypesUidExportDocTypeGET (string uid, string targetVersion = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="targetVersion">Version number (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentDocumentTypesUidExportDocTypeGETWithHttpInfo (string uid, string targetVersion = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentDocumentTypesUidFormFieldsGET (string uid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentDocumentTypesUidFormFieldsGETWithHttpInfo (string uid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentTypeDetail</returns>
        DocumentTypeDetail DocumentDocumentTypesUidGET (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentTypeDetail</returns>
        ApiResponse<DocumentTypeDetail> DocumentDocumentTypesUidGETWithHttpInfo (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <returns>DocumentTypeCreate</returns>
        DocumentTypeCreate DocumentDocumentTypesUidPATCH (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentTypeCreate</returns>
        ApiResponse<DocumentTypeCreate> DocumentDocumentTypesUidPATCHWithHttpInfo (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Type     Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <returns>DocumentTypeCreate</returns>
        DocumentTypeCreate DocumentDocumentTypesUidPUT (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Type     Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentTypeCreate</returns>
        ApiResponse<DocumentTypeCreate> DocumentDocumentTypesUidPUTWithHttpInfo (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get info about related objects for ready-to-delete document type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeDetail"> (optional)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentDocumentTypesUidPreDeletePOST (string uid, DocumentTypeDetail documentTypeDetail = default(DocumentTypeDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get info about related objects for ready-to-delete document type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeDetail"> (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentDocumentTypesUidPreDeletePOSTWithHttpInfo (string uid, DocumentTypeDetail documentTypeDetail = default(DocumentTypeDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentTypeDetail</returns>
        DocumentTypeDetail DocumentDocumentTypesUserProjectTypesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentTypeDetail</returns>
        ApiResponse<DocumentTypeDetail> DocumentDocumentTypesUserProjectTypesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <returns>DocumentDownloadZipResponse</returns>
        DocumentDownloadZipResponse DocumentDocumentsDownloadZipGET (string documentIds = default(string), string excludeDocumentIds = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <returns>ApiResponse of DocumentDownloadZipResponse</returns>
        ApiResponse<DocumentDownloadZipResponse> DocumentDocumentsDownloadZipGETWithHttpInfo (string documentIds = default(string), string excludeDocumentIds = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DocumentsForUserResponse</returns>
        DocumentsForUserResponse DocumentDocumentsForUserGET ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DocumentsForUserResponse</returns>
        ApiResponse<DocumentsForUserResponse> DocumentDocumentsForUserGETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document List with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>List&lt;DocumentsForUser&gt;</returns>
        List<DocumentsForUser> DocumentDocumentsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document List with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentsForUser&gt;</returns>
        ApiResponse<List<DocumentsForUser>> DocumentDocumentsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns></returns>
        void DocumentDocumentsIdDELETE (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentDocumentsIdDELETEWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentDetail</returns>
        DocumentDetail DocumentDocumentsIdDataGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        ApiResponse<DocumentDetail> DocumentDocumentsIdDataGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>List&lt;DocumentDefinitions&gt;</returns>
        List<DocumentDefinitions> DocumentDocumentsIdDefinitionsGET (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of List&lt;DocumentDefinitions&gt;</returns>
        ApiResponse<List<DocumentDefinitions>> DocumentDocumentsIdDefinitionsGETWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentDocumentsIdExtractionGET (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentDocumentsIdExtractionGETWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentDocumentsIdFieldsGET (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentDocumentsIdFieldsGETWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        DocumentDetail DocumentDocumentsIdFieldsPATCH (string id, DocumentDetail documentDetail = default(DocumentDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        ApiResponse<DocumentDetail> DocumentDocumentsIdFieldsPATCHWithHttpInfo (string id, DocumentDetail documentDetail = default(DocumentDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        DocumentDetail DocumentDocumentsIdFieldsPOST (string id, DocumentDetail documentDetail = default(DocumentDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        ApiResponse<DocumentDetail> DocumentDocumentsIdFieldsPOSTWithHttpInfo (string id, DocumentDetail documentDetail = default(DocumentDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        DocumentDetail DocumentDocumentsIdFieldsPUT (string id, DocumentDetail documentDetail = default(DocumentDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        ApiResponse<DocumentDetail> DocumentDocumentsIdFieldsPUTWithHttpInfo (string id, DocumentDetail documentDetail = default(DocumentDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>string</returns>
        string DocumentDocumentsIdFullTextGET (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DocumentDocumentsIdFullTextGETWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Detail with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentsForUser</returns>
        DocumentsForUser DocumentDocumentsIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Detail with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentsForUser</returns>
        ApiResponse<DocumentsForUser> DocumentDocumentsIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        DocumentDetail DocumentDocumentsIdPATCH (string id, DocumentDetail documentDetail = default(DocumentDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        ApiResponse<DocumentDetail> DocumentDocumentsIdPATCHWithHttpInfo (string id, DocumentDetail documentDetail = default(DocumentDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set new assignee OR document status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>DocumentsForUser</returns>
        DocumentsForUser DocumentDocumentsIdPUT (string id, DocumentsForUser documentsForUser = default(DocumentsForUser));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set new assignee OR document status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>ApiResponse of DocumentsForUser</returns>
        ApiResponse<DocumentsForUser> DocumentDocumentsIdPUTWithHttpInfo (string id, DocumentsForUser documentsForUser = default(DocumentsForUser));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentDocumentsIdShowGET (string id, bool? alt = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentDocumentsIdShowGETWithHttpInfo (string id, bool? alt = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>MarkUnmarkForDeleteDocumentsResponse</returns>
        MarkUnmarkForDeleteDocumentsResponse DocumentDocumentsMarkDeletePOST (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>ApiResponse of MarkUnmarkForDeleteDocumentsResponse</returns>
        ApiResponse<MarkUnmarkForDeleteDocumentsResponse> DocumentDocumentsMarkDeletePOSTWithHttpInfo (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>DocumentsForUser</returns>
        DocumentsForUser DocumentDocumentsPOST (DocumentsForUser documentsForUser = default(DocumentsForUser));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>ApiResponse of DocumentsForUser</returns>
        ApiResponse<DocumentsForUser> DocumentDocumentsPOSTWithHttpInfo (DocumentsForUser documentsForUser = default(DocumentsForUser));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>MarkUnmarkForDeleteDocumentsResponse</returns>
        MarkUnmarkForDeleteDocumentsResponse DocumentDocumentsUnmarkDeletePOST (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>ApiResponse of MarkUnmarkForDeleteDocumentsResponse</returns>
        ApiResponse<MarkUnmarkForDeleteDocumentsResponse> DocumentDocumentsUnmarkDeletePOSTWithHttpInfo (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// FieldAnnotationStatus List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;FieldAnnotationStatus&gt;</returns>
        List<FieldAnnotationStatus> DocumentFieldAnnotationStatusesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// FieldAnnotationStatus List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;FieldAnnotationStatus&gt;</returns>
        ApiResponse<List<FieldAnnotationStatus>> DocumentFieldAnnotationStatusesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <returns></returns>
        void DocumentFieldAnnotationStatusesIdDELETE (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentFieldAnnotationStatusesIdDELETEWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>FieldAnnotationStatus</returns>
        FieldAnnotationStatus DocumentFieldAnnotationStatusesIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of FieldAnnotationStatus</returns>
        ApiResponse<FieldAnnotationStatus> DocumentFieldAnnotationStatusesIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <returns>FieldAnnotationStatus</returns>
        FieldAnnotationStatus DocumentFieldAnnotationStatusesIdPATCH (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <returns>ApiResponse of FieldAnnotationStatus</returns>
        ApiResponse<FieldAnnotationStatus> DocumentFieldAnnotationStatusesIdPATCHWithHttpInfo (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <returns>FieldAnnotationStatus</returns>
        FieldAnnotationStatus DocumentFieldAnnotationStatusesIdPUT (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <returns>ApiResponse of FieldAnnotationStatus</returns>
        ApiResponse<FieldAnnotationStatus> DocumentFieldAnnotationStatusesIdPUTWithHttpInfo (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <returns>FieldAnnotationStatus</returns>
        FieldAnnotationStatus DocumentFieldAnnotationStatusesPOST (FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <returns>ApiResponse of FieldAnnotationStatus</returns>
        ApiResponse<FieldAnnotationStatus> DocumentFieldAnnotationStatusesPOSTWithHttpInfo (FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldAnnotation</returns>
        DocumentFieldAnnotation DocumentProjectProjectPkDocumentFieldAnnotationsForUserGET (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldAnnotation</returns>
        ApiResponse<DocumentFieldAnnotation> DocumentProjectProjectPkDocumentFieldAnnotationsForUserGETWithHttpInfo (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation List + Field Annotation False Match List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldAnnotation&gt;</returns>
        List<DocumentFieldAnnotation> DocumentProjectProjectPkDocumentFieldAnnotationsGET (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation List + Field Annotation False Match List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldAnnotation&gt;</returns>
        ApiResponse<List<DocumentFieldAnnotation>> DocumentProjectProjectPkDocumentFieldAnnotationsGETWithHttpInfo (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation Details (not Field Annotation False Match)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldAnnotation</returns>
        DocumentFieldAnnotation DocumentProjectProjectPkDocumentFieldAnnotationsUidGET (string projectPk, string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation Details (not Field Annotation False Match)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldAnnotation</returns>
        ApiResponse<DocumentFieldAnnotation> DocumentProjectProjectPkDocumentFieldAnnotationsUidGETWithHttpInfo (string projectPk, string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldValue&gt;</returns>
        List<DocumentFieldValue> DocumentProjectProjectPkDocumentFieldValuesGET (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldValue&gt;</returns>
        ApiResponse<List<DocumentFieldValue>> DocumentProjectProjectPkDocumentFieldValuesGETWithHttpInfo (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value Details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldValue</returns>
        DocumentFieldValue DocumentProjectProjectPkDocumentFieldValuesIdGET (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value Details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldValue</returns>
        ApiResponse<DocumentFieldValue> DocumentProjectProjectPkDocumentFieldValuesIdGETWithHttpInfo (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <returns>List&lt;AnnotationInDocument&gt;</returns>
        List<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGET (string projectPk, string documentPk);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <returns>ApiResponse of List&lt;AnnotationInDocument&gt;</returns>
        ApiResponse<List<AnnotationInDocument>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGETWithHttpInfo (string projectPk, string documentPk);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE (string projectPk, string documentPk, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEWithHttpInfo (string projectPk, string documentPk, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <returns>AnnotationInDocument</returns>
        AnnotationInDocument DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET (string projectPk, string documentPk, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AnnotationInDocument</returns>
        ApiResponse<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETWithHttpInfo (string projectPk, string documentPk, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <returns>AnnotationInDocument</returns>
        AnnotationInDocument DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <returns>ApiResponse of AnnotationInDocument</returns>
        ApiResponse<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHWithHttpInfo (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <returns>AnnotationInDocument</returns>
        AnnotationInDocument DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <returns>ApiResponse of AnnotationInDocument</returns>
        ApiResponse<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTWithHttpInfo (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <returns>AnnotationInDocument</returns>
        AnnotationInDocument DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOST (string projectPk, string documentPk, AnnotationInDocument annotationInDocument = default(AnnotationInDocument));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <returns>ApiResponse of AnnotationInDocument</returns>
        ApiResponse<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTWithHttpInfo (string projectPk, string documentPk, AnnotationInDocument annotationInDocument = default(AnnotationInDocument));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <returns>DocumentDownloadZipResponse</returns>
        DocumentDownloadZipResponse DocumentProjectProjectPkDocumentsDownloadZipGET (string projectPk, string documentIds = default(string), string excludeDocumentIds = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <returns>ApiResponse of DocumentDownloadZipResponse</returns>
        ApiResponse<DocumentDownloadZipResponse> DocumentProjectProjectPkDocumentsDownloadZipGETWithHttpInfo (string projectPk, string documentIds = default(string), string excludeDocumentIds = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <returns>DocumentsForUserResponse</returns>
        DocumentsForUserResponse DocumentProjectProjectPkDocumentsForUserGET (string projectPk);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <returns>ApiResponse of DocumentsForUserResponse</returns>
        ApiResponse<DocumentsForUserResponse> DocumentProjectProjectPkDocumentsForUserGETWithHttpInfo (string projectPk);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document List with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>List&lt;DocumentsForUser&gt;</returns>
        List<DocumentsForUser> DocumentProjectProjectPkDocumentsGET (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document List with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentsForUser&gt;</returns>
        ApiResponse<List<DocumentsForUser>> DocumentProjectProjectPkDocumentsGETWithHttpInfo (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns></returns>
        void DocumentProjectProjectPkDocumentsIdDELETE (string projectPk, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentProjectProjectPkDocumentsIdDELETEWithHttpInfo (string projectPk, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentDetail</returns>
        DocumentDetail DocumentProjectProjectPkDocumentsIdDataGET (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        ApiResponse<DocumentDetail> DocumentProjectProjectPkDocumentsIdDataGETWithHttpInfo (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>List&lt;DocumentDefinitions&gt;</returns>
        List<DocumentDefinitions> DocumentProjectProjectPkDocumentsIdDefinitionsGET (string projectPk, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of List&lt;DocumentDefinitions&gt;</returns>
        ApiResponse<List<DocumentDefinitions>> DocumentProjectProjectPkDocumentsIdDefinitionsGETWithHttpInfo (string projectPk, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentProjectProjectPkDocumentsIdExtractionGET (string projectPk, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentProjectProjectPkDocumentsIdExtractionGETWithHttpInfo (string projectPk, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentProjectProjectPkDocumentsIdFieldsGET (string projectPk, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentProjectProjectPkDocumentsIdFieldsGETWithHttpInfo (string projectPk, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        DocumentDetail DocumentProjectProjectPkDocumentsIdFieldsPATCH (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        ApiResponse<DocumentDetail> DocumentProjectProjectPkDocumentsIdFieldsPATCHWithHttpInfo (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        DocumentDetail DocumentProjectProjectPkDocumentsIdFieldsPOST (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        ApiResponse<DocumentDetail> DocumentProjectProjectPkDocumentsIdFieldsPOSTWithHttpInfo (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        DocumentDetail DocumentProjectProjectPkDocumentsIdFieldsPUT (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        ApiResponse<DocumentDetail> DocumentProjectProjectPkDocumentsIdFieldsPUTWithHttpInfo (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>string</returns>
        string DocumentProjectProjectPkDocumentsIdFullTextGET (string projectPk, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DocumentProjectProjectPkDocumentsIdFullTextGETWithHttpInfo (string projectPk, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Detail with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentsForUser</returns>
        DocumentsForUser DocumentProjectProjectPkDocumentsIdGET (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Detail with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentsForUser</returns>
        ApiResponse<DocumentsForUser> DocumentProjectProjectPkDocumentsIdGETWithHttpInfo (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        DocumentDetail DocumentProjectProjectPkDocumentsIdPATCH (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        ApiResponse<DocumentDetail> DocumentProjectProjectPkDocumentsIdPATCHWithHttpInfo (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set new assignee OR document status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>DocumentsForUser</returns>
        DocumentsForUser DocumentProjectProjectPkDocumentsIdPUT (string projectPk, string id, DocumentsForUser documentsForUser = default(DocumentsForUser));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set new assignee OR document status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>ApiResponse of DocumentsForUser</returns>
        ApiResponse<DocumentsForUser> DocumentProjectProjectPkDocumentsIdPUTWithHttpInfo (string projectPk, string id, DocumentsForUser documentsForUser = default(DocumentsForUser));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentProjectProjectPkDocumentsIdShowGET (string projectPk, string id, bool? alt = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentProjectProjectPkDocumentsIdShowGETWithHttpInfo (string projectPk, string id, bool? alt = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>MarkUnmarkForDeleteDocumentsResponse</returns>
        MarkUnmarkForDeleteDocumentsResponse DocumentProjectProjectPkDocumentsMarkDeletePOST (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>ApiResponse of MarkUnmarkForDeleteDocumentsResponse</returns>
        ApiResponse<MarkUnmarkForDeleteDocumentsResponse> DocumentProjectProjectPkDocumentsMarkDeletePOSTWithHttpInfo (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>DocumentsForUser</returns>
        DocumentsForUser DocumentProjectProjectPkDocumentsPOST (string projectPk, DocumentsForUser documentsForUser = default(DocumentsForUser));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>ApiResponse of DocumentsForUser</returns>
        ApiResponse<DocumentsForUser> DocumentProjectProjectPkDocumentsPOSTWithHttpInfo (string projectPk, DocumentsForUser documentsForUser = default(DocumentsForUser));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>MarkUnmarkForDeleteDocumentsResponse</returns>
        MarkUnmarkForDeleteDocumentsResponse DocumentProjectProjectPkDocumentsUnmarkDeletePOST (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>ApiResponse of MarkUnmarkForDeleteDocumentsResponse</returns>
        ApiResponse<MarkUnmarkForDeleteDocumentsResponse> DocumentProjectProjectPkDocumentsUnmarkDeletePOSTWithHttpInfo (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> DocumentStatsGET ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> DocumentStatsGETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// TextUnit List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>List&lt;TextUnitDjangoQL&gt;</returns>
        List<TextUnitDjangoQL> DocumentTextunitsGET (string q = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// TextUnit List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>ApiResponse of List&lt;TextUnitDjangoQL&gt;</returns>
        ApiResponse<List<TextUnitDjangoQL>> DocumentTextunitsGETWithHttpInfo (string q = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve TextUnit
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit.</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>TextUnitDjangoQL</returns>
        TextUnitDjangoQL DocumentTextunitsIdGET (string id, string q = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve TextUnit
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit.</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>ApiResponse of TextUnitDjangoQL</returns>
        ApiResponse<TextUnitDjangoQL> DocumentTextunitsIdGETWithHttpInfo (string id, string q = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnotationUpdateResponse</returns>
        System.Threading.Tasks.Task<AnnotationUpdateResponse> DocumentAnnotationsAnnotatePUTAsync (Annotation annotation = default(Annotation), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnotationUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationUpdateResponse>> DocumentAnnotationsAnnotatePUTWithHttpInfoAsync (Annotation annotation = default(Annotation), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create batch of annotations      PUT Params:          - operation_uid: uid          - action: str [\&quot;save\&quot;, \&quot;delete\&quot;]          - id: int - PK of DocumentFieldValue          - data: {\&quot;document\&quot;: id, \&quot;field\&quot;: uid, \&quot;location_start\&quot;: int, \&quot;location_end\&quot;: int, \&quot;value\&quot;: val}
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationBatchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;AnnotationBatchResponse&gt;</returns>
        System.Threading.Tasks.Task<List<AnnotationBatchResponse>> DocumentAnnotationsBatchPUTAsync (List<AnnotationBatchRequest> annotationBatchRequest = default(List<AnnotationBatchRequest>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create batch of annotations      PUT Params:          - operation_uid: uid          - action: str [\&quot;save\&quot;, \&quot;delete\&quot;]          - id: int - PK of DocumentFieldValue          - data: {\&quot;document\&quot;: id, \&quot;field\&quot;: uid, \&quot;location_start\&quot;: int, \&quot;location_end\&quot;: int, \&quot;value\&quot;: val}
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationBatchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;AnnotationBatchResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AnnotationBatchResponse>>> DocumentAnnotationsBatchPUTWithHttpInfoAsync (List<AnnotationBatchRequest> annotationBatchRequest = default(List<AnnotationBatchRequest>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Annotation (Document Field Value) List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Annotation&gt;</returns>
        System.Threading.Tasks.Task<List<Annotation>> DocumentAnnotationsGETAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Annotation (Document Field Value) List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Annotation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Annotation>>> DocumentAnnotationsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentAnnotationsIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentAnnotationsIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Annotation</returns>
        System.Threading.Tasks.Task<Annotation> DocumentAnnotationsIdGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Annotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Annotation>> DocumentAnnotationsIdGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="annotation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Annotation</returns>
        System.Threading.Tasks.Task<Annotation> DocumentAnnotationsIdPUTAsync (string id, Annotation annotation = default(Annotation), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="annotation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Annotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Annotation>> DocumentAnnotationsIdPUTWithHttpInfoAsync (string id, Annotation annotation = default(Annotation), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Annotation</returns>
        System.Threading.Tasks.Task<Annotation> DocumentAnnotationsPOSTAsync (Annotation annotation = default(Annotation), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Annotation (Document Field Value)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Annotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Annotation>> DocumentAnnotationsPOSTWithHttpInfoAsync (Annotation annotation = default(Annotation), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Suggest field value before creating an annotation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationSuggestRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Annotation</returns>
        System.Threading.Tasks.Task<Annotation> DocumentAnnotationsSuggestPOSTAsync (AnnotationSuggestRequest annotationSuggestRequest = default(AnnotationSuggestRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Suggest field value before creating an annotation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationSuggestRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Annotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Annotation>> DocumentAnnotationsSuggestPOSTWithHttpInfoAsync (AnnotationSuggestRequest annotationSuggestRequest = default(AnnotationSuggestRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldAnnotation</returns>
        System.Threading.Tasks.Task<DocumentFieldAnnotation> DocumentDocumentFieldAnnotationsForUserGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldAnnotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldAnnotation>> DocumentDocumentFieldAnnotationsForUserGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation List + Field Annotation False Match List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldAnnotation&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentFieldAnnotation>> DocumentDocumentFieldAnnotationsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation List + Field Annotation False Match List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldAnnotation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldAnnotation>>> DocumentDocumentFieldAnnotationsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation Details (not Field Annotation False Match)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldAnnotation</returns>
        System.Threading.Tasks.Task<DocumentFieldAnnotation> DocumentDocumentFieldAnnotationsUidGETAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation Details (not Field Annotation False Match)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldAnnotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldAnnotation>> DocumentDocumentFieldAnnotationsUidGETWithHttpInfoAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldCategoriesFormFieldsGETAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldCategoriesFormFieldsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DocumentFieldCategory List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldCategoryList&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentFieldCategoryList>> DocumentDocumentFieldCategoriesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DocumentFieldCategory List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldCategoryList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldCategoryList>>> DocumentDocumentFieldCategoriesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete DocumentFieldCategory
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentDocumentFieldCategoriesIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete DocumentFieldCategory
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentDocumentFieldCategoriesIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldCategoriesIdFormFieldsGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldCategoriesIdFormFieldsGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve DocumentFieldCategory
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldCategoryList</returns>
        System.Threading.Tasks.Task<DocumentFieldCategoryList> DocumentDocumentFieldCategoriesIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve DocumentFieldCategory
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldCategoryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldCategoryList>> DocumentDocumentFieldCategoriesIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update DocumentFieldCategory
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldCategoryCreate</returns>
        System.Threading.Tasks.Task<DocumentFieldCategoryCreate> DocumentDocumentFieldCategoriesIdPATCHAsync (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update DocumentFieldCategory
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldCategoryCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldCategoryCreate>> DocumentDocumentFieldCategoriesIdPATCHWithHttpInfoAsync (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Type     Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldCategoryCreate</returns>
        System.Threading.Tasks.Task<DocumentFieldCategoryCreate> DocumentDocumentFieldCategoriesIdPUTAsync (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Type     Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldCategoryCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldCategoryCreate>> DocumentDocumentFieldCategoriesIdPUTWithHttpInfoAsync (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create DocumentFieldCategory      Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldCategoryCreate</returns>
        System.Threading.Tasks.Task<DocumentFieldCategoryCreate> DocumentDocumentFieldCategoriesPOSTAsync (DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create DocumentFieldCategory      Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldCategoryCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldCategoryCreate>> DocumentDocumentFieldCategoriesPOSTWithHttpInfoAsync (DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldDetectorsFormFieldsGETAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldDetectorsFormFieldsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldDetectorDetail&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentFieldDetectorDetail>> DocumentDocumentFieldDetectorsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldDetectorDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldDetectorDetail>>> DocumentDocumentFieldDetectorsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldDetectorCreate</returns>
        System.Threading.Tasks.Task<DocumentFieldDetectorCreate> DocumentDocumentFieldDetectorsPOSTAsync (DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldDetectorCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldDetectorCreate>> DocumentDocumentFieldDetectorsPOSTWithHttpInfoAsync (DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentDocumentFieldDetectorsUidDELETEAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentDocumentFieldDetectorsUidDELETEWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldDetectorsUidFormFieldsGETAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldDetectorsUidFormFieldsGETWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldDetectorDetail</returns>
        System.Threading.Tasks.Task<DocumentFieldDetectorDetail> DocumentDocumentFieldDetectorsUidGETAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldDetectorDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldDetectorDetail>> DocumentDocumentFieldDetectorsUidGETWithHttpInfoAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldDetectorCreate</returns>
        System.Threading.Tasks.Task<DocumentFieldDetectorCreate> DocumentDocumentFieldDetectorsUidPATCHAsync (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldDetectorCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldDetectorCreate>> DocumentDocumentFieldDetectorsUidPATCHWithHttpInfoAsync (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldDetectorCreate</returns>
        System.Threading.Tasks.Task<DocumentFieldDetectorCreate> DocumentDocumentFieldDetectorsUidPUTAsync (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldDetectorCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldDetectorCreate>> DocumentDocumentFieldDetectorsUidPUTWithHttpInfoAsync (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldValue&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentFieldValue>> DocumentDocumentFieldValuesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldValue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldValue>>> DocumentDocumentFieldValuesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value Details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldValue</returns>
        System.Threading.Tasks.Task<DocumentFieldValue> DocumentDocumentFieldValuesIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value Details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldValue)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldValue>> DocumentDocumentFieldValuesIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldsFormFieldsGETAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldsFormFieldsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldList&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentFieldList>> DocumentDocumentFieldsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldList>>> DocumentDocumentFieldsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeUid">Filter by document type uid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldStatsResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentFieldStatsResponse>> DocumentDocumentFieldsStatsGETAsync (string documentTypeUid = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeUid">Filter by document type uid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldStatsResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldStatsResponse>>> DocumentDocumentFieldsStatsGETWithHttpInfoAsync (string documentTypeUid = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check formula for EXISTING Document Field Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="checkDocumentFieldFormulaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldsUidCheckFormulaPOSTAsync (string uid, CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest = default(CheckDocumentFieldFormulaRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check formula for EXISTING Document Field Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="checkDocumentFieldFormulaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldsUidCheckFormulaPOSTWithHttpInfoAsync (string uid, CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest = default(CheckDocumentFieldFormulaRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clone existing DocumentField and its depends_on_fields and detectors
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="cloneDocumentFieldRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldDetail</returns>
        System.Threading.Tasks.Task<DocumentFieldDetail> DocumentDocumentFieldsUidClonePOSTAsync (string uid, CloneDocumentFieldRequest cloneDocumentFieldRequest = default(CloneDocumentFieldRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clone existing DocumentField and its depends_on_fields and detectors
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="cloneDocumentFieldRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldDetail>> DocumentDocumentFieldsUidClonePOSTWithHttpInfoAsync (string uid, CloneDocumentFieldRequest cloneDocumentFieldRequest = default(CloneDocumentFieldRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentDocumentFieldsUidDELETEAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentDocumentFieldsUidDELETEWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldsUidFormFieldsGETAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldsUidFormFieldsGETWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldDetail</returns>
        System.Threading.Tasks.Task<DocumentFieldDetail> DocumentDocumentFieldsUidGETAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldDetail>> DocumentDocumentFieldsUidGETWithHttpInfoAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldCreate</returns>
        System.Threading.Tasks.Task<DocumentFieldCreate> DocumentDocumentFieldsUidPATCHAsync (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldCreate>> DocumentDocumentFieldsUidPATCHWithHttpInfoAsync (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldCreate</returns>
        System.Threading.Tasks.Task<DocumentFieldCreate> DocumentDocumentFieldsUidPUTAsync (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Field
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldCreate>> DocumentDocumentFieldsUidPUTWithHttpInfoAsync (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get info about related objects for ready-to-delete document type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldsUidPreDeletePOSTAsync (string uid, DocumentFieldDetail documentFieldDetail = default(DocumentFieldDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get info about related objects for ready-to-delete document type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldsUidPreDeletePOSTWithHttpInfoAsync (string uid, DocumentFieldDetail documentFieldDetail = default(DocumentFieldDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Note List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="projectId">Filter by project id (optional)</param>
        /// <param name="documentId">Filter by document id (optional)</param>
        /// <param name="force">For deleted documents as well (optional)</param>
        /// <param name="exportTo">Export data (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentNoteDetail&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentNoteDetail>> DocumentDocumentNotesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), string projectId = default(string), string documentId = default(string), bool? force = default(bool?), bool? exportTo = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Note List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="projectId">Filter by project id (optional)</param>
        /// <param name="documentId">Filter by document id (optional)</param>
        /// <param name="force">For deleted documents as well (optional)</param>
        /// <param name="exportTo">Export data (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentNoteDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentNoteDetail>>> DocumentDocumentNotesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), string projectId = default(string), string documentId = default(string), bool? force = default(bool?), bool? exportTo = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentDocumentNotesIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentDocumentNotesIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentNoteDetail</returns>
        System.Threading.Tasks.Task<DocumentNoteDetail> DocumentDocumentNotesIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentNoteDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentNoteDetail>> DocumentDocumentNotesIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentNoteDetail</returns>
        System.Threading.Tasks.Task<DocumentNoteDetail> DocumentDocumentNotesIdPATCHAsync (string id, DocumentNoteDetail documentNoteDetail = default(DocumentNoteDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentNoteDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentNoteDetail>> DocumentDocumentNotesIdPATCHWithHttpInfoAsync (string id, DocumentNoteDetail documentNoteDetail = default(DocumentNoteDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentNoteUpdate</returns>
        System.Threading.Tasks.Task<DocumentNoteUpdate> DocumentDocumentNotesIdPUTAsync (string id, DocumentNoteUpdate documentNoteUpdate = default(DocumentNoteUpdate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentNoteUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentNoteUpdate>> DocumentDocumentNotesIdPUTWithHttpInfoAsync (string id, DocumentNoteUpdate documentNoteUpdate = default(DocumentNoteUpdate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNoteCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentNoteCreate</returns>
        System.Threading.Tasks.Task<DocumentNoteCreate> DocumentDocumentNotesPOSTAsync (DocumentNoteCreate documentNoteCreate = default(DocumentNoteCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document Note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNoteCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentNoteCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentNoteCreate>> DocumentDocumentNotesPOSTWithHttpInfoAsync (DocumentNoteCreate documentNoteCreate = default(DocumentNoteCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentTypesFormFieldsGETAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentTypesFormFieldsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Type List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentTypeDetail&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeDetail>> DocumentDocumentTypesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Type List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeDetail>>> DocumentDocumentTypesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeImportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeImportResponse</returns>
        System.Threading.Tasks.Task<DocumentTypeImportResponse> DocumentDocumentTypesImportDocTypePUTAsync (DocumentTypeImportRequest documentTypeImportRequest = default(DocumentTypeImportRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeImportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeImportResponse>> DocumentDocumentTypesImportDocTypePUTWithHttpInfoAsync (DocumentTypeImportRequest documentTypeImportRequest = default(DocumentTypeImportRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document Type      Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeCreate</returns>
        System.Threading.Tasks.Task<DocumentTypeCreate> DocumentDocumentTypesPOSTAsync (DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Document Type      Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeCreate>> DocumentDocumentTypesPOSTWithHttpInfoAsync (DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentTypeStats&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeStats>> DocumentDocumentTypesStatsGETAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeStats&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeStats>>> DocumentDocumentTypesStatsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clone existing Document Type and its fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="cloneDocumentTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeDetail</returns>
        System.Threading.Tasks.Task<DocumentTypeDetail> DocumentDocumentTypesUidClonePOSTAsync (string uid, CloneDocumentTypeRequest cloneDocumentTypeRequest = default(CloneDocumentTypeRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clone existing Document Type and its fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="cloneDocumentTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeDetail>> DocumentDocumentTypesUidClonePOSTWithHttpInfoAsync (string uid, CloneDocumentTypeRequest cloneDocumentTypeRequest = default(CloneDocumentTypeRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentDocumentTypesUidDELETEAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Document Type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentDocumentTypesUidDELETEWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="targetVersion">Version number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentDocumentTypesUidExportDocTypeGETAsync (string uid, string targetVersion = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="targetVersion">Version number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentDocumentTypesUidExportDocTypeGETWithHttpInfoAsync (string uid, string targetVersion = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentTypesUidFormFieldsGETAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentTypesUidFormFieldsGETWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeDetail</returns>
        System.Threading.Tasks.Task<DocumentTypeDetail> DocumentDocumentTypesUidGETAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Document Type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeDetail>> DocumentDocumentTypesUidGETWithHttpInfoAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeCreate</returns>
        System.Threading.Tasks.Task<DocumentTypeCreate> DocumentDocumentTypesUidPATCHAsync (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial Update Document Type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeCreate>> DocumentDocumentTypesUidPATCHWithHttpInfoAsync (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Type     Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeCreate</returns>
        System.Threading.Tasks.Task<DocumentTypeCreate> DocumentDocumentTypesUidPUTAsync (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Document Type     Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeCreate)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeCreate>> DocumentDocumentTypesUidPUTWithHttpInfoAsync (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get info about related objects for ready-to-delete document type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentTypesUidPreDeletePOSTAsync (string uid, DocumentTypeDetail documentTypeDetail = default(DocumentTypeDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get info about related objects for ready-to-delete document type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentTypesUidPreDeletePOSTWithHttpInfoAsync (string uid, DocumentTypeDetail documentTypeDetail = default(DocumentTypeDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeDetail</returns>
        System.Threading.Tasks.Task<DocumentTypeDetail> DocumentDocumentTypesUserProjectTypesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeDetail>> DocumentDocumentTypesUserProjectTypesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDownloadZipResponse</returns>
        System.Threading.Tasks.Task<DocumentDownloadZipResponse> DocumentDocumentsDownloadZipGETAsync (string documentIds = default(string), string excludeDocumentIds = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDownloadZipResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDownloadZipResponse>> DocumentDocumentsDownloadZipGETWithHttpInfoAsync (string documentIds = default(string), string excludeDocumentIds = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUserResponse</returns>
        System.Threading.Tasks.Task<DocumentsForUserResponse> DocumentDocumentsForUserGETAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentsForUserResponse>> DocumentDocumentsForUserGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document List with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentsForUser&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentsForUser>> DocumentDocumentsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document List with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentsForUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentsForUser>>> DocumentDocumentsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentDocumentsIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentDocumentsIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        System.Threading.Tasks.Task<DocumentDetail> DocumentDocumentsIdDataGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentDocumentsIdDataGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentDefinitions&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentDefinitions>> DocumentDocumentsIdDefinitionsGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentDefinitions&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentDefinitions>>> DocumentDocumentsIdDefinitionsGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentsIdExtractionGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentsIdExtractionGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentsIdFieldsGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentsIdFieldsGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        System.Threading.Tasks.Task<DocumentDetail> DocumentDocumentsIdFieldsPATCHAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentDocumentsIdFieldsPATCHWithHttpInfoAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        System.Threading.Tasks.Task<DocumentDetail> DocumentDocumentsIdFieldsPOSTAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentDocumentsIdFieldsPOSTWithHttpInfoAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        System.Threading.Tasks.Task<DocumentDetail> DocumentDocumentsIdFieldsPUTAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentDocumentsIdFieldsPUTWithHttpInfoAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DocumentDocumentsIdFullTextGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DocumentDocumentsIdFullTextGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Detail with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUser</returns>
        System.Threading.Tasks.Task<DocumentsForUser> DocumentDocumentsIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Detail with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentsForUser>> DocumentDocumentsIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        System.Threading.Tasks.Task<DocumentDetail> DocumentDocumentsIdPATCHAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentDocumentsIdPATCHWithHttpInfoAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set new assignee OR document status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUser</returns>
        System.Threading.Tasks.Task<DocumentsForUser> DocumentDocumentsIdPUTAsync (string id, DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set new assignee OR document status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentsForUser>> DocumentDocumentsIdPUTWithHttpInfoAsync (string id, DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentDocumentsIdShowGETAsync (string id, bool? alt = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentDocumentsIdShowGETWithHttpInfoAsync (string id, bool? alt = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkUnmarkForDeleteDocumentsResponse</returns>
        System.Threading.Tasks.Task<MarkUnmarkForDeleteDocumentsResponse> DocumentDocumentsMarkDeletePOSTAsync (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkUnmarkForDeleteDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkUnmarkForDeleteDocumentsResponse>> DocumentDocumentsMarkDeletePOSTWithHttpInfoAsync (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUser</returns>
        System.Threading.Tasks.Task<DocumentsForUser> DocumentDocumentsPOSTAsync (DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentsForUser>> DocumentDocumentsPOSTWithHttpInfoAsync (DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkUnmarkForDeleteDocumentsResponse</returns>
        System.Threading.Tasks.Task<MarkUnmarkForDeleteDocumentsResponse> DocumentDocumentsUnmarkDeletePOSTAsync (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkUnmarkForDeleteDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkUnmarkForDeleteDocumentsResponse>> DocumentDocumentsUnmarkDeletePOSTWithHttpInfoAsync (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// FieldAnnotationStatus List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;FieldAnnotationStatus&gt;</returns>
        System.Threading.Tasks.Task<List<FieldAnnotationStatus>> DocumentFieldAnnotationStatusesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// FieldAnnotationStatus List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;FieldAnnotationStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FieldAnnotationStatus>>> DocumentFieldAnnotationStatusesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentFieldAnnotationStatusesIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentFieldAnnotationStatusesIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FieldAnnotationStatus</returns>
        System.Threading.Tasks.Task<FieldAnnotationStatus> DocumentFieldAnnotationStatusesIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FieldAnnotationStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldAnnotationStatus>> DocumentFieldAnnotationStatusesIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FieldAnnotationStatus</returns>
        System.Threading.Tasks.Task<FieldAnnotationStatus> DocumentFieldAnnotationStatusesIdPATCHAsync (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FieldAnnotationStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldAnnotationStatus>> DocumentFieldAnnotationStatusesIdPATCHWithHttpInfoAsync (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FieldAnnotationStatus</returns>
        System.Threading.Tasks.Task<FieldAnnotationStatus> DocumentFieldAnnotationStatusesIdPUTAsync (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FieldAnnotationStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldAnnotationStatus>> DocumentFieldAnnotationStatusesIdPUTWithHttpInfoAsync (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FieldAnnotationStatus</returns>
        System.Threading.Tasks.Task<FieldAnnotationStatus> DocumentFieldAnnotationStatusesPOSTAsync (FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create FieldAnnotationStatus
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FieldAnnotationStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldAnnotationStatus>> DocumentFieldAnnotationStatusesPOSTWithHttpInfoAsync (FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldAnnotation</returns>
        System.Threading.Tasks.Task<DocumentFieldAnnotation> DocumentProjectProjectPkDocumentFieldAnnotationsForUserGETAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldAnnotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldAnnotation>> DocumentProjectProjectPkDocumentFieldAnnotationsForUserGETWithHttpInfoAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation List + Field Annotation False Match List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldAnnotation&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentFieldAnnotation>> DocumentProjectProjectPkDocumentFieldAnnotationsGETAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation List + Field Annotation False Match List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldAnnotation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldAnnotation>>> DocumentProjectProjectPkDocumentFieldAnnotationsGETWithHttpInfoAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation Details (not Field Annotation False Match)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldAnnotation</returns>
        System.Threading.Tasks.Task<DocumentFieldAnnotation> DocumentProjectProjectPkDocumentFieldAnnotationsUidGETAsync (string projectPk, string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Field Annotation Details (not Field Annotation False Match)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldAnnotation)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldAnnotation>> DocumentProjectProjectPkDocumentFieldAnnotationsUidGETWithHttpInfoAsync (string projectPk, string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldValue&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentFieldValue>> DocumentProjectProjectPkDocumentFieldValuesGETAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldValue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldValue>>> DocumentProjectProjectPkDocumentFieldValuesGETWithHttpInfoAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value Details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldValue</returns>
        System.Threading.Tasks.Task<DocumentFieldValue> DocumentProjectProjectPkDocumentFieldValuesIdGETAsync (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Field Value Details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldValue)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentFieldValue>> DocumentProjectProjectPkDocumentFieldValuesIdGETWithHttpInfoAsync (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;AnnotationInDocument&gt;</returns>
        System.Threading.Tasks.Task<List<AnnotationInDocument>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGETAsync (string projectPk, string documentPk, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;AnnotationInDocument&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AnnotationInDocument>>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGETWithHttpInfoAsync (string projectPk, string documentPk, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEAsync (string projectPk, string documentPk, string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEWithHttpInfoAsync (string projectPk, string documentPk, string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnotationInDocument</returns>
        System.Threading.Tasks.Task<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETAsync (string projectPk, string documentPk, string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnotationInDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationInDocument>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETWithHttpInfoAsync (string projectPk, string documentPk, string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnotationInDocument</returns>
        System.Threading.Tasks.Task<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHAsync (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnotationInDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationInDocument>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHWithHttpInfoAsync (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnotationInDocument</returns>
        System.Threading.Tasks.Task<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTAsync (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnotationInDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationInDocument>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTWithHttpInfoAsync (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnotationInDocument</returns>
        System.Threading.Tasks.Task<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTAsync (string projectPk, string documentPk, AnnotationInDocument annotationInDocument = default(AnnotationInDocument), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnotationInDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotationInDocument>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTWithHttpInfoAsync (string projectPk, string documentPk, AnnotationInDocument annotationInDocument = default(AnnotationInDocument), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDownloadZipResponse</returns>
        System.Threading.Tasks.Task<DocumentDownloadZipResponse> DocumentProjectProjectPkDocumentsDownloadZipGETAsync (string projectPk, string documentIds = default(string), string excludeDocumentIds = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDownloadZipResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDownloadZipResponse>> DocumentProjectProjectPkDocumentsDownloadZipGETWithHttpInfoAsync (string projectPk, string documentIds = default(string), string excludeDocumentIds = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUserResponse</returns>
        System.Threading.Tasks.Task<DocumentsForUserResponse> DocumentProjectProjectPkDocumentsForUserGETAsync (string projectPk, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentsForUserResponse>> DocumentProjectProjectPkDocumentsForUserGETWithHttpInfoAsync (string projectPk, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document List with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentsForUser&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentsForUser>> DocumentProjectProjectPkDocumentsGETAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document List with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentsForUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentsForUser>>> DocumentProjectProjectPkDocumentsGETWithHttpInfoAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentProjectProjectPkDocumentsIdDELETEAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentProjectProjectPkDocumentsIdDELETEWithHttpInfoAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        System.Threading.Tasks.Task<DocumentDetail> DocumentProjectProjectPkDocumentsIdDataGETAsync (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentProjectProjectPkDocumentsIdDataGETWithHttpInfoAsync (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentDefinitions&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentDefinitions>> DocumentProjectProjectPkDocumentsIdDefinitionsGETAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentDefinitions&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentDefinitions>>> DocumentProjectProjectPkDocumentsIdDefinitionsGETWithHttpInfoAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentProjectProjectPkDocumentsIdExtractionGETAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentProjectProjectPkDocumentsIdExtractionGETWithHttpInfoAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentProjectProjectPkDocumentsIdFieldsGETAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentProjectProjectPkDocumentsIdFieldsGETWithHttpInfoAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        System.Threading.Tasks.Task<DocumentDetail> DocumentProjectProjectPkDocumentsIdFieldsPATCHAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentProjectProjectPkDocumentsIdFieldsPATCHWithHttpInfoAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        System.Threading.Tasks.Task<DocumentDetail> DocumentProjectProjectPkDocumentsIdFieldsPOSTAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentProjectProjectPkDocumentsIdFieldsPOSTWithHttpInfoAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        System.Threading.Tasks.Task<DocumentDetail> DocumentProjectProjectPkDocumentsIdFieldsPUTAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentProjectProjectPkDocumentsIdFieldsPUTWithHttpInfoAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DocumentProjectProjectPkDocumentsIdFullTextGETAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DocumentProjectProjectPkDocumentsIdFullTextGETWithHttpInfoAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Detail with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUser</returns>
        System.Threading.Tasks.Task<DocumentsForUser> DocumentProjectProjectPkDocumentsIdGETAsync (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Document Detail with Fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentsForUser>> DocumentProjectProjectPkDocumentsIdGETWithHttpInfoAsync (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        System.Threading.Tasks.Task<DocumentDetail> DocumentProjectProjectPkDocumentsIdPATCHAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentProjectProjectPkDocumentsIdPATCHWithHttpInfoAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set new assignee OR document status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUser</returns>
        System.Threading.Tasks.Task<DocumentsForUser> DocumentProjectProjectPkDocumentsIdPUTAsync (string projectPk, string id, DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set new assignee OR document status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentsForUser>> DocumentProjectProjectPkDocumentsIdPUTWithHttpInfoAsync (string projectPk, string id, DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentProjectProjectPkDocumentsIdShowGETAsync (string projectPk, string id, bool? alt = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentProjectProjectPkDocumentsIdShowGETWithHttpInfoAsync (string projectPk, string id, bool? alt = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkUnmarkForDeleteDocumentsResponse</returns>
        System.Threading.Tasks.Task<MarkUnmarkForDeleteDocumentsResponse> DocumentProjectProjectPkDocumentsMarkDeletePOSTAsync (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkUnmarkForDeleteDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkUnmarkForDeleteDocumentsResponse>> DocumentProjectProjectPkDocumentsMarkDeletePOSTWithHttpInfoAsync (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUser</returns>
        System.Threading.Tasks.Task<DocumentsForUser> DocumentProjectProjectPkDocumentsPOSTAsync (string projectPk, DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentsForUser>> DocumentProjectProjectPkDocumentsPOSTWithHttpInfoAsync (string projectPk, DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkUnmarkForDeleteDocumentsResponse</returns>
        System.Threading.Tasks.Task<MarkUnmarkForDeleteDocumentsResponse> DocumentProjectProjectPkDocumentsUnmarkDeletePOSTAsync (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkUnmarkForDeleteDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarkUnmarkForDeleteDocumentsResponse>> DocumentProjectProjectPkDocumentsUnmarkDeletePOSTWithHttpInfoAsync (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentStatsGETAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentStatsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// TextUnit List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TextUnitDjangoQL&gt;</returns>
        System.Threading.Tasks.Task<List<TextUnitDjangoQL>> DocumentTextunitsGETAsync (string q = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// TextUnit List
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TextUnitDjangoQL&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TextUnitDjangoQL>>> DocumentTextunitsGETWithHttpInfoAsync (string q = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve TextUnit
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit.</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TextUnitDjangoQL</returns>
        System.Threading.Tasks.Task<TextUnitDjangoQL> DocumentTextunitsIdGETAsync (string id, string q = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve TextUnit
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit.</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TextUnitDjangoQL)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextUnitDjangoQL>> DocumentTextunitsIdGETWithHttpInfoAsync (string id, string q = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentApi : IDocumentApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class
        /// </summary>
        /// <returns></returns>
        public DocumentApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <returns>AnnotationUpdateResponse</returns>
        public AnnotationUpdateResponse DocumentAnnotationsAnnotatePUT (Annotation annotation = default(Annotation))
        {
             ApiResponse<AnnotationUpdateResponse> localVarResponse = DocumentAnnotationsAnnotatePUTWithHttpInfo(annotation);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <returns>ApiResponse of AnnotationUpdateResponse</returns>
        public ApiResponse<AnnotationUpdateResponse> DocumentAnnotationsAnnotatePUTWithHttpInfo (Annotation annotation = default(Annotation))
        {

            var localVarPath = "/api/v1/document/annotations/annotate/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsAnnotatePUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotationUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotationUpdateResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnotationUpdateResponse</returns>
        public async System.Threading.Tasks.Task<AnnotationUpdateResponse> DocumentAnnotationsAnnotatePUTAsync (Annotation annotation = default(Annotation), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AnnotationUpdateResponse> localVarResponse = await DocumentAnnotationsAnnotatePUTWithHttpInfoAsync(annotation, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnotationUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnotationUpdateResponse>> DocumentAnnotationsAnnotatePUTWithHttpInfoAsync (Annotation annotation = default(Annotation), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/annotations/annotate/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsAnnotatePUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotationUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotationUpdateResponse)));
        }

        /// <summary>
        ///  Create batch of annotations      PUT Params:          - operation_uid: uid          - action: str [\&quot;save\&quot;, \&quot;delete\&quot;]          - id: int - PK of DocumentFieldValue          - data: {\&quot;document\&quot;: id, \&quot;field\&quot;: uid, \&quot;location_start\&quot;: int, \&quot;location_end\&quot;: int, \&quot;value\&quot;: val}
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationBatchRequest"> (optional)</param>
        /// <returns>List&lt;AnnotationBatchResponse&gt;</returns>
        public List<AnnotationBatchResponse> DocumentAnnotationsBatchPUT (List<AnnotationBatchRequest> annotationBatchRequest = default(List<AnnotationBatchRequest>))
        {
             ApiResponse<List<AnnotationBatchResponse>> localVarResponse = DocumentAnnotationsBatchPUTWithHttpInfo(annotationBatchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create batch of annotations      PUT Params:          - operation_uid: uid          - action: str [\&quot;save\&quot;, \&quot;delete\&quot;]          - id: int - PK of DocumentFieldValue          - data: {\&quot;document\&quot;: id, \&quot;field\&quot;: uid, \&quot;location_start\&quot;: int, \&quot;location_end\&quot;: int, \&quot;value\&quot;: val}
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationBatchRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AnnotationBatchResponse&gt;</returns>
        public ApiResponse<List<AnnotationBatchResponse>> DocumentAnnotationsBatchPUTWithHttpInfo (List<AnnotationBatchRequest> annotationBatchRequest = default(List<AnnotationBatchRequest>))
        {

            var localVarPath = "/api/v1/document/annotations/batch/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationBatchRequest != null && annotationBatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotationBatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotationBatchRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsBatchPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnnotationBatchResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AnnotationBatchResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnnotationBatchResponse>)));
        }

        /// <summary>
        ///  Create batch of annotations      PUT Params:          - operation_uid: uid          - action: str [\&quot;save\&quot;, \&quot;delete\&quot;]          - id: int - PK of DocumentFieldValue          - data: {\&quot;document\&quot;: id, \&quot;field\&quot;: uid, \&quot;location_start\&quot;: int, \&quot;location_end\&quot;: int, \&quot;value\&quot;: val}
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationBatchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;AnnotationBatchResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<AnnotationBatchResponse>> DocumentAnnotationsBatchPUTAsync (List<AnnotationBatchRequest> annotationBatchRequest = default(List<AnnotationBatchRequest>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<AnnotationBatchResponse>> localVarResponse = await DocumentAnnotationsBatchPUTWithHttpInfoAsync(annotationBatchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create batch of annotations      PUT Params:          - operation_uid: uid          - action: str [\&quot;save\&quot;, \&quot;delete\&quot;]          - id: int - PK of DocumentFieldValue          - data: {\&quot;document\&quot;: id, \&quot;field\&quot;: uid, \&quot;location_start\&quot;: int, \&quot;location_end\&quot;: int, \&quot;value\&quot;: val}
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationBatchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;AnnotationBatchResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AnnotationBatchResponse>>> DocumentAnnotationsBatchPUTWithHttpInfoAsync (List<AnnotationBatchRequest> annotationBatchRequest = default(List<AnnotationBatchRequest>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/annotations/batch/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationBatchRequest != null && annotationBatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotationBatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotationBatchRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsBatchPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnnotationBatchResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AnnotationBatchResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnnotationBatchResponse>)));
        }

        /// <summary>
        ///  Annotation (Document Field Value) List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Annotation&gt;</returns>
        public List<Annotation> DocumentAnnotationsGET ()
        {
             ApiResponse<List<Annotation>> localVarResponse = DocumentAnnotationsGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Annotation (Document Field Value) List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Annotation&gt;</returns>
        public ApiResponse<List<Annotation>> DocumentAnnotationsGETWithHttpInfo ()
        {

            var localVarPath = "/api/v1/document/annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Annotation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Annotation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Annotation>)));
        }

        /// <summary>
        ///  Annotation (Document Field Value) List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Annotation&gt;</returns>
        public async System.Threading.Tasks.Task<List<Annotation>> DocumentAnnotationsGETAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Annotation>> localVarResponse = await DocumentAnnotationsGETWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Annotation (Document Field Value) List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Annotation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Annotation>>> DocumentAnnotationsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Annotation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Annotation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Annotation>)));
        }

        /// <summary>
        ///  Delete Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <returns></returns>
        public void DocumentAnnotationsIdDELETE (string id)
        {
             DocumentAnnotationsIdDELETEWithHttpInfo(id);
        }

        /// <summary>
        ///  Delete Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentAnnotationsIdDELETEWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentAnnotationsIdDELETE");

            var localVarPath = "/api/v1/document/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentAnnotationsIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DocumentAnnotationsIdDELETEWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        ///  Delete Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentAnnotationsIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentAnnotationsIdDELETE");

            var localVarPath = "/api/v1/document/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Retrieve Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <returns>Annotation</returns>
        public Annotation DocumentAnnotationsIdGET (string id)
        {
             ApiResponse<Annotation> localVarResponse = DocumentAnnotationsIdGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <returns>ApiResponse of Annotation</returns>
        public ApiResponse<Annotation> DocumentAnnotationsIdGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentAnnotationsIdGET");

            var localVarPath = "/api/v1/document/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Annotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Annotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Annotation)));
        }

        /// <summary>
        ///  Retrieve Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Annotation</returns>
        public async System.Threading.Tasks.Task<Annotation> DocumentAnnotationsIdGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Annotation> localVarResponse = await DocumentAnnotationsIdGETWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Annotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Annotation>> DocumentAnnotationsIdGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentAnnotationsIdGET");

            var localVarPath = "/api/v1/document/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Annotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Annotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Annotation)));
        }

        /// <summary>
        ///  Update Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="annotation"> (optional)</param>
        /// <returns>Annotation</returns>
        public Annotation DocumentAnnotationsIdPUT (string id, Annotation annotation = default(Annotation))
        {
             ApiResponse<Annotation> localVarResponse = DocumentAnnotationsIdPUTWithHttpInfo(id, annotation);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="annotation"> (optional)</param>
        /// <returns>ApiResponse of Annotation</returns>
        public ApiResponse<Annotation> DocumentAnnotationsIdPUTWithHttpInfo (string id, Annotation annotation = default(Annotation))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentAnnotationsIdPUT");

            var localVarPath = "/api/v1/document/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Annotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Annotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Annotation)));
        }

        /// <summary>
        ///  Update Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="annotation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Annotation</returns>
        public async System.Threading.Tasks.Task<Annotation> DocumentAnnotationsIdPUTAsync (string id, Annotation annotation = default(Annotation), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Annotation> localVarResponse = await DocumentAnnotationsIdPUTWithHttpInfoAsync(id, annotation, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation.</param>
        /// <param name="annotation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Annotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Annotation>> DocumentAnnotationsIdPUTWithHttpInfoAsync (string id, Annotation annotation = default(Annotation), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentAnnotationsIdPUT");

            var localVarPath = "/api/v1/document/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Annotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Annotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Annotation)));
        }

        /// <summary>
        ///  Create Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <returns>Annotation</returns>
        public Annotation DocumentAnnotationsPOST (Annotation annotation = default(Annotation))
        {
             ApiResponse<Annotation> localVarResponse = DocumentAnnotationsPOSTWithHttpInfo(annotation);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <returns>ApiResponse of Annotation</returns>
        public ApiResponse<Annotation> DocumentAnnotationsPOSTWithHttpInfo (Annotation annotation = default(Annotation))
        {

            var localVarPath = "/api/v1/document/annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Annotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Annotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Annotation)));
        }

        /// <summary>
        ///  Create Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Annotation</returns>
        public async System.Threading.Tasks.Task<Annotation> DocumentAnnotationsPOSTAsync (Annotation annotation = default(Annotation), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Annotation> localVarResponse = await DocumentAnnotationsPOSTWithHttpInfoAsync(annotation, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create Annotation (Document Field Value)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Annotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Annotation>> DocumentAnnotationsPOSTWithHttpInfoAsync (Annotation annotation = default(Annotation), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotation != null && annotation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotation; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Annotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Annotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Annotation)));
        }

        /// <summary>
        ///  Suggest field value before creating an annotation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationSuggestRequest"> (optional)</param>
        /// <returns>Annotation</returns>
        public Annotation DocumentAnnotationsSuggestPOST (AnnotationSuggestRequest annotationSuggestRequest = default(AnnotationSuggestRequest))
        {
             ApiResponse<Annotation> localVarResponse = DocumentAnnotationsSuggestPOSTWithHttpInfo(annotationSuggestRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Suggest field value before creating an annotation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationSuggestRequest"> (optional)</param>
        /// <returns>ApiResponse of Annotation</returns>
        public ApiResponse<Annotation> DocumentAnnotationsSuggestPOSTWithHttpInfo (AnnotationSuggestRequest annotationSuggestRequest = default(AnnotationSuggestRequest))
        {

            var localVarPath = "/api/v1/document/annotations/suggest/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationSuggestRequest != null && annotationSuggestRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotationSuggestRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotationSuggestRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsSuggestPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Annotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Annotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Annotation)));
        }

        /// <summary>
        ///  Suggest field value before creating an annotation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationSuggestRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Annotation</returns>
        public async System.Threading.Tasks.Task<Annotation> DocumentAnnotationsSuggestPOSTAsync (AnnotationSuggestRequest annotationSuggestRequest = default(AnnotationSuggestRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Annotation> localVarResponse = await DocumentAnnotationsSuggestPOSTWithHttpInfoAsync(annotationSuggestRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Suggest field value before creating an annotation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annotationSuggestRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Annotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Annotation>> DocumentAnnotationsSuggestPOSTWithHttpInfoAsync (AnnotationSuggestRequest annotationSuggestRequest = default(AnnotationSuggestRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/annotations/suggest/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (annotationSuggestRequest != null && annotationSuggestRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotationSuggestRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotationSuggestRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentAnnotationsSuggestPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Annotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Annotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Annotation)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldAnnotation</returns>
        public DocumentFieldAnnotation DocumentDocumentFieldAnnotationsForUserGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentFieldAnnotation> localVarResponse = DocumentDocumentFieldAnnotationsForUserGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldAnnotation</returns>
        public ApiResponse<DocumentFieldAnnotation> DocumentDocumentFieldAnnotationsForUserGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/document/document-field-annotations/for-user/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldAnnotationsForUserGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldAnnotation)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldAnnotation</returns>
        public async System.Threading.Tasks.Task<DocumentFieldAnnotation> DocumentDocumentFieldAnnotationsForUserGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldAnnotation> localVarResponse = await DocumentDocumentFieldAnnotationsForUserGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldAnnotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldAnnotation>> DocumentDocumentFieldAnnotationsForUserGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-field-annotations/for-user/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldAnnotationsForUserGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldAnnotation)));
        }

        /// <summary>
        ///  Field Annotation List + Field Annotation False Match List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldAnnotation&gt;</returns>
        public List<DocumentFieldAnnotation> DocumentDocumentFieldAnnotationsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<DocumentFieldAnnotation>> localVarResponse = DocumentDocumentFieldAnnotationsGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Field Annotation List + Field Annotation False Match List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldAnnotation&gt;</returns>
        public ApiResponse<List<DocumentFieldAnnotation>> DocumentDocumentFieldAnnotationsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/document/document-field-annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldAnnotationsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldAnnotation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldAnnotation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldAnnotation>)));
        }

        /// <summary>
        ///  Field Annotation List + Field Annotation False Match List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldAnnotation&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentFieldAnnotation>> DocumentDocumentFieldAnnotationsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentFieldAnnotation>> localVarResponse = await DocumentDocumentFieldAnnotationsGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Field Annotation List + Field Annotation False Match List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldAnnotation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldAnnotation>>> DocumentDocumentFieldAnnotationsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-field-annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldAnnotationsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldAnnotation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldAnnotation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldAnnotation>)));
        }

        /// <summary>
        ///  Field Annotation Details (not Field Annotation False Match)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldAnnotation</returns>
        public DocumentFieldAnnotation DocumentDocumentFieldAnnotationsUidGET (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentFieldAnnotation> localVarResponse = DocumentDocumentFieldAnnotationsUidGETWithHttpInfo(uid, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Field Annotation Details (not Field Annotation False Match)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldAnnotation</returns>
        public ApiResponse<DocumentFieldAnnotation> DocumentDocumentFieldAnnotationsUidGETWithHttpInfo (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldAnnotationsUidGET");

            var localVarPath = "/api/v1/document/document-field-annotations/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldAnnotationsUidGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldAnnotation)));
        }

        /// <summary>
        ///  Field Annotation Details (not Field Annotation False Match)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldAnnotation</returns>
        public async System.Threading.Tasks.Task<DocumentFieldAnnotation> DocumentDocumentFieldAnnotationsUidGETAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldAnnotation> localVarResponse = await DocumentDocumentFieldAnnotationsUidGETWithHttpInfoAsync(uid, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Field Annotation Details (not Field Annotation False Match)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldAnnotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldAnnotation>> DocumentDocumentFieldAnnotationsUidGETWithHttpInfoAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldAnnotationsUidGET");

            var localVarPath = "/api/v1/document/document-field-annotations/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldAnnotationsUidGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldAnnotation)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentDocumentFieldCategoriesFormFieldsGET ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentDocumentFieldCategoriesFormFieldsGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldCategoriesFormFieldsGETWithHttpInfo ()
        {

            var localVarPath = "/api/v1/document/document-field-categories/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldCategoriesFormFieldsGETAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentDocumentFieldCategoriesFormFieldsGETWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldCategoriesFormFieldsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-field-categories/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  DocumentFieldCategory List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldCategoryList&gt;</returns>
        public List<DocumentFieldCategoryList> DocumentDocumentFieldCategoriesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<DocumentFieldCategoryList>> localVarResponse = DocumentDocumentFieldCategoriesGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  DocumentFieldCategory List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldCategoryList&gt;</returns>
        public ApiResponse<List<DocumentFieldCategoryList>> DocumentDocumentFieldCategoriesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/document/document-field-categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldCategoryList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldCategoryList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldCategoryList>)));
        }

        /// <summary>
        ///  DocumentFieldCategory List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldCategoryList&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentFieldCategoryList>> DocumentDocumentFieldCategoriesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentFieldCategoryList>> localVarResponse = await DocumentDocumentFieldCategoriesGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  DocumentFieldCategory List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldCategoryList&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldCategoryList>>> DocumentDocumentFieldCategoriesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-field-categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldCategoryList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldCategoryList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldCategoryList>)));
        }

        /// <summary>
        ///  Delete DocumentFieldCategory
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <returns></returns>
        public void DocumentDocumentFieldCategoriesIdDELETE (string id)
        {
             DocumentDocumentFieldCategoriesIdDELETEWithHttpInfo(id);
        }

        /// <summary>
        ///  Delete DocumentFieldCategory
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentDocumentFieldCategoriesIdDELETEWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentFieldCategoriesIdDELETE");

            var localVarPath = "/api/v1/document/document-field-categories/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete DocumentFieldCategory
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentDocumentFieldCategoriesIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DocumentDocumentFieldCategoriesIdDELETEWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        ///  Delete DocumentFieldCategory
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentDocumentFieldCategoriesIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentFieldCategoriesIdDELETE");

            var localVarPath = "/api/v1/document/document-field-categories/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentDocumentFieldCategoriesIdFormFieldsGET (string id)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentDocumentFieldCategoriesIdFormFieldsGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldCategoriesIdFormFieldsGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentFieldCategoriesIdFormFieldsGET");

            var localVarPath = "/api/v1/document/document-field-categories/{id}/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesIdFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldCategoriesIdFormFieldsGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentDocumentFieldCategoriesIdFormFieldsGETWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldCategoriesIdFormFieldsGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentFieldCategoriesIdFormFieldsGET");

            var localVarPath = "/api/v1/document/document-field-categories/{id}/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesIdFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Retrieve DocumentFieldCategory
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldCategoryList</returns>
        public DocumentFieldCategoryList DocumentDocumentFieldCategoriesIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentFieldCategoryList> localVarResponse = DocumentDocumentFieldCategoriesIdGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve DocumentFieldCategory
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCategoryList</returns>
        public ApiResponse<DocumentFieldCategoryList> DocumentDocumentFieldCategoriesIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentFieldCategoriesIdGET");

            var localVarPath = "/api/v1/document/document-field-categories/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCategoryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldCategoryList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCategoryList)));
        }

        /// <summary>
        ///  Retrieve DocumentFieldCategory
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldCategoryList</returns>
        public async System.Threading.Tasks.Task<DocumentFieldCategoryList> DocumentDocumentFieldCategoriesIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldCategoryList> localVarResponse = await DocumentDocumentFieldCategoriesIdGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve DocumentFieldCategory
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldCategoryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldCategoryList>> DocumentDocumentFieldCategoriesIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentFieldCategoriesIdGET");

            var localVarPath = "/api/v1/document/document-field-categories/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCategoryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldCategoryList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCategoryList)));
        }

        /// <summary>
        ///  Partial Update DocumentFieldCategory
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <returns>DocumentFieldCategoryCreate</returns>
        public DocumentFieldCategoryCreate DocumentDocumentFieldCategoriesIdPATCH (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate))
        {
             ApiResponse<DocumentFieldCategoryCreate> localVarResponse = DocumentDocumentFieldCategoriesIdPATCHWithHttpInfo(id, documentFieldCategoryCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Partial Update DocumentFieldCategory
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCategoryCreate</returns>
        public ApiResponse<DocumentFieldCategoryCreate> DocumentDocumentFieldCategoriesIdPATCHWithHttpInfo (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentFieldCategoriesIdPATCH");

            var localVarPath = "/api/v1/document/document-field-categories/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentFieldCategoryCreate != null && documentFieldCategoryCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldCategoryCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldCategoryCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCategoryCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldCategoryCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCategoryCreate)));
        }

        /// <summary>
        ///  Partial Update DocumentFieldCategory
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldCategoryCreate</returns>
        public async System.Threading.Tasks.Task<DocumentFieldCategoryCreate> DocumentDocumentFieldCategoriesIdPATCHAsync (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldCategoryCreate> localVarResponse = await DocumentDocumentFieldCategoriesIdPATCHWithHttpInfoAsync(id, documentFieldCategoryCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Partial Update DocumentFieldCategory
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldCategoryCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldCategoryCreate>> DocumentDocumentFieldCategoriesIdPATCHWithHttpInfoAsync (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentFieldCategoriesIdPATCH");

            var localVarPath = "/api/v1/document/document-field-categories/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentFieldCategoryCreate != null && documentFieldCategoryCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldCategoryCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldCategoryCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCategoryCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldCategoryCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCategoryCreate)));
        }

        /// <summary>
        ///  Update Document Type     Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <returns>DocumentFieldCategoryCreate</returns>
        public DocumentFieldCategoryCreate DocumentDocumentFieldCategoriesIdPUT (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate))
        {
             ApiResponse<DocumentFieldCategoryCreate> localVarResponse = DocumentDocumentFieldCategoriesIdPUTWithHttpInfo(id, documentFieldCategoryCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Document Type     Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCategoryCreate</returns>
        public ApiResponse<DocumentFieldCategoryCreate> DocumentDocumentFieldCategoriesIdPUTWithHttpInfo (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentFieldCategoriesIdPUT");

            var localVarPath = "/api/v1/document/document-field-categories/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentFieldCategoryCreate != null && documentFieldCategoryCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldCategoryCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldCategoryCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCategoryCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldCategoryCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCategoryCreate)));
        }

        /// <summary>
        ///  Update Document Type     Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldCategoryCreate</returns>
        public async System.Threading.Tasks.Task<DocumentFieldCategoryCreate> DocumentDocumentFieldCategoriesIdPUTAsync (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldCategoryCreate> localVarResponse = await DocumentDocumentFieldCategoriesIdPUTWithHttpInfoAsync(id, documentFieldCategoryCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update Document Type     Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document field category.</param>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldCategoryCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldCategoryCreate>> DocumentDocumentFieldCategoriesIdPUTWithHttpInfoAsync (string id, DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentFieldCategoriesIdPUT");

            var localVarPath = "/api/v1/document/document-field-categories/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentFieldCategoryCreate != null && documentFieldCategoryCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldCategoryCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldCategoryCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCategoryCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldCategoryCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCategoryCreate)));
        }

        /// <summary>
        ///  Create DocumentFieldCategory      Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <returns>DocumentFieldCategoryCreate</returns>
        public DocumentFieldCategoryCreate DocumentDocumentFieldCategoriesPOST (DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate))
        {
             ApiResponse<DocumentFieldCategoryCreate> localVarResponse = DocumentDocumentFieldCategoriesPOSTWithHttpInfo(documentFieldCategoryCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create DocumentFieldCategory      Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCategoryCreate</returns>
        public ApiResponse<DocumentFieldCategoryCreate> DocumentDocumentFieldCategoriesPOSTWithHttpInfo (DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate))
        {

            var localVarPath = "/api/v1/document/document-field-categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentFieldCategoryCreate != null && documentFieldCategoryCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldCategoryCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldCategoryCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCategoryCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldCategoryCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCategoryCreate)));
        }

        /// <summary>
        ///  Create DocumentFieldCategory      Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldCategoryCreate</returns>
        public async System.Threading.Tasks.Task<DocumentFieldCategoryCreate> DocumentDocumentFieldCategoriesPOSTAsync (DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldCategoryCreate> localVarResponse = await DocumentDocumentFieldCategoriesPOSTWithHttpInfoAsync(documentFieldCategoryCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create DocumentFieldCategory      Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldCategoryCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldCategoryCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldCategoryCreate>> DocumentDocumentFieldCategoriesPOSTWithHttpInfoAsync (DocumentFieldCategoryCreate documentFieldCategoryCreate = default(DocumentFieldCategoryCreate), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-field-categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentFieldCategoryCreate != null && documentFieldCategoryCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldCategoryCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldCategoryCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldCategoriesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCategoryCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldCategoryCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCategoryCreate)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentDocumentFieldDetectorsFormFieldsGET ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentDocumentFieldDetectorsFormFieldsGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldDetectorsFormFieldsGETWithHttpInfo ()
        {

            var localVarPath = "/api/v1/document/document-field-detectors/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldDetectorsFormFieldsGETAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentDocumentFieldDetectorsFormFieldsGETWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldDetectorsFormFieldsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-field-detectors/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Document Field List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldDetectorDetail&gt;</returns>
        public List<DocumentFieldDetectorDetail> DocumentDocumentFieldDetectorsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<DocumentFieldDetectorDetail>> localVarResponse = DocumentDocumentFieldDetectorsGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document Field List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldDetectorDetail&gt;</returns>
        public ApiResponse<List<DocumentFieldDetectorDetail>> DocumentDocumentFieldDetectorsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/document/document-field-detectors/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldDetectorDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldDetectorDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldDetectorDetail>)));
        }

        /// <summary>
        ///  Document Field List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldDetectorDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentFieldDetectorDetail>> DocumentDocumentFieldDetectorsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentFieldDetectorDetail>> localVarResponse = await DocumentDocumentFieldDetectorsGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document Field List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldDetectorDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldDetectorDetail>>> DocumentDocumentFieldDetectorsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-field-detectors/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldDetectorDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldDetectorDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldDetectorDetail>)));
        }

        /// <summary>
        ///  Create Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <returns>DocumentFieldDetectorCreate</returns>
        public DocumentFieldDetectorCreate DocumentDocumentFieldDetectorsPOST (DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate))
        {
             ApiResponse<DocumentFieldDetectorCreate> localVarResponse = DocumentDocumentFieldDetectorsPOSTWithHttpInfo(documentFieldDetectorCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldDetectorCreate</returns>
        public ApiResponse<DocumentFieldDetectorCreate> DocumentDocumentFieldDetectorsPOSTWithHttpInfo (DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate))
        {

            var localVarPath = "/api/v1/document/document-field-detectors/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentFieldDetectorCreate != null && documentFieldDetectorCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldDetectorCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldDetectorCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldDetectorCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldDetectorCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldDetectorCreate)));
        }

        /// <summary>
        ///  Create Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldDetectorCreate</returns>
        public async System.Threading.Tasks.Task<DocumentFieldDetectorCreate> DocumentDocumentFieldDetectorsPOSTAsync (DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldDetectorCreate> localVarResponse = await DocumentDocumentFieldDetectorsPOSTWithHttpInfoAsync(documentFieldDetectorCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldDetectorCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldDetectorCreate>> DocumentDocumentFieldDetectorsPOSTWithHttpInfoAsync (DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-field-detectors/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentFieldDetectorCreate != null && documentFieldDetectorCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldDetectorCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldDetectorCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldDetectorCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldDetectorCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldDetectorCreate)));
        }

        /// <summary>
        ///  Delete Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <returns></returns>
        public void DocumentDocumentFieldDetectorsUidDELETE (string uid)
        {
             DocumentDocumentFieldDetectorsUidDELETEWithHttpInfo(uid);
        }

        /// <summary>
        ///  Delete Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentDocumentFieldDetectorsUidDELETEWithHttpInfo (string uid)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldDetectorsUidDELETE");

            var localVarPath = "/api/v1/document/document-field-detectors/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsUidDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentDocumentFieldDetectorsUidDELETEAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DocumentDocumentFieldDetectorsUidDELETEWithHttpInfoAsync(uid, cancellationToken);

        }

        /// <summary>
        ///  Delete Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentDocumentFieldDetectorsUidDELETEWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldDetectorsUidDELETE");

            var localVarPath = "/api/v1/document/document-field-detectors/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsUidDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentDocumentFieldDetectorsUidFormFieldsGET (string uid)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentDocumentFieldDetectorsUidFormFieldsGETWithHttpInfo(uid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldDetectorsUidFormFieldsGETWithHttpInfo (string uid)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldDetectorsUidFormFieldsGET");

            var localVarPath = "/api/v1/document/document-field-detectors/{uid}/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsUidFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldDetectorsUidFormFieldsGETAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentDocumentFieldDetectorsUidFormFieldsGETWithHttpInfoAsync(uid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldDetectorsUidFormFieldsGETWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldDetectorsUidFormFieldsGET");

            var localVarPath = "/api/v1/document/document-field-detectors/{uid}/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsUidFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Retrieve Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldDetectorDetail</returns>
        public DocumentFieldDetectorDetail DocumentDocumentFieldDetectorsUidGET (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentFieldDetectorDetail> localVarResponse = DocumentDocumentFieldDetectorsUidGETWithHttpInfo(uid, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldDetectorDetail</returns>
        public ApiResponse<DocumentFieldDetectorDetail> DocumentDocumentFieldDetectorsUidGETWithHttpInfo (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldDetectorsUidGET");

            var localVarPath = "/api/v1/document/document-field-detectors/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsUidGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldDetectorDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldDetectorDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldDetectorDetail)));
        }

        /// <summary>
        ///  Retrieve Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldDetectorDetail</returns>
        public async System.Threading.Tasks.Task<DocumentFieldDetectorDetail> DocumentDocumentFieldDetectorsUidGETAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldDetectorDetail> localVarResponse = await DocumentDocumentFieldDetectorsUidGETWithHttpInfoAsync(uid, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldDetectorDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldDetectorDetail>> DocumentDocumentFieldDetectorsUidGETWithHttpInfoAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldDetectorsUidGET");

            var localVarPath = "/api/v1/document/document-field-detectors/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsUidGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldDetectorDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldDetectorDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldDetectorDetail)));
        }

        /// <summary>
        ///  Partial Update Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <returns>DocumentFieldDetectorCreate</returns>
        public DocumentFieldDetectorCreate DocumentDocumentFieldDetectorsUidPATCH (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate))
        {
             ApiResponse<DocumentFieldDetectorCreate> localVarResponse = DocumentDocumentFieldDetectorsUidPATCHWithHttpInfo(uid, documentFieldDetectorCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Partial Update Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldDetectorCreate</returns>
        public ApiResponse<DocumentFieldDetectorCreate> DocumentDocumentFieldDetectorsUidPATCHWithHttpInfo (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldDetectorsUidPATCH");

            var localVarPath = "/api/v1/document/document-field-detectors/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentFieldDetectorCreate != null && documentFieldDetectorCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldDetectorCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldDetectorCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsUidPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldDetectorCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldDetectorCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldDetectorCreate)));
        }

        /// <summary>
        ///  Partial Update Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldDetectorCreate</returns>
        public async System.Threading.Tasks.Task<DocumentFieldDetectorCreate> DocumentDocumentFieldDetectorsUidPATCHAsync (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldDetectorCreate> localVarResponse = await DocumentDocumentFieldDetectorsUidPATCHWithHttpInfoAsync(uid, documentFieldDetectorCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Partial Update Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldDetectorCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldDetectorCreate>> DocumentDocumentFieldDetectorsUidPATCHWithHttpInfoAsync (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldDetectorsUidPATCH");

            var localVarPath = "/api/v1/document/document-field-detectors/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentFieldDetectorCreate != null && documentFieldDetectorCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldDetectorCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldDetectorCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsUidPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldDetectorCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldDetectorCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldDetectorCreate)));
        }

        /// <summary>
        ///  Update Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <returns>DocumentFieldDetectorCreate</returns>
        public DocumentFieldDetectorCreate DocumentDocumentFieldDetectorsUidPUT (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate))
        {
             ApiResponse<DocumentFieldDetectorCreate> localVarResponse = DocumentDocumentFieldDetectorsUidPUTWithHttpInfo(uid, documentFieldDetectorCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldDetectorCreate</returns>
        public ApiResponse<DocumentFieldDetectorCreate> DocumentDocumentFieldDetectorsUidPUTWithHttpInfo (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldDetectorsUidPUT");

            var localVarPath = "/api/v1/document/document-field-detectors/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentFieldDetectorCreate != null && documentFieldDetectorCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldDetectorCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldDetectorCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsUidPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldDetectorCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldDetectorCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldDetectorCreate)));
        }

        /// <summary>
        ///  Update Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldDetectorCreate</returns>
        public async System.Threading.Tasks.Task<DocumentFieldDetectorCreate> DocumentDocumentFieldDetectorsUidPUTAsync (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldDetectorCreate> localVarResponse = await DocumentDocumentFieldDetectorsUidPUTWithHttpInfoAsync(uid, documentFieldDetectorCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field detector.</param>
        /// <param name="documentFieldDetectorCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldDetectorCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldDetectorCreate>> DocumentDocumentFieldDetectorsUidPUTWithHttpInfoAsync (string uid, DocumentFieldDetectorCreate documentFieldDetectorCreate = default(DocumentFieldDetectorCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldDetectorsUidPUT");

            var localVarPath = "/api/v1/document/document-field-detectors/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentFieldDetectorCreate != null && documentFieldDetectorCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldDetectorCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldDetectorCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldDetectorsUidPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldDetectorCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldDetectorCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldDetectorCreate)));
        }

        /// <summary>
        ///  Document Field Value List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldValue&gt;</returns>
        public List<DocumentFieldValue> DocumentDocumentFieldValuesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<DocumentFieldValue>> localVarResponse = DocumentDocumentFieldValuesGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document Field Value List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldValue&gt;</returns>
        public ApiResponse<List<DocumentFieldValue>> DocumentDocumentFieldValuesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/document/document-field-values/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldValuesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldValue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldValue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldValue>)));
        }

        /// <summary>
        ///  Document Field Value List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldValue&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentFieldValue>> DocumentDocumentFieldValuesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentFieldValue>> localVarResponse = await DocumentDocumentFieldValuesGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document Field Value List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldValue&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldValue>>> DocumentDocumentFieldValuesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-field-values/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldValuesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldValue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldValue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldValue>)));
        }

        /// <summary>
        ///  Document Field Value Details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldValue</returns>
        public DocumentFieldValue DocumentDocumentFieldValuesIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentFieldValue> localVarResponse = DocumentDocumentFieldValuesIdGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document Field Value Details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldValue</returns>
        public ApiResponse<DocumentFieldValue> DocumentDocumentFieldValuesIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentFieldValuesIdGET");

            var localVarPath = "/api/v1/document/document-field-values/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldValuesIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldValue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldValue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldValue)));
        }

        /// <summary>
        ///  Document Field Value Details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldValue</returns>
        public async System.Threading.Tasks.Task<DocumentFieldValue> DocumentDocumentFieldValuesIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldValue> localVarResponse = await DocumentDocumentFieldValuesIdGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document Field Value Details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldValue)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldValue>> DocumentDocumentFieldValuesIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentFieldValuesIdGET");

            var localVarPath = "/api/v1/document/document-field-values/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldValuesIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldValue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldValue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldValue)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentDocumentFieldsFormFieldsGET ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentDocumentFieldsFormFieldsGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldsFormFieldsGETWithHttpInfo ()
        {

            var localVarPath = "/api/v1/document/document-fields/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldsFormFieldsGETAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentDocumentFieldsFormFieldsGETWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldsFormFieldsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-fields/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Document Field List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldList&gt;</returns>
        public List<DocumentFieldList> DocumentDocumentFieldsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<DocumentFieldList>> localVarResponse = DocumentDocumentFieldsGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document Field List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldList&gt;</returns>
        public ApiResponse<List<DocumentFieldList>> DocumentDocumentFieldsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/document/document-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldList>)));
        }

        /// <summary>
        ///  Document Field List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldList&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentFieldList>> DocumentDocumentFieldsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentFieldList>> localVarResponse = await DocumentDocumentFieldsGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document Field List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldList&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldList>>> DocumentDocumentFieldsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldList>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeUid">Filter by document type uid (optional)</param>
        /// <returns>List&lt;DocumentFieldStatsResponse&gt;</returns>
        public List<DocumentFieldStatsResponse> DocumentDocumentFieldsStatsGET (string documentTypeUid = default(string))
        {
             ApiResponse<List<DocumentFieldStatsResponse>> localVarResponse = DocumentDocumentFieldsStatsGETWithHttpInfo(documentTypeUid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeUid">Filter by document type uid (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldStatsResponse&gt;</returns>
        public ApiResponse<List<DocumentFieldStatsResponse>> DocumentDocumentFieldsStatsGETWithHttpInfo (string documentTypeUid = default(string))
        {

            var localVarPath = "/api/v1/document/document-fields/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeUid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_type_uid", documentTypeUid)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsStatsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldStatsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldStatsResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldStatsResponse>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeUid">Filter by document type uid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldStatsResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentFieldStatsResponse>> DocumentDocumentFieldsStatsGETAsync (string documentTypeUid = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentFieldStatsResponse>> localVarResponse = await DocumentDocumentFieldsStatsGETWithHttpInfoAsync(documentTypeUid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeUid">Filter by document type uid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldStatsResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldStatsResponse>>> DocumentDocumentFieldsStatsGETWithHttpInfoAsync (string documentTypeUid = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-fields/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeUid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_type_uid", documentTypeUid)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsStatsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldStatsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldStatsResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldStatsResponse>)));
        }

        /// <summary>
        ///  Check formula for EXISTING Document Field Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="checkDocumentFieldFormulaRequest"> (optional)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentDocumentFieldsUidCheckFormulaPOST (string uid, CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest = default(CheckDocumentFieldFormulaRequest))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentDocumentFieldsUidCheckFormulaPOSTWithHttpInfo(uid, checkDocumentFieldFormulaRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Check formula for EXISTING Document Field Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="checkDocumentFieldFormulaRequest"> (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldsUidCheckFormulaPOSTWithHttpInfo (string uid, CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest = default(CheckDocumentFieldFormulaRequest))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidCheckFormulaPOST");

            var localVarPath = "/api/v1/document/document-fields/{uid}/check_formula/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (checkDocumentFieldFormulaRequest != null && checkDocumentFieldFormulaRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkDocumentFieldFormulaRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkDocumentFieldFormulaRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidCheckFormulaPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Check formula for EXISTING Document Field Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="checkDocumentFieldFormulaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldsUidCheckFormulaPOSTAsync (string uid, CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest = default(CheckDocumentFieldFormulaRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentDocumentFieldsUidCheckFormulaPOSTWithHttpInfoAsync(uid, checkDocumentFieldFormulaRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Check formula for EXISTING Document Field Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="checkDocumentFieldFormulaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldsUidCheckFormulaPOSTWithHttpInfoAsync (string uid, CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest = default(CheckDocumentFieldFormulaRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidCheckFormulaPOST");

            var localVarPath = "/api/v1/document/document-fields/{uid}/check_formula/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (checkDocumentFieldFormulaRequest != null && checkDocumentFieldFormulaRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkDocumentFieldFormulaRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkDocumentFieldFormulaRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidCheckFormulaPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Clone existing DocumentField and its depends_on_fields and detectors
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="cloneDocumentFieldRequest"> (optional)</param>
        /// <returns>DocumentFieldDetail</returns>
        public DocumentFieldDetail DocumentDocumentFieldsUidClonePOST (string uid, CloneDocumentFieldRequest cloneDocumentFieldRequest = default(CloneDocumentFieldRequest))
        {
             ApiResponse<DocumentFieldDetail> localVarResponse = DocumentDocumentFieldsUidClonePOSTWithHttpInfo(uid, cloneDocumentFieldRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Clone existing DocumentField and its depends_on_fields and detectors
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="cloneDocumentFieldRequest"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldDetail</returns>
        public ApiResponse<DocumentFieldDetail> DocumentDocumentFieldsUidClonePOSTWithHttpInfo (string uid, CloneDocumentFieldRequest cloneDocumentFieldRequest = default(CloneDocumentFieldRequest))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidClonePOST");

            var localVarPath = "/api/v1/document/document-fields/{uid}/clone/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (cloneDocumentFieldRequest != null && cloneDocumentFieldRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cloneDocumentFieldRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloneDocumentFieldRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidClonePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldDetail)));
        }

        /// <summary>
        ///  Clone existing DocumentField and its depends_on_fields and detectors
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="cloneDocumentFieldRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldDetail</returns>
        public async System.Threading.Tasks.Task<DocumentFieldDetail> DocumentDocumentFieldsUidClonePOSTAsync (string uid, CloneDocumentFieldRequest cloneDocumentFieldRequest = default(CloneDocumentFieldRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldDetail> localVarResponse = await DocumentDocumentFieldsUidClonePOSTWithHttpInfoAsync(uid, cloneDocumentFieldRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Clone existing DocumentField and its depends_on_fields and detectors
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="cloneDocumentFieldRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldDetail>> DocumentDocumentFieldsUidClonePOSTWithHttpInfoAsync (string uid, CloneDocumentFieldRequest cloneDocumentFieldRequest = default(CloneDocumentFieldRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidClonePOST");

            var localVarPath = "/api/v1/document/document-fields/{uid}/clone/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (cloneDocumentFieldRequest != null && cloneDocumentFieldRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cloneDocumentFieldRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloneDocumentFieldRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidClonePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldDetail)));
        }

        /// <summary>
        ///  Delete Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <returns></returns>
        public void DocumentDocumentFieldsUidDELETE (string uid)
        {
             DocumentDocumentFieldsUidDELETEWithHttpInfo(uid);
        }

        /// <summary>
        ///  Delete Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentDocumentFieldsUidDELETEWithHttpInfo (string uid)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidDELETE");

            var localVarPath = "/api/v1/document/document-fields/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentDocumentFieldsUidDELETEAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DocumentDocumentFieldsUidDELETEWithHttpInfoAsync(uid, cancellationToken);

        }

        /// <summary>
        ///  Delete Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentDocumentFieldsUidDELETEWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidDELETE");

            var localVarPath = "/api/v1/document/document-fields/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentDocumentFieldsUidFormFieldsGET (string uid)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentDocumentFieldsUidFormFieldsGETWithHttpInfo(uid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldsUidFormFieldsGETWithHttpInfo (string uid)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidFormFieldsGET");

            var localVarPath = "/api/v1/document/document-fields/{uid}/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldsUidFormFieldsGETAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentDocumentFieldsUidFormFieldsGETWithHttpInfoAsync(uid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldsUidFormFieldsGETWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidFormFieldsGET");

            var localVarPath = "/api/v1/document/document-fields/{uid}/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Retrieve Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldDetail</returns>
        public DocumentFieldDetail DocumentDocumentFieldsUidGET (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentFieldDetail> localVarResponse = DocumentDocumentFieldsUidGETWithHttpInfo(uid, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldDetail</returns>
        public ApiResponse<DocumentFieldDetail> DocumentDocumentFieldsUidGETWithHttpInfo (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidGET");

            var localVarPath = "/api/v1/document/document-fields/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldDetail)));
        }

        /// <summary>
        ///  Retrieve Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldDetail</returns>
        public async System.Threading.Tasks.Task<DocumentFieldDetail> DocumentDocumentFieldsUidGETAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldDetail> localVarResponse = await DocumentDocumentFieldsUidGETWithHttpInfoAsync(uid, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldDetail>> DocumentDocumentFieldsUidGETWithHttpInfoAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidGET");

            var localVarPath = "/api/v1/document/document-fields/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldDetail)));
        }

        /// <summary>
        ///  Partial Update Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <returns>DocumentFieldCreate</returns>
        public DocumentFieldCreate DocumentDocumentFieldsUidPATCH (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate))
        {
             ApiResponse<DocumentFieldCreate> localVarResponse = DocumentDocumentFieldsUidPATCHWithHttpInfo(uid, documentFieldCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Partial Update Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCreate</returns>
        public ApiResponse<DocumentFieldCreate> DocumentDocumentFieldsUidPATCHWithHttpInfo (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidPATCH");

            var localVarPath = "/api/v1/document/document-fields/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentFieldCreate != null && documentFieldCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCreate)));
        }

        /// <summary>
        ///  Partial Update Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldCreate</returns>
        public async System.Threading.Tasks.Task<DocumentFieldCreate> DocumentDocumentFieldsUidPATCHAsync (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldCreate> localVarResponse = await DocumentDocumentFieldsUidPATCHWithHttpInfoAsync(uid, documentFieldCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Partial Update Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldCreate>> DocumentDocumentFieldsUidPATCHWithHttpInfoAsync (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidPATCH");

            var localVarPath = "/api/v1/document/document-fields/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentFieldCreate != null && documentFieldCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCreate)));
        }

        /// <summary>
        ///  Update Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <returns>DocumentFieldCreate</returns>
        public DocumentFieldCreate DocumentDocumentFieldsUidPUT (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate))
        {
             ApiResponse<DocumentFieldCreate> localVarResponse = DocumentDocumentFieldsUidPUTWithHttpInfo(uid, documentFieldCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentFieldCreate</returns>
        public ApiResponse<DocumentFieldCreate> DocumentDocumentFieldsUidPUTWithHttpInfo (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidPUT");

            var localVarPath = "/api/v1/document/document-fields/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentFieldCreate != null && documentFieldCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCreate)));
        }

        /// <summary>
        ///  Update Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldCreate</returns>
        public async System.Threading.Tasks.Task<DocumentFieldCreate> DocumentDocumentFieldsUidPUTAsync (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldCreate> localVarResponse = await DocumentDocumentFieldsUidPUTWithHttpInfoAsync(uid, documentFieldCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update Document Field
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldCreate>> DocumentDocumentFieldsUidPUTWithHttpInfoAsync (string uid, DocumentFieldCreate documentFieldCreate = default(DocumentFieldCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidPUT");

            var localVarPath = "/api/v1/document/document-fields/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentFieldCreate != null && documentFieldCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldCreate)));
        }

        /// <summary>
        ///  Get info about related objects for ready-to-delete document type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldDetail"> (optional)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentDocumentFieldsUidPreDeletePOST (string uid, DocumentFieldDetail documentFieldDetail = default(DocumentFieldDetail))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentDocumentFieldsUidPreDeletePOSTWithHttpInfo(uid, documentFieldDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get info about related objects for ready-to-delete document type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldDetail"> (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentDocumentFieldsUidPreDeletePOSTWithHttpInfo (string uid, DocumentFieldDetail documentFieldDetail = default(DocumentFieldDetail))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidPreDeletePOST");

            var localVarPath = "/api/v1/document/document-fields/{uid}/pre_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentFieldDetail != null && documentFieldDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidPreDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Get info about related objects for ready-to-delete document type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentFieldsUidPreDeletePOSTAsync (string uid, DocumentFieldDetail documentFieldDetail = default(DocumentFieldDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentDocumentFieldsUidPreDeletePOSTWithHttpInfoAsync(uid, documentFieldDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get info about related objects for ready-to-delete document type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document field.</param>
        /// <param name="documentFieldDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentFieldsUidPreDeletePOSTWithHttpInfoAsync (string uid, DocumentFieldDetail documentFieldDetail = default(DocumentFieldDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentFieldsUidPreDeletePOST");

            var localVarPath = "/api/v1/document/document-fields/{uid}/pre_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentFieldDetail != null && documentFieldDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentFieldDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentFieldDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentFieldsUidPreDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Document Note List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="projectId">Filter by project id (optional)</param>
        /// <param name="documentId">Filter by document id (optional)</param>
        /// <param name="force">For deleted documents as well (optional)</param>
        /// <param name="exportTo">Export data (optional)</param>
        /// <returns>List&lt;DocumentNoteDetail&gt;</returns>
        public List<DocumentNoteDetail> DocumentDocumentNotesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), string projectId = default(string), string documentId = default(string), bool? force = default(bool?), bool? exportTo = default(bool?))
        {
             ApiResponse<List<DocumentNoteDetail>> localVarResponse = DocumentDocumentNotesGETWithHttpInfo(jqFilters, projectId, documentId, force, exportTo);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document Note List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="projectId">Filter by project id (optional)</param>
        /// <param name="documentId">Filter by document id (optional)</param>
        /// <param name="force">For deleted documents as well (optional)</param>
        /// <param name="exportTo">Export data (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentNoteDetail&gt;</returns>
        public ApiResponse<List<DocumentNoteDetail>> DocumentDocumentNotesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), string projectId = default(string), string documentId = default(string), bool? force = default(bool?), bool? exportTo = default(bool?))
        {

            var localVarPath = "/api/v1/document/document-notes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter
            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_id", projectId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_id", documentId)); // query parameter
            if (force != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force)); // query parameter
            if (exportTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "export_to", exportTo)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentNotesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentNoteDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentNoteDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentNoteDetail>)));
        }

        /// <summary>
        ///  Document Note List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="projectId">Filter by project id (optional)</param>
        /// <param name="documentId">Filter by document id (optional)</param>
        /// <param name="force">For deleted documents as well (optional)</param>
        /// <param name="exportTo">Export data (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentNoteDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentNoteDetail>> DocumentDocumentNotesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), string projectId = default(string), string documentId = default(string), bool? force = default(bool?), bool? exportTo = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentNoteDetail>> localVarResponse = await DocumentDocumentNotesGETWithHttpInfoAsync(jqFilters, projectId, documentId, force, exportTo, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document Note List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="projectId">Filter by project id (optional)</param>
        /// <param name="documentId">Filter by document id (optional)</param>
        /// <param name="force">For deleted documents as well (optional)</param>
        /// <param name="exportTo">Export data (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentNoteDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentNoteDetail>>> DocumentDocumentNotesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), string projectId = default(string), string documentId = default(string), bool? force = default(bool?), bool? exportTo = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-notes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter
            if (projectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "project_id", projectId)); // query parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_id", documentId)); // query parameter
            if (force != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force)); // query parameter
            if (exportTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "export_to", exportTo)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentNotesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentNoteDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentNoteDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentNoteDetail>)));
        }

        /// <summary>
        ///  Delete Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <returns></returns>
        public void DocumentDocumentNotesIdDELETE (string id)
        {
             DocumentDocumentNotesIdDELETEWithHttpInfo(id);
        }

        /// <summary>
        ///  Delete Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentDocumentNotesIdDELETEWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentNotesIdDELETE");

            var localVarPath = "/api/v1/document/document-notes/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentNotesIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentDocumentNotesIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DocumentDocumentNotesIdDELETEWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        ///  Delete Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentDocumentNotesIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentNotesIdDELETE");

            var localVarPath = "/api/v1/document/document-notes/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentNotesIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Retrieve Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentNoteDetail</returns>
        public DocumentNoteDetail DocumentDocumentNotesIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentNoteDetail> localVarResponse = DocumentDocumentNotesIdGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentNoteDetail</returns>
        public ApiResponse<DocumentNoteDetail> DocumentDocumentNotesIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentNotesIdGET");

            var localVarPath = "/api/v1/document/document-notes/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentNotesIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentNoteDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentNoteDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentNoteDetail)));
        }

        /// <summary>
        ///  Retrieve Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentNoteDetail</returns>
        public async System.Threading.Tasks.Task<DocumentNoteDetail> DocumentDocumentNotesIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentNoteDetail> localVarResponse = await DocumentDocumentNotesIdGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentNoteDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentNoteDetail>> DocumentDocumentNotesIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentNotesIdGET");

            var localVarPath = "/api/v1/document/document-notes/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentNotesIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentNoteDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentNoteDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentNoteDetail)));
        }

        /// <summary>
        ///  Partial Update Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteDetail"> (optional)</param>
        /// <returns>DocumentNoteDetail</returns>
        public DocumentNoteDetail DocumentDocumentNotesIdPATCH (string id, DocumentNoteDetail documentNoteDetail = default(DocumentNoteDetail))
        {
             ApiResponse<DocumentNoteDetail> localVarResponse = DocumentDocumentNotesIdPATCHWithHttpInfo(id, documentNoteDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Partial Update Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentNoteDetail</returns>
        public ApiResponse<DocumentNoteDetail> DocumentDocumentNotesIdPATCHWithHttpInfo (string id, DocumentNoteDetail documentNoteDetail = default(DocumentNoteDetail))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentNotesIdPATCH");

            var localVarPath = "/api/v1/document/document-notes/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentNoteDetail != null && documentNoteDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentNoteDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentNoteDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentNotesIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentNoteDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentNoteDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentNoteDetail)));
        }

        /// <summary>
        ///  Partial Update Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentNoteDetail</returns>
        public async System.Threading.Tasks.Task<DocumentNoteDetail> DocumentDocumentNotesIdPATCHAsync (string id, DocumentNoteDetail documentNoteDetail = default(DocumentNoteDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentNoteDetail> localVarResponse = await DocumentDocumentNotesIdPATCHWithHttpInfoAsync(id, documentNoteDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Partial Update Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentNoteDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentNoteDetail>> DocumentDocumentNotesIdPATCHWithHttpInfoAsync (string id, DocumentNoteDetail documentNoteDetail = default(DocumentNoteDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentNotesIdPATCH");

            var localVarPath = "/api/v1/document/document-notes/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentNoteDetail != null && documentNoteDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentNoteDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentNoteDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentNotesIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentNoteDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentNoteDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentNoteDetail)));
        }

        /// <summary>
        ///  Update Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteUpdate"> (optional)</param>
        /// <returns>DocumentNoteUpdate</returns>
        public DocumentNoteUpdate DocumentDocumentNotesIdPUT (string id, DocumentNoteUpdate documentNoteUpdate = default(DocumentNoteUpdate))
        {
             ApiResponse<DocumentNoteUpdate> localVarResponse = DocumentDocumentNotesIdPUTWithHttpInfo(id, documentNoteUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteUpdate"> (optional)</param>
        /// <returns>ApiResponse of DocumentNoteUpdate</returns>
        public ApiResponse<DocumentNoteUpdate> DocumentDocumentNotesIdPUTWithHttpInfo (string id, DocumentNoteUpdate documentNoteUpdate = default(DocumentNoteUpdate))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentNotesIdPUT");

            var localVarPath = "/api/v1/document/document-notes/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentNoteUpdate != null && documentNoteUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentNoteUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentNoteUpdate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentNotesIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentNoteUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentNoteUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentNoteUpdate)));
        }

        /// <summary>
        ///  Update Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentNoteUpdate</returns>
        public async System.Threading.Tasks.Task<DocumentNoteUpdate> DocumentDocumentNotesIdPUTAsync (string id, DocumentNoteUpdate documentNoteUpdate = default(DocumentNoteUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentNoteUpdate> localVarResponse = await DocumentDocumentNotesIdPUTWithHttpInfoAsync(id, documentNoteUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document note.</param>
        /// <param name="documentNoteUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentNoteUpdate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentNoteUpdate>> DocumentDocumentNotesIdPUTWithHttpInfoAsync (string id, DocumentNoteUpdate documentNoteUpdate = default(DocumentNoteUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentNotesIdPUT");

            var localVarPath = "/api/v1/document/document-notes/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentNoteUpdate != null && documentNoteUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentNoteUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentNoteUpdate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentNotesIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentNoteUpdate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentNoteUpdate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentNoteUpdate)));
        }

        /// <summary>
        ///  Create Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNoteCreate"> (optional)</param>
        /// <returns>DocumentNoteCreate</returns>
        public DocumentNoteCreate DocumentDocumentNotesPOST (DocumentNoteCreate documentNoteCreate = default(DocumentNoteCreate))
        {
             ApiResponse<DocumentNoteCreate> localVarResponse = DocumentDocumentNotesPOSTWithHttpInfo(documentNoteCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNoteCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentNoteCreate</returns>
        public ApiResponse<DocumentNoteCreate> DocumentDocumentNotesPOSTWithHttpInfo (DocumentNoteCreate documentNoteCreate = default(DocumentNoteCreate))
        {

            var localVarPath = "/api/v1/document/document-notes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentNoteCreate != null && documentNoteCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentNoteCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentNoteCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentNotesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentNoteCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentNoteCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentNoteCreate)));
        }

        /// <summary>
        ///  Create Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNoteCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentNoteCreate</returns>
        public async System.Threading.Tasks.Task<DocumentNoteCreate> DocumentDocumentNotesPOSTAsync (DocumentNoteCreate documentNoteCreate = default(DocumentNoteCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentNoteCreate> localVarResponse = await DocumentDocumentNotesPOSTWithHttpInfoAsync(documentNoteCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create Document Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNoteCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentNoteCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentNoteCreate>> DocumentDocumentNotesPOSTWithHttpInfoAsync (DocumentNoteCreate documentNoteCreate = default(DocumentNoteCreate), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-notes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentNoteCreate != null && documentNoteCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentNoteCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentNoteCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentNotesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentNoteCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentNoteCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentNoteCreate)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentDocumentTypesFormFieldsGET ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentDocumentTypesFormFieldsGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentDocumentTypesFormFieldsGETWithHttpInfo ()
        {

            var localVarPath = "/api/v1/document/document-types/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentTypesFormFieldsGETAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentDocumentTypesFormFieldsGETWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentTypesFormFieldsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-types/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Document Type List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentTypeDetail&gt;</returns>
        public List<DocumentTypeDetail> DocumentDocumentTypesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<DocumentTypeDetail>> localVarResponse = DocumentDocumentTypesGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document Type List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeDetail&gt;</returns>
        public ApiResponse<List<DocumentTypeDetail>> DocumentDocumentTypesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/document/document-types/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentTypeDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeDetail>)));
        }

        /// <summary>
        ///  Document Type List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentTypeDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeDetail>> DocumentDocumentTypesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentTypeDetail>> localVarResponse = await DocumentDocumentTypesGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document Type List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeDetail>>> DocumentDocumentTypesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-types/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeDetail>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentTypeDetail>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeDetail>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeImportRequest"> (optional)</param>
        /// <returns>DocumentTypeImportResponse</returns>
        public DocumentTypeImportResponse DocumentDocumentTypesImportDocTypePUT (DocumentTypeImportRequest documentTypeImportRequest = default(DocumentTypeImportRequest))
        {
             ApiResponse<DocumentTypeImportResponse> localVarResponse = DocumentDocumentTypesImportDocTypePUTWithHttpInfo(documentTypeImportRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeImportRequest"> (optional)</param>
        /// <returns>ApiResponse of DocumentTypeImportResponse</returns>
        public ApiResponse<DocumentTypeImportResponse> DocumentDocumentTypesImportDocTypePUTWithHttpInfo (DocumentTypeImportRequest documentTypeImportRequest = default(DocumentTypeImportRequest))
        {

            var localVarPath = "/api/v1/document/document-types/import_doc_type/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeImportRequest != null && documentTypeImportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeImportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeImportRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesImportDocTypePUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeImportResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeImportResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeImportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeImportResponse</returns>
        public async System.Threading.Tasks.Task<DocumentTypeImportResponse> DocumentDocumentTypesImportDocTypePUTAsync (DocumentTypeImportRequest documentTypeImportRequest = default(DocumentTypeImportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentTypeImportResponse> localVarResponse = await DocumentDocumentTypesImportDocTypePUTWithHttpInfoAsync(documentTypeImportRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeImportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeImportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeImportResponse>> DocumentDocumentTypesImportDocTypePUTWithHttpInfoAsync (DocumentTypeImportRequest documentTypeImportRequest = default(DocumentTypeImportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-types/import_doc_type/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeImportRequest != null && documentTypeImportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeImportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeImportRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesImportDocTypePUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeImportResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeImportResponse)));
        }

        /// <summary>
        ///  Create Document Type      Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <returns>DocumentTypeCreate</returns>
        public DocumentTypeCreate DocumentDocumentTypesPOST (DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate))
        {
             ApiResponse<DocumentTypeCreate> localVarResponse = DocumentDocumentTypesPOSTWithHttpInfo(documentTypeCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Document Type      Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentTypeCreate</returns>
        public ApiResponse<DocumentTypeCreate> DocumentDocumentTypesPOSTWithHttpInfo (DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate))
        {

            var localVarPath = "/api/v1/document/document-types/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeCreate != null && documentTypeCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCreate)));
        }

        /// <summary>
        ///  Create Document Type      Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeCreate</returns>
        public async System.Threading.Tasks.Task<DocumentTypeCreate> DocumentDocumentTypesPOSTAsync (DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentTypeCreate> localVarResponse = await DocumentDocumentTypesPOSTWithHttpInfoAsync(documentTypeCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create Document Type      Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeCreate>> DocumentDocumentTypesPOSTWithHttpInfoAsync (DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-types/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeCreate != null && documentTypeCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCreate)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentTypeStats&gt;</returns>
        public List<DocumentTypeStats> DocumentDocumentTypesStatsGET ()
        {
             ApiResponse<List<DocumentTypeStats>> localVarResponse = DocumentDocumentTypesStatsGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentTypeStats&gt;</returns>
        public ApiResponse<List<DocumentTypeStats>> DocumentDocumentTypesStatsGETWithHttpInfo ()
        {

            var localVarPath = "/api/v1/document/document-types/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesStatsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentTypeStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeStats>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentTypeStats&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeStats>> DocumentDocumentTypesStatsGETAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentTypeStats>> localVarResponse = await DocumentDocumentTypesStatsGETWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeStats&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeStats>>> DocumentDocumentTypesStatsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-types/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesStatsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentTypeStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeStats>)));
        }

        /// <summary>
        ///  Clone existing Document Type and its fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="cloneDocumentTypeRequest"> (optional)</param>
        /// <returns>DocumentTypeDetail</returns>
        public DocumentTypeDetail DocumentDocumentTypesUidClonePOST (string uid, CloneDocumentTypeRequest cloneDocumentTypeRequest = default(CloneDocumentTypeRequest))
        {
             ApiResponse<DocumentTypeDetail> localVarResponse = DocumentDocumentTypesUidClonePOSTWithHttpInfo(uid, cloneDocumentTypeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Clone existing Document Type and its fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="cloneDocumentTypeRequest"> (optional)</param>
        /// <returns>ApiResponse of DocumentTypeDetail</returns>
        public ApiResponse<DocumentTypeDetail> DocumentDocumentTypesUidClonePOSTWithHttpInfo (string uid, CloneDocumentTypeRequest cloneDocumentTypeRequest = default(CloneDocumentTypeRequest))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidClonePOST");

            var localVarPath = "/api/v1/document/document-types/{uid}/clone/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (cloneDocumentTypeRequest != null && cloneDocumentTypeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cloneDocumentTypeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloneDocumentTypeRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidClonePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeDetail)));
        }

        /// <summary>
        ///  Clone existing Document Type and its fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="cloneDocumentTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeDetail</returns>
        public async System.Threading.Tasks.Task<DocumentTypeDetail> DocumentDocumentTypesUidClonePOSTAsync (string uid, CloneDocumentTypeRequest cloneDocumentTypeRequest = default(CloneDocumentTypeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentTypeDetail> localVarResponse = await DocumentDocumentTypesUidClonePOSTWithHttpInfoAsync(uid, cloneDocumentTypeRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Clone existing Document Type and its fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="cloneDocumentTypeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeDetail>> DocumentDocumentTypesUidClonePOSTWithHttpInfoAsync (string uid, CloneDocumentTypeRequest cloneDocumentTypeRequest = default(CloneDocumentTypeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidClonePOST");

            var localVarPath = "/api/v1/document/document-types/{uid}/clone/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (cloneDocumentTypeRequest != null && cloneDocumentTypeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cloneDocumentTypeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloneDocumentTypeRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidClonePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeDetail)));
        }

        /// <summary>
        ///  Delete Document Type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <returns></returns>
        public void DocumentDocumentTypesUidDELETE (string uid)
        {
             DocumentDocumentTypesUidDELETEWithHttpInfo(uid);
        }

        /// <summary>
        ///  Delete Document Type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentDocumentTypesUidDELETEWithHttpInfo (string uid)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidDELETE");

            var localVarPath = "/api/v1/document/document-types/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete Document Type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentDocumentTypesUidDELETEAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DocumentDocumentTypesUidDELETEWithHttpInfoAsync(uid, cancellationToken);

        }

        /// <summary>
        ///  Delete Document Type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentDocumentTypesUidDELETEWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidDELETE");

            var localVarPath = "/api/v1/document/document-types/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="targetVersion">Version number (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentDocumentTypesUidExportDocTypeGET (string uid, string targetVersion = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentDocumentTypesUidExportDocTypeGETWithHttpInfo(uid, targetVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="targetVersion">Version number (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> DocumentDocumentTypesUidExportDocTypeGETWithHttpInfo (string uid, string targetVersion = default(string))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidExportDocTypeGET");

            var localVarPath = "/api/v1/document/document-types/{uid}/export_doc_type/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (targetVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_version", targetVersion)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidExportDocTypeGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="targetVersion">Version number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentDocumentTypesUidExportDocTypeGETAsync (string uid, string targetVersion = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentDocumentTypesUidExportDocTypeGETWithHttpInfoAsync(uid, targetVersion, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="targetVersion">Version number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentDocumentTypesUidExportDocTypeGETWithHttpInfoAsync (string uid, string targetVersion = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidExportDocTypeGET");

            var localVarPath = "/api/v1/document/document-types/{uid}/export_doc_type/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (targetVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_version", targetVersion)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidExportDocTypeGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentDocumentTypesUidFormFieldsGET (string uid)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentDocumentTypesUidFormFieldsGETWithHttpInfo(uid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentDocumentTypesUidFormFieldsGETWithHttpInfo (string uid)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidFormFieldsGET");

            var localVarPath = "/api/v1/document/document-types/{uid}/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentTypesUidFormFieldsGETAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentDocumentTypesUidFormFieldsGETWithHttpInfoAsync(uid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentTypesUidFormFieldsGETWithHttpInfoAsync (string uid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidFormFieldsGET");

            var localVarPath = "/api/v1/document/document-types/{uid}/form-fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidFormFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Retrieve Document Type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentTypeDetail</returns>
        public DocumentTypeDetail DocumentDocumentTypesUidGET (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentTypeDetail> localVarResponse = DocumentDocumentTypesUidGETWithHttpInfo(uid, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve Document Type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentTypeDetail</returns>
        public ApiResponse<DocumentTypeDetail> DocumentDocumentTypesUidGETWithHttpInfo (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidGET");

            var localVarPath = "/api/v1/document/document-types/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeDetail)));
        }

        /// <summary>
        ///  Retrieve Document Type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeDetail</returns>
        public async System.Threading.Tasks.Task<DocumentTypeDetail> DocumentDocumentTypesUidGETAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentTypeDetail> localVarResponse = await DocumentDocumentTypesUidGETWithHttpInfoAsync(uid, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve Document Type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeDetail>> DocumentDocumentTypesUidGETWithHttpInfoAsync (string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidGET");

            var localVarPath = "/api/v1/document/document-types/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeDetail)));
        }

        /// <summary>
        ///  Partial Update Document Type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <returns>DocumentTypeCreate</returns>
        public DocumentTypeCreate DocumentDocumentTypesUidPATCH (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate))
        {
             ApiResponse<DocumentTypeCreate> localVarResponse = DocumentDocumentTypesUidPATCHWithHttpInfo(uid, documentTypeCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Partial Update Document Type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentTypeCreate</returns>
        public ApiResponse<DocumentTypeCreate> DocumentDocumentTypesUidPATCHWithHttpInfo (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidPATCH");

            var localVarPath = "/api/v1/document/document-types/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentTypeCreate != null && documentTypeCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCreate)));
        }

        /// <summary>
        ///  Partial Update Document Type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeCreate</returns>
        public async System.Threading.Tasks.Task<DocumentTypeCreate> DocumentDocumentTypesUidPATCHAsync (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentTypeCreate> localVarResponse = await DocumentDocumentTypesUidPATCHWithHttpInfoAsync(uid, documentTypeCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Partial Update Document Type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeCreate>> DocumentDocumentTypesUidPATCHWithHttpInfoAsync (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidPATCH");

            var localVarPath = "/api/v1/document/document-types/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentTypeCreate != null && documentTypeCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCreate)));
        }

        /// <summary>
        ///  Update Document Type     Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <returns>DocumentTypeCreate</returns>
        public DocumentTypeCreate DocumentDocumentTypesUidPUT (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate))
        {
             ApiResponse<DocumentTypeCreate> localVarResponse = DocumentDocumentTypesUidPUTWithHttpInfo(uid, documentTypeCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Document Type     Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <returns>ApiResponse of DocumentTypeCreate</returns>
        public ApiResponse<DocumentTypeCreate> DocumentDocumentTypesUidPUTWithHttpInfo (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidPUT");

            var localVarPath = "/api/v1/document/document-types/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentTypeCreate != null && documentTypeCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCreate)));
        }

        /// <summary>
        ///  Update Document Type     Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeCreate</returns>
        public async System.Threading.Tasks.Task<DocumentTypeCreate> DocumentDocumentTypesUidPUTAsync (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentTypeCreate> localVarResponse = await DocumentDocumentTypesUidPUTWithHttpInfoAsync(uid, documentTypeCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update Document Type     Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeCreate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeCreate>> DocumentDocumentTypesUidPUTWithHttpInfoAsync (string uid, DocumentTypeCreate documentTypeCreate = default(DocumentTypeCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidPUT");

            var localVarPath = "/api/v1/document/document-types/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentTypeCreate != null && documentTypeCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeCreate; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeCreate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeCreate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeCreate)));
        }

        /// <summary>
        ///  Get info about related objects for ready-to-delete document type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeDetail"> (optional)</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentDocumentTypesUidPreDeletePOST (string uid, DocumentTypeDetail documentTypeDetail = default(DocumentTypeDetail))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentDocumentTypesUidPreDeletePOSTWithHttpInfo(uid, documentTypeDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get info about related objects for ready-to-delete document type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeDetail"> (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentDocumentTypesUidPreDeletePOSTWithHttpInfo (string uid, DocumentTypeDetail documentTypeDetail = default(DocumentTypeDetail))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidPreDeletePOST");

            var localVarPath = "/api/v1/document/document-types/{uid}/pre_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentTypeDetail != null && documentTypeDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidPreDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Get info about related objects for ready-to-delete document type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentTypesUidPreDeletePOSTAsync (string uid, DocumentTypeDetail documentTypeDetail = default(DocumentTypeDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentDocumentTypesUidPreDeletePOSTWithHttpInfoAsync(uid, documentTypeDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get info about related objects for ready-to-delete document type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">A UUID string identifying this document type.</param>
        /// <param name="documentTypeDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentTypesUidPreDeletePOSTWithHttpInfoAsync (string uid, DocumentTypeDetail documentTypeDetail = default(DocumentTypeDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentDocumentTypesUidPreDeletePOST");

            var localVarPath = "/api/v1/document/document-types/{uid}/pre_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (documentTypeDetail != null && documentTypeDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentTypeDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentTypeDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUidPreDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentTypeDetail</returns>
        public DocumentTypeDetail DocumentDocumentTypesUserProjectTypesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentTypeDetail> localVarResponse = DocumentDocumentTypesUserProjectTypesGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentTypeDetail</returns>
        public ApiResponse<DocumentTypeDetail> DocumentDocumentTypesUserProjectTypesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/document/document-types/user_project_types/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUserProjectTypesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentTypeDetail</returns>
        public async System.Threading.Tasks.Task<DocumentTypeDetail> DocumentDocumentTypesUserProjectTypesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentTypeDetail> localVarResponse = await DocumentDocumentTypesUserProjectTypesGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentTypeDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeDetail>> DocumentDocumentTypesUserProjectTypesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/document-types/user_project_types/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentTypesUserProjectTypesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentTypeDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <returns>DocumentDownloadZipResponse</returns>
        public DocumentDownloadZipResponse DocumentDocumentsDownloadZipGET (string documentIds = default(string), string excludeDocumentIds = default(string))
        {
             ApiResponse<DocumentDownloadZipResponse> localVarResponse = DocumentDocumentsDownloadZipGETWithHttpInfo(documentIds, excludeDocumentIds);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <returns>ApiResponse of DocumentDownloadZipResponse</returns>
        public ApiResponse<DocumentDownloadZipResponse> DocumentDocumentsDownloadZipGETWithHttpInfo (string documentIds = default(string), string excludeDocumentIds = default(string))
        {

            var localVarPath = "/api/v1/document/documents/download_zip/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_ids", documentIds)); // query parameter
            if (excludeDocumentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_document_ids", excludeDocumentIds)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsDownloadZipGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDownloadZipResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDownloadZipResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDownloadZipResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDownloadZipResponse</returns>
        public async System.Threading.Tasks.Task<DocumentDownloadZipResponse> DocumentDocumentsDownloadZipGETAsync (string documentIds = default(string), string excludeDocumentIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentDownloadZipResponse> localVarResponse = await DocumentDocumentsDownloadZipGETWithHttpInfoAsync(documentIds, excludeDocumentIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDownloadZipResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentDownloadZipResponse>> DocumentDocumentsDownloadZipGETWithHttpInfoAsync (string documentIds = default(string), string excludeDocumentIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/documents/download_zip/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_ids", documentIds)); // query parameter
            if (excludeDocumentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_document_ids", excludeDocumentIds)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsDownloadZipGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDownloadZipResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDownloadZipResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDownloadZipResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DocumentsForUserResponse</returns>
        public DocumentsForUserResponse DocumentDocumentsForUserGET ()
        {
             ApiResponse<DocumentsForUserResponse> localVarResponse = DocumentDocumentsForUserGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DocumentsForUserResponse</returns>
        public ApiResponse<DocumentsForUserResponse> DocumentDocumentsForUserGETWithHttpInfo ()
        {

            var localVarPath = "/api/v1/document/documents/for-user/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsForUserGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUserResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUserResponse</returns>
        public async System.Threading.Tasks.Task<DocumentsForUserResponse> DocumentDocumentsForUserGETAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentsForUserResponse> localVarResponse = await DocumentDocumentsForUserGETWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentsForUserResponse>> DocumentDocumentsForUserGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/documents/for-user/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsForUserGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUserResponse)));
        }

        /// <summary>
        ///  Document List with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>List&lt;DocumentsForUser&gt;</returns>
        public List<DocumentsForUser> DocumentDocumentsGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string))
        {
             ApiResponse<List<DocumentsForUser>> localVarResponse = DocumentDocumentsGETWithHttpInfo(jqFilters, clusterId, q);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document List with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentsForUser&gt;</returns>
        public ApiResponse<List<DocumentsForUser>> DocumentDocumentsGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string))
        {

            var localVarPath = "/api/v1/document/documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter
            if (clusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cluster_id", clusterId)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentsForUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentsForUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentsForUser>)));
        }

        /// <summary>
        ///  Document List with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentsForUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentsForUser>> DocumentDocumentsGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentsForUser>> localVarResponse = await DocumentDocumentsGETWithHttpInfoAsync(jqFilters, clusterId, q, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document List with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentsForUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentsForUser>>> DocumentDocumentsGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter
            if (clusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cluster_id", clusterId)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentsForUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentsForUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentsForUser>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns></returns>
        public void DocumentDocumentsIdDELETE (string id)
        {
             DocumentDocumentsIdDELETEWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentDocumentsIdDELETEWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdDELETE");

            var localVarPath = "/api/v1/document/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentDocumentsIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DocumentDocumentsIdDELETEWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentDocumentsIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdDELETE");

            var localVarPath = "/api/v1/document/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentDetail</returns>
        public DocumentDetail DocumentDocumentsIdDataGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentDetail> localVarResponse = DocumentDocumentsIdDataGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        public ApiResponse<DocumentDetail> DocumentDocumentsIdDataGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdDataGET");

            var localVarPath = "/api/v1/document/documents/{id}/data/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdDataGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        public async System.Threading.Tasks.Task<DocumentDetail> DocumentDocumentsIdDataGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentDetail> localVarResponse = await DocumentDocumentsIdDataGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentDocumentsIdDataGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdDataGET");

            var localVarPath = "/api/v1/document/documents/{id}/data/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdDataGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>List&lt;DocumentDefinitions&gt;</returns>
        public List<DocumentDefinitions> DocumentDocumentsIdDefinitionsGET (string id)
        {
             ApiResponse<List<DocumentDefinitions>> localVarResponse = DocumentDocumentsIdDefinitionsGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of List&lt;DocumentDefinitions&gt;</returns>
        public ApiResponse<List<DocumentDefinitions>> DocumentDocumentsIdDefinitionsGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdDefinitionsGET");

            var localVarPath = "/api/v1/document/documents/{id}/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdDefinitionsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentDefinitions>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentDefinitions>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentDefinitions>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentDefinitions&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentDefinitions>> DocumentDocumentsIdDefinitionsGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentDefinitions>> localVarResponse = await DocumentDocumentsIdDefinitionsGETWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentDefinitions&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentDefinitions>>> DocumentDocumentsIdDefinitionsGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdDefinitionsGET");

            var localVarPath = "/api/v1/document/documents/{id}/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdDefinitionsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentDefinitions>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentDefinitions>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentDefinitions>)));
        }

        /// <summary>
        ///  Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentDocumentsIdExtractionGET (string id)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentDocumentsIdExtractionGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentDocumentsIdExtractionGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdExtractionGET");

            var localVarPath = "/api/v1/document/documents/{id}/extraction/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdExtractionGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentsIdExtractionGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentDocumentsIdExtractionGETWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentsIdExtractionGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdExtractionGET");

            var localVarPath = "/api/v1/document/documents/{id}/extraction/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdExtractionGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentDocumentsIdFieldsGET (string id)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentDocumentsIdFieldsGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentDocumentsIdFieldsGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdFieldsGET");

            var localVarPath = "/api/v1/document/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentDocumentsIdFieldsGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentDocumentsIdFieldsGETWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentDocumentsIdFieldsGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdFieldsGET");

            var localVarPath = "/api/v1/document/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        public DocumentDetail DocumentDocumentsIdFieldsPATCH (string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
             ApiResponse<DocumentDetail> localVarResponse = DocumentDocumentsIdFieldsPATCHWithHttpInfo(id, documentDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        public ApiResponse<DocumentDetail> DocumentDocumentsIdFieldsPATCHWithHttpInfo (string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdFieldsPATCH");

            var localVarPath = "/api/v1/document/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdFieldsPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        public async System.Threading.Tasks.Task<DocumentDetail> DocumentDocumentsIdFieldsPATCHAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentDetail> localVarResponse = await DocumentDocumentsIdFieldsPATCHWithHttpInfoAsync(id, documentDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentDocumentsIdFieldsPATCHWithHttpInfoAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdFieldsPATCH");

            var localVarPath = "/api/v1/document/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdFieldsPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        public DocumentDetail DocumentDocumentsIdFieldsPOST (string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
             ApiResponse<DocumentDetail> localVarResponse = DocumentDocumentsIdFieldsPOSTWithHttpInfo(id, documentDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        public ApiResponse<DocumentDetail> DocumentDocumentsIdFieldsPOSTWithHttpInfo (string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdFieldsPOST");

            var localVarPath = "/api/v1/document/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdFieldsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        public async System.Threading.Tasks.Task<DocumentDetail> DocumentDocumentsIdFieldsPOSTAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentDetail> localVarResponse = await DocumentDocumentsIdFieldsPOSTWithHttpInfoAsync(id, documentDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentDocumentsIdFieldsPOSTWithHttpInfoAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdFieldsPOST");

            var localVarPath = "/api/v1/document/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdFieldsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        public DocumentDetail DocumentDocumentsIdFieldsPUT (string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
             ApiResponse<DocumentDetail> localVarResponse = DocumentDocumentsIdFieldsPUTWithHttpInfo(id, documentDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        public ApiResponse<DocumentDetail> DocumentDocumentsIdFieldsPUTWithHttpInfo (string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdFieldsPUT");

            var localVarPath = "/api/v1/document/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdFieldsPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        public async System.Threading.Tasks.Task<DocumentDetail> DocumentDocumentsIdFieldsPUTAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentDetail> localVarResponse = await DocumentDocumentsIdFieldsPUTWithHttpInfoAsync(id, documentDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentDocumentsIdFieldsPUTWithHttpInfoAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdFieldsPUT");

            var localVarPath = "/api/v1/document/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdFieldsPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>string</returns>
        public string DocumentDocumentsIdFullTextGET (string id)
        {
             ApiResponse<string> localVarResponse = DocumentDocumentsIdFullTextGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> DocumentDocumentsIdFullTextGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdFullTextGET");

            var localVarPath = "/api/v1/document/documents/{id}/full_text/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdFullTextGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DocumentDocumentsIdFullTextGETAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await DocumentDocumentsIdFullTextGETWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DocumentDocumentsIdFullTextGETWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdFullTextGET");

            var localVarPath = "/api/v1/document/documents/{id}/full_text/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdFullTextGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Document Detail with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentsForUser</returns>
        public DocumentsForUser DocumentDocumentsIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentsForUser> localVarResponse = DocumentDocumentsIdGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document Detail with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentsForUser</returns>
        public ApiResponse<DocumentsForUser> DocumentDocumentsIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdGET");

            var localVarPath = "/api/v1/document/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUser)));
        }

        /// <summary>
        ///  Document Detail with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUser</returns>
        public async System.Threading.Tasks.Task<DocumentsForUser> DocumentDocumentsIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentsForUser> localVarResponse = await DocumentDocumentsIdGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document Detail with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentsForUser>> DocumentDocumentsIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdGET");

            var localVarPath = "/api/v1/document/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUser)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        public DocumentDetail DocumentDocumentsIdPATCH (string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
             ApiResponse<DocumentDetail> localVarResponse = DocumentDocumentsIdPATCHWithHttpInfo(id, documentDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        public ApiResponse<DocumentDetail> DocumentDocumentsIdPATCHWithHttpInfo (string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdPATCH");

            var localVarPath = "/api/v1/document/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        public async System.Threading.Tasks.Task<DocumentDetail> DocumentDocumentsIdPATCHAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentDetail> localVarResponse = await DocumentDocumentsIdPATCHWithHttpInfoAsync(id, documentDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentDocumentsIdPATCHWithHttpInfoAsync (string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdPATCH");

            var localVarPath = "/api/v1/document/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  Set new assignee OR document status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>DocumentsForUser</returns>
        public DocumentsForUser DocumentDocumentsIdPUT (string id, DocumentsForUser documentsForUser = default(DocumentsForUser))
        {
             ApiResponse<DocumentsForUser> localVarResponse = DocumentDocumentsIdPUTWithHttpInfo(id, documentsForUser);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Set new assignee OR document status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>ApiResponse of DocumentsForUser</returns>
        public ApiResponse<DocumentsForUser> DocumentDocumentsIdPUTWithHttpInfo (string id, DocumentsForUser documentsForUser = default(DocumentsForUser))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdPUT");

            var localVarPath = "/api/v1/document/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentsForUser != null && documentsForUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentsForUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentsForUser; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUser)));
        }

        /// <summary>
        ///  Set new assignee OR document status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUser</returns>
        public async System.Threading.Tasks.Task<DocumentsForUser> DocumentDocumentsIdPUTAsync (string id, DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentsForUser> localVarResponse = await DocumentDocumentsIdPUTWithHttpInfoAsync(id, documentsForUser, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Set new assignee OR document status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentsForUser>> DocumentDocumentsIdPUTWithHttpInfoAsync (string id, DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdPUT");

            var localVarPath = "/api/v1/document/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentsForUser != null && documentsForUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentsForUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentsForUser; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUser)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentDocumentsIdShowGET (string id, bool? alt = default(bool?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentDocumentsIdShowGETWithHttpInfo(id, alt);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> DocumentDocumentsIdShowGETWithHttpInfo (string id, bool? alt = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdShowGET");

            var localVarPath = "/api/v1/document/documents/{id}/show/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alt", alt)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdShowGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentDocumentsIdShowGETAsync (string id, bool? alt = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentDocumentsIdShowGETWithHttpInfoAsync(id, alt, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentDocumentsIdShowGETWithHttpInfoAsync (string id, bool? alt = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentDocumentsIdShowGET");

            var localVarPath = "/api/v1/document/documents/{id}/show/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alt", alt)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsIdShowGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>MarkUnmarkForDeleteDocumentsResponse</returns>
        public MarkUnmarkForDeleteDocumentsResponse DocumentDocumentsMarkDeletePOST (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest))
        {
             ApiResponse<MarkUnmarkForDeleteDocumentsResponse> localVarResponse = DocumentDocumentsMarkDeletePOSTWithHttpInfo(markUnmarkForDeleteDocumentsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>ApiResponse of MarkUnmarkForDeleteDocumentsResponse</returns>
        public ApiResponse<MarkUnmarkForDeleteDocumentsResponse> DocumentDocumentsMarkDeletePOSTWithHttpInfo (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest))
        {

            var localVarPath = "/api/v1/document/documents/mark_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markUnmarkForDeleteDocumentsRequest != null && markUnmarkForDeleteDocumentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markUnmarkForDeleteDocumentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markUnmarkForDeleteDocumentsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsMarkDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnmarkForDeleteDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkUnmarkForDeleteDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnmarkForDeleteDocumentsResponse)));
        }

        /// <summary>
        ///  Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkUnmarkForDeleteDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<MarkUnmarkForDeleteDocumentsResponse> DocumentDocumentsMarkDeletePOSTAsync (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MarkUnmarkForDeleteDocumentsResponse> localVarResponse = await DocumentDocumentsMarkDeletePOSTWithHttpInfoAsync(markUnmarkForDeleteDocumentsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkUnmarkForDeleteDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkUnmarkForDeleteDocumentsResponse>> DocumentDocumentsMarkDeletePOSTWithHttpInfoAsync (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/documents/mark_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markUnmarkForDeleteDocumentsRequest != null && markUnmarkForDeleteDocumentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markUnmarkForDeleteDocumentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markUnmarkForDeleteDocumentsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsMarkDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnmarkForDeleteDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkUnmarkForDeleteDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnmarkForDeleteDocumentsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>DocumentsForUser</returns>
        public DocumentsForUser DocumentDocumentsPOST (DocumentsForUser documentsForUser = default(DocumentsForUser))
        {
             ApiResponse<DocumentsForUser> localVarResponse = DocumentDocumentsPOSTWithHttpInfo(documentsForUser);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>ApiResponse of DocumentsForUser</returns>
        public ApiResponse<DocumentsForUser> DocumentDocumentsPOSTWithHttpInfo (DocumentsForUser documentsForUser = default(DocumentsForUser))
        {

            var localVarPath = "/api/v1/document/documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentsForUser != null && documentsForUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentsForUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentsForUser; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUser)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUser</returns>
        public async System.Threading.Tasks.Task<DocumentsForUser> DocumentDocumentsPOSTAsync (DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentsForUser> localVarResponse = await DocumentDocumentsPOSTWithHttpInfoAsync(documentsForUser, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentsForUser>> DocumentDocumentsPOSTWithHttpInfoAsync (DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentsForUser != null && documentsForUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentsForUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentsForUser; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUser)));
        }

        /// <summary>
        ///  Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>MarkUnmarkForDeleteDocumentsResponse</returns>
        public MarkUnmarkForDeleteDocumentsResponse DocumentDocumentsUnmarkDeletePOST (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest))
        {
             ApiResponse<MarkUnmarkForDeleteDocumentsResponse> localVarResponse = DocumentDocumentsUnmarkDeletePOSTWithHttpInfo(markUnmarkForDeleteDocumentsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>ApiResponse of MarkUnmarkForDeleteDocumentsResponse</returns>
        public ApiResponse<MarkUnmarkForDeleteDocumentsResponse> DocumentDocumentsUnmarkDeletePOSTWithHttpInfo (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest))
        {

            var localVarPath = "/api/v1/document/documents/unmark_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markUnmarkForDeleteDocumentsRequest != null && markUnmarkForDeleteDocumentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markUnmarkForDeleteDocumentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markUnmarkForDeleteDocumentsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsUnmarkDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnmarkForDeleteDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkUnmarkForDeleteDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnmarkForDeleteDocumentsResponse)));
        }

        /// <summary>
        ///  Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkUnmarkForDeleteDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<MarkUnmarkForDeleteDocumentsResponse> DocumentDocumentsUnmarkDeletePOSTAsync (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MarkUnmarkForDeleteDocumentsResponse> localVarResponse = await DocumentDocumentsUnmarkDeletePOSTWithHttpInfoAsync(markUnmarkForDeleteDocumentsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkUnmarkForDeleteDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkUnmarkForDeleteDocumentsResponse>> DocumentDocumentsUnmarkDeletePOSTWithHttpInfoAsync (MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/documents/unmark_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markUnmarkForDeleteDocumentsRequest != null && markUnmarkForDeleteDocumentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markUnmarkForDeleteDocumentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markUnmarkForDeleteDocumentsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentDocumentsUnmarkDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnmarkForDeleteDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkUnmarkForDeleteDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnmarkForDeleteDocumentsResponse)));
        }

        /// <summary>
        ///  FieldAnnotationStatus List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;FieldAnnotationStatus&gt;</returns>
        public List<FieldAnnotationStatus> DocumentFieldAnnotationStatusesGET (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<FieldAnnotationStatus>> localVarResponse = DocumentFieldAnnotationStatusesGETWithHttpInfo(jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  FieldAnnotationStatus List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;FieldAnnotationStatus&gt;</returns>
        public ApiResponse<List<FieldAnnotationStatus>> DocumentFieldAnnotationStatusesGETWithHttpInfo (Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {

            var localVarPath = "/api/v1/document/field-annotation-statuses/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentFieldAnnotationStatusesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldAnnotationStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FieldAnnotationStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldAnnotationStatus>)));
        }

        /// <summary>
        ///  FieldAnnotationStatus List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;FieldAnnotationStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<FieldAnnotationStatus>> DocumentFieldAnnotationStatusesGETAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<FieldAnnotationStatus>> localVarResponse = await DocumentFieldAnnotationStatusesGETWithHttpInfoAsync(jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  FieldAnnotationStatus List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;FieldAnnotationStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FieldAnnotationStatus>>> DocumentFieldAnnotationStatusesGETWithHttpInfoAsync (Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/field-annotation-statuses/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentFieldAnnotationStatusesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FieldAnnotationStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FieldAnnotationStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FieldAnnotationStatus>)));
        }

        /// <summary>
        ///  Delete FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <returns></returns>
        public void DocumentFieldAnnotationStatusesIdDELETE (string id)
        {
             DocumentFieldAnnotationStatusesIdDELETEWithHttpInfo(id);
        }

        /// <summary>
        ///  Delete FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentFieldAnnotationStatusesIdDELETEWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentFieldAnnotationStatusesIdDELETE");

            var localVarPath = "/api/v1/document/field-annotation-statuses/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentFieldAnnotationStatusesIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentFieldAnnotationStatusesIdDELETEAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DocumentFieldAnnotationStatusesIdDELETEWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        ///  Delete FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentFieldAnnotationStatusesIdDELETEWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentFieldAnnotationStatusesIdDELETE");

            var localVarPath = "/api/v1/document/field-annotation-statuses/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentFieldAnnotationStatusesIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Retrieve FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>FieldAnnotationStatus</returns>
        public FieldAnnotationStatus DocumentFieldAnnotationStatusesIdGET (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<FieldAnnotationStatus> localVarResponse = DocumentFieldAnnotationStatusesIdGETWithHttpInfo(id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of FieldAnnotationStatus</returns>
        public ApiResponse<FieldAnnotationStatus> DocumentFieldAnnotationStatusesIdGETWithHttpInfo (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentFieldAnnotationStatusesIdGET");

            var localVarPath = "/api/v1/document/field-annotation-statuses/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentFieldAnnotationStatusesIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldAnnotationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldAnnotationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldAnnotationStatus)));
        }

        /// <summary>
        ///  Retrieve FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FieldAnnotationStatus</returns>
        public async System.Threading.Tasks.Task<FieldAnnotationStatus> DocumentFieldAnnotationStatusesIdGETAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FieldAnnotationStatus> localVarResponse = await DocumentFieldAnnotationStatusesIdGETWithHttpInfoAsync(id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FieldAnnotationStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldAnnotationStatus>> DocumentFieldAnnotationStatusesIdGETWithHttpInfoAsync (string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentFieldAnnotationStatusesIdGET");

            var localVarPath = "/api/v1/document/field-annotation-statuses/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentFieldAnnotationStatusesIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldAnnotationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldAnnotationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldAnnotationStatus)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <returns>FieldAnnotationStatus</returns>
        public FieldAnnotationStatus DocumentFieldAnnotationStatusesIdPATCH (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus))
        {
             ApiResponse<FieldAnnotationStatus> localVarResponse = DocumentFieldAnnotationStatusesIdPATCHWithHttpInfo(id, fieldAnnotationStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <returns>ApiResponse of FieldAnnotationStatus</returns>
        public ApiResponse<FieldAnnotationStatus> DocumentFieldAnnotationStatusesIdPATCHWithHttpInfo (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentFieldAnnotationStatusesIdPATCH");

            var localVarPath = "/api/v1/document/field-annotation-statuses/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fieldAnnotationStatus != null && fieldAnnotationStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldAnnotationStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldAnnotationStatus; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentFieldAnnotationStatusesIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldAnnotationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldAnnotationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldAnnotationStatus)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FieldAnnotationStatus</returns>
        public async System.Threading.Tasks.Task<FieldAnnotationStatus> DocumentFieldAnnotationStatusesIdPATCHAsync (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FieldAnnotationStatus> localVarResponse = await DocumentFieldAnnotationStatusesIdPATCHWithHttpInfoAsync(id, fieldAnnotationStatus, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FieldAnnotationStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldAnnotationStatus>> DocumentFieldAnnotationStatusesIdPATCHWithHttpInfoAsync (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentFieldAnnotationStatusesIdPATCH");

            var localVarPath = "/api/v1/document/field-annotation-statuses/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fieldAnnotationStatus != null && fieldAnnotationStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldAnnotationStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldAnnotationStatus; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentFieldAnnotationStatusesIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldAnnotationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldAnnotationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldAnnotationStatus)));
        }

        /// <summary>
        ///  Update FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <returns>FieldAnnotationStatus</returns>
        public FieldAnnotationStatus DocumentFieldAnnotationStatusesIdPUT (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus))
        {
             ApiResponse<FieldAnnotationStatus> localVarResponse = DocumentFieldAnnotationStatusesIdPUTWithHttpInfo(id, fieldAnnotationStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <returns>ApiResponse of FieldAnnotationStatus</returns>
        public ApiResponse<FieldAnnotationStatus> DocumentFieldAnnotationStatusesIdPUTWithHttpInfo (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentFieldAnnotationStatusesIdPUT");

            var localVarPath = "/api/v1/document/field-annotation-statuses/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fieldAnnotationStatus != null && fieldAnnotationStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldAnnotationStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldAnnotationStatus; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentFieldAnnotationStatusesIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldAnnotationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldAnnotationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldAnnotationStatus)));
        }

        /// <summary>
        ///  Update FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FieldAnnotationStatus</returns>
        public async System.Threading.Tasks.Task<FieldAnnotationStatus> DocumentFieldAnnotationStatusesIdPUTAsync (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FieldAnnotationStatus> localVarResponse = await DocumentFieldAnnotationStatusesIdPUTWithHttpInfoAsync(id, fieldAnnotationStatus, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this field annotation status.</param>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FieldAnnotationStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldAnnotationStatus>> DocumentFieldAnnotationStatusesIdPUTWithHttpInfoAsync (string id, FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentFieldAnnotationStatusesIdPUT");

            var localVarPath = "/api/v1/document/field-annotation-statuses/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fieldAnnotationStatus != null && fieldAnnotationStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldAnnotationStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldAnnotationStatus; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentFieldAnnotationStatusesIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldAnnotationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldAnnotationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldAnnotationStatus)));
        }

        /// <summary>
        ///  Create FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <returns>FieldAnnotationStatus</returns>
        public FieldAnnotationStatus DocumentFieldAnnotationStatusesPOST (FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus))
        {
             ApiResponse<FieldAnnotationStatus> localVarResponse = DocumentFieldAnnotationStatusesPOSTWithHttpInfo(fieldAnnotationStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <returns>ApiResponse of FieldAnnotationStatus</returns>
        public ApiResponse<FieldAnnotationStatus> DocumentFieldAnnotationStatusesPOSTWithHttpInfo (FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus))
        {

            var localVarPath = "/api/v1/document/field-annotation-statuses/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldAnnotationStatus != null && fieldAnnotationStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldAnnotationStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldAnnotationStatus; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentFieldAnnotationStatusesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldAnnotationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldAnnotationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldAnnotationStatus)));
        }

        /// <summary>
        ///  Create FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FieldAnnotationStatus</returns>
        public async System.Threading.Tasks.Task<FieldAnnotationStatus> DocumentFieldAnnotationStatusesPOSTAsync (FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FieldAnnotationStatus> localVarResponse = await DocumentFieldAnnotationStatusesPOSTWithHttpInfoAsync(fieldAnnotationStatus, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create FieldAnnotationStatus
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldAnnotationStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FieldAnnotationStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldAnnotationStatus>> DocumentFieldAnnotationStatusesPOSTWithHttpInfoAsync (FieldAnnotationStatus fieldAnnotationStatus = default(FieldAnnotationStatus), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/field-annotation-statuses/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldAnnotationStatus != null && fieldAnnotationStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fieldAnnotationStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldAnnotationStatus; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentFieldAnnotationStatusesPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldAnnotationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FieldAnnotationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldAnnotationStatus)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldAnnotation</returns>
        public DocumentFieldAnnotation DocumentProjectProjectPkDocumentFieldAnnotationsForUserGET (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentFieldAnnotation> localVarResponse = DocumentProjectProjectPkDocumentFieldAnnotationsForUserGETWithHttpInfo(projectPk, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldAnnotation</returns>
        public ApiResponse<DocumentFieldAnnotation> DocumentProjectProjectPkDocumentFieldAnnotationsForUserGETWithHttpInfo (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldAnnotationsForUserGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/document-field-annotations/for-user/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentFieldAnnotationsForUserGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldAnnotation)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldAnnotation</returns>
        public async System.Threading.Tasks.Task<DocumentFieldAnnotation> DocumentProjectProjectPkDocumentFieldAnnotationsForUserGETAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldAnnotation> localVarResponse = await DocumentProjectProjectPkDocumentFieldAnnotationsForUserGETWithHttpInfoAsync(projectPk, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldAnnotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldAnnotation>> DocumentProjectProjectPkDocumentFieldAnnotationsForUserGETWithHttpInfoAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldAnnotationsForUserGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/document-field-annotations/for-user/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentFieldAnnotationsForUserGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldAnnotation)));
        }

        /// <summary>
        ///  Field Annotation List + Field Annotation False Match List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldAnnotation&gt;</returns>
        public List<DocumentFieldAnnotation> DocumentProjectProjectPkDocumentFieldAnnotationsGET (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<DocumentFieldAnnotation>> localVarResponse = DocumentProjectProjectPkDocumentFieldAnnotationsGETWithHttpInfo(projectPk, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Field Annotation List + Field Annotation False Match List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldAnnotation&gt;</returns>
        public ApiResponse<List<DocumentFieldAnnotation>> DocumentProjectProjectPkDocumentFieldAnnotationsGETWithHttpInfo (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldAnnotationsGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/document-field-annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentFieldAnnotationsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldAnnotation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldAnnotation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldAnnotation>)));
        }

        /// <summary>
        ///  Field Annotation List + Field Annotation False Match List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldAnnotation&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentFieldAnnotation>> DocumentProjectProjectPkDocumentFieldAnnotationsGETAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentFieldAnnotation>> localVarResponse = await DocumentProjectProjectPkDocumentFieldAnnotationsGETWithHttpInfoAsync(projectPk, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Field Annotation List + Field Annotation False Match List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldAnnotation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldAnnotation>>> DocumentProjectProjectPkDocumentFieldAnnotationsGETWithHttpInfoAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldAnnotationsGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/document-field-annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentFieldAnnotationsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldAnnotation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldAnnotation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldAnnotation>)));
        }

        /// <summary>
        ///  Field Annotation Details (not Field Annotation False Match)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldAnnotation</returns>
        public DocumentFieldAnnotation DocumentProjectProjectPkDocumentFieldAnnotationsUidGET (string projectPk, string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentFieldAnnotation> localVarResponse = DocumentProjectProjectPkDocumentFieldAnnotationsUidGETWithHttpInfo(projectPk, uid, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Field Annotation Details (not Field Annotation False Match)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldAnnotation</returns>
        public ApiResponse<DocumentFieldAnnotation> DocumentProjectProjectPkDocumentFieldAnnotationsUidGETWithHttpInfo (string projectPk, string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldAnnotationsUidGET");
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldAnnotationsUidGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/document-field-annotations/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentFieldAnnotationsUidGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldAnnotation)));
        }

        /// <summary>
        ///  Field Annotation Details (not Field Annotation False Match)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldAnnotation</returns>
        public async System.Threading.Tasks.Task<DocumentFieldAnnotation> DocumentProjectProjectPkDocumentFieldAnnotationsUidGETAsync (string projectPk, string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldAnnotation> localVarResponse = await DocumentProjectProjectPkDocumentFieldAnnotationsUidGETWithHttpInfoAsync(projectPk, uid, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Field Annotation Details (not Field Annotation False Match)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="uid"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldAnnotation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldAnnotation>> DocumentProjectProjectPkDocumentFieldAnnotationsUidGETWithHttpInfoAsync (string projectPk, string uid, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldAnnotationsUidGET");
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldAnnotationsUidGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/document-field-annotations/{uid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (uid != null) localVarPathParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentFieldAnnotationsUidGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldAnnotation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldAnnotation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldAnnotation)));
        }

        /// <summary>
        ///  Document Field Value List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>List&lt;DocumentFieldValue&gt;</returns>
        public List<DocumentFieldValue> DocumentProjectProjectPkDocumentFieldValuesGET (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<List<DocumentFieldValue>> localVarResponse = DocumentProjectProjectPkDocumentFieldValuesGETWithHttpInfo(projectPk, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document Field Value List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentFieldValue&gt;</returns>
        public ApiResponse<List<DocumentFieldValue>> DocumentProjectProjectPkDocumentFieldValuesGETWithHttpInfo (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldValuesGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/document-field-values/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentFieldValuesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldValue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldValue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldValue>)));
        }

        /// <summary>
        ///  Document Field Value List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentFieldValue&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentFieldValue>> DocumentProjectProjectPkDocumentFieldValuesGETAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentFieldValue>> localVarResponse = await DocumentProjectProjectPkDocumentFieldValuesGETWithHttpInfoAsync(projectPk, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document Field Value List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentFieldValue&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentFieldValue>>> DocumentProjectProjectPkDocumentFieldValuesGETWithHttpInfoAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldValuesGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/document-field-values/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentFieldValuesGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentFieldValue>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentFieldValue>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentFieldValue>)));
        }

        /// <summary>
        ///  Document Field Value Details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentFieldValue</returns>
        public DocumentFieldValue DocumentProjectProjectPkDocumentFieldValuesIdGET (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentFieldValue> localVarResponse = DocumentProjectProjectPkDocumentFieldValuesIdGETWithHttpInfo(projectPk, id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document Field Value Details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentFieldValue</returns>
        public ApiResponse<DocumentFieldValue> DocumentProjectProjectPkDocumentFieldValuesIdGETWithHttpInfo (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldValuesIdGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldValuesIdGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/document-field-values/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentFieldValuesIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldValue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldValue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldValue)));
        }

        /// <summary>
        ///  Document Field Value Details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentFieldValue</returns>
        public async System.Threading.Tasks.Task<DocumentFieldValue> DocumentProjectProjectPkDocumentFieldValuesIdGETAsync (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentFieldValue> localVarResponse = await DocumentProjectProjectPkDocumentFieldValuesIdGETWithHttpInfoAsync(projectPk, id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document Field Value Details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this field value.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentFieldValue)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentFieldValue>> DocumentProjectProjectPkDocumentFieldValuesIdGETWithHttpInfoAsync (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldValuesIdGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentFieldValuesIdGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/document-field-values/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentFieldValuesIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentFieldValue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentFieldValue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentFieldValue)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <returns>List&lt;AnnotationInDocument&gt;</returns>
        public List<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGET (string projectPk, string documentPk)
        {
             ApiResponse<List<AnnotationInDocument>> localVarResponse = DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGETWithHttpInfo(projectPk, documentPk);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <returns>ApiResponse of List&lt;AnnotationInDocument&gt;</returns>
        public ApiResponse<List<AnnotationInDocument>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGETWithHttpInfo (string projectPk, string documentPk)
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGET");
            // verify the required parameter 'documentPk' is set
            if (documentPk == null)
                throw new ApiException(400, "Missing required parameter 'documentPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentPk != null) localVarPathParams.Add("document_pk", this.Configuration.ApiClient.ParameterToString(documentPk)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnnotationInDocument>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AnnotationInDocument>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnnotationInDocument>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;AnnotationInDocument&gt;</returns>
        public async System.Threading.Tasks.Task<List<AnnotationInDocument>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGETAsync (string projectPk, string documentPk, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<AnnotationInDocument>> localVarResponse = await DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGETWithHttpInfoAsync(projectPk, documentPk, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;AnnotationInDocument&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AnnotationInDocument>>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGETWithHttpInfoAsync (string projectPk, string documentPk, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGET");
            // verify the required parameter 'documentPk' is set
            if (documentPk == null)
                throw new ApiException(400, "Missing required parameter 'documentPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentPk != null) localVarPathParams.Add("document_pk", this.Configuration.ApiClient.ParameterToString(documentPk)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnnotationInDocument>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AnnotationInDocument>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnnotationInDocument>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE (string projectPk, string documentPk, string id)
        {
             DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEWithHttpInfo(projectPk, documentPk, id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEWithHttpInfo (string projectPk, string documentPk, string id)
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE");
            // verify the required parameter 'documentPk' is set
            if (documentPk == null)
                throw new ApiException(400, "Missing required parameter 'documentPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentPk != null) localVarPathParams.Add("document_pk", this.Configuration.ApiClient.ParameterToString(documentPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEAsync (string projectPk, string documentPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEWithHttpInfoAsync(projectPk, documentPk, id, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEWithHttpInfoAsync (string projectPk, string documentPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE");
            // verify the required parameter 'documentPk' is set
            if (documentPk == null)
                throw new ApiException(400, "Missing required parameter 'documentPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentPk != null) localVarPathParams.Add("document_pk", this.Configuration.ApiClient.ParameterToString(documentPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <returns>AnnotationInDocument</returns>
        public AnnotationInDocument DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET (string projectPk, string documentPk, string id)
        {
             ApiResponse<AnnotationInDocument> localVarResponse = DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETWithHttpInfo(projectPk, documentPk, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AnnotationInDocument</returns>
        public ApiResponse<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETWithHttpInfo (string projectPk, string documentPk, string id)
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET");
            // verify the required parameter 'documentPk' is set
            if (documentPk == null)
                throw new ApiException(400, "Missing required parameter 'documentPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentPk != null) localVarPathParams.Add("document_pk", this.Configuration.ApiClient.ParameterToString(documentPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationInDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotationInDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotationInDocument)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnotationInDocument</returns>
        public async System.Threading.Tasks.Task<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETAsync (string projectPk, string documentPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AnnotationInDocument> localVarResponse = await DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETWithHttpInfoAsync(projectPk, documentPk, id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnotationInDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnotationInDocument>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETWithHttpInfoAsync (string projectPk, string documentPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET");
            // verify the required parameter 'documentPk' is set
            if (documentPk == null)
                throw new ApiException(400, "Missing required parameter 'documentPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentPk != null) localVarPathParams.Add("document_pk", this.Configuration.ApiClient.ParameterToString(documentPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationInDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotationInDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotationInDocument)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <returns>AnnotationInDocument</returns>
        public AnnotationInDocument DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument))
        {
             ApiResponse<AnnotationInDocument> localVarResponse = DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHWithHttpInfo(projectPk, documentPk, id, annotationInDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <returns>ApiResponse of AnnotationInDocument</returns>
        public ApiResponse<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHWithHttpInfo (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH");
            // verify the required parameter 'documentPk' is set
            if (documentPk == null)
                throw new ApiException(400, "Missing required parameter 'documentPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentPk != null) localVarPathParams.Add("document_pk", this.Configuration.ApiClient.ParameterToString(documentPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (annotationInDocument != null && annotationInDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotationInDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotationInDocument; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationInDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotationInDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotationInDocument)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnotationInDocument</returns>
        public async System.Threading.Tasks.Task<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHAsync (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AnnotationInDocument> localVarResponse = await DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHWithHttpInfoAsync(projectPk, documentPk, id, annotationInDocument, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnotationInDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnotationInDocument>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHWithHttpInfoAsync (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH");
            // verify the required parameter 'documentPk' is set
            if (documentPk == null)
                throw new ApiException(400, "Missing required parameter 'documentPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentPk != null) localVarPathParams.Add("document_pk", this.Configuration.ApiClient.ParameterToString(documentPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (annotationInDocument != null && annotationInDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotationInDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotationInDocument; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationInDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotationInDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotationInDocument)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <returns>AnnotationInDocument</returns>
        public AnnotationInDocument DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument))
        {
             ApiResponse<AnnotationInDocument> localVarResponse = DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTWithHttpInfo(projectPk, documentPk, id, annotationInDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <returns>ApiResponse of AnnotationInDocument</returns>
        public ApiResponse<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTWithHttpInfo (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT");
            // verify the required parameter 'documentPk' is set
            if (documentPk == null)
                throw new ApiException(400, "Missing required parameter 'documentPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentPk != null) localVarPathParams.Add("document_pk", this.Configuration.ApiClient.ParameterToString(documentPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (annotationInDocument != null && annotationInDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotationInDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotationInDocument; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationInDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotationInDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotationInDocument)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnotationInDocument</returns>
        public async System.Threading.Tasks.Task<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTAsync (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AnnotationInDocument> localVarResponse = await DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTWithHttpInfoAsync(projectPk, documentPk, id, annotationInDocument, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="id"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnotationInDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnotationInDocument>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTWithHttpInfoAsync (string projectPk, string documentPk, string id, AnnotationInDocument annotationInDocument = default(AnnotationInDocument), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT");
            // verify the required parameter 'documentPk' is set
            if (documentPk == null)
                throw new ApiException(400, "Missing required parameter 'documentPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentPk != null) localVarPathParams.Add("document_pk", this.Configuration.ApiClient.ParameterToString(documentPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (annotationInDocument != null && annotationInDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotationInDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotationInDocument; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationInDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotationInDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotationInDocument)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <returns>AnnotationInDocument</returns>
        public AnnotationInDocument DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOST (string projectPk, string documentPk, AnnotationInDocument annotationInDocument = default(AnnotationInDocument))
        {
             ApiResponse<AnnotationInDocument> localVarResponse = DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTWithHttpInfo(projectPk, documentPk, annotationInDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <returns>ApiResponse of AnnotationInDocument</returns>
        public ApiResponse<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTWithHttpInfo (string projectPk, string documentPk, AnnotationInDocument annotationInDocument = default(AnnotationInDocument))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOST");
            // verify the required parameter 'documentPk' is set
            if (documentPk == null)
                throw new ApiException(400, "Missing required parameter 'documentPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOST");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentPk != null) localVarPathParams.Add("document_pk", this.Configuration.ApiClient.ParameterToString(documentPk)); // path parameter
            if (annotationInDocument != null && annotationInDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotationInDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotationInDocument; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationInDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotationInDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotationInDocument)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnotationInDocument</returns>
        public async System.Threading.Tasks.Task<AnnotationInDocument> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTAsync (string projectPk, string documentPk, AnnotationInDocument annotationInDocument = default(AnnotationInDocument), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AnnotationInDocument> localVarResponse = await DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTWithHttpInfoAsync(projectPk, documentPk, annotationInDocument, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentPk"></param>
        /// <param name="annotationInDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnotationInDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnotationInDocument>> DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTWithHttpInfoAsync (string projectPk, string documentPk, AnnotationInDocument annotationInDocument = default(AnnotationInDocument), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOST");
            // verify the required parameter 'documentPk' is set
            if (documentPk == null)
                throw new ApiException(400, "Missing required parameter 'documentPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOST");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentPk != null) localVarPathParams.Add("document_pk", this.Configuration.ApiClient.ParameterToString(documentPk)); // path parameter
            if (annotationInDocument != null && annotationInDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annotationInDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annotationInDocument; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotationInDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotationInDocument) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotationInDocument)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <returns>DocumentDownloadZipResponse</returns>
        public DocumentDownloadZipResponse DocumentProjectProjectPkDocumentsDownloadZipGET (string projectPk, string documentIds = default(string), string excludeDocumentIds = default(string))
        {
             ApiResponse<DocumentDownloadZipResponse> localVarResponse = DocumentProjectProjectPkDocumentsDownloadZipGETWithHttpInfo(projectPk, documentIds, excludeDocumentIds);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <returns>ApiResponse of DocumentDownloadZipResponse</returns>
        public ApiResponse<DocumentDownloadZipResponse> DocumentProjectProjectPkDocumentsDownloadZipGETWithHttpInfo (string projectPk, string documentIds = default(string), string excludeDocumentIds = default(string))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDownloadZipGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/download_zip/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_ids", documentIds)); // query parameter
            if (excludeDocumentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_document_ids", excludeDocumentIds)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDownloadZipGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDownloadZipResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDownloadZipResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDownloadZipResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDownloadZipResponse</returns>
        public async System.Threading.Tasks.Task<DocumentDownloadZipResponse> DocumentProjectProjectPkDocumentsDownloadZipGETAsync (string projectPk, string documentIds = default(string), string excludeDocumentIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentDownloadZipResponse> localVarResponse = await DocumentProjectProjectPkDocumentsDownloadZipGETWithHttpInfoAsync(projectPk, documentIds, excludeDocumentIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentIds">Filter by Document ids separated by commas (optional)</param>
        /// <param name="excludeDocumentIds">Exclude Document ids separated by commas (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDownloadZipResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentDownloadZipResponse>> DocumentProjectProjectPkDocumentsDownloadZipGETWithHttpInfoAsync (string projectPk, string documentIds = default(string), string excludeDocumentIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsDownloadZipGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/download_zip/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_ids", documentIds)); // query parameter
            if (excludeDocumentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_document_ids", excludeDocumentIds)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsDownloadZipGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDownloadZipResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDownloadZipResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDownloadZipResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <returns>DocumentsForUserResponse</returns>
        public DocumentsForUserResponse DocumentProjectProjectPkDocumentsForUserGET (string projectPk)
        {
             ApiResponse<DocumentsForUserResponse> localVarResponse = DocumentProjectProjectPkDocumentsForUserGETWithHttpInfo(projectPk);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <returns>ApiResponse of DocumentsForUserResponse</returns>
        public ApiResponse<DocumentsForUserResponse> DocumentProjectProjectPkDocumentsForUserGETWithHttpInfo (string projectPk)
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsForUserGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/for-user/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsForUserGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUserResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUserResponse</returns>
        public async System.Threading.Tasks.Task<DocumentsForUserResponse> DocumentProjectProjectPkDocumentsForUserGETAsync (string projectPk, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentsForUserResponse> localVarResponse = await DocumentProjectProjectPkDocumentsForUserGETWithHttpInfoAsync(projectPk, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentsForUserResponse>> DocumentProjectProjectPkDocumentsForUserGETWithHttpInfoAsync (string projectPk, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsForUserGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/for-user/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsForUserGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUserResponse)));
        }

        /// <summary>
        ///  Document List with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>List&lt;DocumentsForUser&gt;</returns>
        public List<DocumentsForUser> DocumentProjectProjectPkDocumentsGET (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string))
        {
             ApiResponse<List<DocumentsForUser>> localVarResponse = DocumentProjectProjectPkDocumentsGETWithHttpInfo(projectPk, jqFilters, clusterId, q);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document List with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentsForUser&gt;</returns>
        public ApiResponse<List<DocumentsForUser>> DocumentProjectProjectPkDocumentsGETWithHttpInfo (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter
            if (clusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cluster_id", clusterId)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentsForUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentsForUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentsForUser>)));
        }

        /// <summary>
        ///  Document List with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentsForUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentsForUser>> DocumentProjectProjectPkDocumentsGETAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentsForUser>> localVarResponse = await DocumentProjectProjectPkDocumentsGETWithHttpInfoAsync(projectPk, jqFilters, clusterId, q, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document List with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="clusterId">Cluster id to filter by (optional)</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentsForUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentsForUser>>> DocumentProjectProjectPkDocumentsGETWithHttpInfoAsync (string projectPk, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), int? clusterId = default(int?), string q = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter
            if (clusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cluster_id", clusterId)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentsForUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentsForUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentsForUser>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns></returns>
        public void DocumentProjectProjectPkDocumentsIdDELETE (string projectPk, string id)
        {
             DocumentProjectProjectPkDocumentsIdDELETEWithHttpInfo(projectPk, id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentProjectProjectPkDocumentsIdDELETEWithHttpInfo (string projectPk, string id)
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdDELETE");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdDELETE");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentProjectProjectPkDocumentsIdDELETEAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DocumentProjectProjectPkDocumentsIdDELETEWithHttpInfoAsync(projectPk, id, cancellationToken);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentProjectProjectPkDocumentsIdDELETEWithHttpInfoAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdDELETE");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdDELETE");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentDetail</returns>
        public DocumentDetail DocumentProjectProjectPkDocumentsIdDataGET (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentDetail> localVarResponse = DocumentProjectProjectPkDocumentsIdDataGETWithHttpInfo(projectPk, id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        public ApiResponse<DocumentDetail> DocumentProjectProjectPkDocumentsIdDataGETWithHttpInfo (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdDataGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdDataGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/data/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdDataGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        public async System.Threading.Tasks.Task<DocumentDetail> DocumentProjectProjectPkDocumentsIdDataGETAsync (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentDetail> localVarResponse = await DocumentProjectProjectPkDocumentsIdDataGETWithHttpInfoAsync(projectPk, id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Restricted set of fields in response (except full_text), see get_serializer_class()
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentProjectProjectPkDocumentsIdDataGETWithHttpInfoAsync (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdDataGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdDataGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/data/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdDataGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>List&lt;DocumentDefinitions&gt;</returns>
        public List<DocumentDefinitions> DocumentProjectProjectPkDocumentsIdDefinitionsGET (string projectPk, string id)
        {
             ApiResponse<List<DocumentDefinitions>> localVarResponse = DocumentProjectProjectPkDocumentsIdDefinitionsGETWithHttpInfo(projectPk, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of List&lt;DocumentDefinitions&gt;</returns>
        public ApiResponse<List<DocumentDefinitions>> DocumentProjectProjectPkDocumentsIdDefinitionsGETWithHttpInfo (string projectPk, string id)
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdDefinitionsGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdDefinitionsGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdDefinitionsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentDefinitions>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentDefinitions>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentDefinitions>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;DocumentDefinitions&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentDefinitions>> DocumentProjectProjectPkDocumentsIdDefinitionsGETAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<DocumentDefinitions>> localVarResponse = await DocumentProjectProjectPkDocumentsIdDefinitionsGETWithHttpInfoAsync(projectPk, id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;DocumentDefinitions&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentDefinitions>>> DocumentProjectProjectPkDocumentsIdDefinitionsGETWithHttpInfoAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdDefinitionsGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdDefinitionsGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdDefinitionsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentDefinitions>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DocumentDefinitions>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentDefinitions>)));
        }

        /// <summary>
        ///  Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentProjectProjectPkDocumentsIdExtractionGET (string projectPk, string id)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentProjectProjectPkDocumentsIdExtractionGETWithHttpInfo(projectPk, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentProjectProjectPkDocumentsIdExtractionGETWithHttpInfo (string projectPk, string id)
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdExtractionGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdExtractionGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/extraction/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdExtractionGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentProjectProjectPkDocumentsIdExtractionGETAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentProjectProjectPkDocumentsIdExtractionGETWithHttpInfoAsync(projectPk, id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentProjectProjectPkDocumentsIdExtractionGETWithHttpInfoAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdExtractionGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdExtractionGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/extraction/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdExtractionGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentProjectProjectPkDocumentsIdFieldsGET (string projectPk, string id)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentProjectProjectPkDocumentsIdFieldsGETWithHttpInfo(projectPk, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentProjectProjectPkDocumentsIdFieldsGETWithHttpInfo (string projectPk, string id)
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentProjectProjectPkDocumentsIdFieldsGETAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentProjectProjectPkDocumentsIdFieldsGETWithHttpInfoAsync(projectPk, id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentProjectProjectPkDocumentsIdFieldsGETWithHttpInfoAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdFieldsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        public DocumentDetail DocumentProjectProjectPkDocumentsIdFieldsPATCH (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
             ApiResponse<DocumentDetail> localVarResponse = DocumentProjectProjectPkDocumentsIdFieldsPATCHWithHttpInfo(projectPk, id, documentDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        public ApiResponse<DocumentDetail> DocumentProjectProjectPkDocumentsIdFieldsPATCHWithHttpInfo (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsPATCH");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdFieldsPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        public async System.Threading.Tasks.Task<DocumentDetail> DocumentProjectProjectPkDocumentsIdFieldsPATCHAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentDetail> localVarResponse = await DocumentProjectProjectPkDocumentsIdFieldsPATCHWithHttpInfoAsync(projectPk, id, documentDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentProjectProjectPkDocumentsIdFieldsPATCHWithHttpInfoAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsPATCH");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdFieldsPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        public DocumentDetail DocumentProjectProjectPkDocumentsIdFieldsPOST (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
             ApiResponse<DocumentDetail> localVarResponse = DocumentProjectProjectPkDocumentsIdFieldsPOSTWithHttpInfo(projectPk, id, documentDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        public ApiResponse<DocumentDetail> DocumentProjectProjectPkDocumentsIdFieldsPOSTWithHttpInfo (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsPOST");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdFieldsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        public async System.Threading.Tasks.Task<DocumentDetail> DocumentProjectProjectPkDocumentsIdFieldsPOSTAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentDetail> localVarResponse = await DocumentProjectProjectPkDocumentsIdFieldsPOSTWithHttpInfoAsync(projectPk, id, documentDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentProjectProjectPkDocumentsIdFieldsPOSTWithHttpInfoAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsPOST");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdFieldsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        public DocumentDetail DocumentProjectProjectPkDocumentsIdFieldsPUT (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
             ApiResponse<DocumentDetail> localVarResponse = DocumentProjectProjectPkDocumentsIdFieldsPUTWithHttpInfo(projectPk, id, documentDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        public ApiResponse<DocumentDetail> DocumentProjectProjectPkDocumentsIdFieldsPUTWithHttpInfo (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsPUT");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdFieldsPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        public async System.Threading.Tasks.Task<DocumentDetail> DocumentProjectProjectPkDocumentsIdFieldsPUTAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentDetail> localVarResponse = await DocumentProjectProjectPkDocumentsIdFieldsPUTWithHttpInfoAsync(projectPk, id, documentDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentProjectProjectPkDocumentsIdFieldsPUTWithHttpInfoAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFieldsPUT");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/fields/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdFieldsPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>string</returns>
        public string DocumentProjectProjectPkDocumentsIdFullTextGET (string projectPk, string id)
        {
             ApiResponse<string> localVarResponse = DocumentProjectProjectPkDocumentsIdFullTextGETWithHttpInfo(projectPk, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> DocumentProjectProjectPkDocumentsIdFullTextGETWithHttpInfo (string projectPk, string id)
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFullTextGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFullTextGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/full_text/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdFullTextGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DocumentProjectProjectPkDocumentsIdFullTextGETAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await DocumentProjectProjectPkDocumentsIdFullTextGETWithHttpInfoAsync(projectPk, id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DocumentProjectProjectPkDocumentsIdFullTextGETWithHttpInfoAsync (string projectPk, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFullTextGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdFullTextGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/full_text/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdFullTextGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Document Detail with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>DocumentsForUser</returns>
        public DocumentsForUser DocumentProjectProjectPkDocumentsIdGET (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
             ApiResponse<DocumentsForUser> localVarResponse = DocumentProjectProjectPkDocumentsIdGETWithHttpInfo(projectPk, id, jqFilters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Document Detail with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <returns>ApiResponse of DocumentsForUser</returns>
        public ApiResponse<DocumentsForUser> DocumentProjectProjectPkDocumentsIdGETWithHttpInfo (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUser)));
        }

        /// <summary>
        ///  Document Detail with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUser</returns>
        public async System.Threading.Tasks.Task<DocumentsForUser> DocumentProjectProjectPkDocumentsIdGETAsync (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentsForUser> localVarResponse = await DocumentProjectProjectPkDocumentsIdGETWithHttpInfoAsync(projectPk, id, jqFilters, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Document Detail with Fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="jqFilters">Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentsForUser>> DocumentProjectProjectPkDocumentsIdGETWithHttpInfoAsync (string projectPk, string id, Dictionary<string, string> jqFilters = default(Dictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (jqFilters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jq_filters", jqFilters)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUser)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>DocumentDetail</returns>
        public DocumentDetail DocumentProjectProjectPkDocumentsIdPATCH (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
             ApiResponse<DocumentDetail> localVarResponse = DocumentProjectProjectPkDocumentsIdPATCHWithHttpInfo(projectPk, id, documentDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <returns>ApiResponse of DocumentDetail</returns>
        public ApiResponse<DocumentDetail> DocumentProjectProjectPkDocumentsIdPATCHWithHttpInfo (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdPATCH");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentDetail</returns>
        public async System.Threading.Tasks.Task<DocumentDetail> DocumentProjectProjectPkDocumentsIdPATCHAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentDetail> localVarResponse = await DocumentProjectProjectPkDocumentsIdPATCHWithHttpInfoAsync(projectPk, id, documentDetail, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentDetail"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentDetail>> DocumentProjectProjectPkDocumentsIdPATCHWithHttpInfoAsync (string projectPk, string id, DocumentDetail documentDetail = default(DocumentDetail), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdPATCH");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdPATCH");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentDetail != null && documentDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentDetail; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentDetail)));
        }

        /// <summary>
        ///  Set new assignee OR document status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>DocumentsForUser</returns>
        public DocumentsForUser DocumentProjectProjectPkDocumentsIdPUT (string projectPk, string id, DocumentsForUser documentsForUser = default(DocumentsForUser))
        {
             ApiResponse<DocumentsForUser> localVarResponse = DocumentProjectProjectPkDocumentsIdPUTWithHttpInfo(projectPk, id, documentsForUser);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Set new assignee OR document status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>ApiResponse of DocumentsForUser</returns>
        public ApiResponse<DocumentsForUser> DocumentProjectProjectPkDocumentsIdPUTWithHttpInfo (string projectPk, string id, DocumentsForUser documentsForUser = default(DocumentsForUser))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdPUT");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentsForUser != null && documentsForUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentsForUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentsForUser; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUser)));
        }

        /// <summary>
        ///  Set new assignee OR document status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUser</returns>
        public async System.Threading.Tasks.Task<DocumentsForUser> DocumentProjectProjectPkDocumentsIdPUTAsync (string projectPk, string id, DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentsForUser> localVarResponse = await DocumentProjectProjectPkDocumentsIdPUTWithHttpInfoAsync(projectPk, id, documentsForUser, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Set new assignee OR document status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentsForUser>> DocumentProjectProjectPkDocumentsIdPUTWithHttpInfoAsync (string projectPk, string id, DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdPUT");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentsForUser != null && documentsForUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentsForUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentsForUser; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUser)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentProjectProjectPkDocumentsIdShowGET (string projectPk, string id, bool? alt = default(bool?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentProjectProjectPkDocumentsIdShowGETWithHttpInfo(projectPk, id, alt);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> DocumentProjectProjectPkDocumentsIdShowGETWithHttpInfo (string projectPk, string id, bool? alt = default(bool?))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdShowGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdShowGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/show/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alt", alt)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdShowGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentProjectProjectPkDocumentsIdShowGETAsync (string projectPk, string id, bool? alt = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentProjectProjectPkDocumentsIdShowGETWithHttpInfoAsync(projectPk, id, alt, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="id">A unique integer value identifying this document.</param>
        /// <param name="alt">Get alternative document file if exists (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentProjectProjectPkDocumentsIdShowGETWithHttpInfoAsync (string projectPk, string id, bool? alt = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdShowGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentProjectProjectPkDocumentsIdShowGET");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/show/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alt", alt)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsIdShowGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        ///  Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>MarkUnmarkForDeleteDocumentsResponse</returns>
        public MarkUnmarkForDeleteDocumentsResponse DocumentProjectProjectPkDocumentsMarkDeletePOST (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest))
        {
             ApiResponse<MarkUnmarkForDeleteDocumentsResponse> localVarResponse = DocumentProjectProjectPkDocumentsMarkDeletePOSTWithHttpInfo(projectPk, markUnmarkForDeleteDocumentsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>ApiResponse of MarkUnmarkForDeleteDocumentsResponse</returns>
        public ApiResponse<MarkUnmarkForDeleteDocumentsResponse> DocumentProjectProjectPkDocumentsMarkDeletePOSTWithHttpInfo (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsMarkDeletePOST");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/mark_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (markUnmarkForDeleteDocumentsRequest != null && markUnmarkForDeleteDocumentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markUnmarkForDeleteDocumentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markUnmarkForDeleteDocumentsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsMarkDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnmarkForDeleteDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkUnmarkForDeleteDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnmarkForDeleteDocumentsResponse)));
        }

        /// <summary>
        ///  Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkUnmarkForDeleteDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<MarkUnmarkForDeleteDocumentsResponse> DocumentProjectProjectPkDocumentsMarkDeletePOSTAsync (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MarkUnmarkForDeleteDocumentsResponse> localVarResponse = await DocumentProjectProjectPkDocumentsMarkDeletePOSTWithHttpInfoAsync(projectPk, markUnmarkForDeleteDocumentsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkUnmarkForDeleteDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkUnmarkForDeleteDocumentsResponse>> DocumentProjectProjectPkDocumentsMarkDeletePOSTWithHttpInfoAsync (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsMarkDeletePOST");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/mark_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (markUnmarkForDeleteDocumentsRequest != null && markUnmarkForDeleteDocumentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markUnmarkForDeleteDocumentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markUnmarkForDeleteDocumentsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsMarkDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnmarkForDeleteDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkUnmarkForDeleteDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnmarkForDeleteDocumentsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>DocumentsForUser</returns>
        public DocumentsForUser DocumentProjectProjectPkDocumentsPOST (string projectPk, DocumentsForUser documentsForUser = default(DocumentsForUser))
        {
             ApiResponse<DocumentsForUser> localVarResponse = DocumentProjectProjectPkDocumentsPOSTWithHttpInfo(projectPk, documentsForUser);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <returns>ApiResponse of DocumentsForUser</returns>
        public ApiResponse<DocumentsForUser> DocumentProjectProjectPkDocumentsPOSTWithHttpInfo (string projectPk, DocumentsForUser documentsForUser = default(DocumentsForUser))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsPOST");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentsForUser != null && documentsForUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentsForUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentsForUser; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUser)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentsForUser</returns>
        public async System.Threading.Tasks.Task<DocumentsForUser> DocumentProjectProjectPkDocumentsPOSTAsync (string projectPk, DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentsForUser> localVarResponse = await DocumentProjectProjectPkDocumentsPOSTWithHttpInfoAsync(projectPk, documentsForUser, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="documentsForUser"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentsForUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentsForUser>> DocumentProjectProjectPkDocumentsPOSTWithHttpInfoAsync (string projectPk, DocumentsForUser documentsForUser = default(DocumentsForUser), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsPOST");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (documentsForUser != null && documentsForUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentsForUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentsForUser; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsForUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsForUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsForUser)));
        }

        /// <summary>
        ///  Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>MarkUnmarkForDeleteDocumentsResponse</returns>
        public MarkUnmarkForDeleteDocumentsResponse DocumentProjectProjectPkDocumentsUnmarkDeletePOST (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest))
        {
             ApiResponse<MarkUnmarkForDeleteDocumentsResponse> localVarResponse = DocumentProjectProjectPkDocumentsUnmarkDeletePOSTWithHttpInfo(projectPk, markUnmarkForDeleteDocumentsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <returns>ApiResponse of MarkUnmarkForDeleteDocumentsResponse</returns>
        public ApiResponse<MarkUnmarkForDeleteDocumentsResponse> DocumentProjectProjectPkDocumentsUnmarkDeletePOSTWithHttpInfo (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsUnmarkDeletePOST");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/unmark_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (markUnmarkForDeleteDocumentsRequest != null && markUnmarkForDeleteDocumentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markUnmarkForDeleteDocumentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markUnmarkForDeleteDocumentsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsUnmarkDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnmarkForDeleteDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkUnmarkForDeleteDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnmarkForDeleteDocumentsResponse)));
        }

        /// <summary>
        ///  Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MarkUnmarkForDeleteDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<MarkUnmarkForDeleteDocumentsResponse> DocumentProjectProjectPkDocumentsUnmarkDeletePOSTAsync (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MarkUnmarkForDeleteDocumentsResponse> localVarResponse = await DocumentProjectProjectPkDocumentsUnmarkDeletePOSTWithHttpInfoAsync(projectPk, markUnmarkForDeleteDocumentsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPk"></param>
        /// <param name="markUnmarkForDeleteDocumentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MarkUnmarkForDeleteDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarkUnmarkForDeleteDocumentsResponse>> DocumentProjectProjectPkDocumentsUnmarkDeletePOSTWithHttpInfoAsync (string projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = default(MarkUnmarkForDeleteDocumentsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'projectPk' is set
            if (projectPk == null)
                throw new ApiException(400, "Missing required parameter 'projectPk' when calling DocumentApi->DocumentProjectProjectPkDocumentsUnmarkDeletePOST");

            var localVarPath = "/api/v1/document/project/{project_pk}/documents/unmark_delete/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectPk != null) localVarPathParams.Add("project_pk", this.Configuration.ApiClient.ParameterToString(projectPk)); // path parameter
            if (markUnmarkForDeleteDocumentsRequest != null && markUnmarkForDeleteDocumentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markUnmarkForDeleteDocumentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markUnmarkForDeleteDocumentsRequest; // byte array
            }

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentProjectProjectPkDocumentsUnmarkDeletePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarkUnmarkForDeleteDocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MarkUnmarkForDeleteDocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkUnmarkForDeleteDocumentsResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DocumentStatsGET ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = DocumentStatsGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse<Dictionary<string, Object>> DocumentStatsGETWithHttpInfo ()
        {

            var localVarPath = "/api/v1/document/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentStatsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> DocumentStatsGETAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await DocumentStatsGETWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> DocumentStatsGETWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentStatsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        ///  TextUnit List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>List&lt;TextUnitDjangoQL&gt;</returns>
        public List<TextUnitDjangoQL> DocumentTextunitsGET (string q = default(string))
        {
             ApiResponse<List<TextUnitDjangoQL>> localVarResponse = DocumentTextunitsGETWithHttpInfo(q);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  TextUnit List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>ApiResponse of List&lt;TextUnitDjangoQL&gt;</returns>
        public ApiResponse<List<TextUnitDjangoQL>> DocumentTextunitsGETWithHttpInfo (string q = default(string))
        {

            var localVarPath = "/api/v1/document/textunits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTextunitsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TextUnitDjangoQL>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TextUnitDjangoQL>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TextUnitDjangoQL>)));
        }

        /// <summary>
        ///  TextUnit List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;TextUnitDjangoQL&gt;</returns>
        public async System.Threading.Tasks.Task<List<TextUnitDjangoQL>> DocumentTextunitsGETAsync (string q = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TextUnitDjangoQL>> localVarResponse = await DocumentTextunitsGETWithHttpInfoAsync(q, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  TextUnit List
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TextUnitDjangoQL&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TextUnitDjangoQL>>> DocumentTextunitsGETWithHttpInfoAsync (string q = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/document/textunits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTextunitsGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TextUnitDjangoQL>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TextUnitDjangoQL>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TextUnitDjangoQL>)));
        }

        /// <summary>
        ///  Retrieve TextUnit
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit.</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>TextUnitDjangoQL</returns>
        public TextUnitDjangoQL DocumentTextunitsIdGET (string id, string q = default(string))
        {
             ApiResponse<TextUnitDjangoQL> localVarResponse = DocumentTextunitsIdGETWithHttpInfo(id, q);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve TextUnit
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit.</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <returns>ApiResponse of TextUnitDjangoQL</returns>
        public ApiResponse<TextUnitDjangoQL> DocumentTextunitsIdGETWithHttpInfo (string id, string q = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentTextunitsIdGET");

            var localVarPath = "/api/v1/document/textunits/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTextunitsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextUnitDjangoQL>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TextUnitDjangoQL) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextUnitDjangoQL)));
        }

        /// <summary>
        ///  Retrieve TextUnit
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit.</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TextUnitDjangoQL</returns>
        public async System.Threading.Tasks.Task<TextUnitDjangoQL> DocumentTextunitsIdGETAsync (string id, string q = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TextUnitDjangoQL> localVarResponse = await DocumentTextunitsIdGETWithHttpInfoAsync(id, q, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve TextUnit
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this text unit.</param>
        /// <param name="q">Search parameters for djangoQL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TextUnitDjangoQL)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextUnitDjangoQL>> DocumentTextunitsIdGETWithHttpInfoAsync (string id, string q = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentApi->DocumentTextunitsIdGET");

            var localVarPath = "/api/v1/document/textunits/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (AuthToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTextunitsIdGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextUnitDjangoQL>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TextUnitDjangoQL) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextUnitDjangoQL)));
        }

    }
}
