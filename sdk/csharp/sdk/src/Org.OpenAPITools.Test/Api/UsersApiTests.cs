/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' UsersApi
            //Assert.IsInstanceOf(typeof(UsersApi), instance);
        }

        
        /// <summary>
        /// Test UsersUsersFormFieldsGET
        /// </summary>
        [Test]
        public void UsersUsersFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UsersUsersFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test UsersUsersGET
        /// </summary>
        [Test]
        public void UsersUsersGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.UsersUsersGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<User>), response, "response is List<User>");
        }
        
        /// <summary>
        /// Test UsersUsersIdFormFieldsGET
        /// </summary>
        [Test]
        public void UsersUsersIdFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.UsersUsersIdFormFieldsGET(id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test UsersUsersIdGET
        /// </summary>
        [Test]
        public void UsersUsersIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.UsersUsersIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(User), response, "response is User");
        }
        
        /// <summary>
        /// Test UsersUsersIdPATCH
        /// </summary>
        [Test]
        public void UsersUsersIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserProfile userProfile = null;
            //var response = instance.UsersUsersIdPATCH(id, userProfile);
            //Assert.IsInstanceOf(typeof(UserProfile), response, "response is UserProfile");
        }
        
        /// <summary>
        /// Test UsersUsersIdPUT
        /// </summary>
        [Test]
        public void UsersUsersIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserProfile userProfile = null;
            //var response = instance.UsersUsersIdPUT(id, userProfile);
            //Assert.IsInstanceOf(typeof(UserProfile), response, "response is UserProfile");
        }
        
        /// <summary>
        /// Test UsersUsersPOST
        /// </summary>
        [Test]
        public void UsersUsersPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserProfile userProfile = null;
            //var response = instance.UsersUsersPOST(userProfile);
            //Assert.IsInstanceOf(typeof(UserProfile), response, "response is UserProfile");
        }
        
        /// <summary>
        /// Test UsersUsersUserStatsGET
        /// </summary>
        [Test]
        public void UsersUsersUserStatsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UsersUsersUserStatsGET();
            //Assert.IsInstanceOf(typeof(List<UserStats>), response, "response is List<UserStats>");
        }
        
        /// <summary>
        /// Test UsersVerifyTokenPOST
        /// </summary>
        [Test]
        public void UsersVerifyTokenPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //VerifyAuthTokenRequest verifyAuthTokenRequest = null;
            //var response = instance.UsersVerifyTokenPOST(verifyAuthTokenRequest);
            //Assert.IsInstanceOf(typeof(VerifyAuthTokenResponse), response, "response is VerifyAuthTokenResponse");
        }
        
    }

}
