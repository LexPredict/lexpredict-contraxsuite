/* 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ProjectApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProjectApiTests
    {
        private ProjectApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProjectApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProjectApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ProjectApi
            //Assert.IsInstanceOf(typeof(ProjectApi), instance);
        }

        
        /// <summary>
        /// Test ProjectProjectClusteringGET
        /// </summary>
        [Test]
        public void ProjectProjectClusteringGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectProjectClusteringGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<ProjectClustering>), response, "response is List<ProjectClustering>");
        }
        
        /// <summary>
        /// Test ProjectProjectClusteringIdGET
        /// </summary>
        [Test]
        public void ProjectProjectClusteringIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectProjectClusteringIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(ProjectClustering), response, "response is ProjectClustering");
        }
        
        /// <summary>
        /// Test ProjectProjectsGET
        /// </summary>
        [Test]
        public void ProjectProjectsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectProjectsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<ProjectList>), response, "response is List<ProjectList>");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdAnnotationsAssigneesGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdAnnotationsAssigneesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ProjectProjectsIdAnnotationsAssigneesGET(id);
            //Assert.IsInstanceOf(typeof(List<ProjectAnnotationsAssigneesResponse>), response, "response is List<ProjectAnnotationsAssigneesResponse>");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdAssignAnnotationsPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdAssignAnnotationsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //AssignProjectAnnotationsRequest assignProjectAnnotationsRequest = null;
            //var response = instance.ProjectProjectsIdAssignAnnotationsPOST(id, assignProjectAnnotationsRequest);
            //Assert.IsInstanceOf(typeof(CountSuccessResponse), response, "response is CountSuccessResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdAssignDocumentPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdAssignDocumentPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //AssignProjectDocumentRequest assignProjectDocumentRequest = null;
            //var response = instance.ProjectProjectsIdAssignDocumentPOST(id, assignProjectDocumentRequest);
            //Assert.IsInstanceOf(typeof(CountSuccessResponse), response, "response is CountSuccessResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdAssignDocumentsPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdAssignDocumentsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //AssignProjectDocumentsRequest assignProjectDocumentsRequest = null;
            //var response = instance.ProjectProjectsIdAssignDocumentsPOST(id, assignProjectDocumentsRequest);
            //Assert.IsInstanceOf(typeof(CountSuccessResponse), response, "response is CountSuccessResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdAssigneesGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdAssigneesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ProjectProjectsIdAssigneesGET(id);
            //Assert.IsInstanceOf(typeof(List<ProjectDocumentsAssigneesResponse>), response, "response is List<ProjectDocumentsAssigneesResponse>");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdCleanupPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdCleanupPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CleanupProjectRequest cleanupProjectRequest = null;
            //var response = instance.ProjectProjectsIdCleanupPOST(id, cleanupProjectRequest);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdClusterPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdClusterPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ClusterProjectRequest clusterProjectRequest = null;
            //var response = instance.ProjectProjectsIdClusterPOST(id, clusterProjectRequest);
            //Assert.IsInstanceOf(typeof(ClusterProjectResponse), response, "response is ClusterProjectResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdClusteringStatusGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdClusteringStatusGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? projectClusteringId = null;
            //var response = instance.ProjectProjectsIdClusteringStatusGET(id, projectClusteringId);
            //Assert.IsInstanceOf(typeof(ProjectClusteringStatusResponse), response, "response is ProjectClusteringStatusResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdDELETE
        /// </summary>
        [Test]
        public void ProjectProjectsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.ProjectProjectsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test ProjectProjectsIdDetectFieldValuesPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdDetectFieldValuesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DetectProjectFieldValuesRequest detectProjectFieldValuesRequest = null;
            //var response = instance.ProjectProjectsIdDetectFieldValuesPOST(id, detectProjectFieldValuesRequest);
            //Assert.IsInstanceOf(typeof(TaskIdResponse), response, "response is TaskIdResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectProjectsIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(ProjectDetail), response, "response is ProjectDetail");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdMakeSearchablePdfPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdMakeSearchablePdfPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MakeSearchablePDFRequest makeSearchablePDFRequest = null;
            //var response = instance.ProjectProjectsIdMakeSearchablePdfPOST(id, makeSearchablePDFRequest);
            //Assert.IsInstanceOf(typeof(TaskIdResponse), response, "response is TaskIdResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdMarkDeletePOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdMarkDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = null;
            //var response = instance.ProjectProjectsIdMarkDeletePOST(id, markUnmarkForDeleteProjectsRequest);
            //Assert.IsInstanceOf(typeof(MarkUnmarkForDeleteProjectsReponse), response, "response is MarkUnmarkForDeleteProjectsReponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdPATCH
        /// </summary>
        [Test]
        public void ProjectProjectsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProjectUpdate projectUpdate = null;
            //var response = instance.ProjectProjectsIdPATCH(id, projectUpdate);
            //Assert.IsInstanceOf(typeof(ProjectUpdate), response, "response is ProjectUpdate");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdPUT
        /// </summary>
        [Test]
        public void ProjectProjectsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProjectUpdate projectUpdate = null;
            //var response = instance.ProjectProjectsIdPUT(id, projectUpdate);
            //Assert.IsInstanceOf(typeof(ProjectUpdate), response, "response is ProjectUpdate");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdProgressGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdProgressGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ProjectProjectsIdProgressGET(id);
            //Assert.IsInstanceOf(typeof(ProjectProgressResponse), response, "response is ProjectProgressResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdSendClustersToProjectPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdSendClustersToProjectPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SendClusterToProjectRequest sendClusterToProjectRequest = null;
            //var response = instance.ProjectProjectsIdSendClustersToProjectPOST(id, sendClusterToProjectRequest);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdSetAnnotationStatusPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdSetAnnotationStatusPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest = null;
            //var response = instance.ProjectProjectsIdSetAnnotationStatusPOST(id, setProjectAnnotationsStatusRequest);
            //Assert.IsInstanceOf(typeof(OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse), response, "response is OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdSetStatusPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdSetStatusPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest = null;
            //var response = instance.ProjectProjectsIdSetStatusPOST(id, setProjectDocumentsStatusRequest);
            //Assert.IsInstanceOf(typeof(CountSuccessResponse), response, "response is CountSuccessResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdUnmarkDeletePOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdUnmarkDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = null;
            //var response = instance.ProjectProjectsIdUnmarkDeletePOST(id, markUnmarkForDeleteProjectsRequest);
            //Assert.IsInstanceOf(typeof(MarkUnmarkForDeleteProjectsReponse), response, "response is MarkUnmarkForDeleteProjectsReponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsPOST
        /// </summary>
        [Test]
        public void ProjectProjectsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProjectCreate projectCreate = null;
            //var response = instance.ProjectProjectsPOST(projectCreate);
            //Assert.IsInstanceOf(typeof(ProjectCreate), response, "response is ProjectCreate");
        }
        
        /// <summary>
        /// Test ProjectProjectsProjectStatsGET
        /// </summary>
        [Test]
        public void ProjectProjectsProjectStatsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectIds = null;
            //var response = instance.ProjectProjectsProjectStatsGET(projectIds);
            //Assert.IsInstanceOf(typeof(List<ProjectStats>), response, "response is List<ProjectStats>");
        }
        
        /// <summary>
        /// Test ProjectProjectsRecentGET
        /// </summary>
        [Test]
        public void ProjectProjectsRecentGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? n = null;
            //var response = instance.ProjectProjectsRecentGET(n);
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ProjectProjectsSelectProjectsPOST
        /// </summary>
        [Test]
        public void ProjectProjectsSelectProjectsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SelectProjectsRequest selectProjectsRequest = null;
            //var response = instance.ProjectProjectsSelectProjectsPOST(selectProjectsRequest);
            //Assert.IsInstanceOf(typeof(SelectProjectsResponse), response, "response is SelectProjectsResponse");
        }
        
        /// <summary>
        /// Test ProjectTaskQueuesGET
        /// </summary>
        [Test]
        public void ProjectTaskQueuesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectTaskQueuesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TaskQueue>), response, "response is List<TaskQueue>");
        }
        
        /// <summary>
        /// Test ProjectTaskQueuesIdDELETE
        /// </summary>
        [Test]
        public void ProjectTaskQueuesIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.ProjectTaskQueuesIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test ProjectTaskQueuesIdGET
        /// </summary>
        [Test]
        public void ProjectTaskQueuesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectTaskQueuesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(TaskQueue), response, "response is TaskQueue");
        }
        
        /// <summary>
        /// Test ProjectTaskQueuesIdPATCH
        /// </summary>
        [Test]
        public void ProjectTaskQueuesIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TaskQueue taskQueue = null;
            //var response = instance.ProjectTaskQueuesIdPATCH(id, taskQueue);
            //Assert.IsInstanceOf(typeof(TaskQueue), response, "response is TaskQueue");
        }
        
        /// <summary>
        /// Test ProjectTaskQueuesIdPUT
        /// </summary>
        [Test]
        public void ProjectTaskQueuesIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TaskQueue taskQueue = null;
            //var response = instance.ProjectTaskQueuesIdPUT(id, taskQueue);
            //Assert.IsInstanceOf(typeof(TaskQueue), response, "response is TaskQueue");
        }
        
        /// <summary>
        /// Test ProjectTaskQueuesPOST
        /// </summary>
        [Test]
        public void ProjectTaskQueuesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TaskQueue taskQueue = null;
            //var response = instance.ProjectTaskQueuesPOST(taskQueue);
            //Assert.IsInstanceOf(typeof(TaskQueue), response, "response is TaskQueue");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionGET
        /// </summary>
        [Test]
        public void ProjectUploadSessionGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectUploadSessionGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<UploadSessionDetail>), response, "response is List<UploadSessionDetail>");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionPOST
        /// </summary>
        [Test]
        public void ProjectUploadSessionPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UploadSession uploadSession = null;
            //var response = instance.ProjectUploadSessionPOST(uploadSession);
            //Assert.IsInstanceOf(typeof(UploadSession), response, "response is UploadSession");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionStatusGET
        /// </summary>
        [Test]
        public void ProjectUploadSessionStatusGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //var response = instance.ProjectUploadSessionStatusGET(projectId);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidBatchUploadPOST
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidBatchUploadPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //UploadSessionDetail uploadSessionDetail = null;
            //var response = instance.ProjectUploadSessionUidBatchUploadPOST(uid, uploadSessionDetail);
            //Assert.IsInstanceOf(typeof(UploadSessionDetail), response, "response is UploadSessionDetail");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidBatchUploadPOST_0
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidBatchUploadPOST_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest = null;
            //var response = instance.ProjectUploadSessionUidBatchUploadPOST_0(uid, uploadSessionBatchUploadRequest);
            //Assert.IsInstanceOf(typeof(UploadSessionDetail), response, "response is UploadSessionDetail");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidCancelDELETE
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidCancelDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //instance.ProjectUploadSessionUidCancelDELETE(uid);
            
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidDELETE
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //instance.ProjectUploadSessionUidDELETE(uid);
            
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidDeleteFileDELETE
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidDeleteFileDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest = null;
            //var response = instance.ProjectUploadSessionUidDeleteFileDELETE(uid, uploadSessionDeleteFileRequest);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidFilesPOST
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidFilesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //int contentLength = null;
            //string fileName = null;
            //bool? force = null;
            //bool? directoryPath = null;
            //bool? force2 = null;
            //System.IO.Stream body = null;
            //var response = instance.ProjectUploadSessionUidFilesPOST(uid, contentLength, fileName, force, directoryPath, force2, body);
            //Assert.IsInstanceOf(typeof(ProjectUploadSessionFilesResponse), response, "response is ProjectUploadSessionFilesResponse");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidGET
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectUploadSessionUidGET(uid, jqFilters);
            //Assert.IsInstanceOf(typeof(UploadSessionDetail), response, "response is UploadSessionDetail");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidProgressGET
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidProgressGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //var response = instance.ProjectUploadSessionUidProgressGET(uid);
            //Assert.IsInstanceOf(typeof(ProjectUploadSessionProgressResponse), response, "response is ProjectUploadSessionProgressResponse");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidUploadPOST
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidUploadPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //bool fileName = null;
            //string fileEncoding = null;
            //bool? force = null;
            //bool? reviewFile = null;
            //bool? directoryPath = null;
            //System.IO.Stream body = null;
            //var response = instance.ProjectUploadSessionUidUploadPOST(uid, fileName, fileEncoding, force, reviewFile, directoryPath, body);
            //Assert.IsInstanceOf(typeof(ProjectUploadSessionPOSTResponse), response, "response is ProjectUploadSessionPOSTResponse");
        }
        
    }

}
