/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing AnalyzeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AnalyzeApiTests
    {
        private AnalyzeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AnalyzeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AnalyzeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' AnalyzeApi
            //Assert.IsInstanceOf(typeof(AnalyzeApi), instance);
        }

        
        /// <summary>
        /// Test AnalyzeDocumentClusterGET
        /// </summary>
        [Test]
        public void AnalyzeDocumentClusterGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeDocumentClusterGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentCluster>), response, "response is List<DocumentCluster>");
        }
        
        /// <summary>
        /// Test AnalyzeDocumentClusterIdGET
        /// </summary>
        [Test]
        public void AnalyzeDocumentClusterIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeDocumentClusterIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentCluster), response, "response is DocumentCluster");
        }
        
        /// <summary>
        /// Test AnalyzeDocumentClusterIdPATCH
        /// </summary>
        [Test]
        public void AnalyzeDocumentClusterIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentClusterUpdate documentClusterUpdate = null;
            //var response = instance.AnalyzeDocumentClusterIdPATCH(id, documentClusterUpdate);
            //Assert.IsInstanceOf(typeof(DocumentClusterUpdate), response, "response is DocumentClusterUpdate");
        }
        
        /// <summary>
        /// Test AnalyzeDocumentClusterIdPUT
        /// </summary>
        [Test]
        public void AnalyzeDocumentClusterIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentClusterUpdate documentClusterUpdate = null;
            //var response = instance.AnalyzeDocumentClusterIdPUT(id, documentClusterUpdate);
            //Assert.IsInstanceOf(typeof(DocumentClusterUpdate), response, "response is DocumentClusterUpdate");
        }
        
        /// <summary>
        /// Test AnalyzeDocumentSimilarityListGET
        /// </summary>
        [Test]
        public void AnalyzeDocumentSimilarityListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeDocumentSimilarityListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentSimilarity>), response, "response is List<DocumentSimilarity>");
        }
        
        /// <summary>
        /// Test AnalyzeDocumentTransformerListGET
        /// </summary>
        [Test]
        public void AnalyzeDocumentTransformerListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeDocumentTransformerListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<Transformer>), response, "response is List<Transformer>");
        }
        
        /// <summary>
        /// Test AnalyzeMlModelListGET
        /// </summary>
        [Test]
        public void AnalyzeMlModelListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeMlModelListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<MLModel>), response, "response is List<MLModel>");
        }
        
        /// <summary>
        /// Test AnalyzePartySimilarityListGET
        /// </summary>
        [Test]
        public void AnalyzePartySimilarityListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzePartySimilarityListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<PartySimilarity>), response, "response is List<PartySimilarity>");
        }
        
        /// <summary>
        /// Test AnalyzeProjectDocumentSimilarityListGET
        /// </summary>
        [Test]
        public void AnalyzeProjectDocumentSimilarityListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? textMaxLength = null;
            //int? runId = null;
            //int? documentId = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeProjectDocumentSimilarityListGET(textMaxLength, runId, documentId, jqFilters);
            //Assert.IsInstanceOf(typeof(List<ProjectDocumentSimilarity>), response, "response is List<ProjectDocumentSimilarity>");
        }
        
        /// <summary>
        /// Test AnalyzeProjectTextUnitSimilarityListGET
        /// </summary>
        [Test]
        public void AnalyzeProjectTextUnitSimilarityListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //int? textMaxLength = null;
            //int? runId = null;
            //bool? lastRun = null;
            //int? textUnitId = null;
            //int? documentId = null;
            //int? locationStart = null;
            //int? locationEnd = null;
            //List<Object> selection = null;
            //var response = instance.AnalyzeProjectTextUnitSimilarityListGET(jqFilters, textMaxLength, runId, lastRun, textUnitId, documentId, locationStart, locationEnd, selection);
            //Assert.IsInstanceOf(typeof(List<ProjectTextUnitSimilarity>), response, "response is List<ProjectTextUnitSimilarity>");
        }
        
        /// <summary>
        /// Test AnalyzeProjectTextUnitSimilarityListPOST
        /// </summary>
        [Test]
        public void AnalyzeProjectTextUnitSimilarityListPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SimilarProjectTextUnitsRequest similarProjectTextUnitsRequest = null;
            //var response = instance.AnalyzeProjectTextUnitSimilarityListPOST(similarProjectTextUnitsRequest);
            //Assert.IsInstanceOf(typeof(ProjectTextUnitSimilarity), response, "response is ProjectTextUnitSimilarity");
        }
        
        /// <summary>
        /// Test AnalyzeSimilarityRunsGET
        /// </summary>
        [Test]
        public void AnalyzeSimilarityRunsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string unitSource = null;
            //int? projectId = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeSimilarityRunsGET(unitSource, projectId, jqFilters);
            //Assert.IsInstanceOf(typeof(List<SimilarityRun>), response, "response is List<SimilarityRun>");
        }
        
        /// <summary>
        /// Test AnalyzeSimilarityRunsIdDELETE
        /// </summary>
        [Test]
        public void AnalyzeSimilarityRunsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string unitSource = null;
            //int? projectId = null;
            //instance.AnalyzeSimilarityRunsIdDELETE(id, unitSource, projectId);
            
        }
        
        /// <summary>
        /// Test AnalyzeSimilarityRunsIdGET
        /// </summary>
        [Test]
        public void AnalyzeSimilarityRunsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string unitSource = null;
            //int? projectId = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeSimilarityRunsIdGET(id, unitSource, projectId, jqFilters);
            //Assert.IsInstanceOf(typeof(SimilarityRun), response, "response is SimilarityRun");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassificationsGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassificationsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClassificationsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TextUnitClassification>), response, "response is List<TextUnitClassification>");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassificationsIdDELETE
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassificationsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.AnalyzeTextUnitClassificationsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassificationsIdGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassificationsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClassificationsIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(TextUnitClassification), response, "response is TextUnitClassification");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassificationsPOST
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassificationsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TextUnitClassificationCreate textUnitClassificationCreate = null;
            //var response = instance.AnalyzeTextUnitClassificationsPOST(textUnitClassificationCreate);
            //Assert.IsInstanceOf(typeof(TextUnitClassificationCreate), response, "response is TextUnitClassificationCreate");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassifierSuggestionsGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassifierSuggestionsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClassifierSuggestionsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TextUnitClassifierSuggestion>), response, "response is List<TextUnitClassifierSuggestion>");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassifierSuggestionsIdDELETE
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassifierSuggestionsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.AnalyzeTextUnitClassifierSuggestionsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassifierSuggestionsIdGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassifierSuggestionsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClassifierSuggestionsIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(TextUnitClassifierSuggestion), response, "response is TextUnitClassifierSuggestion");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassifiersGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassifiersGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClassifiersGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TextUnitClassifier>), response, "response is List<TextUnitClassifier>");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassifiersIdDELETE
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassifiersIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.AnalyzeTextUnitClassifiersIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassifiersIdGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassifiersIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClassifiersIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(TextUnitClassifier), response, "response is TextUnitClassifier");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClusterListGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClusterListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClusterListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TextUnitCluster>), response, "response is List<TextUnitCluster>");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitSimilarityListGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitSimilarityListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitSimilarityListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TextUnitSimilarity>), response, "response is List<TextUnitSimilarity>");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitTransformerListGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitTransformerListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitTransformerListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<Transformer>), response, "response is List<Transformer>");
        }
        
        /// <summary>
        /// Test AnalyzeTypeaheadTextUnitClassificationFieldNameGET
        /// </summary>
        [Test]
        public void AnalyzeTypeaheadTextUnitClassificationFieldNameGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldName = null;
            //string q = null;
            //var response = instance.AnalyzeTypeaheadTextUnitClassificationFieldNameGET(fieldName, q);
            //Assert.IsInstanceOf(typeof(Typeahead), response, "response is Typeahead");
        }
        
    }

}
