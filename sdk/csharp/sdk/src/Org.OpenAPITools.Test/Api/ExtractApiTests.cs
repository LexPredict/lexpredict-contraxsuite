/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ExtractApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ExtractApiTests
    {
        private ExtractApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ExtractApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ExtractApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ExtractApi
            //Assert.IsInstanceOf(typeof(ExtractApi), instance);
        }

        
        /// <summary>
        /// Test ExtractAmountUsageGET
        /// </summary>
        [Test]
        public void ExtractAmountUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractAmountUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<AmountUsage>), response, "response is List<AmountUsage>");
        }
        
        /// <summary>
        /// Test ExtractAmountUsageTopGET
        /// </summary>
        [Test]
        public void ExtractAmountUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractAmountUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractCitationUsageGET
        /// </summary>
        [Test]
        public void ExtractCitationUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractCitationUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<CitationUsage>), response, "response is List<CitationUsage>");
        }
        
        /// <summary>
        /// Test ExtractCitationUsageTopGET
        /// </summary>
        [Test]
        public void ExtractCitationUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractCitationUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractCopyrightUsageGET
        /// </summary>
        [Test]
        public void ExtractCopyrightUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractCopyrightUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<CopyrightUsage>), response, "response is List<CopyrightUsage>");
        }
        
        /// <summary>
        /// Test ExtractCopyrightUsageTopGET
        /// </summary>
        [Test]
        public void ExtractCopyrightUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractCopyrightUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractCourtUsageGET
        /// </summary>
        [Test]
        public void ExtractCourtUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractCourtUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<CourtUsage>), response, "response is List<CourtUsage>");
        }
        
        /// <summary>
        /// Test ExtractCourtUsageTopGET
        /// </summary>
        [Test]
        public void ExtractCourtUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractCourtUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractCurrencyUsageGET
        /// </summary>
        [Test]
        public void ExtractCurrencyUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractCurrencyUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<CurrencyUsage>), response, "response is List<CurrencyUsage>");
        }
        
        /// <summary>
        /// Test ExtractCurrencyUsageTopGET
        /// </summary>
        [Test]
        public void ExtractCurrencyUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractCurrencyUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractDateDurationUsageGET
        /// </summary>
        [Test]
        public void ExtractDateDurationUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractDateDurationUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DateDurationUsage>), response, "response is List<DateDurationUsage>");
        }
        
        /// <summary>
        /// Test ExtractDateDurationUsageTopGET
        /// </summary>
        [Test]
        public void ExtractDateDurationUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractDateDurationUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractDateUsageCalendarChartGET
        /// </summary>
        [Test]
        public void ExtractDateUsageCalendarChartGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractDateUsageCalendarChartGET();
            //Assert.IsInstanceOf(typeof(List<DateUsageCalendar>), response, "response is List<DateUsageCalendar>");
        }
        
        /// <summary>
        /// Test ExtractDateUsageGET
        /// </summary>
        [Test]
        public void ExtractDateUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractDateUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DateUsage>), response, "response is List<DateUsage>");
        }
        
        /// <summary>
        /// Test ExtractDateUsageTimelineChartGET
        /// </summary>
        [Test]
        public void ExtractDateUsageTimelineChartGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractDateUsageTimelineChartGET();
            //Assert.IsInstanceOf(typeof(List<DateUsageTimeline>), response, "response is List<DateUsageTimeline>");
        }
        
        /// <summary>
        /// Test ExtractDateUsageToIcalGET
        /// </summary>
        [Test]
        public void ExtractDateUsageToIcalGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractDateUsageToIcalGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DateUsage>), response, "response is List<DateUsage>");
        }
        
        /// <summary>
        /// Test ExtractDateUsageTopGET
        /// </summary>
        [Test]
        public void ExtractDateUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractDateUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractDefinitionUsageGET
        /// </summary>
        [Test]
        public void ExtractDefinitionUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractDefinitionUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DefinitionUsage>), response, "response is List<DefinitionUsage>");
        }
        
        /// <summary>
        /// Test ExtractDefinitionUsageTopGET
        /// </summary>
        [Test]
        public void ExtractDefinitionUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractDefinitionUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractDistanceUsageGET
        /// </summary>
        [Test]
        public void ExtractDistanceUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractDistanceUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DistanceUsage>), response, "response is List<DistanceUsage>");
        }
        
        /// <summary>
        /// Test ExtractDistanceUsageTopGET
        /// </summary>
        [Test]
        public void ExtractDistanceUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractDistanceUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractGeoAliasUsageGET
        /// </summary>
        [Test]
        public void ExtractGeoAliasUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractGeoAliasUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<GeoAliasUsage>), response, "response is List<GeoAliasUsage>");
        }
        
        /// <summary>
        /// Test ExtractGeoAliasUsageTopGET
        /// </summary>
        [Test]
        public void ExtractGeoAliasUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractGeoAliasUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractGeoEntitiesGET
        /// </summary>
        [Test]
        public void ExtractGeoEntitiesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractGeoEntitiesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<GeoEntityList>), response, "response is List<GeoEntityList>");
        }
        
        /// <summary>
        /// Test ExtractGeoEntitiesIdGET
        /// </summary>
        [Test]
        public void ExtractGeoEntitiesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractGeoEntitiesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(GeoEntityList), response, "response is GeoEntityList");
        }
        
        /// <summary>
        /// Test ExtractGeoEntitiesIdPUT
        /// </summary>
        [Test]
        public void ExtractGeoEntitiesIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GeoEntityUpdate geoEntityUpdate = null;
            //var response = instance.ExtractGeoEntitiesIdPUT(id, geoEntityUpdate);
            //Assert.IsInstanceOf(typeof(GeoEntityUpdate), response, "response is GeoEntityUpdate");
        }
        
        /// <summary>
        /// Test ExtractGeoEntityUsageGET
        /// </summary>
        [Test]
        public void ExtractGeoEntityUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractGeoEntityUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<GeoEntityUsage>), response, "response is List<GeoEntityUsage>");
        }
        
        /// <summary>
        /// Test ExtractGeoEntityUsageTopGET
        /// </summary>
        [Test]
        public void ExtractGeoEntityUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractGeoEntityUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractPartiesGET
        /// </summary>
        [Test]
        public void ExtractPartiesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractPartiesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<Party>), response, "response is List<Party>");
        }
        
        /// <summary>
        /// Test ExtractPartiesIdGET
        /// </summary>
        [Test]
        public void ExtractPartiesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractPartiesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(Party), response, "response is Party");
        }
        
        /// <summary>
        /// Test ExtractPartyNetworkChartGET
        /// </summary>
        [Test]
        public void ExtractPartyNetworkChartGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractPartyNetworkChartGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<PartyUsage>), response, "response is List<PartyUsage>");
        }
        
        /// <summary>
        /// Test ExtractPartyUsageGET
        /// </summary>
        [Test]
        public void ExtractPartyUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractPartyUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<PartyUsage>), response, "response is List<PartyUsage>");
        }
        
        /// <summary>
        /// Test ExtractPartyUsageTopGET
        /// </summary>
        [Test]
        public void ExtractPartyUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractPartyUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractPercentUsageGET
        /// </summary>
        [Test]
        public void ExtractPercentUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractPercentUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<PercentUsage>), response, "response is List<PercentUsage>");
        }
        
        /// <summary>
        /// Test ExtractPercentUsageTopGET
        /// </summary>
        [Test]
        public void ExtractPercentUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractPercentUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractRatioUsageGET
        /// </summary>
        [Test]
        public void ExtractRatioUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractRatioUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<RatioUsage>), response, "response is List<RatioUsage>");
        }
        
        /// <summary>
        /// Test ExtractRatioUsageTopGET
        /// </summary>
        [Test]
        public void ExtractRatioUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractRatioUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractRegulationUsageGET
        /// </summary>
        [Test]
        public void ExtractRegulationUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractRegulationUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<RegulationUsage>), response, "response is List<RegulationUsage>");
        }
        
        /// <summary>
        /// Test ExtractRegulationUsageTopGET
        /// </summary>
        [Test]
        public void ExtractRegulationUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractRegulationUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractTermTagsGET
        /// </summary>
        [Test]
        public void ExtractTermTagsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractTermTagsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TermTag>), response, "response is List<TermTag>");
        }
        
        /// <summary>
        /// Test ExtractTermUsageGET
        /// </summary>
        [Test]
        public void ExtractTermUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractTermUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TermUsage>), response, "response is List<TermUsage>");
        }
        
        /// <summary>
        /// Test ExtractTermUsageTopGET
        /// </summary>
        [Test]
        public void ExtractTermUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractTermUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractTrademarkUsageGET
        /// </summary>
        [Test]
        public void ExtractTrademarkUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractTrademarkUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TrademarkUsage>), response, "response is List<TrademarkUsage>");
        }
        
        /// <summary>
        /// Test ExtractTrademarkUsageTopGET
        /// </summary>
        [Test]
        public void ExtractTrademarkUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractTrademarkUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractTypeaheadGeoEntityUsageFieldNameGET
        /// </summary>
        [Test]
        public void ExtractTypeaheadGeoEntityUsageFieldNameGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldName = null;
            //var response = instance.ExtractTypeaheadGeoEntityUsageFieldNameGET(fieldName);
            //Assert.IsInstanceOf(typeof(Typeahead), response, "response is Typeahead");
        }
        
        /// <summary>
        /// Test ExtractTypeaheadPartyUsageFieldNameGET
        /// </summary>
        [Test]
        public void ExtractTypeaheadPartyUsageFieldNameGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldName = null;
            //var response = instance.ExtractTypeaheadPartyUsageFieldNameGET(fieldName);
            //Assert.IsInstanceOf(typeof(Typeahead), response, "response is Typeahead");
        }
        
        /// <summary>
        /// Test ExtractTypeaheadTermUsageFieldNameGET
        /// </summary>
        [Test]
        public void ExtractTypeaheadTermUsageFieldNameGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldName = null;
            //var response = instance.ExtractTypeaheadTermUsageFieldNameGET(fieldName);
            //Assert.IsInstanceOf(typeof(Typeahead), response, "response is Typeahead");
        }
        
        /// <summary>
        /// Test ExtractUrlUsageGET
        /// </summary>
        [Test]
        public void ExtractUrlUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractUrlUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<UrlUsage>), response, "response is List<UrlUsage>");
        }
        
        /// <summary>
        /// Test ExtractUrlUsageTopGET
        /// </summary>
        [Test]
        public void ExtractUrlUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractUrlUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
    }

}
