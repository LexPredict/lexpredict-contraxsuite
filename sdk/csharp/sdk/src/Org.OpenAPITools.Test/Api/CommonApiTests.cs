/* 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing CommonApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CommonApiTests
    {
        private CommonApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CommonApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CommonApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' CommonApi
            //Assert.IsInstanceOf(typeof(CommonApi), instance);
        }

        
        /// <summary>
        /// Test CommonActionsGET
        /// </summary>
        [Test]
        public void CommonActionsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.CommonActionsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<Action>), response, "response is List<Action>");
        }
        
        /// <summary>
        /// Test CommonActionsIdGET
        /// </summary>
        [Test]
        public void CommonActionsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.CommonActionsIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(Action), response, "response is Action");
        }
        
        /// <summary>
        /// Test CommonAppVariablesDELETE
        /// </summary>
        [Test]
        public void CommonAppVariablesDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AppVarDelete appVarDelete = null;
            //var response = instance.CommonAppVariablesDELETE(appVarDelete);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test CommonAppVariablesGET
        /// </summary>
        [Test]
        public void CommonAppVariablesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.CommonAppVariablesGET(name);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test CommonAppVariablesPOST
        /// </summary>
        [Test]
        public void CommonAppVariablesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.CommonAppVariablesPOST(requestBody);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test CommonMediaPathGET
        /// </summary>
        [Test]
        public void CommonMediaPathGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string action = null;
            //var response = instance.CommonMediaPathGET(path, action);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsFormFieldsGET
        /// </summary>
        [Test]
        public void CommonMenuGroupsFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CommonMenuGroupsFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsGET
        /// </summary>
        [Test]
        public void CommonMenuGroupsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CommonMenuGroupsGET();
            //Assert.IsInstanceOf(typeof(List<MenuGroup>), response, "response is List<MenuGroup>");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsIdDELETE
        /// </summary>
        [Test]
        public void CommonMenuGroupsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CommonMenuGroupsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test CommonMenuGroupsIdFormFieldsGET
        /// </summary>
        [Test]
        public void CommonMenuGroupsIdFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CommonMenuGroupsIdFormFieldsGET(id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsIdGET
        /// </summary>
        [Test]
        public void CommonMenuGroupsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CommonMenuGroupsIdGET(id);
            //Assert.IsInstanceOf(typeof(MenuGroup), response, "response is MenuGroup");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsIdPATCH
        /// </summary>
        [Test]
        public void CommonMenuGroupsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MenuGroup menuGroup = null;
            //var response = instance.CommonMenuGroupsIdPATCH(id, menuGroup);
            //Assert.IsInstanceOf(typeof(MenuGroup), response, "response is MenuGroup");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsIdPUT
        /// </summary>
        [Test]
        public void CommonMenuGroupsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MenuGroup menuGroup = null;
            //var response = instance.CommonMenuGroupsIdPUT(id, menuGroup);
            //Assert.IsInstanceOf(typeof(MenuGroup), response, "response is MenuGroup");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsPOST
        /// </summary>
        [Test]
        public void CommonMenuGroupsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MenuGroup menuGroup = null;
            //var response = instance.CommonMenuGroupsPOST(menuGroup);
            //Assert.IsInstanceOf(typeof(MenuGroup), response, "response is MenuGroup");
        }
        
        /// <summary>
        /// Test CommonMenuItemsFormFieldsGET
        /// </summary>
        [Test]
        public void CommonMenuItemsFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CommonMenuItemsFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test CommonMenuItemsGET
        /// </summary>
        [Test]
        public void CommonMenuItemsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CommonMenuItemsGET();
            //Assert.IsInstanceOf(typeof(List<MenuItem>), response, "response is List<MenuItem>");
        }
        
        /// <summary>
        /// Test CommonMenuItemsIdDELETE
        /// </summary>
        [Test]
        public void CommonMenuItemsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CommonMenuItemsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test CommonMenuItemsIdFormFieldsGET
        /// </summary>
        [Test]
        public void CommonMenuItemsIdFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CommonMenuItemsIdFormFieldsGET(id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test CommonMenuItemsIdGET
        /// </summary>
        [Test]
        public void CommonMenuItemsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CommonMenuItemsIdGET(id);
            //Assert.IsInstanceOf(typeof(MenuItem), response, "response is MenuItem");
        }
        
        /// <summary>
        /// Test CommonMenuItemsIdPATCH
        /// </summary>
        [Test]
        public void CommonMenuItemsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MenuItem menuItem = null;
            //var response = instance.CommonMenuItemsIdPATCH(id, menuItem);
            //Assert.IsInstanceOf(typeof(MenuItem), response, "response is MenuItem");
        }
        
        /// <summary>
        /// Test CommonMenuItemsIdPUT
        /// </summary>
        [Test]
        public void CommonMenuItemsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MenuItem menuItem = null;
            //var response = instance.CommonMenuItemsIdPUT(id, menuItem);
            //Assert.IsInstanceOf(typeof(MenuItem), response, "response is MenuItem");
        }
        
        /// <summary>
        /// Test CommonMenuItemsPOST
        /// </summary>
        [Test]
        public void CommonMenuItemsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MenuItem menuItem = null;
            //var response = instance.CommonMenuItemsPOST(menuItem);
            //Assert.IsInstanceOf(typeof(MenuItem), response, "response is MenuItem");
        }
        
        /// <summary>
        /// Test CommonReviewStatusGroupsGET
        /// </summary>
        [Test]
        public void CommonReviewStatusGroupsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.CommonReviewStatusGroupsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<ReviewStatusGroup>), response, "response is List<ReviewStatusGroup>");
        }
        
        /// <summary>
        /// Test CommonReviewStatusGroupsIdDELETE
        /// </summary>
        [Test]
        public void CommonReviewStatusGroupsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CommonReviewStatusGroupsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test CommonReviewStatusGroupsIdGET
        /// </summary>
        [Test]
        public void CommonReviewStatusGroupsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.CommonReviewStatusGroupsIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(ReviewStatusGroup), response, "response is ReviewStatusGroup");
        }
        
        /// <summary>
        /// Test CommonReviewStatusGroupsIdPATCH
        /// </summary>
        [Test]
        public void CommonReviewStatusGroupsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ReviewStatusGroup reviewStatusGroup = null;
            //var response = instance.CommonReviewStatusGroupsIdPATCH(id, reviewStatusGroup);
            //Assert.IsInstanceOf(typeof(ReviewStatusGroup), response, "response is ReviewStatusGroup");
        }
        
        /// <summary>
        /// Test CommonReviewStatusGroupsIdPUT
        /// </summary>
        [Test]
        public void CommonReviewStatusGroupsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ReviewStatusGroup reviewStatusGroup = null;
            //var response = instance.CommonReviewStatusGroupsIdPUT(id, reviewStatusGroup);
            //Assert.IsInstanceOf(typeof(ReviewStatusGroup), response, "response is ReviewStatusGroup");
        }
        
        /// <summary>
        /// Test CommonReviewStatusGroupsPOST
        /// </summary>
        [Test]
        public void CommonReviewStatusGroupsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReviewStatusGroup reviewStatusGroup = null;
            //var response = instance.CommonReviewStatusGroupsPOST(reviewStatusGroup);
            //Assert.IsInstanceOf(typeof(ReviewStatusGroup), response, "response is ReviewStatusGroup");
        }
        
        /// <summary>
        /// Test CommonReviewStatusesGET
        /// </summary>
        [Test]
        public void CommonReviewStatusesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.CommonReviewStatusesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<ReviewStatusDetail>), response, "response is List<ReviewStatusDetail>");
        }
        
        /// <summary>
        /// Test CommonReviewStatusesIdDELETE
        /// </summary>
        [Test]
        public void CommonReviewStatusesIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CommonReviewStatusesIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test CommonReviewStatusesIdGET
        /// </summary>
        [Test]
        public void CommonReviewStatusesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.CommonReviewStatusesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(ReviewStatusDetail), response, "response is ReviewStatusDetail");
        }
        
        /// <summary>
        /// Test CommonReviewStatusesIdPATCH
        /// </summary>
        [Test]
        public void CommonReviewStatusesIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ReviewStatus reviewStatus = null;
            //var response = instance.CommonReviewStatusesIdPATCH(id, reviewStatus);
            //Assert.IsInstanceOf(typeof(ReviewStatus), response, "response is ReviewStatus");
        }
        
        /// <summary>
        /// Test CommonReviewStatusesIdPUT
        /// </summary>
        [Test]
        public void CommonReviewStatusesIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ReviewStatus reviewStatus = null;
            //var response = instance.CommonReviewStatusesIdPUT(id, reviewStatus);
            //Assert.IsInstanceOf(typeof(ReviewStatus), response, "response is ReviewStatus");
        }
        
        /// <summary>
        /// Test CommonReviewStatusesPOST
        /// </summary>
        [Test]
        public void CommonReviewStatusesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReviewStatus reviewStatus = null;
            //var response = instance.CommonReviewStatusesPOST(reviewStatus);
            //Assert.IsInstanceOf(typeof(ReviewStatus), response, "response is ReviewStatus");
        }
        
    }

}
