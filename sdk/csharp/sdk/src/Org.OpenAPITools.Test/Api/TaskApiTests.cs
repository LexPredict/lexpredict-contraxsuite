/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing TaskApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TaskApiTests
    {
        private TaskApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TaskApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TaskApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' TaskApi
            //Assert.IsInstanceOf(typeof(TaskApi), instance);
        }

        
        /// <summary>
        /// Test TaskCleanTasksPOST
        /// </summary>
        [Test]
        public void TaskCleanTasksPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskCleanTasksPOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskLoadDictionariesPOST
        /// </summary>
        [Test]
        public void TaskLoadDictionariesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskLoadDictionariesPOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskLoadDocumentsGET
        /// </summary>
        [Test]
        public void TaskLoadDocumentsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TaskLoadDocumentsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskLoadDocumentsPOST
        /// </summary>
        [Test]
        public void TaskLoadDocumentsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskLoadDocumentsPOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskLocateGET
        /// </summary>
        [Test]
        public void TaskLocateGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TaskLocateGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskLocatePOST
        /// </summary>
        [Test]
        public void TaskLocatePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskLocatePOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskProcessTextExtractionResultsRequestIdPOST
        /// </summary>
        [Test]
        public void TaskProcessTextExtractionResultsRequestIdPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskProcessTextExtractionResultsRequestIdPOST(requestId, requestBody);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test TaskPurgeTaskPOST
        /// </summary>
        [Test]
        public void TaskPurgeTaskPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskPurgeTaskPOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskRecallTaskGET
        /// </summary>
        [Test]
        public void TaskRecallTaskGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TaskRecallTaskGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskRecallTaskPOST
        /// </summary>
        [Test]
        public void TaskRecallTaskPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskRecallTaskPOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskReindexroutinesCheckSchedulePOST
        /// </summary>
        [Test]
        public void TaskReindexroutinesCheckSchedulePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskReindexroutinesCheckSchedulePOST(requestBody);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test TaskTaskLogGET
        /// </summary>
        [Test]
        public void TaskTaskLogGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //int? recordsLimit = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.TaskTaskLogGET(taskId, recordsLimit, jqFilters);
            //Assert.IsInstanceOf(typeof(List<TaskLogResponse>), response, "response is List<TaskLogResponse>");
        }
        
        /// <summary>
        /// Test TaskTaskStatusGET
        /// </summary>
        [Test]
        public void TaskTaskStatusGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.TaskTaskStatusGET(taskId);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskTasksGET
        /// </summary>
        [Test]
        public void TaskTasksGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.TaskTasksGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<Task>), response, "response is List<Task>");
        }
        
        /// <summary>
        /// Test TaskTasksIdGET
        /// </summary>
        [Test]
        public void TaskTasksIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.TaskTasksIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(Task), response, "response is Task");
        }
        
        /// <summary>
        /// Test TaskTasksProjectProjectIdActiveTasksGET
        /// </summary>
        [Test]
        public void TaskTasksProjectProjectIdActiveTasksGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.TaskTasksProjectProjectIdActiveTasksGET(projectId, jqFilters);
            //Assert.IsInstanceOf(typeof(List<ProjectActiveTasks>), response, "response is List<ProjectActiveTasks>");
        }
        
        /// <summary>
        /// Test TaskTasksProjectProjectIdTasksGET
        /// </summary>
        [Test]
        public void TaskTasksProjectProjectIdTasksGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.TaskTasksProjectProjectIdTasksGET(projectId, jqFilters);
            //Assert.IsInstanceOf(typeof(List<ProjectTasks>), response, "response is List<ProjectTasks>");
        }
        
        /// <summary>
        /// Test TaskUpdateElasticIndexGET
        /// </summary>
        [Test]
        public void TaskUpdateElasticIndexGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TaskUpdateElasticIndexGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskUpdateElasticIndexPOST
        /// </summary>
        [Test]
        public void TaskUpdateElasticIndexPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskUpdateElasticIndexPOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
    }

}
