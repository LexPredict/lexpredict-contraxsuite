/*
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing V1Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class V1ApiTests
    {
        private V1Api instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new V1Api();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of V1Api
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' V1Api
            //Assert.IsInstanceOf(typeof(V1Api), instance);
        }

        
        /// <summary>
        /// Test AnalyzeDocumentClusterGET
        /// </summary>
        [Test]
        public void AnalyzeDocumentClusterGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeDocumentClusterGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentCluster>), response, "response is List<DocumentCluster>");
        }
        
        /// <summary>
        /// Test AnalyzeDocumentClusterIdGET
        /// </summary>
        [Test]
        public void AnalyzeDocumentClusterIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeDocumentClusterIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentCluster), response, "response is DocumentCluster");
        }
        
        /// <summary>
        /// Test AnalyzeDocumentClusterIdPATCH
        /// </summary>
        [Test]
        public void AnalyzeDocumentClusterIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentClusterUpdate documentClusterUpdate = null;
            //var response = instance.AnalyzeDocumentClusterIdPATCH(id, documentClusterUpdate);
            //Assert.IsInstanceOf(typeof(DocumentClusterUpdate), response, "response is DocumentClusterUpdate");
        }
        
        /// <summary>
        /// Test AnalyzeDocumentClusterIdPUT
        /// </summary>
        [Test]
        public void AnalyzeDocumentClusterIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentClusterUpdate documentClusterUpdate = null;
            //var response = instance.AnalyzeDocumentClusterIdPUT(id, documentClusterUpdate);
            //Assert.IsInstanceOf(typeof(DocumentClusterUpdate), response, "response is DocumentClusterUpdate");
        }
        
        /// <summary>
        /// Test AnalyzeDocumentSimilarityListGET
        /// </summary>
        [Test]
        public void AnalyzeDocumentSimilarityListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeDocumentSimilarityListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentSimilarity>), response, "response is List<DocumentSimilarity>");
        }
        
        /// <summary>
        /// Test AnalyzeDocumentTransformerListGET
        /// </summary>
        [Test]
        public void AnalyzeDocumentTransformerListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeDocumentTransformerListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<Transformer>), response, "response is List<Transformer>");
        }
        
        /// <summary>
        /// Test AnalyzeMlModelListGET
        /// </summary>
        [Test]
        public void AnalyzeMlModelListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeMlModelListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<MLModel>), response, "response is List<MLModel>");
        }
        
        /// <summary>
        /// Test AnalyzePartySimilarityListGET
        /// </summary>
        [Test]
        public void AnalyzePartySimilarityListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzePartySimilarityListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<PartySimilarity>), response, "response is List<PartySimilarity>");
        }
        
        /// <summary>
        /// Test AnalyzeProjectDocumentSimilarityListGET
        /// </summary>
        [Test]
        public void AnalyzeProjectDocumentSimilarityListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? textMaxLength = null;
            //int? runId = null;
            //int? documentId = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeProjectDocumentSimilarityListGET(textMaxLength, runId, documentId, jqFilters);
            //Assert.IsInstanceOf(typeof(List<ProjectDocumentSimilarity>), response, "response is List<ProjectDocumentSimilarity>");
        }
        
        /// <summary>
        /// Test AnalyzeProjectTextUnitSimilarityListGET
        /// </summary>
        [Test]
        public void AnalyzeProjectTextUnitSimilarityListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //int? textMaxLength = null;
            //int? runId = null;
            //bool? lastRun = null;
            //int? textUnitId = null;
            //int? documentId = null;
            //int? locationStart = null;
            //int? locationEnd = null;
            //List<Object> selection = null;
            //var response = instance.AnalyzeProjectTextUnitSimilarityListGET(jqFilters, textMaxLength, runId, lastRun, textUnitId, documentId, locationStart, locationEnd, selection);
            //Assert.IsInstanceOf(typeof(List<ProjectTextUnitSimilarity>), response, "response is List<ProjectTextUnitSimilarity>");
        }
        
        /// <summary>
        /// Test AnalyzeProjectTextUnitSimilarityListPOST
        /// </summary>
        [Test]
        public void AnalyzeProjectTextUnitSimilarityListPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SimilarProjectTextUnitsRequest similarProjectTextUnitsRequest = null;
            //var response = instance.AnalyzeProjectTextUnitSimilarityListPOST(similarProjectTextUnitsRequest);
            //Assert.IsInstanceOf(typeof(ProjectTextUnitSimilarity), response, "response is ProjectTextUnitSimilarity");
        }
        
        /// <summary>
        /// Test AnalyzeSimilarityRunsGET
        /// </summary>
        [Test]
        public void AnalyzeSimilarityRunsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string unitSource = null;
            //int? projectId = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeSimilarityRunsGET(unitSource, projectId, jqFilters);
            //Assert.IsInstanceOf(typeof(List<SimilarityRun>), response, "response is List<SimilarityRun>");
        }
        
        /// <summary>
        /// Test AnalyzeSimilarityRunsIdDELETE
        /// </summary>
        [Test]
        public void AnalyzeSimilarityRunsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string unitSource = null;
            //int? projectId = null;
            //instance.AnalyzeSimilarityRunsIdDELETE(id, unitSource, projectId);
            
        }
        
        /// <summary>
        /// Test AnalyzeSimilarityRunsIdGET
        /// </summary>
        [Test]
        public void AnalyzeSimilarityRunsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string unitSource = null;
            //int? projectId = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeSimilarityRunsIdGET(id, unitSource, projectId, jqFilters);
            //Assert.IsInstanceOf(typeof(SimilarityRun), response, "response is SimilarityRun");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassificationsGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassificationsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClassificationsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TextUnitClassification>), response, "response is List<TextUnitClassification>");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassificationsIdDELETE
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassificationsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.AnalyzeTextUnitClassificationsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassificationsIdGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassificationsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClassificationsIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(TextUnitClassification), response, "response is TextUnitClassification");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassificationsPOST
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassificationsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TextUnitClassificationCreate textUnitClassificationCreate = null;
            //var response = instance.AnalyzeTextUnitClassificationsPOST(textUnitClassificationCreate);
            //Assert.IsInstanceOf(typeof(TextUnitClassificationCreate), response, "response is TextUnitClassificationCreate");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassifierSuggestionsGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassifierSuggestionsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClassifierSuggestionsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TextUnitClassifierSuggestion>), response, "response is List<TextUnitClassifierSuggestion>");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassifierSuggestionsIdDELETE
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassifierSuggestionsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.AnalyzeTextUnitClassifierSuggestionsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassifierSuggestionsIdGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassifierSuggestionsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClassifierSuggestionsIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(TextUnitClassifierSuggestion), response, "response is TextUnitClassifierSuggestion");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassifiersGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassifiersGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClassifiersGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TextUnitClassifier>), response, "response is List<TextUnitClassifier>");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassifiersIdDELETE
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassifiersIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.AnalyzeTextUnitClassifiersIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClassifiersIdGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClassifiersIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClassifiersIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(TextUnitClassifier), response, "response is TextUnitClassifier");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitClusterListGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitClusterListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitClusterListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TextUnitCluster>), response, "response is List<TextUnitCluster>");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitSimilarityListGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitSimilarityListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitSimilarityListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TextUnitSimilarity>), response, "response is List<TextUnitSimilarity>");
        }
        
        /// <summary>
        /// Test AnalyzeTextUnitTransformerListGET
        /// </summary>
        [Test]
        public void AnalyzeTextUnitTransformerListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.AnalyzeTextUnitTransformerListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<Transformer>), response, "response is List<Transformer>");
        }
        
        /// <summary>
        /// Test AnalyzeTypeaheadTextUnitClassificationFieldNameGET
        /// </summary>
        [Test]
        public void AnalyzeTypeaheadTextUnitClassificationFieldNameGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldName = null;
            //string q = null;
            //var response = instance.AnalyzeTypeaheadTextUnitClassificationFieldNameGET(fieldName, q);
            //Assert.IsInstanceOf(typeof(Typeahead), response, "response is Typeahead");
        }
        
        /// <summary>
        /// Test CommonActionsGET
        /// </summary>
        [Test]
        public void CommonActionsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? projectId = null;
            //int? documentId = null;
            //List<string> viewActions = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.CommonActionsGET(projectId, documentId, viewActions, jqFilters);
            //Assert.IsInstanceOf(typeof(List<List<Action>>), response, "response is List<List<Action>>");
        }
        
        /// <summary>
        /// Test CommonActionsIdGET
        /// </summary>
        [Test]
        public void CommonActionsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? projectId = null;
            //int? documentId = null;
            //List<string> viewActions = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.CommonActionsIdGET(id, projectId, documentId, viewActions, jqFilters);
            //Assert.IsInstanceOf(typeof(List<Action>), response, "response is List<Action>");
        }
        
        /// <summary>
        /// Test CommonAppVariablesGET
        /// </summary>
        [Test]
        public void CommonAppVariablesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.CommonAppVariablesGET(name);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test CommonAppVariablesListGET
        /// </summary>
        [Test]
        public void CommonAppVariablesListGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.CommonAppVariablesListGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<AppVar>), response, "response is List<AppVar>");
        }
        
        /// <summary>
        /// Test CommonAppVariablesProjectProjectIdGET
        /// </summary>
        [Test]
        public void CommonAppVariablesProjectProjectIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //var response = instance.CommonAppVariablesProjectProjectIdGET(projectId);
            //Assert.IsInstanceOf(typeof(List<ProjectAppVar>), response, "response is List<ProjectAppVar>");
        }
        
        /// <summary>
        /// Test CommonAppVariablesProjectProjectIdPUT
        /// </summary>
        [Test]
        public void CommonAppVariablesProjectProjectIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //List<ProjectAppVar> projectAppVar = null;
            //var response = instance.CommonAppVariablesProjectProjectIdPUT(projectId, projectAppVar);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test CommonMediaPathGET
        /// </summary>
        [Test]
        public void CommonMediaPathGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string action = null;
            //var response = instance.CommonMediaPathGET(path, action);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsFormFieldsGET
        /// </summary>
        [Test]
        public void CommonMenuGroupsFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CommonMenuGroupsFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsGET
        /// </summary>
        [Test]
        public void CommonMenuGroupsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CommonMenuGroupsGET();
            //Assert.IsInstanceOf(typeof(List<MenuGroup>), response, "response is List<MenuGroup>");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsIdDELETE
        /// </summary>
        [Test]
        public void CommonMenuGroupsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CommonMenuGroupsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test CommonMenuGroupsIdFormFieldsGET
        /// </summary>
        [Test]
        public void CommonMenuGroupsIdFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CommonMenuGroupsIdFormFieldsGET(id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsIdGET
        /// </summary>
        [Test]
        public void CommonMenuGroupsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CommonMenuGroupsIdGET(id);
            //Assert.IsInstanceOf(typeof(MenuGroup), response, "response is MenuGroup");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsIdPATCH
        /// </summary>
        [Test]
        public void CommonMenuGroupsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MenuGroup menuGroup = null;
            //var response = instance.CommonMenuGroupsIdPATCH(id, menuGroup);
            //Assert.IsInstanceOf(typeof(MenuGroup), response, "response is MenuGroup");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsIdPUT
        /// </summary>
        [Test]
        public void CommonMenuGroupsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MenuGroup menuGroup = null;
            //var response = instance.CommonMenuGroupsIdPUT(id, menuGroup);
            //Assert.IsInstanceOf(typeof(MenuGroup), response, "response is MenuGroup");
        }
        
        /// <summary>
        /// Test CommonMenuGroupsPOST
        /// </summary>
        [Test]
        public void CommonMenuGroupsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MenuGroup menuGroup = null;
            //var response = instance.CommonMenuGroupsPOST(menuGroup);
            //Assert.IsInstanceOf(typeof(MenuGroup), response, "response is MenuGroup");
        }
        
        /// <summary>
        /// Test CommonMenuItemsFormFieldsGET
        /// </summary>
        [Test]
        public void CommonMenuItemsFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CommonMenuItemsFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test CommonMenuItemsGET
        /// </summary>
        [Test]
        public void CommonMenuItemsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CommonMenuItemsGET();
            //Assert.IsInstanceOf(typeof(List<MenuItem>), response, "response is List<MenuItem>");
        }
        
        /// <summary>
        /// Test CommonMenuItemsIdDELETE
        /// </summary>
        [Test]
        public void CommonMenuItemsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CommonMenuItemsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test CommonMenuItemsIdFormFieldsGET
        /// </summary>
        [Test]
        public void CommonMenuItemsIdFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CommonMenuItemsIdFormFieldsGET(id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test CommonMenuItemsIdGET
        /// </summary>
        [Test]
        public void CommonMenuItemsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CommonMenuItemsIdGET(id);
            //Assert.IsInstanceOf(typeof(MenuItem), response, "response is MenuItem");
        }
        
        /// <summary>
        /// Test CommonMenuItemsIdPATCH
        /// </summary>
        [Test]
        public void CommonMenuItemsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MenuItem menuItem = null;
            //var response = instance.CommonMenuItemsIdPATCH(id, menuItem);
            //Assert.IsInstanceOf(typeof(MenuItem), response, "response is MenuItem");
        }
        
        /// <summary>
        /// Test CommonMenuItemsIdPUT
        /// </summary>
        [Test]
        public void CommonMenuItemsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MenuItem menuItem = null;
            //var response = instance.CommonMenuItemsIdPUT(id, menuItem);
            //Assert.IsInstanceOf(typeof(MenuItem), response, "response is MenuItem");
        }
        
        /// <summary>
        /// Test CommonMenuItemsPOST
        /// </summary>
        [Test]
        public void CommonMenuItemsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MenuItem menuItem = null;
            //var response = instance.CommonMenuItemsPOST(menuItem);
            //Assert.IsInstanceOf(typeof(MenuItem), response, "response is MenuItem");
        }
        
        /// <summary>
        /// Test CommonReviewStatusGroupsGET
        /// </summary>
        [Test]
        public void CommonReviewStatusGroupsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.CommonReviewStatusGroupsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<ReviewStatusGroup>), response, "response is List<ReviewStatusGroup>");
        }
        
        /// <summary>
        /// Test CommonReviewStatusGroupsIdDELETE
        /// </summary>
        [Test]
        public void CommonReviewStatusGroupsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CommonReviewStatusGroupsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test CommonReviewStatusGroupsIdGET
        /// </summary>
        [Test]
        public void CommonReviewStatusGroupsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.CommonReviewStatusGroupsIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(ReviewStatusGroup), response, "response is ReviewStatusGroup");
        }
        
        /// <summary>
        /// Test CommonReviewStatusGroupsIdPATCH
        /// </summary>
        [Test]
        public void CommonReviewStatusGroupsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ReviewStatusGroup reviewStatusGroup = null;
            //var response = instance.CommonReviewStatusGroupsIdPATCH(id, reviewStatusGroup);
            //Assert.IsInstanceOf(typeof(ReviewStatusGroup), response, "response is ReviewStatusGroup");
        }
        
        /// <summary>
        /// Test CommonReviewStatusGroupsIdPUT
        /// </summary>
        [Test]
        public void CommonReviewStatusGroupsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ReviewStatusGroup reviewStatusGroup = null;
            //var response = instance.CommonReviewStatusGroupsIdPUT(id, reviewStatusGroup);
            //Assert.IsInstanceOf(typeof(ReviewStatusGroup), response, "response is ReviewStatusGroup");
        }
        
        /// <summary>
        /// Test CommonReviewStatusGroupsPOST
        /// </summary>
        [Test]
        public void CommonReviewStatusGroupsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReviewStatusGroup reviewStatusGroup = null;
            //var response = instance.CommonReviewStatusGroupsPOST(reviewStatusGroup);
            //Assert.IsInstanceOf(typeof(ReviewStatusGroup), response, "response is ReviewStatusGroup");
        }
        
        /// <summary>
        /// Test CommonReviewStatusesGET
        /// </summary>
        [Test]
        public void CommonReviewStatusesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.CommonReviewStatusesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<ReviewStatusDetail>), response, "response is List<ReviewStatusDetail>");
        }
        
        /// <summary>
        /// Test CommonReviewStatusesIdDELETE
        /// </summary>
        [Test]
        public void CommonReviewStatusesIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CommonReviewStatusesIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test CommonReviewStatusesIdGET
        /// </summary>
        [Test]
        public void CommonReviewStatusesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.CommonReviewStatusesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(ReviewStatusDetail), response, "response is ReviewStatusDetail");
        }
        
        /// <summary>
        /// Test CommonReviewStatusesIdPATCH
        /// </summary>
        [Test]
        public void CommonReviewStatusesIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ReviewStatus reviewStatus = null;
            //var response = instance.CommonReviewStatusesIdPATCH(id, reviewStatus);
            //Assert.IsInstanceOf(typeof(ReviewStatus), response, "response is ReviewStatus");
        }
        
        /// <summary>
        /// Test CommonReviewStatusesIdPUT
        /// </summary>
        [Test]
        public void CommonReviewStatusesIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ReviewStatus reviewStatus = null;
            //var response = instance.CommonReviewStatusesIdPUT(id, reviewStatus);
            //Assert.IsInstanceOf(typeof(ReviewStatus), response, "response is ReviewStatus");
        }
        
        /// <summary>
        /// Test CommonReviewStatusesPOST
        /// </summary>
        [Test]
        public void CommonReviewStatusesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReviewStatus reviewStatus = null;
            //var response = instance.CommonReviewStatusesPOST(reviewStatus);
            //Assert.IsInstanceOf(typeof(ReviewStatus), response, "response is ReviewStatus");
        }
        
        /// <summary>
        /// Test DocumentAnnotationsAnnotatePUT
        /// </summary>
        [Test]
        public void DocumentAnnotationsAnnotatePUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Annotation annotation = null;
            //var response = instance.DocumentAnnotationsAnnotatePUT(annotation);
            //Assert.IsInstanceOf(typeof(AnnotationUpdateResponse), response, "response is AnnotationUpdateResponse");
        }
        
        /// <summary>
        /// Test DocumentAnnotationsBatchPUT
        /// </summary>
        [Test]
        public void DocumentAnnotationsBatchPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<AnnotationBatchRequest> annotationBatchRequest = null;
            //var response = instance.DocumentAnnotationsBatchPUT(annotationBatchRequest);
            //Assert.IsInstanceOf(typeof(List<AnnotationBatchResponse>), response, "response is List<AnnotationBatchResponse>");
        }
        
        /// <summary>
        /// Test DocumentAnnotationsGET
        /// </summary>
        [Test]
        public void DocumentAnnotationsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentAnnotationsGET();
            //Assert.IsInstanceOf(typeof(List<Annotation>), response, "response is List<Annotation>");
        }
        
        /// <summary>
        /// Test DocumentAnnotationsIdDELETE
        /// </summary>
        [Test]
        public void DocumentAnnotationsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DocumentAnnotationsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test DocumentAnnotationsIdGET
        /// </summary>
        [Test]
        public void DocumentAnnotationsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentAnnotationsIdGET(id);
            //Assert.IsInstanceOf(typeof(Annotation), response, "response is Annotation");
        }
        
        /// <summary>
        /// Test DocumentAnnotationsIdPUT
        /// </summary>
        [Test]
        public void DocumentAnnotationsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Annotation annotation = null;
            //var response = instance.DocumentAnnotationsIdPUT(id, annotation);
            //Assert.IsInstanceOf(typeof(Annotation), response, "response is Annotation");
        }
        
        /// <summary>
        /// Test DocumentAnnotationsPOST
        /// </summary>
        [Test]
        public void DocumentAnnotationsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Annotation annotation = null;
            //var response = instance.DocumentAnnotationsPOST(annotation);
            //Assert.IsInstanceOf(typeof(Annotation), response, "response is Annotation");
        }
        
        /// <summary>
        /// Test DocumentAnnotationsSuggestPOST
        /// </summary>
        [Test]
        public void DocumentAnnotationsSuggestPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AnnotationSuggestRequest annotationSuggestRequest = null;
            //var response = instance.DocumentAnnotationsSuggestPOST(annotationSuggestRequest);
            //Assert.IsInstanceOf(typeof(Annotation), response, "response is Annotation");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldAnnotationsForUserGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldAnnotationsForUserGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldAnnotationsForUserGET(jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldAnnotation), response, "response is DocumentFieldAnnotation");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldAnnotationsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldAnnotationsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldAnnotationsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldAnnotation>), response, "response is List<DocumentFieldAnnotation>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldAnnotationsUidGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldAnnotationsUidGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldAnnotationsUidGET(uid, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldAnnotation), response, "response is DocumentFieldAnnotation");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentDocumentFieldCategoriesFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldCategoriesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldCategoryList>), response, "response is List<DocumentFieldCategoryList>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesIdDELETE
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DocumentDocumentFieldCategoriesIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesIdFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesIdFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentDocumentFieldCategoriesIdFormFieldsGET(id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesIdGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldCategoriesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldCategoryList), response, "response is DocumentFieldCategoryList");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesIdPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentFieldCategoryCreate documentFieldCategoryCreate = null;
            //var response = instance.DocumentDocumentFieldCategoriesIdPATCH(id, documentFieldCategoryCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldCategoryCreate), response, "response is DocumentFieldCategoryCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesIdPUT
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentFieldCategoryCreate documentFieldCategoryCreate = null;
            //var response = instance.DocumentDocumentFieldCategoriesIdPUT(id, documentFieldCategoryCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldCategoryCreate), response, "response is DocumentFieldCategoryCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesPOST
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentFieldCategoryCreate documentFieldCategoryCreate = null;
            //var response = instance.DocumentDocumentFieldCategoriesPOST(documentFieldCategoryCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldCategoryCreate), response, "response is DocumentFieldCategoryCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentDocumentFieldDetectorsFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldDetectorsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldDetectorDetail>), response, "response is List<DocumentFieldDetectorDetail>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsPOST
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentFieldDetectorCreate documentFieldDetectorCreate = null;
            //var response = instance.DocumentDocumentFieldDetectorsPOST(documentFieldDetectorCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldDetectorCreate), response, "response is DocumentFieldDetectorCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsUidDELETE
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsUidDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //instance.DocumentDocumentFieldDetectorsUidDELETE(uid);
            
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsUidFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsUidFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //var response = instance.DocumentDocumentFieldDetectorsUidFormFieldsGET(uid);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsUidGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsUidGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldDetectorsUidGET(uid, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldDetectorDetail), response, "response is DocumentFieldDetectorDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsUidPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsUidPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentFieldDetectorCreate documentFieldDetectorCreate = null;
            //var response = instance.DocumentDocumentFieldDetectorsUidPATCH(uid, documentFieldDetectorCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldDetectorCreate), response, "response is DocumentFieldDetectorCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsUidPUT
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsUidPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentFieldDetectorCreate documentFieldDetectorCreate = null;
            //var response = instance.DocumentDocumentFieldDetectorsUidPUT(uid, documentFieldDetectorCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldDetectorCreate), response, "response is DocumentFieldDetectorCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldValuesGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldValuesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldValuesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldValue>), response, "response is List<DocumentFieldValue>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldValuesIdGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldValuesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldValuesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldValue), response, "response is DocumentFieldValue");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsCheckFieldFormulaPOST
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsCheckFieldFormulaPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CheckNewDocumentFieldFormulaRequest checkNewDocumentFieldFormulaRequest = null;
            //var response = instance.DocumentDocumentFieldsCheckFieldFormulaPOST(checkNewDocumentFieldFormulaRequest);
            //Assert.IsInstanceOf(typeof(DocumentFieldDetail), response, "response is DocumentFieldDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentDocumentFieldsFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldList>), response, "response is List<DocumentFieldList>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsPOST
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentFieldCreate documentFieldCreate = null;
            //var response = instance.DocumentDocumentFieldsPOST(documentFieldCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldCreate), response, "response is DocumentFieldCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsStatsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsStatsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentTypeUid = null;
            //var response = instance.DocumentDocumentFieldsStatsGET(documentTypeUid);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldStatsResponse>), response, "response is List<DocumentFieldStatsResponse>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidCheckFormulaPOST
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidCheckFormulaPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest = null;
            //var response = instance.DocumentDocumentFieldsUidCheckFormulaPOST(uid, checkDocumentFieldFormulaRequest);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidClonePOST
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidClonePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //CloneDocumentFieldRequest cloneDocumentFieldRequest = null;
            //var response = instance.DocumentDocumentFieldsUidClonePOST(uid, cloneDocumentFieldRequest);
            //Assert.IsInstanceOf(typeof(DocumentFieldDetail), response, "response is DocumentFieldDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidDELETE
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //instance.DocumentDocumentFieldsUidDELETE(uid);
            
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //var response = instance.DocumentDocumentFieldsUidFormFieldsGET(uid);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldsUidGET(uid, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldDetail), response, "response is DocumentFieldDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentFieldCreate documentFieldCreate = null;
            //var response = instance.DocumentDocumentFieldsUidPATCH(uid, documentFieldCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldCreate), response, "response is DocumentFieldCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidPUT
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentFieldCreate documentFieldCreate = null;
            //var response = instance.DocumentDocumentFieldsUidPUT(uid, documentFieldCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldCreate), response, "response is DocumentFieldCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidPreDeletePOST
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidPreDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentFieldDetail documentFieldDetail = null;
            //var response = instance.DocumentDocumentFieldsUidPreDeletePOST(uid, documentFieldDetail);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentNotesGET
        /// </summary>
        [Test]
        public void DocumentDocumentNotesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //string projectId = null;
            //string documentId = null;
            //bool? force = null;
            //bool? exportTo = null;
            //var response = instance.DocumentDocumentNotesGET(jqFilters, projectId, documentId, force, exportTo);
            //Assert.IsInstanceOf(typeof(List<DocumentNoteDetail>), response, "response is List<DocumentNoteDetail>");
        }
        
        /// <summary>
        /// Test DocumentDocumentNotesIdDELETE
        /// </summary>
        [Test]
        public void DocumentDocumentNotesIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DocumentDocumentNotesIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test DocumentDocumentNotesIdGET
        /// </summary>
        [Test]
        public void DocumentDocumentNotesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentNotesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentNoteDetail), response, "response is DocumentNoteDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentNotesIdPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentNotesIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentNoteDetail documentNoteDetail = null;
            //var response = instance.DocumentDocumentNotesIdPATCH(id, documentNoteDetail);
            //Assert.IsInstanceOf(typeof(DocumentNoteDetail), response, "response is DocumentNoteDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentNotesIdPUT
        /// </summary>
        [Test]
        public void DocumentDocumentNotesIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentNoteUpdate documentNoteUpdate = null;
            //var response = instance.DocumentDocumentNotesIdPUT(id, documentNoteUpdate);
            //Assert.IsInstanceOf(typeof(DocumentNoteUpdate), response, "response is DocumentNoteUpdate");
        }
        
        /// <summary>
        /// Test DocumentDocumentNotesPOST
        /// </summary>
        [Test]
        public void DocumentDocumentNotesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentNoteCreate documentNoteCreate = null;
            //var response = instance.DocumentDocumentNotesPOST(documentNoteCreate);
            //Assert.IsInstanceOf(typeof(DocumentNoteCreate), response, "response is DocumentNoteCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentDocumentTypesFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentTypesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentTypeDetail>), response, "response is List<DocumentTypeDetail>");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesImportDocTypePUT
        /// </summary>
        [Test]
        public void DocumentDocumentTypesImportDocTypePUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentTypeImportRequest documentTypeImportRequest = null;
            //var response = instance.DocumentDocumentTypesImportDocTypePUT(documentTypeImportRequest);
            //Assert.IsInstanceOf(typeof(DocumentTypeImportResponse), response, "response is DocumentTypeImportResponse");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesPOST
        /// </summary>
        [Test]
        public void DocumentDocumentTypesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentTypeCreate documentTypeCreate = null;
            //var response = instance.DocumentDocumentTypesPOST(documentTypeCreate);
            //Assert.IsInstanceOf(typeof(DocumentTypeCreate), response, "response is DocumentTypeCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesSchemeMigrationsGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesSchemeMigrationsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentDocumentTypesSchemeMigrationsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesStatsGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesStatsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentDocumentTypesStatsGET();
            //Assert.IsInstanceOf(typeof(List<DocumentTypeStats>), response, "response is List<DocumentTypeStats>");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidClonePOST
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidClonePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //CloneDocumentTypeRequest cloneDocumentTypeRequest = null;
            //var response = instance.DocumentDocumentTypesUidClonePOST(uid, cloneDocumentTypeRequest);
            //Assert.IsInstanceOf(typeof(DocumentTypeDetail), response, "response is DocumentTypeDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidDELETE
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //instance.DocumentDocumentTypesUidDELETE(uid);
            
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidExportDocTypeGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidExportDocTypeGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //string targetVersion = null;
            //var response = instance.DocumentDocumentTypesUidExportDocTypeGET(uid, targetVersion);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //var response = instance.DocumentDocumentTypesUidFormFieldsGET(uid);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentTypesUidGET(uid, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentTypeDetail), response, "response is DocumentTypeDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentTypeCreate documentTypeCreate = null;
            //var response = instance.DocumentDocumentTypesUidPATCH(uid, documentTypeCreate);
            //Assert.IsInstanceOf(typeof(DocumentTypeCreate), response, "response is DocumentTypeCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidPUT
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentTypeCreate documentTypeCreate = null;
            //var response = instance.DocumentDocumentTypesUidPUT(uid, documentTypeCreate);
            //Assert.IsInstanceOf(typeof(DocumentTypeCreate), response, "response is DocumentTypeCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidPreDeletePOST
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidPreDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentTypeDetail documentTypeDetail = null;
            //var response = instance.DocumentDocumentTypesUidPreDeletePOST(uid, documentTypeDetail);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUserProjectTypesGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUserProjectTypesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentTypesUserProjectTypesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentTypeDetail), response, "response is DocumentTypeDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentsDownloadZipGET
        /// </summary>
        [Test]
        public void DocumentDocumentsDownloadZipGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentIds = null;
            //string excludeDocumentIds = null;
            //var response = instance.DocumentDocumentsDownloadZipGET(documentIds, excludeDocumentIds);
            //Assert.IsInstanceOf(typeof(DocumentDownloadZipResponse), response, "response is DocumentDownloadZipResponse");
        }
        
        /// <summary>
        /// Test DocumentDocumentsForUserGET
        /// </summary>
        [Test]
        public void DocumentDocumentsForUserGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentDocumentsForUserGET();
            //Assert.IsInstanceOf(typeof(DocumentsForUserResponse), response, "response is DocumentsForUserResponse");
        }
        
        /// <summary>
        /// Test DocumentDocumentsGET
        /// </summary>
        [Test]
        public void DocumentDocumentsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //int? clusterId = null;
            //string q = null;
            //var response = instance.DocumentDocumentsGET(jqFilters, clusterId, q);
            //Assert.IsInstanceOf(typeof(List<DocumentsForUser>), response, "response is List<DocumentsForUser>");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdActionsGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdActionsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? projectId = null;
            //int? documentId = null;
            //List<string> viewActions = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentsIdActionsGET(id, projectId, documentId, viewActions, jqFilters);
            //Assert.IsInstanceOf(typeof(List<Action>), response, "response is List<Action>");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdDELETE
        /// </summary>
        [Test]
        public void DocumentDocumentsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DocumentDocumentsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdDataGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdDataGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentsIdDataGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdDefinitionsGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdDefinitionsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentDocumentsIdDefinitionsGET(id);
            //Assert.IsInstanceOf(typeof(List<DocumentDefinitions>), response, "response is List<DocumentDefinitions>");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdExtractionGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdExtractionGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentDocumentsIdExtractionGET(id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentDocumentsIdFieldsGET(id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdFieldsPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentsIdFieldsPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentDocumentsIdFieldsPATCH(id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdFieldsPOST
        /// </summary>
        [Test]
        public void DocumentDocumentsIdFieldsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentDocumentsIdFieldsPOST(id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdFieldsPUT
        /// </summary>
        [Test]
        public void DocumentDocumentsIdFieldsPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentDocumentsIdFieldsPUT(id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdFullTextGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdFullTextGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentDocumentsIdFullTextGET(id);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentsIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentsForUser), response, "response is DocumentsForUser");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdHasPdfInfoGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdHasPdfInfoGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentDocumentsIdHasPdfInfoGET(id);
            //Assert.IsInstanceOf(typeof(bool), response, "response is bool");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentDocumentsIdPATCH(id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdPUT
        /// </summary>
        [Test]
        public void DocumentDocumentsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentsForUser documentsForUser = null;
            //var response = instance.DocumentDocumentsIdPUT(id, documentsForUser);
            //Assert.IsInstanceOf(typeof(DocumentsForUser), response, "response is DocumentsForUser");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdPdfReprGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdPdfReprGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentDocumentsIdPdfReprGET(id);
            //Assert.IsInstanceOf(typeof(DocumentPDFRepr), response, "response is DocumentPDFRepr");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdShowGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdShowGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string alt = null;
            //var response = instance.DocumentDocumentsIdShowGET(id, alt);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdSimilarGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdSimilarGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? textMaxLength = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentsIdSimilarGET(id, textMaxLength, jqFilters);
            //Assert.IsInstanceOf(typeof(ProjectDocumentSimilarity), response, "response is ProjectDocumentSimilarity");
        }
        
        /// <summary>
        /// Test DocumentDocumentsMarkDeletePOST
        /// </summary>
        [Test]
        public void DocumentDocumentsMarkDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
            //var response = instance.DocumentDocumentsMarkDeletePOST(markUnmarkForDeleteDocumentsRequest);
            //Assert.IsInstanceOf(typeof(MarkUnmarkForDeleteDocumentsResponse), response, "response is MarkUnmarkForDeleteDocumentsResponse");
        }
        
        /// <summary>
        /// Test DocumentDocumentsPOST
        /// </summary>
        [Test]
        public void DocumentDocumentsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentsForUser documentsForUser = null;
            //var response = instance.DocumentDocumentsPOST(documentsForUser);
            //Assert.IsInstanceOf(typeof(DocumentsForUser), response, "response is DocumentsForUser");
        }
        
        /// <summary>
        /// Test DocumentDocumentsUnmarkDeletePOST
        /// </summary>
        [Test]
        public void DocumentDocumentsUnmarkDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
            //var response = instance.DocumentDocumentsUnmarkDeletePOST(markUnmarkForDeleteDocumentsRequest);
            //Assert.IsInstanceOf(typeof(MarkUnmarkForDeleteDocumentsResponse), response, "response is MarkUnmarkForDeleteDocumentsResponse");
        }
        
        /// <summary>
        /// Test DocumentFieldAnnotationStatusesGET
        /// </summary>
        [Test]
        public void DocumentFieldAnnotationStatusesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentFieldAnnotationStatusesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<FieldAnnotationStatus>), response, "response is List<FieldAnnotationStatus>");
        }
        
        /// <summary>
        /// Test DocumentFieldAnnotationStatusesIdDELETE
        /// </summary>
        [Test]
        public void DocumentFieldAnnotationStatusesIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DocumentFieldAnnotationStatusesIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test DocumentFieldAnnotationStatusesIdGET
        /// </summary>
        [Test]
        public void DocumentFieldAnnotationStatusesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentFieldAnnotationStatusesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(FieldAnnotationStatus), response, "response is FieldAnnotationStatus");
        }
        
        /// <summary>
        /// Test DocumentFieldAnnotationStatusesIdPATCH
        /// </summary>
        [Test]
        public void DocumentFieldAnnotationStatusesIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //FieldAnnotationStatus fieldAnnotationStatus = null;
            //var response = instance.DocumentFieldAnnotationStatusesIdPATCH(id, fieldAnnotationStatus);
            //Assert.IsInstanceOf(typeof(FieldAnnotationStatus), response, "response is FieldAnnotationStatus");
        }
        
        /// <summary>
        /// Test DocumentFieldAnnotationStatusesIdPUT
        /// </summary>
        [Test]
        public void DocumentFieldAnnotationStatusesIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //FieldAnnotationStatus fieldAnnotationStatus = null;
            //var response = instance.DocumentFieldAnnotationStatusesIdPUT(id, fieldAnnotationStatus);
            //Assert.IsInstanceOf(typeof(FieldAnnotationStatus), response, "response is FieldAnnotationStatus");
        }
        
        /// <summary>
        /// Test DocumentFieldAnnotationStatusesPOST
        /// </summary>
        [Test]
        public void DocumentFieldAnnotationStatusesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FieldAnnotationStatus fieldAnnotationStatus = null;
            //var response = instance.DocumentFieldAnnotationStatusesPOST(fieldAnnotationStatus);
            //Assert.IsInstanceOf(typeof(FieldAnnotationStatus), response, "response is FieldAnnotationStatus");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentFieldAnnotationsForUserGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentFieldAnnotationsForUserGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentFieldAnnotationsForUserGET(projectPk, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldAnnotation), response, "response is DocumentFieldAnnotation");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentFieldAnnotationsGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentFieldAnnotationsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentFieldAnnotationsGET(projectPk, jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldAnnotation>), response, "response is List<DocumentFieldAnnotation>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentFieldAnnotationsUidGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentFieldAnnotationsUidGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string uid = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentFieldAnnotationsUidGET(projectPk, uid, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldAnnotation), response, "response is DocumentFieldAnnotation");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentFieldValuesGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentFieldValuesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentFieldValuesGET(projectPk, jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldValue>), response, "response is List<DocumentFieldValue>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentFieldValuesIdGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentFieldValuesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentFieldValuesIdGET(projectPk, id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldValue), response, "response is DocumentFieldValue");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentPk = null;
            //var response = instance.DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGET(projectPk, documentPk);
            //Assert.IsInstanceOf(typeof(List<AnnotationInDocument>), response, "response is List<AnnotationInDocument>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentPk = null;
            //string id = null;
            //instance.DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE(projectPk, documentPk, id);
            
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentPk = null;
            //string id = null;
            //var response = instance.DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET(projectPk, documentPk, id);
            //Assert.IsInstanceOf(typeof(AnnotationInDocument), response, "response is AnnotationInDocument");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentPk = null;
            //string id = null;
            //AnnotationInDocument annotationInDocument = null;
            //var response = instance.DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH(projectPk, documentPk, id, annotationInDocument);
            //Assert.IsInstanceOf(typeof(AnnotationInDocument), response, "response is AnnotationInDocument");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentPk = null;
            //string id = null;
            //AnnotationInDocument annotationInDocument = null;
            //var response = instance.DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT(projectPk, documentPk, id, annotationInDocument);
            //Assert.IsInstanceOf(typeof(AnnotationInDocument), response, "response is AnnotationInDocument");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOST
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentPk = null;
            //AnnotationInDocument annotationInDocument = null;
            //var response = instance.DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOST(projectPk, documentPk, annotationInDocument);
            //Assert.IsInstanceOf(typeof(AnnotationInDocument), response, "response is AnnotationInDocument");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDownloadZipGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDownloadZipGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentIds = null;
            //string excludeDocumentIds = null;
            //var response = instance.DocumentProjectProjectPkDocumentsDownloadZipGET(projectPk, documentIds, excludeDocumentIds);
            //Assert.IsInstanceOf(typeof(DocumentDownloadZipResponse), response, "response is DocumentDownloadZipResponse");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsForUserGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsForUserGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //var response = instance.DocumentProjectProjectPkDocumentsForUserGET(projectPk);
            //Assert.IsInstanceOf(typeof(DocumentsForUserResponse), response, "response is DocumentsForUserResponse");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //Dictionary<string, string> jqFilters = null;
            //int? clusterId = null;
            //string q = null;
            //var response = instance.DocumentProjectProjectPkDocumentsGET(projectPk, jqFilters, clusterId, q);
            //Assert.IsInstanceOf(typeof(List<DocumentsForUser>), response, "response is List<DocumentsForUser>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdActionsGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdActionsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //int? projectId = null;
            //int? documentId = null;
            //List<string> viewActions = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdActionsGET(projectPk, id, projectId, documentId, viewActions, jqFilters);
            //Assert.IsInstanceOf(typeof(List<Action>), response, "response is List<Action>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdDELETE
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //instance.DocumentProjectProjectPkDocumentsIdDELETE(projectPk, id);
            
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdDataGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdDataGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdDataGET(projectPk, id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdDefinitionsGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdDefinitionsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdDefinitionsGET(projectPk, id);
            //Assert.IsInstanceOf(typeof(List<DocumentDefinitions>), response, "response is List<DocumentDefinitions>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdExtractionGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdExtractionGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdExtractionGET(projectPk, id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdFieldsGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdFieldsGET(projectPk, id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdFieldsPATCH
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdFieldsPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdFieldsPATCH(projectPk, id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdFieldsPOST
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdFieldsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdFieldsPOST(projectPk, id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdFieldsPUT
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdFieldsPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdFieldsPUT(projectPk, id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdFullTextGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdFullTextGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdFullTextGET(projectPk, id);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdGET(projectPk, id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentsForUser), response, "response is DocumentsForUser");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdHasPdfInfoGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdHasPdfInfoGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdHasPdfInfoGET(projectPk, id);
            //Assert.IsInstanceOf(typeof(bool), response, "response is bool");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdPATCH
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdPATCH(projectPk, id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdPUT
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //DocumentsForUser documentsForUser = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdPUT(projectPk, id, documentsForUser);
            //Assert.IsInstanceOf(typeof(DocumentsForUser), response, "response is DocumentsForUser");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdPdfReprGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdPdfReprGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdPdfReprGET(projectPk, id);
            //Assert.IsInstanceOf(typeof(DocumentPDFRepr), response, "response is DocumentPDFRepr");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdShowGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdShowGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //string alt = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdShowGET(projectPk, id, alt);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdSimilarGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdSimilarGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //int? textMaxLength = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdSimilarGET(projectPk, id, textMaxLength, jqFilters);
            //Assert.IsInstanceOf(typeof(ProjectDocumentSimilarity), response, "response is ProjectDocumentSimilarity");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsMarkDeletePOST
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsMarkDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
            //var response = instance.DocumentProjectProjectPkDocumentsMarkDeletePOST(projectPk, markUnmarkForDeleteDocumentsRequest);
            //Assert.IsInstanceOf(typeof(MarkUnmarkForDeleteDocumentsResponse), response, "response is MarkUnmarkForDeleteDocumentsResponse");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsPOST
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //DocumentsForUser documentsForUser = null;
            //var response = instance.DocumentProjectProjectPkDocumentsPOST(projectPk, documentsForUser);
            //Assert.IsInstanceOf(typeof(DocumentsForUser), response, "response is DocumentsForUser");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsUnmarkDeletePOST
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsUnmarkDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
            //var response = instance.DocumentProjectProjectPkDocumentsUnmarkDeletePOST(projectPk, markUnmarkForDeleteDocumentsRequest);
            //Assert.IsInstanceOf(typeof(MarkUnmarkForDeleteDocumentsResponse), response, "response is MarkUnmarkForDeleteDocumentsResponse");
        }
        
        /// <summary>
        /// Test DocumentStatsGET
        /// </summary>
        [Test]
        public void DocumentStatsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentStatsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentTextunitsGET
        /// </summary>
        [Test]
        public void DocumentTextunitsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //var response = instance.DocumentTextunitsGET(q);
            //Assert.IsInstanceOf(typeof(List<TextUnitDjangoQL>), response, "response is List<TextUnitDjangoQL>");
        }
        
        /// <summary>
        /// Test DocumentTextunitsIdGET
        /// </summary>
        [Test]
        public void DocumentTextunitsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string q = null;
            //var response = instance.DocumentTextunitsIdGET(id, q);
            //Assert.IsInstanceOf(typeof(TextUnitDjangoQL), response, "response is TextUnitDjangoQL");
        }
        
        /// <summary>
        /// Test DumpDocumentConfigGET
        /// </summary>
        [Test]
        public void DumpDocumentConfigGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? download = null;
            //string documentTypeCodes = null;
            //var response = instance.DumpDocumentConfigGET(download, documentTypeCodes);
            //Assert.IsInstanceOf(typeof(OneOfarrayfile), response, "response is OneOfarrayfile");
        }
        
        /// <summary>
        /// Test DumpDocumentConfigPUT
        /// </summary>
        [Test]
        public void DumpDocumentConfigPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Dictionary<string, Object>> requestBody = null;
            //var response = instance.DumpDocumentConfigPUT(requestBody);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test DumpDumpFixturePOST
        /// </summary>
        [Test]
        public void DumpDumpFixturePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DumpFixture dumpFixture = null;
            //var response = instance.DumpDumpFixturePOST(dumpFixture);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test DumpDumpGET
        /// </summary>
        [Test]
        public void DumpDumpGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? download = null;
            //var response = instance.DumpDumpGET(download);
            //Assert.IsInstanceOf(typeof(OneOfarrayfile), response, "response is OneOfarrayfile");
        }
        
        /// <summary>
        /// Test DumpDumpPUT
        /// </summary>
        [Test]
        public void DumpDumpPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Dictionary<string, Object>> requestBody = null;
            //var response = instance.DumpDumpPUT(requestBody);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test DumpFieldValuesGET
        /// </summary>
        [Test]
        public void DumpFieldValuesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? download = null;
            //var response = instance.DumpFieldValuesGET(download);
            //Assert.IsInstanceOf(typeof(OneOfarrayfile), response, "response is OneOfarrayfile");
        }
        
        /// <summary>
        /// Test DumpFieldValuesPUT
        /// </summary>
        [Test]
        public void DumpFieldValuesPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Dictionary<string, Object>> requestBody = null;
            //var response = instance.DumpFieldValuesPUT(requestBody);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test DumpLoadFixturePOST
        /// </summary>
        [Test]
        public void DumpLoadFixturePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LoadFixture loadFixture = null;
            //var response = instance.DumpLoadFixturePOST(loadFixture);
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractAmountUsageGET
        /// </summary>
        [Test]
        public void ExtractAmountUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractAmountUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<AmountUsage>), response, "response is List<AmountUsage>");
        }
        
        /// <summary>
        /// Test ExtractAmountUsageTopGET
        /// </summary>
        [Test]
        public void ExtractAmountUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractAmountUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractCitationUsageGET
        /// </summary>
        [Test]
        public void ExtractCitationUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractCitationUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<CitationUsage>), response, "response is List<CitationUsage>");
        }
        
        /// <summary>
        /// Test ExtractCitationUsageTopGET
        /// </summary>
        [Test]
        public void ExtractCitationUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractCitationUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractCopyrightUsageGET
        /// </summary>
        [Test]
        public void ExtractCopyrightUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractCopyrightUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<CopyrightUsage>), response, "response is List<CopyrightUsage>");
        }
        
        /// <summary>
        /// Test ExtractCopyrightUsageTopGET
        /// </summary>
        [Test]
        public void ExtractCopyrightUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractCopyrightUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractCourtUsageGET
        /// </summary>
        [Test]
        public void ExtractCourtUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractCourtUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<CourtUsage>), response, "response is List<CourtUsage>");
        }
        
        /// <summary>
        /// Test ExtractCourtUsageTopGET
        /// </summary>
        [Test]
        public void ExtractCourtUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractCourtUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractCurrencyUsageGET
        /// </summary>
        [Test]
        public void ExtractCurrencyUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractCurrencyUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<CurrencyUsage>), response, "response is List<CurrencyUsage>");
        }
        
        /// <summary>
        /// Test ExtractCurrencyUsageTopGET
        /// </summary>
        [Test]
        public void ExtractCurrencyUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractCurrencyUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractDateDurationUsageGET
        /// </summary>
        [Test]
        public void ExtractDateDurationUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractDateDurationUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DateDurationUsage>), response, "response is List<DateDurationUsage>");
        }
        
        /// <summary>
        /// Test ExtractDateDurationUsageTopGET
        /// </summary>
        [Test]
        public void ExtractDateDurationUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractDateDurationUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractDateUsageCalendarChartGET
        /// </summary>
        [Test]
        public void ExtractDateUsageCalendarChartGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractDateUsageCalendarChartGET();
            //Assert.IsInstanceOf(typeof(List<DateUsageCalendar>), response, "response is List<DateUsageCalendar>");
        }
        
        /// <summary>
        /// Test ExtractDateUsageGET
        /// </summary>
        [Test]
        public void ExtractDateUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractDateUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DateUsage>), response, "response is List<DateUsage>");
        }
        
        /// <summary>
        /// Test ExtractDateUsageTimelineChartGET
        /// </summary>
        [Test]
        public void ExtractDateUsageTimelineChartGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractDateUsageTimelineChartGET();
            //Assert.IsInstanceOf(typeof(List<DateUsageTimeline>), response, "response is List<DateUsageTimeline>");
        }
        
        /// <summary>
        /// Test ExtractDateUsageToIcalGET
        /// </summary>
        [Test]
        public void ExtractDateUsageToIcalGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractDateUsageToIcalGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DateUsage>), response, "response is List<DateUsage>");
        }
        
        /// <summary>
        /// Test ExtractDateUsageTopGET
        /// </summary>
        [Test]
        public void ExtractDateUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractDateUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractDefinitionUsageGET
        /// </summary>
        [Test]
        public void ExtractDefinitionUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractDefinitionUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DefinitionUsage>), response, "response is List<DefinitionUsage>");
        }
        
        /// <summary>
        /// Test ExtractDefinitionUsageTopGET
        /// </summary>
        [Test]
        public void ExtractDefinitionUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractDefinitionUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractDistanceUsageGET
        /// </summary>
        [Test]
        public void ExtractDistanceUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractDistanceUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DistanceUsage>), response, "response is List<DistanceUsage>");
        }
        
        /// <summary>
        /// Test ExtractDistanceUsageTopGET
        /// </summary>
        [Test]
        public void ExtractDistanceUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractDistanceUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractGeoAliasUsageGET
        /// </summary>
        [Test]
        public void ExtractGeoAliasUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractGeoAliasUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<GeoAliasUsage>), response, "response is List<GeoAliasUsage>");
        }
        
        /// <summary>
        /// Test ExtractGeoAliasUsageTopGET
        /// </summary>
        [Test]
        public void ExtractGeoAliasUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractGeoAliasUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractGeoEntitiesGET
        /// </summary>
        [Test]
        public void ExtractGeoEntitiesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractGeoEntitiesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<GeoEntityList>), response, "response is List<GeoEntityList>");
        }
        
        /// <summary>
        /// Test ExtractGeoEntitiesIdGET
        /// </summary>
        [Test]
        public void ExtractGeoEntitiesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractGeoEntitiesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(GeoEntityList), response, "response is GeoEntityList");
        }
        
        /// <summary>
        /// Test ExtractGeoEntitiesIdPUT
        /// </summary>
        [Test]
        public void ExtractGeoEntitiesIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GeoEntityUpdate geoEntityUpdate = null;
            //var response = instance.ExtractGeoEntitiesIdPUT(id, geoEntityUpdate);
            //Assert.IsInstanceOf(typeof(GeoEntityUpdate), response, "response is GeoEntityUpdate");
        }
        
        /// <summary>
        /// Test ExtractGeoEntityUsageGET
        /// </summary>
        [Test]
        public void ExtractGeoEntityUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractGeoEntityUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<GeoEntityUsage>), response, "response is List<GeoEntityUsage>");
        }
        
        /// <summary>
        /// Test ExtractGeoEntityUsageTopGET
        /// </summary>
        [Test]
        public void ExtractGeoEntityUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractGeoEntityUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractPartiesGET
        /// </summary>
        [Test]
        public void ExtractPartiesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractPartiesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<Party>), response, "response is List<Party>");
        }
        
        /// <summary>
        /// Test ExtractPartiesIdGET
        /// </summary>
        [Test]
        public void ExtractPartiesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractPartiesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(Party), response, "response is Party");
        }
        
        /// <summary>
        /// Test ExtractPartyNetworkChartGET
        /// </summary>
        [Test]
        public void ExtractPartyNetworkChartGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractPartyNetworkChartGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<PartyUsage>), response, "response is List<PartyUsage>");
        }
        
        /// <summary>
        /// Test ExtractPartyUsageGET
        /// </summary>
        [Test]
        public void ExtractPartyUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractPartyUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<PartyUsage>), response, "response is List<PartyUsage>");
        }
        
        /// <summary>
        /// Test ExtractPartyUsageTopGET
        /// </summary>
        [Test]
        public void ExtractPartyUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractPartyUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractPercentUsageGET
        /// </summary>
        [Test]
        public void ExtractPercentUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractPercentUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<PercentUsage>), response, "response is List<PercentUsage>");
        }
        
        /// <summary>
        /// Test ExtractPercentUsageTopGET
        /// </summary>
        [Test]
        public void ExtractPercentUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractPercentUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractRatioUsageGET
        /// </summary>
        [Test]
        public void ExtractRatioUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractRatioUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<RatioUsage>), response, "response is List<RatioUsage>");
        }
        
        /// <summary>
        /// Test ExtractRatioUsageTopGET
        /// </summary>
        [Test]
        public void ExtractRatioUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractRatioUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractRegulationUsageGET
        /// </summary>
        [Test]
        public void ExtractRegulationUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractRegulationUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<RegulationUsage>), response, "response is List<RegulationUsage>");
        }
        
        /// <summary>
        /// Test ExtractRegulationUsageTopGET
        /// </summary>
        [Test]
        public void ExtractRegulationUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractRegulationUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractTermTagsGET
        /// </summary>
        [Test]
        public void ExtractTermTagsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractTermTagsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TermTag>), response, "response is List<TermTag>");
        }
        
        /// <summary>
        /// Test ExtractTermUsageGET
        /// </summary>
        [Test]
        public void ExtractTermUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractTermUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TermUsage>), response, "response is List<TermUsage>");
        }
        
        /// <summary>
        /// Test ExtractTermUsageTopGET
        /// </summary>
        [Test]
        public void ExtractTermUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractTermUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractTrademarkUsageGET
        /// </summary>
        [Test]
        public void ExtractTrademarkUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractTrademarkUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TrademarkUsage>), response, "response is List<TrademarkUsage>");
        }
        
        /// <summary>
        /// Test ExtractTrademarkUsageTopGET
        /// </summary>
        [Test]
        public void ExtractTrademarkUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractTrademarkUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ExtractTypeaheadGeoEntityUsageFieldNameGET
        /// </summary>
        [Test]
        public void ExtractTypeaheadGeoEntityUsageFieldNameGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldName = null;
            //var response = instance.ExtractTypeaheadGeoEntityUsageFieldNameGET(fieldName);
            //Assert.IsInstanceOf(typeof(Typeahead), response, "response is Typeahead");
        }
        
        /// <summary>
        /// Test ExtractTypeaheadPartyUsageFieldNameGET
        /// </summary>
        [Test]
        public void ExtractTypeaheadPartyUsageFieldNameGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldName = null;
            //var response = instance.ExtractTypeaheadPartyUsageFieldNameGET(fieldName);
            //Assert.IsInstanceOf(typeof(Typeahead), response, "response is Typeahead");
        }
        
        /// <summary>
        /// Test ExtractTypeaheadTermUsageFieldNameGET
        /// </summary>
        [Test]
        public void ExtractTypeaheadTermUsageFieldNameGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldName = null;
            //var response = instance.ExtractTypeaheadTermUsageFieldNameGET(fieldName);
            //Assert.IsInstanceOf(typeof(Typeahead), response, "response is Typeahead");
        }
        
        /// <summary>
        /// Test ExtractUrlUsageGET
        /// </summary>
        [Test]
        public void ExtractUrlUsageGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ExtractUrlUsageGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<UrlUsage>), response, "response is List<UrlUsage>");
        }
        
        /// <summary>
        /// Test ExtractUrlUsageTopGET
        /// </summary>
        [Test]
        public void ExtractUrlUsageTopGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExtractUrlUsageTopGET();
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test LoggingLogMessagePOST
        /// </summary>
        [Test]
        public void LoggingLogMessagePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LoggingAPIViewRequest loggingAPIViewRequest = null;
            //var response = instance.LoggingLogMessagePOST(loggingAPIViewRequest);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test MediaDataPathGET
        /// </summary>
        [Test]
        public void MediaDataPathGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string action = null;
            //var response = instance.MediaDataPathGET(path, action);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test ProjectProjectClusteringGET
        /// </summary>
        [Test]
        public void ProjectProjectClusteringGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectProjectClusteringGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<ProjectClustering>), response, "response is List<ProjectClustering>");
        }
        
        /// <summary>
        /// Test ProjectProjectClusteringIdGET
        /// </summary>
        [Test]
        public void ProjectProjectClusteringIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectProjectClusteringIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(ProjectClustering), response, "response is ProjectClustering");
        }
        
        /// <summary>
        /// Test ProjectProjectsFormFieldsGET
        /// </summary>
        [Test]
        public void ProjectProjectsFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ProjectProjectsFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test ProjectProjectsGET
        /// </summary>
        [Test]
        public void ProjectProjectsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectProjectsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<ProjectList>), response, "response is List<ProjectList>");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdActiveTasksGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdActiveTasksGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectProjectsIdActiveTasksGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(List<ProjectActiveTasks>), response, "response is List<ProjectActiveTasks>");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdAnnotationsAssigneesGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdAnnotationsAssigneesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ProjectProjectsIdAnnotationsAssigneesGET(id);
            //Assert.IsInstanceOf(typeof(List<ProjectAnnotationsAssigneesResponse>), response, "response is List<ProjectAnnotationsAssigneesResponse>");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdAssignAnnotationsPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdAssignAnnotationsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //AssignProjectAnnotationsRequest assignProjectAnnotationsRequest = null;
            //var response = instance.ProjectProjectsIdAssignAnnotationsPOST(id, assignProjectAnnotationsRequest);
            //Assert.IsInstanceOf(typeof(CountSuccessResponse), response, "response is CountSuccessResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdAssignDocumentPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdAssignDocumentPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //AssignProjectDocumentRequest assignProjectDocumentRequest = null;
            //var response = instance.ProjectProjectsIdAssignDocumentPOST(id, assignProjectDocumentRequest);
            //Assert.IsInstanceOf(typeof(CountSuccessResponse), response, "response is CountSuccessResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdAssignDocumentsPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdAssignDocumentsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //AssignProjectDocumentsRequest assignProjectDocumentsRequest = null;
            //var response = instance.ProjectProjectsIdAssignDocumentsPOST(id, assignProjectDocumentsRequest);
            //Assert.IsInstanceOf(typeof(CountSuccessResponse), response, "response is CountSuccessResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdAssigneesGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdAssigneesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ProjectProjectsIdAssigneesGET(id);
            //Assert.IsInstanceOf(typeof(List<ProjectDocumentsAssigneesResponse>), response, "response is List<ProjectDocumentsAssigneesResponse>");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdCleanupPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdCleanupPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CleanupProjectRequest cleanupProjectRequest = null;
            //var response = instance.ProjectProjectsIdCleanupPOST(id, cleanupProjectRequest);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdClusterActionsGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdClusterActionsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? projectId = null;
            //int? documentId = null;
            //List<string> viewActions = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectProjectsIdClusterActionsGET(id, projectId, documentId, viewActions, jqFilters);
            //Assert.IsInstanceOf(typeof(List<Action>), response, "response is List<Action>");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdClusterPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdClusterPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ClusterProjectRequest clusterProjectRequest = null;
            //var response = instance.ProjectProjectsIdClusterPOST(id, clusterProjectRequest);
            //Assert.IsInstanceOf(typeof(ClusterProjectResponse), response, "response is ClusterProjectResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdClusteringStatusGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdClusteringStatusGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? projectClusteringId = null;
            //var response = instance.ProjectProjectsIdClusteringStatusGET(id, projectClusteringId);
            //Assert.IsInstanceOf(typeof(ProjectClusteringStatusResponse), response, "response is ProjectClusteringStatusResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdDELETE
        /// </summary>
        [Test]
        public void ProjectProjectsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.ProjectProjectsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test ProjectProjectsIdDeleteDocumentSimilarityResultsDELETE
        /// </summary>
        [Test]
        public void ProjectProjectsIdDeleteDocumentSimilarityResultsDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.ProjectProjectsIdDeleteDocumentSimilarityResultsDELETE(id);
            
        }
        
        /// <summary>
        /// Test ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETE
        /// </summary>
        [Test]
        public void ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.ProjectProjectsIdDeleteTextUnitSimilarityResultsDELETE(id);
            
        }
        
        /// <summary>
        /// Test ProjectProjectsIdDetectFieldValuesPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdDetectFieldValuesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DetectProjectFieldValuesRequest detectProjectFieldValuesRequest = null;
            //var response = instance.ProjectProjectsIdDetectFieldValuesPOST(id, detectProjectFieldValuesRequest);
            //Assert.IsInstanceOf(typeof(TaskIdResponse), response, "response is TaskIdResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdFormFieldsGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ProjectProjectsIdFormFieldsGET(id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectProjectsIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(ProjectDetail), response, "response is ProjectDetail");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdLocateItemsPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdLocateItemsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProjectDetail projectDetail = null;
            //var response = instance.ProjectProjectsIdLocateItemsPOST(id, projectDetail);
            //Assert.IsInstanceOf(typeof(ProjectDetail), response, "response is ProjectDetail");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdMarkDeletePOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdMarkDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = null;
            //var response = instance.ProjectProjectsIdMarkDeletePOST(id, markUnmarkForDeleteProjectsRequest);
            //Assert.IsInstanceOf(typeof(MarkUnmarkForDeleteProjectsReponse), response, "response is MarkUnmarkForDeleteProjectsReponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdPATCH
        /// </summary>
        [Test]
        public void ProjectProjectsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProjectUpdate projectUpdate = null;
            //var response = instance.ProjectProjectsIdPATCH(id, projectUpdate);
            //Assert.IsInstanceOf(typeof(ProjectUpdate), response, "response is ProjectUpdate");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdPUT
        /// </summary>
        [Test]
        public void ProjectProjectsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProjectUpdate projectUpdate = null;
            //var response = instance.ProjectProjectsIdPUT(id, projectUpdate);
            //Assert.IsInstanceOf(typeof(ProjectUpdate), response, "response is ProjectUpdate");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdProgressGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdProgressGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ProjectProjectsIdProgressGET(id);
            //Assert.IsInstanceOf(typeof(ProjectProgressResponse), response, "response is ProjectProgressResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdSearchSimilarDocumentsPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdSearchSimilarDocumentsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProjectSearchSimilarDocumentsRequest projectSearchSimilarDocumentsRequest = null;
            //var response = instance.ProjectProjectsIdSearchSimilarDocumentsPOST(id, projectSearchSimilarDocumentsRequest);
            //Assert.IsInstanceOf(typeof(TaskIdResponse), response, "response is TaskIdResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdSearchSimilarTextUnitsPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdSearchSimilarTextUnitsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProjectSearchSimilarTextUnitsRequest projectSearchSimilarTextUnitsRequest = null;
            //var response = instance.ProjectProjectsIdSearchSimilarTextUnitsPOST(id, projectSearchSimilarTextUnitsRequest);
            //Assert.IsInstanceOf(typeof(TaskIdResponse), response, "response is TaskIdResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdSendClustersToProjectPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdSendClustersToProjectPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SendClusterToProjectRequest sendClusterToProjectRequest = null;
            //var response = instance.ProjectProjectsIdSendClustersToProjectPOST(id, sendClusterToProjectRequest);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdSetAnnotationStatusPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdSetAnnotationStatusPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest = null;
            //var response = instance.ProjectProjectsIdSetAnnotationStatusPOST(id, setProjectAnnotationsStatusRequest);
            //Assert.IsInstanceOf(typeof(OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse), response, "response is OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdSetStatusPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdSetStatusPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest = null;
            //var response = instance.ProjectProjectsIdSetStatusPOST(id, setProjectDocumentsStatusRequest);
            //Assert.IsInstanceOf(typeof(CountSuccessResponse), response, "response is CountSuccessResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdSettingsActionsGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdSettingsActionsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? projectId = null;
            //int? documentId = null;
            //List<string> viewActions = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectProjectsIdSettingsActionsGET(id, projectId, documentId, viewActions, jqFilters);
            //Assert.IsInstanceOf(typeof(List<Action>), response, "response is List<Action>");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdTaskTaskIdTaskLogsGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdTaskTaskIdTaskLogsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string taskId = null;
            //int? recordsLimit = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectProjectsIdTaskTaskIdTaskLogsGET(id, taskId, recordsLimit, jqFilters);
            //Assert.IsInstanceOf(typeof(TaskLogResponse), response, "response is TaskLogResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdTasksGET
        /// </summary>
        [Test]
        public void ProjectProjectsIdTasksGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectProjectsIdTasksGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(List<ProjectTasks>), response, "response is List<ProjectTasks>");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdUnmarkDeletePOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdUnmarkDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = null;
            //var response = instance.ProjectProjectsIdUnmarkDeletePOST(id, markUnmarkForDeleteProjectsRequest);
            //Assert.IsInstanceOf(typeof(MarkUnmarkForDeleteProjectsReponse), response, "response is MarkUnmarkForDeleteProjectsReponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsIdUpdateDocumentFieldsPOST
        /// </summary>
        [Test]
        public void ProjectProjectsIdUpdateDocumentFieldsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UpdateProjectDocumentsFieldsRequest updateProjectDocumentsFieldsRequest = null;
            //var response = instance.ProjectProjectsIdUpdateDocumentFieldsPOST(id, updateProjectDocumentsFieldsRequest);
            //Assert.IsInstanceOf(typeof(TaskIdResponse), response, "response is TaskIdResponse");
        }
        
        /// <summary>
        /// Test ProjectProjectsPOST
        /// </summary>
        [Test]
        public void ProjectProjectsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProjectCreate projectCreate = null;
            //var response = instance.ProjectProjectsPOST(projectCreate);
            //Assert.IsInstanceOf(typeof(ProjectCreate), response, "response is ProjectCreate");
        }
        
        /// <summary>
        /// Test ProjectProjectsProjectStatsGET
        /// </summary>
        [Test]
        public void ProjectProjectsProjectStatsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectIds = null;
            //var response = instance.ProjectProjectsProjectStatsGET(projectIds);
            //Assert.IsInstanceOf(typeof(List<ProjectStats>), response, "response is List<ProjectStats>");
        }
        
        /// <summary>
        /// Test ProjectProjectsRecentGET
        /// </summary>
        [Test]
        public void ProjectProjectsRecentGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? n = null;
            //var response = instance.ProjectProjectsRecentGET(n);
            //Assert.IsInstanceOf(typeof(List<Dictionary<string, Object>>), response, "response is List<Dictionary<string, Object>>");
        }
        
        /// <summary>
        /// Test ProjectProjectsSelectProjectsPOST
        /// </summary>
        [Test]
        public void ProjectProjectsSelectProjectsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SelectProjectsRequest selectProjectsRequest = null;
            //var response = instance.ProjectProjectsSelectProjectsPOST(selectProjectsRequest);
            //Assert.IsInstanceOf(typeof(SelectProjectsResponse), response, "response is SelectProjectsResponse");
        }
        
        /// <summary>
        /// Test ProjectTaskQueuesGET
        /// </summary>
        [Test]
        public void ProjectTaskQueuesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectTaskQueuesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<TaskQueue>), response, "response is List<TaskQueue>");
        }
        
        /// <summary>
        /// Test ProjectTaskQueuesIdDELETE
        /// </summary>
        [Test]
        public void ProjectTaskQueuesIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.ProjectTaskQueuesIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test ProjectTaskQueuesIdGET
        /// </summary>
        [Test]
        public void ProjectTaskQueuesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectTaskQueuesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(TaskQueue), response, "response is TaskQueue");
        }
        
        /// <summary>
        /// Test ProjectTaskQueuesIdPATCH
        /// </summary>
        [Test]
        public void ProjectTaskQueuesIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TaskQueue taskQueue = null;
            //var response = instance.ProjectTaskQueuesIdPATCH(id, taskQueue);
            //Assert.IsInstanceOf(typeof(TaskQueue), response, "response is TaskQueue");
        }
        
        /// <summary>
        /// Test ProjectTaskQueuesIdPUT
        /// </summary>
        [Test]
        public void ProjectTaskQueuesIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TaskQueue taskQueue = null;
            //var response = instance.ProjectTaskQueuesIdPUT(id, taskQueue);
            //Assert.IsInstanceOf(typeof(TaskQueue), response, "response is TaskQueue");
        }
        
        /// <summary>
        /// Test ProjectTaskQueuesPOST
        /// </summary>
        [Test]
        public void ProjectTaskQueuesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TaskQueue taskQueue = null;
            //var response = instance.ProjectTaskQueuesPOST(taskQueue);
            //Assert.IsInstanceOf(typeof(TaskQueue), response, "response is TaskQueue");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionGET
        /// </summary>
        [Test]
        public void ProjectUploadSessionGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectUploadSessionGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<UploadSessionDetail>), response, "response is List<UploadSessionDetail>");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionPOST
        /// </summary>
        [Test]
        public void ProjectUploadSessionPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UploadSessionCreate uploadSessionCreate = null;
            //var response = instance.ProjectUploadSessionPOST(uploadSessionCreate);
            //Assert.IsInstanceOf(typeof(UploadSessionCreate), response, "response is UploadSessionCreate");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionStatusGET
        /// </summary>
        [Test]
        public void ProjectUploadSessionStatusGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //var response = instance.ProjectUploadSessionStatusGET(projectId);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidBatchUploadPOST
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidBatchUploadPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //UploadSessionDetail uploadSessionDetail = null;
            //var response = instance.ProjectUploadSessionUidBatchUploadPOST(uid, uploadSessionDetail);
            //Assert.IsInstanceOf(typeof(UploadSessionDetail), response, "response is UploadSessionDetail");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidBatchUploadPOST_0
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidBatchUploadPOST_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest = null;
            //var response = instance.ProjectUploadSessionUidBatchUploadPOST_0(uid, uploadSessionBatchUploadRequest);
            //Assert.IsInstanceOf(typeof(UploadSessionDetail), response, "response is UploadSessionDetail");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidCancelDELETE
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidCancelDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //instance.ProjectUploadSessionUidCancelDELETE(uid);
            
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidDELETE
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //instance.ProjectUploadSessionUidDELETE(uid);
            
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidDeleteFileDELETE
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidDeleteFileDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest = null;
            //var response = instance.ProjectUploadSessionUidDeleteFileDELETE(uid, uploadSessionDeleteFileRequest);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidFilesPOST
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidFilesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //int contentLength = null;
            //string fileName = null;
            //bool? force = null;
            //bool? directoryPath = null;
            //bool? force2 = null;
            //System.IO.Stream body = null;
            //var response = instance.ProjectUploadSessionUidFilesPOST(uid, contentLength, fileName, force, directoryPath, force2, body);
            //Assert.IsInstanceOf(typeof(ProjectUploadSessionFilesResponse), response, "response is ProjectUploadSessionFilesResponse");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidGET
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.ProjectUploadSessionUidGET(uid, jqFilters);
            //Assert.IsInstanceOf(typeof(UploadSessionDetail), response, "response is UploadSessionDetail");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidPATCH
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //UploadSessionUpdate uploadSessionUpdate = null;
            //var response = instance.ProjectUploadSessionUidPATCH(uid, uploadSessionUpdate);
            //Assert.IsInstanceOf(typeof(UploadSessionUpdate), response, "response is UploadSessionUpdate");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidProgressGET
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidProgressGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //var response = instance.ProjectUploadSessionUidProgressGET(uid);
            //Assert.IsInstanceOf(typeof(ProjectUploadSessionProgressResponse), response, "response is ProjectUploadSessionProgressResponse");
        }
        
        /// <summary>
        /// Test ProjectUploadSessionUidUploadPOST
        /// </summary>
        [Test]
        public void ProjectUploadSessionUidUploadPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //bool fileName = null;
            //string fileEncoding = null;
            //bool? force = null;
            //bool? reviewFile = null;
            //bool? directoryPath = null;
            //System.IO.Stream body = null;
            //var response = instance.ProjectUploadSessionUidUploadPOST(uid, fileName, fileEncoding, force, reviewFile, directoryPath, body);
            //Assert.IsInstanceOf(typeof(ProjectUploadSessionPOSTResponse), response, "response is ProjectUploadSessionPOSTResponse");
        }
        
        /// <summary>
        /// Test RawdbConfigGET
        /// </summary>
        [Test]
        public void RawdbConfigGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RawdbConfigGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test RawdbDocumentsDocumentTypeCodeGET
        /// </summary>
        [Test]
        public void RawdbDocumentsDocumentTypeCodeGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentTypeCode = null;
            //string projectIds = null;
            //string columns = null;
            //bool? associatedText = null;
            //bool? asZip = null;
            //string fmt = null;
            //int? limit = null;
            //string orderBy = null;
            //string savedFilters = null;
            //bool? saveFilter = null;
            //bool? returnReviewed = null;
            //bool? returnTotal = null;
            //bool? returnData = null;
            //bool? ignoreErrors = null;
            //Dictionary<string, string> filters = null;
            //var response = instance.RawdbDocumentsDocumentTypeCodeGET(documentTypeCode, projectIds, columns, associatedText, asZip, fmt, limit, orderBy, savedFilters, saveFilter, returnReviewed, returnTotal, returnData, ignoreErrors, filters);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test RawdbDocumentsDocumentTypeCodePOST
        /// </summary>
        [Test]
        public void RawdbDocumentsDocumentTypeCodePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentTypeCode = null;
            //RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest = null;
            //var response = instance.RawdbDocumentsDocumentTypeCodePOST(documentTypeCode, rawdbDocumentsPOSTRequest);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test RawdbProjectStatsProjectIdGET
        /// </summary>
        [Test]
        public void RawdbProjectStatsProjectIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //var response = instance.RawdbProjectStatsProjectIdGET(projectId);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test RawdbSocialAccountsGET
        /// </summary>
        [Test]
        public void RawdbSocialAccountsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RawdbSocialAccountsGET();
            //Assert.IsInstanceOf(typeof(SocialAccountsResponse), response, "response is SocialAccountsResponse");
        }
        
        /// <summary>
        /// Test RestAuthLoginPOST
        /// </summary>
        [Test]
        public void RestAuthLoginPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Login login = null;
            //var response = instance.RestAuthLoginPOST(login);
            //Assert.IsInstanceOf(typeof(LoginResponse), response, "response is LoginResponse");
        }
        
        /// <summary>
        /// Test RestAuthLogoutGET
        /// </summary>
        [Test]
        public void RestAuthLogoutGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RestAuthLogoutGET();
            //Assert.IsInstanceOf(typeof(List<RestAuthCommonResponse>), response, "response is List<RestAuthCommonResponse>");
        }
        
        /// <summary>
        /// Test RestAuthLogoutPOST
        /// </summary>
        [Test]
        public void RestAuthLogoutPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.RestAuthLogoutPOST(requestBody);
            //Assert.IsInstanceOf(typeof(RestAuthCommonResponse), response, "response is RestAuthCommonResponse");
        }
        
        /// <summary>
        /// Test RestAuthPasswordChangePOST
        /// </summary>
        [Test]
        public void RestAuthPasswordChangePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CustomPasswordChange customPasswordChange = null;
            //var response = instance.RestAuthPasswordChangePOST(customPasswordChange);
            //Assert.IsInstanceOf(typeof(RestAuthCommonResponse), response, "response is RestAuthCommonResponse");
        }
        
        /// <summary>
        /// Test RestAuthPasswordResetConfirmPOST
        /// </summary>
        [Test]
        public void RestAuthPasswordResetConfirmPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CustomPasswordResetConfirm customPasswordResetConfirm = null;
            //var response = instance.RestAuthPasswordResetConfirmPOST(customPasswordResetConfirm);
            //Assert.IsInstanceOf(typeof(RestAuthCommonResponse), response, "response is RestAuthCommonResponse");
        }
        
        /// <summary>
        /// Test RestAuthPasswordResetPOST
        /// </summary>
        [Test]
        public void RestAuthPasswordResetPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CustomPasswordReset customPasswordReset = null;
            //var response = instance.RestAuthPasswordResetPOST(customPasswordReset);
            //Assert.IsInstanceOf(typeof(RestAuthCommonResponse), response, "response is RestAuthCommonResponse");
        }
        
        /// <summary>
        /// Test RestAuthRegistrationPOST
        /// </summary>
        [Test]
        public void RestAuthRegistrationPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Register register = null;
            //var response = instance.RestAuthRegistrationPOST(register);
            //Assert.IsInstanceOf(typeof(Register), response, "response is Register");
        }
        
        /// <summary>
        /// Test RestAuthRegistrationVerifyEmailPOST
        /// </summary>
        [Test]
        public void RestAuthRegistrationVerifyEmailPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //VerifyEmail verifyEmail = null;
            //var response = instance.RestAuthRegistrationVerifyEmailPOST(verifyEmail);
            //Assert.IsInstanceOf(typeof(VerifyEmail), response, "response is VerifyEmail");
        }
        
        /// <summary>
        /// Test SimilarityDocumentSimilarityByFeaturesGET
        /// </summary>
        [Test]
        public void SimilarityDocumentSimilarityByFeaturesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SimilarityDocumentSimilarityByFeaturesGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test SimilarityDocumentSimilarityByFeaturesPOST
        /// </summary>
        [Test]
        public void SimilarityDocumentSimilarityByFeaturesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentSimilarityByFeaturesForm documentSimilarityByFeaturesForm = null;
            //var response = instance.SimilarityDocumentSimilarityByFeaturesPOST(documentSimilarityByFeaturesForm);
            //Assert.IsInstanceOf(typeof(SimilarityPOSTObjectResponse), response, "response is SimilarityPOSTObjectResponse");
        }
        
        /// <summary>
        /// Test SimilarityPartySimilarityGET
        /// </summary>
        [Test]
        public void SimilarityPartySimilarityGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SimilarityPartySimilarityGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test SimilarityPartySimilarityPOST
        /// </summary>
        [Test]
        public void SimilarityPartySimilarityPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PartySimilarityForm partySimilarityForm = null;
            //var response = instance.SimilarityPartySimilarityPOST(partySimilarityForm);
            //Assert.IsInstanceOf(typeof(SimilarityPOSTObjectResponse), response, "response is SimilarityPOSTObjectResponse");
        }
        
        /// <summary>
        /// Test SimilarityProjectDocumentsSimilarityByVectorsGET
        /// </summary>
        [Test]
        public void SimilarityProjectDocumentsSimilarityByVectorsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SimilarityProjectDocumentsSimilarityByVectorsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test SimilarityProjectDocumentsSimilarityByVectorsPOST
        /// </summary>
        [Test]
        public void SimilarityProjectDocumentsSimilarityByVectorsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProjectDocumentsSimilarityByVectorsForm projectDocumentsSimilarityByVectorsForm = null;
            //var response = instance.SimilarityProjectDocumentsSimilarityByVectorsPOST(projectDocumentsSimilarityByVectorsForm);
            //Assert.IsInstanceOf(typeof(SimilarityPOSTObjectResponse), response, "response is SimilarityPOSTObjectResponse");
        }
        
        /// <summary>
        /// Test SimilarityProjectTextUnitsSimilarityByVectorsGET
        /// </summary>
        [Test]
        public void SimilarityProjectTextUnitsSimilarityByVectorsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SimilarityProjectTextUnitsSimilarityByVectorsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test SimilarityProjectTextUnitsSimilarityByVectorsPOST
        /// </summary>
        [Test]
        public void SimilarityProjectTextUnitsSimilarityByVectorsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProjectTextUnitsSimilarityByVectorsForm projectTextUnitsSimilarityByVectorsForm = null;
            //var response = instance.SimilarityProjectTextUnitsSimilarityByVectorsPOST(projectTextUnitsSimilarityByVectorsForm);
            //Assert.IsInstanceOf(typeof(SimilarityPOSTObjectResponse), response, "response is SimilarityPOSTObjectResponse");
        }
        
        /// <summary>
        /// Test SimilaritySimilarityGET
        /// </summary>
        [Test]
        public void SimilaritySimilarityGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SimilaritySimilarityGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test SimilaritySimilarityPOST
        /// </summary>
        [Test]
        public void SimilaritySimilarityPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SimilarityForm similarityForm = null;
            //var response = instance.SimilaritySimilarityPOST(similarityForm);
            //Assert.IsInstanceOf(typeof(SimilarityPOSTObjectResponse), response, "response is SimilarityPOSTObjectResponse");
        }
        
        /// <summary>
        /// Test SimilarityTextUnitSimilarityByFeaturesGET
        /// </summary>
        [Test]
        public void SimilarityTextUnitSimilarityByFeaturesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SimilarityTextUnitSimilarityByFeaturesGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test SimilarityTextUnitSimilarityByFeaturesPOST
        /// </summary>
        [Test]
        public void SimilarityTextUnitSimilarityByFeaturesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TextUnitSimilarityByFeaturesForm textUnitSimilarityByFeaturesForm = null;
            //var response = instance.SimilarityTextUnitSimilarityByFeaturesPOST(textUnitSimilarityByFeaturesForm);
            //Assert.IsInstanceOf(typeof(SimilarityPOSTObjectResponse), response, "response is SimilarityPOSTObjectResponse");
        }
        
        /// <summary>
        /// Test TaskCleanTasksPOST
        /// </summary>
        [Test]
        public void TaskCleanTasksPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskCleanTasksPOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskLoadDictionariesPOST
        /// </summary>
        [Test]
        public void TaskLoadDictionariesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskLoadDictionariesPOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskLoadDocumentsGET
        /// </summary>
        [Test]
        public void TaskLoadDocumentsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TaskLoadDocumentsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskLoadDocumentsPOST
        /// </summary>
        [Test]
        public void TaskLoadDocumentsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskLoadDocumentsPOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskLocateGET
        /// </summary>
        [Test]
        public void TaskLocateGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TaskLocateGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskLocatePOST
        /// </summary>
        [Test]
        public void TaskLocatePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskLocatePOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskProcessTextExtractionResultsRequestIdPOST
        /// </summary>
        [Test]
        public void TaskProcessTextExtractionResultsRequestIdPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskProcessTextExtractionResultsRequestIdPOST(requestId, requestBody);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test TaskPurgeTaskPOST
        /// </summary>
        [Test]
        public void TaskPurgeTaskPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskPurgeTaskPOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskRecallTaskGET
        /// </summary>
        [Test]
        public void TaskRecallTaskGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TaskRecallTaskGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskRecallTaskPOST
        /// </summary>
        [Test]
        public void TaskRecallTaskPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskRecallTaskPOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskReindexroutinesCheckSchedulePOST
        /// </summary>
        [Test]
        public void TaskReindexroutinesCheckSchedulePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskReindexroutinesCheckSchedulePOST(requestBody);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test TaskTaskLogGET
        /// </summary>
        [Test]
        public void TaskTaskLogGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //int? recordsLimit = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.TaskTaskLogGET(taskId, recordsLimit, jqFilters);
            //Assert.IsInstanceOf(typeof(List<TaskLogResponse>), response, "response is List<TaskLogResponse>");
        }
        
        /// <summary>
        /// Test TaskTaskStatusGET
        /// </summary>
        [Test]
        public void TaskTaskStatusGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.TaskTaskStatusGET(taskId);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskTasksGET
        /// </summary>
        [Test]
        public void TaskTasksGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.TaskTasksGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<Task>), response, "response is List<Task>");
        }
        
        /// <summary>
        /// Test TaskTasksIdGET
        /// </summary>
        [Test]
        public void TaskTasksIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.TaskTasksIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(Task), response, "response is Task");
        }
        
        /// <summary>
        /// Test TaskTasksProjectProjectIdActiveTasksGET
        /// </summary>
        [Test]
        public void TaskTasksProjectProjectIdActiveTasksGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.TaskTasksProjectProjectIdActiveTasksGET(projectId, jqFilters);
            //Assert.IsInstanceOf(typeof(List<ProjectActiveTasks>), response, "response is List<ProjectActiveTasks>");
        }
        
        /// <summary>
        /// Test TaskTasksProjectProjectIdTasksGET
        /// </summary>
        [Test]
        public void TaskTasksProjectProjectIdTasksGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.TaskTasksProjectProjectIdTasksGET(projectId, jqFilters);
            //Assert.IsInstanceOf(typeof(List<ProjectTasks>), response, "response is List<ProjectTasks>");
        }
        
        /// <summary>
        /// Test TaskUpdateElasticIndexGET
        /// </summary>
        [Test]
        public void TaskUpdateElasticIndexGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TaskUpdateElasticIndexGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TaskUpdateElasticIndexPOST
        /// </summary>
        [Test]
        public void TaskUpdateElasticIndexPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, Object> requestBody = null;
            //var response = instance.TaskUpdateElasticIndexPOST(requestBody);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test TusUploadSessionUploadSessionIdUploadGuidPATCH
        /// </summary>
        [Test]
        public void TusUploadSessionUploadSessionIdUploadGuidPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uploadSessionId = null;
            //string guid = null;
            //int uploadOffset = null;
            //string tusResumable = null;
            //bool? force = null;
            //System.IO.Stream body = null;
            //var response = instance.TusUploadSessionUploadSessionIdUploadGuidPATCH(uploadSessionId, guid, uploadOffset, tusResumable, force, body);
            //Assert.IsInstanceOf(typeof(InlineResponse400), response, "response is InlineResponse400");
        }
        
        /// <summary>
        /// Test TusUploadSessionUploadSessionIdUploadPOST
        /// </summary>
        [Test]
        public void TusUploadSessionUploadSessionIdUploadPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uploadSessionId = null;
            //int uploadLength = null;
            //string uploadMetadata = null;
            //string tusResumable = null;
            //bool? force = null;
            //Dictionary<string, Object> requestBody = null;
            //instance.TusUploadSessionUploadSessionIdUploadPOST(uploadSessionId, uploadLength, uploadMetadata, tusResumable, force, requestBody);
            
        }
        
        /// <summary>
        /// Test UsersUsersFormFieldsGET
        /// </summary>
        [Test]
        public void UsersUsersFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UsersUsersFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test UsersUsersGET
        /// </summary>
        [Test]
        public void UsersUsersGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.UsersUsersGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<User>), response, "response is List<User>");
        }
        
        /// <summary>
        /// Test UsersUsersIdFormFieldsGET
        /// </summary>
        [Test]
        public void UsersUsersIdFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.UsersUsersIdFormFieldsGET(id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test UsersUsersIdGET
        /// </summary>
        [Test]
        public void UsersUsersIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.UsersUsersIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(User), response, "response is User");
        }
        
        /// <summary>
        /// Test UsersUsersIdPATCH
        /// </summary>
        [Test]
        public void UsersUsersIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserProfile userProfile = null;
            //var response = instance.UsersUsersIdPATCH(id, userProfile);
            //Assert.IsInstanceOf(typeof(UserProfile), response, "response is UserProfile");
        }
        
        /// <summary>
        /// Test UsersUsersIdPUT
        /// </summary>
        [Test]
        public void UsersUsersIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserProfile userProfile = null;
            //var response = instance.UsersUsersIdPUT(id, userProfile);
            //Assert.IsInstanceOf(typeof(UserProfile), response, "response is UserProfile");
        }
        
        /// <summary>
        /// Test UsersUsersPOST
        /// </summary>
        [Test]
        public void UsersUsersPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserProfile userProfile = null;
            //var response = instance.UsersUsersPOST(userProfile);
            //Assert.IsInstanceOf(typeof(UserProfile), response, "response is UserProfile");
        }
        
        /// <summary>
        /// Test UsersUsersUserStatsGET
        /// </summary>
        [Test]
        public void UsersUsersUserStatsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UsersUsersUserStatsGET();
            //Assert.IsInstanceOf(typeof(List<UserStats>), response, "response is List<UserStats>");
        }
        
        /// <summary>
        /// Test UsersVerifyTokenPOST
        /// </summary>
        [Test]
        public void UsersVerifyTokenPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //VerifyAuthTokenRequest verifyAuthTokenRequest = null;
            //var response = instance.UsersVerifyTokenPOST(verifyAuthTokenRequest);
            //Assert.IsInstanceOf(typeof(VerifyAuthTokenResponse), response, "response is VerifyAuthTokenResponse");
        }
        
        /// <summary>
        /// Test VarGET
        /// </summary>
        [Test]
        public void VarGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string var = null;
            //var response = instance.VarGET(var);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
    }

}
