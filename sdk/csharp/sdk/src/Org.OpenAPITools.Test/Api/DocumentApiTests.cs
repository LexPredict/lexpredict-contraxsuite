/* 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing DocumentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DocumentApiTests
    {
        private DocumentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DocumentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DocumentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DocumentApi
            //Assert.IsInstanceOf(typeof(DocumentApi), instance);
        }

        
        /// <summary>
        /// Test DocumentAnnotationsAnnotatePUT
        /// </summary>
        [Test]
        public void DocumentAnnotationsAnnotatePUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Annotation annotation = null;
            //var response = instance.DocumentAnnotationsAnnotatePUT(annotation);
            //Assert.IsInstanceOf(typeof(AnnotationUpdateResponse), response, "response is AnnotationUpdateResponse");
        }
        
        /// <summary>
        /// Test DocumentAnnotationsBatchPUT
        /// </summary>
        [Test]
        public void DocumentAnnotationsBatchPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<AnnotationBatchRequest> annotationBatchRequest = null;
            //var response = instance.DocumentAnnotationsBatchPUT(annotationBatchRequest);
            //Assert.IsInstanceOf(typeof(List<AnnotationBatchResponse>), response, "response is List<AnnotationBatchResponse>");
        }
        
        /// <summary>
        /// Test DocumentAnnotationsGET
        /// </summary>
        [Test]
        public void DocumentAnnotationsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentAnnotationsGET();
            //Assert.IsInstanceOf(typeof(List<Annotation>), response, "response is List<Annotation>");
        }
        
        /// <summary>
        /// Test DocumentAnnotationsIdDELETE
        /// </summary>
        [Test]
        public void DocumentAnnotationsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DocumentAnnotationsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test DocumentAnnotationsIdGET
        /// </summary>
        [Test]
        public void DocumentAnnotationsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentAnnotationsIdGET(id);
            //Assert.IsInstanceOf(typeof(Annotation), response, "response is Annotation");
        }
        
        /// <summary>
        /// Test DocumentAnnotationsIdPUT
        /// </summary>
        [Test]
        public void DocumentAnnotationsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Annotation annotation = null;
            //var response = instance.DocumentAnnotationsIdPUT(id, annotation);
            //Assert.IsInstanceOf(typeof(Annotation), response, "response is Annotation");
        }
        
        /// <summary>
        /// Test DocumentAnnotationsPOST
        /// </summary>
        [Test]
        public void DocumentAnnotationsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Annotation annotation = null;
            //var response = instance.DocumentAnnotationsPOST(annotation);
            //Assert.IsInstanceOf(typeof(Annotation), response, "response is Annotation");
        }
        
        /// <summary>
        /// Test DocumentAnnotationsSuggestPOST
        /// </summary>
        [Test]
        public void DocumentAnnotationsSuggestPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AnnotationSuggestRequest annotationSuggestRequest = null;
            //var response = instance.DocumentAnnotationsSuggestPOST(annotationSuggestRequest);
            //Assert.IsInstanceOf(typeof(Annotation), response, "response is Annotation");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldAnnotationsForUserGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldAnnotationsForUserGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldAnnotationsForUserGET(jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldAnnotation), response, "response is DocumentFieldAnnotation");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldAnnotationsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldAnnotationsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldAnnotationsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldAnnotation>), response, "response is List<DocumentFieldAnnotation>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldAnnotationsUidGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldAnnotationsUidGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldAnnotationsUidGET(uid, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldAnnotation), response, "response is DocumentFieldAnnotation");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentDocumentFieldCategoriesFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldCategoriesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldCategoryList>), response, "response is List<DocumentFieldCategoryList>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesIdDELETE
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DocumentDocumentFieldCategoriesIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesIdFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesIdFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentDocumentFieldCategoriesIdFormFieldsGET(id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesIdGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldCategoriesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldCategoryList), response, "response is DocumentFieldCategoryList");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesIdPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentFieldCategoryCreate documentFieldCategoryCreate = null;
            //var response = instance.DocumentDocumentFieldCategoriesIdPATCH(id, documentFieldCategoryCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldCategoryCreate), response, "response is DocumentFieldCategoryCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesIdPUT
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentFieldCategoryCreate documentFieldCategoryCreate = null;
            //var response = instance.DocumentDocumentFieldCategoriesIdPUT(id, documentFieldCategoryCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldCategoryCreate), response, "response is DocumentFieldCategoryCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldCategoriesPOST
        /// </summary>
        [Test]
        public void DocumentDocumentFieldCategoriesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentFieldCategoryCreate documentFieldCategoryCreate = null;
            //var response = instance.DocumentDocumentFieldCategoriesPOST(documentFieldCategoryCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldCategoryCreate), response, "response is DocumentFieldCategoryCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentDocumentFieldDetectorsFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldDetectorsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldDetectorDetail>), response, "response is List<DocumentFieldDetectorDetail>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsPOST
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentFieldDetectorCreate documentFieldDetectorCreate = null;
            //var response = instance.DocumentDocumentFieldDetectorsPOST(documentFieldDetectorCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldDetectorCreate), response, "response is DocumentFieldDetectorCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsUidDELETE
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsUidDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //instance.DocumentDocumentFieldDetectorsUidDELETE(uid);
            
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsUidFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsUidFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //var response = instance.DocumentDocumentFieldDetectorsUidFormFieldsGET(uid);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsUidGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsUidGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldDetectorsUidGET(uid, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldDetectorDetail), response, "response is DocumentFieldDetectorDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsUidPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsUidPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentFieldDetectorCreate documentFieldDetectorCreate = null;
            //var response = instance.DocumentDocumentFieldDetectorsUidPATCH(uid, documentFieldDetectorCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldDetectorCreate), response, "response is DocumentFieldDetectorCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldDetectorsUidPUT
        /// </summary>
        [Test]
        public void DocumentDocumentFieldDetectorsUidPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentFieldDetectorCreate documentFieldDetectorCreate = null;
            //var response = instance.DocumentDocumentFieldDetectorsUidPUT(uid, documentFieldDetectorCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldDetectorCreate), response, "response is DocumentFieldDetectorCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldValuesGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldValuesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldValuesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldValue>), response, "response is List<DocumentFieldValue>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldValuesIdGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldValuesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldValuesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldValue), response, "response is DocumentFieldValue");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentDocumentFieldsFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldsGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldList>), response, "response is List<DocumentFieldList>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsStatsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsStatsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentTypeUid = null;
            //var response = instance.DocumentDocumentFieldsStatsGET(documentTypeUid);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldStatsResponse>), response, "response is List<DocumentFieldStatsResponse>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidCheckFormulaPOST
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidCheckFormulaPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest = null;
            //var response = instance.DocumentDocumentFieldsUidCheckFormulaPOST(uid, checkDocumentFieldFormulaRequest);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidClonePOST
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidClonePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //CloneDocumentFieldRequest cloneDocumentFieldRequest = null;
            //var response = instance.DocumentDocumentFieldsUidClonePOST(uid, cloneDocumentFieldRequest);
            //Assert.IsInstanceOf(typeof(DocumentFieldDetail), response, "response is DocumentFieldDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidDELETE
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //instance.DocumentDocumentFieldsUidDELETE(uid);
            
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //var response = instance.DocumentDocumentFieldsUidFormFieldsGET(uid);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidGET
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentFieldsUidGET(uid, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldDetail), response, "response is DocumentFieldDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentFieldCreate documentFieldCreate = null;
            //var response = instance.DocumentDocumentFieldsUidPATCH(uid, documentFieldCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldCreate), response, "response is DocumentFieldCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidPUT
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentFieldCreate documentFieldCreate = null;
            //var response = instance.DocumentDocumentFieldsUidPUT(uid, documentFieldCreate);
            //Assert.IsInstanceOf(typeof(DocumentFieldCreate), response, "response is DocumentFieldCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentFieldsUidPreDeletePOST
        /// </summary>
        [Test]
        public void DocumentDocumentFieldsUidPreDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentFieldDetail documentFieldDetail = null;
            //var response = instance.DocumentDocumentFieldsUidPreDeletePOST(uid, documentFieldDetail);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentNotesGET
        /// </summary>
        [Test]
        public void DocumentDocumentNotesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //string projectId = null;
            //string documentId = null;
            //bool? force = null;
            //bool? exportTo = null;
            //var response = instance.DocumentDocumentNotesGET(jqFilters, projectId, documentId, force, exportTo);
            //Assert.IsInstanceOf(typeof(List<DocumentNoteDetail>), response, "response is List<DocumentNoteDetail>");
        }
        
        /// <summary>
        /// Test DocumentDocumentNotesIdDELETE
        /// </summary>
        [Test]
        public void DocumentDocumentNotesIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DocumentDocumentNotesIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test DocumentDocumentNotesIdGET
        /// </summary>
        [Test]
        public void DocumentDocumentNotesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentNotesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentNoteDetail), response, "response is DocumentNoteDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentNotesIdPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentNotesIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentNoteDetail documentNoteDetail = null;
            //var response = instance.DocumentDocumentNotesIdPATCH(id, documentNoteDetail);
            //Assert.IsInstanceOf(typeof(DocumentNoteDetail), response, "response is DocumentNoteDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentNotesIdPUT
        /// </summary>
        [Test]
        public void DocumentDocumentNotesIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentNoteUpdate documentNoteUpdate = null;
            //var response = instance.DocumentDocumentNotesIdPUT(id, documentNoteUpdate);
            //Assert.IsInstanceOf(typeof(DocumentNoteUpdate), response, "response is DocumentNoteUpdate");
        }
        
        /// <summary>
        /// Test DocumentDocumentNotesPOST
        /// </summary>
        [Test]
        public void DocumentDocumentNotesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentNoteCreate documentNoteCreate = null;
            //var response = instance.DocumentDocumentNotesPOST(documentNoteCreate);
            //Assert.IsInstanceOf(typeof(DocumentNoteCreate), response, "response is DocumentNoteCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentDocumentTypesFormFieldsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentTypesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentTypeDetail>), response, "response is List<DocumentTypeDetail>");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesImportDocTypePUT
        /// </summary>
        [Test]
        public void DocumentDocumentTypesImportDocTypePUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentTypeImportRequest documentTypeImportRequest = null;
            //var response = instance.DocumentDocumentTypesImportDocTypePUT(documentTypeImportRequest);
            //Assert.IsInstanceOf(typeof(DocumentTypeImportResponse), response, "response is DocumentTypeImportResponse");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesPOST
        /// </summary>
        [Test]
        public void DocumentDocumentTypesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentTypeCreate documentTypeCreate = null;
            //var response = instance.DocumentDocumentTypesPOST(documentTypeCreate);
            //Assert.IsInstanceOf(typeof(DocumentTypeCreate), response, "response is DocumentTypeCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesStatsGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesStatsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentDocumentTypesStatsGET();
            //Assert.IsInstanceOf(typeof(List<DocumentTypeStats>), response, "response is List<DocumentTypeStats>");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidClonePOST
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidClonePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //CloneDocumentTypeRequest cloneDocumentTypeRequest = null;
            //var response = instance.DocumentDocumentTypesUidClonePOST(uid, cloneDocumentTypeRequest);
            //Assert.IsInstanceOf(typeof(DocumentTypeDetail), response, "response is DocumentTypeDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidDELETE
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //instance.DocumentDocumentTypesUidDELETE(uid);
            
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidExportDocTypeGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidExportDocTypeGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //string targetVersion = null;
            //var response = instance.DocumentDocumentTypesUidExportDocTypeGET(uid, targetVersion);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidFormFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidFormFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //var response = instance.DocumentDocumentTypesUidFormFieldsGET(uid);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentTypesUidGET(uid, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentTypeDetail), response, "response is DocumentTypeDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentTypeCreate documentTypeCreate = null;
            //var response = instance.DocumentDocumentTypesUidPATCH(uid, documentTypeCreate);
            //Assert.IsInstanceOf(typeof(DocumentTypeCreate), response, "response is DocumentTypeCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidPUT
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentTypeCreate documentTypeCreate = null;
            //var response = instance.DocumentDocumentTypesUidPUT(uid, documentTypeCreate);
            //Assert.IsInstanceOf(typeof(DocumentTypeCreate), response, "response is DocumentTypeCreate");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUidPreDeletePOST
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUidPreDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //DocumentTypeDetail documentTypeDetail = null;
            //var response = instance.DocumentDocumentTypesUidPreDeletePOST(uid, documentTypeDetail);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentTypesUserProjectTypesGET
        /// </summary>
        [Test]
        public void DocumentDocumentTypesUserProjectTypesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentTypesUserProjectTypesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentTypeDetail), response, "response is DocumentTypeDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentsDownloadZipGET
        /// </summary>
        [Test]
        public void DocumentDocumentsDownloadZipGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentIds = null;
            //string excludeDocumentIds = null;
            //var response = instance.DocumentDocumentsDownloadZipGET(documentIds, excludeDocumentIds);
            //Assert.IsInstanceOf(typeof(DocumentDownloadZipResponse), response, "response is DocumentDownloadZipResponse");
        }
        
        /// <summary>
        /// Test DocumentDocumentsForUserGET
        /// </summary>
        [Test]
        public void DocumentDocumentsForUserGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentDocumentsForUserGET();
            //Assert.IsInstanceOf(typeof(DocumentsForUserResponse), response, "response is DocumentsForUserResponse");
        }
        
        /// <summary>
        /// Test DocumentDocumentsGET
        /// </summary>
        [Test]
        public void DocumentDocumentsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //int? clusterId = null;
            //string q = null;
            //var response = instance.DocumentDocumentsGET(jqFilters, clusterId, q);
            //Assert.IsInstanceOf(typeof(List<DocumentsForUser>), response, "response is List<DocumentsForUser>");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdDELETE
        /// </summary>
        [Test]
        public void DocumentDocumentsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DocumentDocumentsIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdDataGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdDataGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentsIdDataGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdDefinitionsGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdDefinitionsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentDocumentsIdDefinitionsGET(id);
            //Assert.IsInstanceOf(typeof(List<DocumentDefinitions>), response, "response is List<DocumentDefinitions>");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdExtractionGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdExtractionGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentDocumentsIdExtractionGET(id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdFieldsGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentDocumentsIdFieldsGET(id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdFieldsPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentsIdFieldsPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentDocumentsIdFieldsPATCH(id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdFieldsPOST
        /// </summary>
        [Test]
        public void DocumentDocumentsIdFieldsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentDocumentsIdFieldsPOST(id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdFieldsPUT
        /// </summary>
        [Test]
        public void DocumentDocumentsIdFieldsPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentDocumentsIdFieldsPUT(id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdFullTextGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdFullTextGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DocumentDocumentsIdFullTextGET(id);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentDocumentsIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentsForUser), response, "response is DocumentsForUser");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdPATCH
        /// </summary>
        [Test]
        public void DocumentDocumentsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentDocumentsIdPATCH(id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdPUT
        /// </summary>
        [Test]
        public void DocumentDocumentsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DocumentsForUser documentsForUser = null;
            //var response = instance.DocumentDocumentsIdPUT(id, documentsForUser);
            //Assert.IsInstanceOf(typeof(DocumentsForUser), response, "response is DocumentsForUser");
        }
        
        /// <summary>
        /// Test DocumentDocumentsIdShowGET
        /// </summary>
        [Test]
        public void DocumentDocumentsIdShowGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? alt = null;
            //var response = instance.DocumentDocumentsIdShowGET(id, alt);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test DocumentDocumentsMarkDeletePOST
        /// </summary>
        [Test]
        public void DocumentDocumentsMarkDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
            //var response = instance.DocumentDocumentsMarkDeletePOST(markUnmarkForDeleteDocumentsRequest);
            //Assert.IsInstanceOf(typeof(MarkUnmarkForDeleteDocumentsResponse), response, "response is MarkUnmarkForDeleteDocumentsResponse");
        }
        
        /// <summary>
        /// Test DocumentDocumentsPOST
        /// </summary>
        [Test]
        public void DocumentDocumentsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentsForUser documentsForUser = null;
            //var response = instance.DocumentDocumentsPOST(documentsForUser);
            //Assert.IsInstanceOf(typeof(DocumentsForUser), response, "response is DocumentsForUser");
        }
        
        /// <summary>
        /// Test DocumentDocumentsUnmarkDeletePOST
        /// </summary>
        [Test]
        public void DocumentDocumentsUnmarkDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
            //var response = instance.DocumentDocumentsUnmarkDeletePOST(markUnmarkForDeleteDocumentsRequest);
            //Assert.IsInstanceOf(typeof(MarkUnmarkForDeleteDocumentsResponse), response, "response is MarkUnmarkForDeleteDocumentsResponse");
        }
        
        /// <summary>
        /// Test DocumentFieldAnnotationStatusesGET
        /// </summary>
        [Test]
        public void DocumentFieldAnnotationStatusesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentFieldAnnotationStatusesGET(jqFilters);
            //Assert.IsInstanceOf(typeof(List<FieldAnnotationStatus>), response, "response is List<FieldAnnotationStatus>");
        }
        
        /// <summary>
        /// Test DocumentFieldAnnotationStatusesIdDELETE
        /// </summary>
        [Test]
        public void DocumentFieldAnnotationStatusesIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DocumentFieldAnnotationStatusesIdDELETE(id);
            
        }
        
        /// <summary>
        /// Test DocumentFieldAnnotationStatusesIdGET
        /// </summary>
        [Test]
        public void DocumentFieldAnnotationStatusesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentFieldAnnotationStatusesIdGET(id, jqFilters);
            //Assert.IsInstanceOf(typeof(FieldAnnotationStatus), response, "response is FieldAnnotationStatus");
        }
        
        /// <summary>
        /// Test DocumentFieldAnnotationStatusesIdPATCH
        /// </summary>
        [Test]
        public void DocumentFieldAnnotationStatusesIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //FieldAnnotationStatus fieldAnnotationStatus = null;
            //var response = instance.DocumentFieldAnnotationStatusesIdPATCH(id, fieldAnnotationStatus);
            //Assert.IsInstanceOf(typeof(FieldAnnotationStatus), response, "response is FieldAnnotationStatus");
        }
        
        /// <summary>
        /// Test DocumentFieldAnnotationStatusesIdPUT
        /// </summary>
        [Test]
        public void DocumentFieldAnnotationStatusesIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //FieldAnnotationStatus fieldAnnotationStatus = null;
            //var response = instance.DocumentFieldAnnotationStatusesIdPUT(id, fieldAnnotationStatus);
            //Assert.IsInstanceOf(typeof(FieldAnnotationStatus), response, "response is FieldAnnotationStatus");
        }
        
        /// <summary>
        /// Test DocumentFieldAnnotationStatusesPOST
        /// </summary>
        [Test]
        public void DocumentFieldAnnotationStatusesPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FieldAnnotationStatus fieldAnnotationStatus = null;
            //var response = instance.DocumentFieldAnnotationStatusesPOST(fieldAnnotationStatus);
            //Assert.IsInstanceOf(typeof(FieldAnnotationStatus), response, "response is FieldAnnotationStatus");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentFieldAnnotationsForUserGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentFieldAnnotationsForUserGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentFieldAnnotationsForUserGET(projectPk, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldAnnotation), response, "response is DocumentFieldAnnotation");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentFieldAnnotationsGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentFieldAnnotationsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentFieldAnnotationsGET(projectPk, jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldAnnotation>), response, "response is List<DocumentFieldAnnotation>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentFieldAnnotationsUidGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentFieldAnnotationsUidGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string uid = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentFieldAnnotationsUidGET(projectPk, uid, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldAnnotation), response, "response is DocumentFieldAnnotation");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentFieldValuesGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentFieldValuesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentFieldValuesGET(projectPk, jqFilters);
            //Assert.IsInstanceOf(typeof(List<DocumentFieldValue>), response, "response is List<DocumentFieldValue>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentFieldValuesIdGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentFieldValuesIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentFieldValuesIdGET(projectPk, id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentFieldValue), response, "response is DocumentFieldValue");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentPk = null;
            //var response = instance.DocumentProjectProjectPkDocumentsDocumentPkAnnotationsGET(projectPk, documentPk);
            //Assert.IsInstanceOf(typeof(List<AnnotationInDocument>), response, "response is List<AnnotationInDocument>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentPk = null;
            //string id = null;
            //instance.DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE(projectPk, documentPk, id);
            
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentPk = null;
            //string id = null;
            //var response = instance.DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET(projectPk, documentPk, id);
            //Assert.IsInstanceOf(typeof(AnnotationInDocument), response, "response is AnnotationInDocument");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentPk = null;
            //string id = null;
            //AnnotationInDocument annotationInDocument = null;
            //var response = instance.DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH(projectPk, documentPk, id, annotationInDocument);
            //Assert.IsInstanceOf(typeof(AnnotationInDocument), response, "response is AnnotationInDocument");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentPk = null;
            //string id = null;
            //AnnotationInDocument annotationInDocument = null;
            //var response = instance.DocumentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT(projectPk, documentPk, id, annotationInDocument);
            //Assert.IsInstanceOf(typeof(AnnotationInDocument), response, "response is AnnotationInDocument");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOST
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentPk = null;
            //AnnotationInDocument annotationInDocument = null;
            //var response = instance.DocumentProjectProjectPkDocumentsDocumentPkAnnotationsPOST(projectPk, documentPk, annotationInDocument);
            //Assert.IsInstanceOf(typeof(AnnotationInDocument), response, "response is AnnotationInDocument");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsDownloadZipGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsDownloadZipGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string documentIds = null;
            //string excludeDocumentIds = null;
            //var response = instance.DocumentProjectProjectPkDocumentsDownloadZipGET(projectPk, documentIds, excludeDocumentIds);
            //Assert.IsInstanceOf(typeof(DocumentDownloadZipResponse), response, "response is DocumentDownloadZipResponse");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsForUserGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsForUserGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //var response = instance.DocumentProjectProjectPkDocumentsForUserGET(projectPk);
            //Assert.IsInstanceOf(typeof(DocumentsForUserResponse), response, "response is DocumentsForUserResponse");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //Dictionary<string, string> jqFilters = null;
            //int? clusterId = null;
            //string q = null;
            //var response = instance.DocumentProjectProjectPkDocumentsGET(projectPk, jqFilters, clusterId, q);
            //Assert.IsInstanceOf(typeof(List<DocumentsForUser>), response, "response is List<DocumentsForUser>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdDELETE
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //instance.DocumentProjectProjectPkDocumentsIdDELETE(projectPk, id);
            
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdDataGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdDataGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdDataGET(projectPk, id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdDefinitionsGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdDefinitionsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdDefinitionsGET(projectPk, id);
            //Assert.IsInstanceOf(typeof(List<DocumentDefinitions>), response, "response is List<DocumentDefinitions>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdExtractionGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdExtractionGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdExtractionGET(projectPk, id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdFieldsGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdFieldsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdFieldsGET(projectPk, id);
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdFieldsPATCH
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdFieldsPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdFieldsPATCH(projectPk, id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdFieldsPOST
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdFieldsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdFieldsPOST(projectPk, id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdFieldsPUT
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdFieldsPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdFieldsPUT(projectPk, id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdFullTextGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdFullTextGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdFullTextGET(projectPk, id);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //Dictionary<string, string> jqFilters = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdGET(projectPk, id, jqFilters);
            //Assert.IsInstanceOf(typeof(DocumentsForUser), response, "response is DocumentsForUser");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdPATCH
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdPATCHTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //DocumentDetail documentDetail = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdPATCH(projectPk, id, documentDetail);
            //Assert.IsInstanceOf(typeof(DocumentDetail), response, "response is DocumentDetail");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdPUT
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //DocumentsForUser documentsForUser = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdPUT(projectPk, id, documentsForUser);
            //Assert.IsInstanceOf(typeof(DocumentsForUser), response, "response is DocumentsForUser");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsIdShowGET
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsIdShowGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //string id = null;
            //bool? alt = null;
            //var response = instance.DocumentProjectProjectPkDocumentsIdShowGET(projectPk, id, alt);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsMarkDeletePOST
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsMarkDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
            //var response = instance.DocumentProjectProjectPkDocumentsMarkDeletePOST(projectPk, markUnmarkForDeleteDocumentsRequest);
            //Assert.IsInstanceOf(typeof(MarkUnmarkForDeleteDocumentsResponse), response, "response is MarkUnmarkForDeleteDocumentsResponse");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsPOST
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //DocumentsForUser documentsForUser = null;
            //var response = instance.DocumentProjectProjectPkDocumentsPOST(projectPk, documentsForUser);
            //Assert.IsInstanceOf(typeof(DocumentsForUser), response, "response is DocumentsForUser");
        }
        
        /// <summary>
        /// Test DocumentProjectProjectPkDocumentsUnmarkDeletePOST
        /// </summary>
        [Test]
        public void DocumentProjectProjectPkDocumentsUnmarkDeletePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectPk = null;
            //MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
            //var response = instance.DocumentProjectProjectPkDocumentsUnmarkDeletePOST(projectPk, markUnmarkForDeleteDocumentsRequest);
            //Assert.IsInstanceOf(typeof(MarkUnmarkForDeleteDocumentsResponse), response, "response is MarkUnmarkForDeleteDocumentsResponse");
        }
        
        /// <summary>
        /// Test DocumentStatsGET
        /// </summary>
        [Test]
        public void DocumentStatsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DocumentStatsGET();
            //Assert.IsInstanceOf(typeof(Dictionary<string, Object>), response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test DocumentTextunitsGET
        /// </summary>
        [Test]
        public void DocumentTextunitsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //var response = instance.DocumentTextunitsGET(q);
            //Assert.IsInstanceOf(typeof(List<TextUnitDjangoQL>), response, "response is List<TextUnitDjangoQL>");
        }
        
        /// <summary>
        /// Test DocumentTextunitsIdGET
        /// </summary>
        [Test]
        public void DocumentTextunitsIdGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string q = null;
            //var response = instance.DocumentTextunitsIdGET(id, q);
            //Assert.IsInstanceOf(typeof(TextUnitDjangoQL), response, "response is TextUnitDjangoQL");
        }
        
    }

}
