/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserProfile;
import org.openapitools.client.model.UserStats;
import org.openapitools.client.model.VerifyAuthTokenRequest;
import org.openapitools.client.model.VerifyAuthTokenResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.usersUsersFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * User List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<User> response = api.usersUsersGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersIdFormFieldsGETTest() throws ApiException {
        String id = null;
        Map<String, Object> response = api.usersUsersIdFormFieldsGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        User response = api.usersUsersIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersIdPATCHTest() throws ApiException {
        String id = null;
        UserProfile userProfile = null;
        UserProfile response = api.usersUsersIdPATCH(id, userProfile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersIdPUTTest() throws ApiException {
        String id = null;
        UserProfile userProfile = null;
        UserProfile response = api.usersUsersIdPUT(id, userProfile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersPOSTTest() throws ApiException {
        UserProfile userProfile = null;
        UserProfile response = api.usersUsersPOST(userProfile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * User stats: projects, document types, tasks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersUserStatsGETTest() throws ApiException {
        List<UserStats> response = api.usersUsersUserStatsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get user data for provided auth_token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersVerifyTokenPOSTTest() throws ApiException {
        VerifyAuthTokenRequest verifyAuthTokenRequest = null;
        VerifyAuthTokenResponse response = api.usersVerifyTokenPOST(verifyAuthTokenRequest);

        // TODO: test validations
    }
    
}
