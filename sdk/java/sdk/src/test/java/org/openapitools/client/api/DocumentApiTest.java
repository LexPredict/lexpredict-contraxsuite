/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.Annotation;
import org.openapitools.client.model.AnnotationBatchRequest;
import org.openapitools.client.model.AnnotationBatchResponse;
import org.openapitools.client.model.AnnotationInDocument;
import org.openapitools.client.model.AnnotationSuggestRequest;
import org.openapitools.client.model.AnnotationUpdateResponse;
import org.openapitools.client.model.CheckDocumentFieldFormulaRequest;
import org.openapitools.client.model.CheckNewDocumentFieldFormulaRequest;
import org.openapitools.client.model.CloneDocumentFieldRequest;
import org.openapitools.client.model.CloneDocumentTypeRequest;
import org.openapitools.client.model.DocumentDefinitions;
import org.openapitools.client.model.DocumentDetail;
import org.openapitools.client.model.DocumentDownloadZipResponse;
import org.openapitools.client.model.DocumentFieldAnnotation;
import org.openapitools.client.model.DocumentFieldCategoryCreate;
import org.openapitools.client.model.DocumentFieldCategoryList;
import org.openapitools.client.model.DocumentFieldCreate;
import org.openapitools.client.model.DocumentFieldDetail;
import org.openapitools.client.model.DocumentFieldDetectorCreate;
import org.openapitools.client.model.DocumentFieldDetectorDetail;
import org.openapitools.client.model.DocumentFieldList;
import org.openapitools.client.model.DocumentFieldStatsResponse;
import org.openapitools.client.model.DocumentFieldValue;
import org.openapitools.client.model.DocumentNoteCreate;
import org.openapitools.client.model.DocumentNoteDetail;
import org.openapitools.client.model.DocumentNoteUpdate;
import org.openapitools.client.model.DocumentPDFRepr;
import org.openapitools.client.model.DocumentTypeCreate;
import org.openapitools.client.model.DocumentTypeDetail;
import org.openapitools.client.model.DocumentTypeImportRequest;
import org.openapitools.client.model.DocumentTypeImportResponse;
import org.openapitools.client.model.DocumentTypeStats;
import org.openapitools.client.model.DocumentsForUser;
import org.openapitools.client.model.DocumentsForUserResponse;
import org.openapitools.client.model.FieldAnnotationStatus;
import java.io.File;
import org.openapitools.client.model.InlineResponse404;
import org.openapitools.client.model.MarkUnmarkForDeleteDocumentsRequest;
import org.openapitools.client.model.MarkUnmarkForDeleteDocumentsResponse;
import org.openapitools.client.model.ProjectDocumentSimilarity;
import org.openapitools.client.model.TextUnitDjangoQL;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentApi
 */
@Ignore
public class DocumentApiTest {

    private final DocumentApi api = new DocumentApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsAnnotatePUTTest() throws ApiException {
        Annotation annotation = null;
        AnnotationUpdateResponse response = api.documentAnnotationsAnnotatePUT(annotation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create batch of annotations      PUT Params:          - operation_uid: uid          - action: str [\&quot;save\&quot;, \&quot;delete\&quot;]          - id: int - PK of DocumentFieldValue          - data: {\&quot;document\&quot;: id, \&quot;field\&quot;: uid, \&quot;location_start\&quot;: int, \&quot;location_end\&quot;: int, \&quot;value\&quot;: val}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsBatchPUTTest() throws ApiException {
        List<AnnotationBatchRequest> annotationBatchRequest = null;
        List<AnnotationBatchResponse> response = api.documentAnnotationsBatchPUT(annotationBatchRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Annotation (Document Field Value) List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsGETTest() throws ApiException {
        List<Annotation> response = api.documentAnnotationsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Annotation (Document Field Value)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsIdDELETETest() throws ApiException {
        String id = null;
        api.documentAnnotationsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Annotation (Document Field Value)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsIdGETTest() throws ApiException {
        String id = null;
        Annotation response = api.documentAnnotationsIdGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Annotation (Document Field Value)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsIdPUTTest() throws ApiException {
        String id = null;
        Annotation annotation = null;
        Annotation response = api.documentAnnotationsIdPUT(id, annotation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Annotation (Document Field Value)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsPOSTTest() throws ApiException {
        Annotation annotation = null;
        Annotation response = api.documentAnnotationsPOST(annotation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Suggest field value before creating an annotation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsSuggestPOSTTest() throws ApiException {
        AnnotationSuggestRequest annotationSuggestRequest = null;
        Annotation response = api.documentAnnotationsSuggestPOST(annotationSuggestRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldAnnotationsForUserGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        DocumentFieldAnnotation response = api.documentDocumentFieldAnnotationsForUserGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Field Annotation List + Field Annotation False Match List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldAnnotationsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentFieldAnnotation> response = api.documentDocumentFieldAnnotationsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Field Annotation Details (not Field Annotation False Match)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldAnnotationsUidGETTest() throws ApiException {
        String uid = null;
        Map<String, String> jqFilters = null;
        DocumentFieldAnnotation response = api.documentDocumentFieldAnnotationsUidGET(uid, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.documentDocumentFieldCategoriesFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * DocumentFieldCategory List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentFieldCategoryList> response = api.documentDocumentFieldCategoriesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete DocumentFieldCategory
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesIdDELETETest() throws ApiException {
        String id = null;
        api.documentDocumentFieldCategoriesIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesIdFormFieldsGETTest() throws ApiException {
        String id = null;
        Map<String, Object> response = api.documentDocumentFieldCategoriesIdFormFieldsGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve DocumentFieldCategory
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentFieldCategoryList response = api.documentDocumentFieldCategoriesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update DocumentFieldCategory
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesIdPATCHTest() throws ApiException {
        String id = null;
        DocumentFieldCategoryCreate documentFieldCategoryCreate = null;
        DocumentFieldCategoryCreate response = api.documentDocumentFieldCategoriesIdPATCH(id, documentFieldCategoryCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Document Type     Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesIdPUTTest() throws ApiException {
        String id = null;
        DocumentFieldCategoryCreate documentFieldCategoryCreate = null;
        DocumentFieldCategoryCreate response = api.documentDocumentFieldCategoriesIdPUT(id, documentFieldCategoryCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create DocumentFieldCategory      Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesPOSTTest() throws ApiException {
        DocumentFieldCategoryCreate documentFieldCategoryCreate = null;
        DocumentFieldCategoryCreate response = api.documentDocumentFieldCategoriesPOST(documentFieldCategoryCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.documentDocumentFieldDetectorsFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Field List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentFieldDetectorDetail> response = api.documentDocumentFieldDetectorsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsPOSTTest() throws ApiException {
        DocumentFieldDetectorCreate documentFieldDetectorCreate = null;
        DocumentFieldDetectorCreate response = api.documentDocumentFieldDetectorsPOST(documentFieldDetectorCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsUidDELETETest() throws ApiException {
        String uid = null;
        api.documentDocumentFieldDetectorsUidDELETE(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsUidFormFieldsGETTest() throws ApiException {
        String uid = null;
        Map<String, Object> response = api.documentDocumentFieldDetectorsUidFormFieldsGET(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsUidGETTest() throws ApiException {
        String uid = null;
        Map<String, String> jqFilters = null;
        DocumentFieldDetectorDetail response = api.documentDocumentFieldDetectorsUidGET(uid, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsUidPATCHTest() throws ApiException {
        String uid = null;
        DocumentFieldDetectorCreate documentFieldDetectorCreate = null;
        DocumentFieldDetectorCreate response = api.documentDocumentFieldDetectorsUidPATCH(uid, documentFieldDetectorCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsUidPUTTest() throws ApiException {
        String uid = null;
        DocumentFieldDetectorCreate documentFieldDetectorCreate = null;
        DocumentFieldDetectorCreate response = api.documentDocumentFieldDetectorsUidPUT(uid, documentFieldDetectorCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Field Value List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldValuesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentFieldValue> response = api.documentDocumentFieldValuesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Field Value Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldValuesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentFieldValue response = api.documentDocumentFieldValuesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Check formula for new NOT SAVED Document Field Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled. Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsCheckFieldFormulaPOSTTest() throws ApiException {
        CheckNewDocumentFieldFormulaRequest checkNewDocumentFieldFormulaRequest = null;
        DocumentFieldDetail response = api.documentDocumentFieldsCheckFieldFormulaPOST(checkNewDocumentFieldFormulaRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.documentDocumentFieldsFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Field List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentFieldList> response = api.documentDocumentFieldsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Document Field     Params:         - document_type: uid of Document Type         - code: str - Unique Short name for field, max 50 symbols, should contain only latin letters, digits, and underscores         - long_code: str - Unique Calculated field, max 150 symbols         - title: str - Verbose name for field, max 100 symbols         - description: str - optional         - type: str - max 30 symbols (from pre-defined choices)         - text_unit_type: str - (from pre-defined choices) default &#x3D; sentences         - value_detection_strategy: str - max 50 chars (from pre-defined choices)         - unsure_choice_value: str - max 256 chars, default&#x3D;null         - unsure_thresholds_by_value: json         - classifier_init_script: str         - formula: str         - convert_decimals_to_floats_in_formula_args: bool         - depends_on_fields: array of uids, optional         - confidence: str - max 100 chars (from pre-defined choices)         - requires_text_annotations: bool, default&#x3D;True         - read_only: bool, default&#x3D;False         - category: int - id of DocumentFieldCategory instance         - default_value: json         - choices: str - \\n-separated list of choices         - allow_values_not_specified_in_choices: bool - default&#x3D;False         - metadata: json, optional         - training_finished: bool, default&#x3D;False         - dirty: bool, default&#x3D;False         - order: integer - default&#x3D;0         - trained_after_documents_number: integer, default&#x3D;null         - hidden_always: bool - default&#x3D;False         - hide_until_python: str, optional         - hide_until_js: str, optional         - display_yes_no: bool - default&#x3D;False
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsPOSTTest() throws ApiException {
        DocumentFieldCreate documentFieldCreate = null;
        DocumentFieldCreate response = api.documentDocumentFieldsPOST(documentFieldCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsStatsGETTest() throws ApiException {
        String documentTypeUid = null;
        List<DocumentFieldStatsResponse> response = api.documentDocumentFieldsStatsGET(documentTypeUid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Check formula for EXISTING Document Field Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidCheckFormulaPOSTTest() throws ApiException {
        String uid = null;
        CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest = null;
        Map<String, Object> response = api.documentDocumentFieldsUidCheckFormulaPOST(uid, checkDocumentFieldFormulaRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clone existing DocumentField and its depends_on_fields and detectors
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidClonePOSTTest() throws ApiException {
        String uid = null;
        CloneDocumentFieldRequest cloneDocumentFieldRequest = null;
        DocumentFieldDetail response = api.documentDocumentFieldsUidClonePOST(uid, cloneDocumentFieldRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidDELETETest() throws ApiException {
        String uid = null;
        api.documentDocumentFieldsUidDELETE(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidFormFieldsGETTest() throws ApiException {
        String uid = null;
        Map<String, Object> response = api.documentDocumentFieldsUidFormFieldsGET(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidGETTest() throws ApiException {
        String uid = null;
        Map<String, String> jqFilters = null;
        DocumentFieldDetail response = api.documentDocumentFieldsUidGET(uid, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidPATCHTest() throws ApiException {
        String uid = null;
        DocumentFieldCreate documentFieldCreate = null;
        DocumentFieldCreate response = api.documentDocumentFieldsUidPATCH(uid, documentFieldCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidPUTTest() throws ApiException {
        String uid = null;
        DocumentFieldCreate documentFieldCreate = null;
        DocumentFieldCreate response = api.documentDocumentFieldsUidPUT(uid, documentFieldCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get info about related objects for ready-to-delete document type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidPreDeletePOSTTest() throws ApiException {
        String uid = null;
        DocumentFieldDetail documentFieldDetail = null;
        Map<String, Object> response = api.documentDocumentFieldsUidPreDeletePOST(uid, documentFieldDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Note List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentNotesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        String projectId = null;
        String documentId = null;
        Boolean force = null;
        Boolean exportTo = null;
        List<DocumentNoteDetail> response = api.documentDocumentNotesGET(jqFilters, projectId, documentId, force, exportTo);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Document Note
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentNotesIdDELETETest() throws ApiException {
        String id = null;
        api.documentDocumentNotesIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Document Note
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentNotesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentNoteDetail response = api.documentDocumentNotesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Document Note
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentNotesIdPATCHTest() throws ApiException {
        String id = null;
        DocumentNoteDetail documentNoteDetail = null;
        DocumentNoteDetail response = api.documentDocumentNotesIdPATCH(id, documentNoteDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Fill in \&quot;self.action_message\&quot; attribute to use later to save Action.message (see dispatch method)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentNotesIdPUTTest() throws ApiException {
        String id = null;
        DocumentNoteUpdate documentNoteUpdate = null;
        DocumentNoteUpdate response = api.documentDocumentNotesIdPUT(id, documentNoteUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Document Note
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentNotesPOSTTest() throws ApiException {
        DocumentNoteCreate documentNoteCreate = null;
        DocumentNoteCreate response = api.documentDocumentNotesPOST(documentNoteCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.documentDocumentTypesFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Type List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentTypeDetail> response = api.documentDocumentTypesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesImportDocTypePUTTest() throws ApiException {
        DocumentTypeImportRequest documentTypeImportRequest = null;
        DocumentTypeImportResponse response = api.documentDocumentTypesImportDocTypePUT(documentTypeImportRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Document Type      Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesPOSTTest() throws ApiException {
        DocumentTypeCreate documentTypeCreate = null;
        DocumentTypeCreate response = api.documentDocumentTypesPOST(documentTypeCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Document Type model versions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesSchemeMigrationsGETTest() throws ApiException {
        Map<String, Object> response = api.documentDocumentTypesSchemeMigrationsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesStatsGETTest() throws ApiException {
        List<DocumentTypeStats> response = api.documentDocumentTypesStatsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clone existing Document Type and its fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidClonePOSTTest() throws ApiException {
        String uid = null;
        CloneDocumentTypeRequest cloneDocumentTypeRequest = null;
        DocumentTypeDetail response = api.documentDocumentTypesUidClonePOST(uid, cloneDocumentTypeRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Document Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidDELETETest() throws ApiException {
        String uid = null;
        api.documentDocumentTypesUidDELETE(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidExportDocTypeGETTest() throws ApiException {
        String uid = null;
        String targetVersion = null;
        File response = api.documentDocumentTypesUidExportDocTypeGET(uid, targetVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidFormFieldsGETTest() throws ApiException {
        String uid = null;
        Map<String, Object> response = api.documentDocumentTypesUidFormFieldsGET(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Document Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidGETTest() throws ApiException {
        String uid = null;
        Map<String, String> jqFilters = null;
        DocumentTypeDetail response = api.documentDocumentTypesUidGET(uid, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Document Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidPATCHTest() throws ApiException {
        String uid = null;
        DocumentTypeCreate documentTypeCreate = null;
        DocumentTypeCreate response = api.documentDocumentTypesUidPATCH(uid, documentTypeCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Document Type     Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidPUTTest() throws ApiException {
        String uid = null;
        DocumentTypeCreate documentTypeCreate = null;
        DocumentTypeCreate response = api.documentDocumentTypesUidPUT(uid, documentTypeCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get info about related objects for ready-to-delete document type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidPreDeletePOSTTest() throws ApiException {
        String uid = null;
        DocumentTypeDetail documentTypeDetail = null;
        Map<String, Object> response = api.documentDocumentTypesUidPreDeletePOST(uid, documentTypeDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUserProjectTypesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        DocumentTypeDetail response = api.documentDocumentTypesUserProjectTypesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsDownloadZipGETTest() throws ApiException {
        String documentIds = null;
        String excludeDocumentIds = null;
        DocumentDownloadZipResponse response = api.documentDocumentsDownloadZipGET(documentIds, excludeDocumentIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsForUserGETTest() throws ApiException {
        DocumentsForUserResponse response = api.documentDocumentsForUserGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document List with Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        Integer clusterId = null;
        String q = null;
        List<DocumentsForUser> response = api.documentDocumentsGET(jqFilters, clusterId, q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdActionsGETTest() throws ApiException {
        String id = null;
        Integer projectId = null;
        Integer documentId = null;
        List<String> viewActions = null;
        Map<String, String> jqFilters = null;
        List<Action> response = api.documentDocumentsIdActionsGET(id, projectId, documentId, viewActions, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdDELETETest() throws ApiException {
        String id = null;
        api.documentDocumentsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Restricted set of fields in response (except full_text), see get_serializer_class()
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdDataGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentDetail response = api.documentDocumentsIdDataGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdDefinitionsGETTest() throws ApiException {
        String id = null;
        List<DocumentDefinitions> response = api.documentDocumentsIdDefinitionsGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdExtractionGETTest() throws ApiException {
        String id = null;
        Map<String, Object> response = api.documentDocumentsIdExtractionGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdFieldsGETTest() throws ApiException {
        String id = null;
        Map<String, Object> response = api.documentDocumentsIdFieldsGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdFieldsPATCHTest() throws ApiException {
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentDocumentsIdFieldsPATCH(id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdFieldsPOSTTest() throws ApiException {
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentDocumentsIdFieldsPOST(id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdFieldsPUTTest() throws ApiException {
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentDocumentsIdFieldsPUT(id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdFullTextGETTest() throws ApiException {
        String id = null;
        String response = api.documentDocumentsIdFullTextGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Detail with Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentsForUser response = api.documentDocumentsIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdHasPdfInfoGETTest() throws ApiException {
        String id = null;
        Boolean response = api.documentDocumentsIdHasPdfInfoGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdPATCHTest() throws ApiException {
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentDocumentsIdPATCH(id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set new assignee OR document status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdPUTTest() throws ApiException {
        String id = null;
        DocumentsForUser documentsForUser = null;
        DocumentsForUser response = api.documentDocumentsIdPUT(id, documentsForUser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdPdfReprGETTest() throws ApiException {
        String id = null;
        DocumentPDFRepr response = api.documentDocumentsIdPdfReprGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdShowGETTest() throws ApiException {
        String id = null;
        String alt = null;
        File response = api.documentDocumentsIdShowGET(id, alt);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Re-use ProjectDocumentSimilarityListAPIView to get similarities  as resource for this API is not Document model, but DocumentSimilarity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdSimilarGETTest() throws ApiException {
        String id = null;
        Integer textMaxLength = null;
        Map<String, String> jqFilters = null;
        ProjectDocumentSimilarity response = api.documentDocumentsIdSimilarGET(id, textMaxLength, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsMarkDeletePOSTTest() throws ApiException {
        MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
        MarkUnmarkForDeleteDocumentsResponse response = api.documentDocumentsMarkDeletePOST(markUnmarkForDeleteDocumentsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsPOSTTest() throws ApiException {
        DocumentsForUser documentsForUser = null;
        DocumentsForUser response = api.documentDocumentsPOST(documentsForUser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsUnmarkDeletePOSTTest() throws ApiException {
        MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
        MarkUnmarkForDeleteDocumentsResponse response = api.documentDocumentsUnmarkDeletePOST(markUnmarkForDeleteDocumentsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * FieldAnnotationStatus List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentFieldAnnotationStatusesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<FieldAnnotationStatus> response = api.documentFieldAnnotationStatusesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete FieldAnnotationStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentFieldAnnotationStatusesIdDELETETest() throws ApiException {
        String id = null;
        api.documentFieldAnnotationStatusesIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve FieldAnnotationStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentFieldAnnotationStatusesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        FieldAnnotationStatus response = api.documentFieldAnnotationStatusesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentFieldAnnotationStatusesIdPATCHTest() throws ApiException {
        String id = null;
        FieldAnnotationStatus fieldAnnotationStatus = null;
        FieldAnnotationStatus response = api.documentFieldAnnotationStatusesIdPATCH(id, fieldAnnotationStatus);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update FieldAnnotationStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentFieldAnnotationStatusesIdPUTTest() throws ApiException {
        String id = null;
        FieldAnnotationStatus fieldAnnotationStatus = null;
        FieldAnnotationStatus response = api.documentFieldAnnotationStatusesIdPUT(id, fieldAnnotationStatus);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create FieldAnnotationStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentFieldAnnotationStatusesPOSTTest() throws ApiException {
        FieldAnnotationStatus fieldAnnotationStatus = null;
        FieldAnnotationStatus response = api.documentFieldAnnotationStatusesPOST(fieldAnnotationStatus);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentFieldAnnotationsForUserGETTest() throws ApiException {
        String projectPk = null;
        Map<String, String> jqFilters = null;
        DocumentFieldAnnotation response = api.documentProjectProjectPkDocumentFieldAnnotationsForUserGET(projectPk, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Field Annotation List + Field Annotation False Match List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentFieldAnnotationsGETTest() throws ApiException {
        String projectPk = null;
        Map<String, String> jqFilters = null;
        List<DocumentFieldAnnotation> response = api.documentProjectProjectPkDocumentFieldAnnotationsGET(projectPk, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Field Annotation Details (not Field Annotation False Match)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentFieldAnnotationsUidGETTest() throws ApiException {
        String projectPk = null;
        String uid = null;
        Map<String, String> jqFilters = null;
        DocumentFieldAnnotation response = api.documentProjectProjectPkDocumentFieldAnnotationsUidGET(projectPk, uid, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Field Value List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentFieldValuesGETTest() throws ApiException {
        String projectPk = null;
        Map<String, String> jqFilters = null;
        List<DocumentFieldValue> response = api.documentProjectProjectPkDocumentFieldValuesGET(projectPk, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Field Value Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentFieldValuesIdGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentFieldValue response = api.documentProjectProjectPkDocumentFieldValuesIdGET(projectPk, id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDocumentPkAnnotationsGETTest() throws ApiException {
        String projectPk = null;
        String documentPk = null;
        List<AnnotationInDocument> response = api.documentProjectProjectPkDocumentsDocumentPkAnnotationsGET(projectPk, documentPk);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETETest() throws ApiException {
        String projectPk = null;
        String documentPk = null;
        String id = null;
        api.documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE(projectPk, documentPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETTest() throws ApiException {
        String projectPk = null;
        String documentPk = null;
        String id = null;
        AnnotationInDocument response = api.documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET(projectPk, documentPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHTest() throws ApiException {
        String projectPk = null;
        String documentPk = null;
        String id = null;
        AnnotationInDocument annotationInDocument = null;
        AnnotationInDocument response = api.documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH(projectPk, documentPk, id, annotationInDocument);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTTest() throws ApiException {
        String projectPk = null;
        String documentPk = null;
        String id = null;
        AnnotationInDocument annotationInDocument = null;
        AnnotationInDocument response = api.documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT(projectPk, documentPk, id, annotationInDocument);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTTest() throws ApiException {
        String projectPk = null;
        String documentPk = null;
        AnnotationInDocument annotationInDocument = null;
        AnnotationInDocument response = api.documentProjectProjectPkDocumentsDocumentPkAnnotationsPOST(projectPk, documentPk, annotationInDocument);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDownloadZipGETTest() throws ApiException {
        String projectPk = null;
        String documentIds = null;
        String excludeDocumentIds = null;
        DocumentDownloadZipResponse response = api.documentProjectProjectPkDocumentsDownloadZipGET(projectPk, documentIds, excludeDocumentIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsForUserGETTest() throws ApiException {
        String projectPk = null;
        DocumentsForUserResponse response = api.documentProjectProjectPkDocumentsForUserGET(projectPk);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document List with Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsGETTest() throws ApiException {
        String projectPk = null;
        Map<String, String> jqFilters = null;
        Integer clusterId = null;
        String q = null;
        List<DocumentsForUser> response = api.documentProjectProjectPkDocumentsGET(projectPk, jqFilters, clusterId, q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdActionsGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Integer projectId = null;
        Integer documentId = null;
        List<String> viewActions = null;
        Map<String, String> jqFilters = null;
        List<Action> response = api.documentProjectProjectPkDocumentsIdActionsGET(projectPk, id, projectId, documentId, viewActions, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdDELETETest() throws ApiException {
        String projectPk = null;
        String id = null;
        api.documentProjectProjectPkDocumentsIdDELETE(projectPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Restricted set of fields in response (except full_text), see get_serializer_class()
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdDataGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentDetail response = api.documentProjectProjectPkDocumentsIdDataGET(projectPk, id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdDefinitionsGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        List<DocumentDefinitions> response = api.documentProjectProjectPkDocumentsIdDefinitionsGET(projectPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdExtractionGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Map<String, Object> response = api.documentProjectProjectPkDocumentsIdExtractionGET(projectPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdFieldsGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Map<String, Object> response = api.documentProjectProjectPkDocumentsIdFieldsGET(projectPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdFieldsPATCHTest() throws ApiException {
        String projectPk = null;
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentProjectProjectPkDocumentsIdFieldsPATCH(projectPk, id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdFieldsPOSTTest() throws ApiException {
        String projectPk = null;
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentProjectProjectPkDocumentsIdFieldsPOST(projectPk, id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdFieldsPUTTest() throws ApiException {
        String projectPk = null;
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentProjectProjectPkDocumentsIdFieldsPUT(projectPk, id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdFullTextGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        String response = api.documentProjectProjectPkDocumentsIdFullTextGET(projectPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Detail with Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentsForUser response = api.documentProjectProjectPkDocumentsIdGET(projectPk, id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdHasPdfInfoGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Boolean response = api.documentProjectProjectPkDocumentsIdHasPdfInfoGET(projectPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdPATCHTest() throws ApiException {
        String projectPk = null;
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentProjectProjectPkDocumentsIdPATCH(projectPk, id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set new assignee OR document status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdPUTTest() throws ApiException {
        String projectPk = null;
        String id = null;
        DocumentsForUser documentsForUser = null;
        DocumentsForUser response = api.documentProjectProjectPkDocumentsIdPUT(projectPk, id, documentsForUser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdPdfReprGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        DocumentPDFRepr response = api.documentProjectProjectPkDocumentsIdPdfReprGET(projectPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdShowGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        String alt = null;
        File response = api.documentProjectProjectPkDocumentsIdShowGET(projectPk, id, alt);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Re-use ProjectDocumentSimilarityListAPIView to get similarities  as resource for this API is not Document model, but DocumentSimilarity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdSimilarGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Integer textMaxLength = null;
        Map<String, String> jqFilters = null;
        ProjectDocumentSimilarity response = api.documentProjectProjectPkDocumentsIdSimilarGET(projectPk, id, textMaxLength, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsMarkDeletePOSTTest() throws ApiException {
        String projectPk = null;
        MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
        MarkUnmarkForDeleteDocumentsResponse response = api.documentProjectProjectPkDocumentsMarkDeletePOST(projectPk, markUnmarkForDeleteDocumentsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsPOSTTest() throws ApiException {
        String projectPk = null;
        DocumentsForUser documentsForUser = null;
        DocumentsForUser response = api.documentProjectProjectPkDocumentsPOST(projectPk, documentsForUser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsUnmarkDeletePOSTTest() throws ApiException {
        String projectPk = null;
        MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
        MarkUnmarkForDeleteDocumentsResponse response = api.documentProjectProjectPkDocumentsUnmarkDeletePOST(projectPk, markUnmarkForDeleteDocumentsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentStatsGETTest() throws ApiException {
        Map<String, Object> response = api.documentStatsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * TextUnit List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentTextunitsGETTest() throws ApiException {
        String q = null;
        List<TextUnitDjangoQL> response = api.documentTextunitsGET(q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve TextUnit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentTextunitsIdGETTest() throws ApiException {
        String id = null;
        String q = null;
        TextUnitDjangoQL response = api.documentTextunitsIdGET(id, q);

        // TODO: test validations
    }
    
}
