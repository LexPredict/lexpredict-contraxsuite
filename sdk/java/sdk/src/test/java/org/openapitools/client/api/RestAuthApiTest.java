/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CustomPasswordChange;
import org.openapitools.client.model.CustomPasswordReset;
import org.openapitools.client.model.CustomPasswordResetConfirm;
import org.openapitools.client.model.Login;
import org.openapitools.client.model.LoginResponse;
import org.openapitools.client.model.Register;
import org.openapitools.client.model.RestAuthCommonResponse;
import org.openapitools.client.model.VerifyEmail;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RestAuthApi
 */
@Ignore
public class RestAuthApiTest {

    private final RestAuthApi api = new RestAuthApi();

    
    /**
     * 
     *
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object&#39;s key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthLoginPOSTTest() throws ApiException {
        Login login = null;
        LoginResponse response = api.restAuthLoginPOST(login);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthLogoutGETTest() throws ApiException {
        List<RestAuthCommonResponse> response = api.restAuthLogoutGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthLogoutPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        RestAuthCommonResponse response = api.restAuthLogoutPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthPasswordChangePOSTTest() throws ApiException {
        CustomPasswordChange customPasswordChange = null;
        RestAuthCommonResponse response = api.restAuthPasswordChangePOST(customPasswordChange);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Password reset e-mail link is confirmed, therefore this resets the user&#39;s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthPasswordResetConfirmPOSTTest() throws ApiException {
        CustomPasswordResetConfirm customPasswordResetConfirm = null;
        RestAuthCommonResponse response = api.restAuthPasswordResetConfirmPOST(customPasswordResetConfirm);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthPasswordResetPOSTTest() throws ApiException {
        CustomPasswordReset customPasswordReset = null;
        RestAuthCommonResponse response = api.restAuthPasswordResetPOST(customPasswordReset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthRegistrationPOSTTest() throws ApiException {
        Register register = null;
        Register response = api.restAuthRegistrationPOST(register);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthRegistrationVerifyEmailPOSTTest() throws ApiException {
        VerifyEmail verifyEmail = null;
        VerifyEmail response = api.restAuthRegistrationVerifyEmailPOST(verifyEmail);

        // TODO: test validations
    }
    
}
