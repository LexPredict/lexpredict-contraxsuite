/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.AmountUsage;
import org.openapitools.client.model.Annotation;
import org.openapitools.client.model.AnnotationBatchRequest;
import org.openapitools.client.model.AnnotationBatchResponse;
import org.openapitools.client.model.AnnotationInDocument;
import org.openapitools.client.model.AnnotationSuggestRequest;
import org.openapitools.client.model.AnnotationUpdateResponse;
import org.openapitools.client.model.AppVarDelete;
import org.openapitools.client.model.AssignProjectAnnotationsRequest;
import org.openapitools.client.model.AssignProjectDocumentRequest;
import org.openapitools.client.model.AssignProjectDocumentsRequest;
import org.openapitools.client.model.CheckDocumentFieldFormulaRequest;
import org.openapitools.client.model.CitationUsage;
import org.openapitools.client.model.CleanupProjectRequest;
import org.openapitools.client.model.CloneDocumentFieldRequest;
import org.openapitools.client.model.CloneDocumentTypeRequest;
import org.openapitools.client.model.ClusterProjectRequest;
import org.openapitools.client.model.ClusterProjectResponse;
import org.openapitools.client.model.CopyrightUsage;
import org.openapitools.client.model.CountSuccessResponse;
import org.openapitools.client.model.CourtUsage;
import org.openapitools.client.model.CurrencyUsage;
import org.openapitools.client.model.CustomPasswordChange;
import org.openapitools.client.model.CustomPasswordReset;
import org.openapitools.client.model.CustomPasswordResetConfirm;
import org.openapitools.client.model.DateDurationUsage;
import org.openapitools.client.model.DateUsage;
import org.openapitools.client.model.DateUsageCalendar;
import org.openapitools.client.model.DateUsageTimeline;
import org.openapitools.client.model.DefinitionUsage;
import org.openapitools.client.model.DetectProjectFieldValuesRequest;
import org.openapitools.client.model.DistanceUsage;
import org.openapitools.client.model.DocumentCluster;
import org.openapitools.client.model.DocumentClusterUpdate;
import org.openapitools.client.model.DocumentDefinitions;
import org.openapitools.client.model.DocumentDetail;
import org.openapitools.client.model.DocumentDownloadZipResponse;
import org.openapitools.client.model.DocumentFieldAnnotation;
import org.openapitools.client.model.DocumentFieldCategoryCreate;
import org.openapitools.client.model.DocumentFieldCategoryList;
import org.openapitools.client.model.DocumentFieldCreate;
import org.openapitools.client.model.DocumentFieldDetail;
import org.openapitools.client.model.DocumentFieldDetectorCreate;
import org.openapitools.client.model.DocumentFieldDetectorDetail;
import org.openapitools.client.model.DocumentFieldList;
import org.openapitools.client.model.DocumentFieldStatsResponse;
import org.openapitools.client.model.DocumentFieldValue;
import org.openapitools.client.model.DocumentNoteCreate;
import org.openapitools.client.model.DocumentNoteDetail;
import org.openapitools.client.model.DocumentNoteUpdate;
import org.openapitools.client.model.DocumentSimilarity;
import org.openapitools.client.model.DocumentTypeCreate;
import org.openapitools.client.model.DocumentTypeDetail;
import org.openapitools.client.model.DocumentTypeImportRequest;
import org.openapitools.client.model.DocumentTypeImportResponse;
import org.openapitools.client.model.DocumentTypeStats;
import org.openapitools.client.model.DocumentsForUser;
import org.openapitools.client.model.DocumentsForUserResponse;
import org.openapitools.client.model.DumpFixture;
import org.openapitools.client.model.FieldAnnotationStatus;
import java.io.File;
import org.openapitools.client.model.GeoAliasUsage;
import org.openapitools.client.model.GeoEntityList;
import org.openapitools.client.model.GeoEntityUpdate;
import org.openapitools.client.model.GeoEntityUsage;
import org.openapitools.client.model.InlineResponse400;
import org.openapitools.client.model.InlineResponse404;
import org.openapitools.client.model.InlineResponse4041;
import org.openapitools.client.model.LoadFixture;
import org.openapitools.client.model.LoggingAPIViewRequest;
import org.openapitools.client.model.Login;
import org.openapitools.client.model.LoginResponse;
import org.openapitools.client.model.MakeSearchablePDFRequest;
import org.openapitools.client.model.MarkUnmarkForDeleteDocumentsRequest;
import org.openapitools.client.model.MarkUnmarkForDeleteDocumentsResponse;
import org.openapitools.client.model.MarkUnmarkForDeleteProjectsReponse;
import org.openapitools.client.model.MarkUnmarkForDeleteProjectsRequest;
import org.openapitools.client.model.MenuGroup;
import org.openapitools.client.model.MenuItem;
import org.openapitools.client.model.OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse;
import org.openapitools.client.model.Party;
import org.openapitools.client.model.PartySimilarity;
import org.openapitools.client.model.PartyUsage;
import org.openapitools.client.model.PercentUsage;
import org.openapitools.client.model.ProjectAnnotationsAssigneesResponse;
import org.openapitools.client.model.ProjectClustering;
import org.openapitools.client.model.ProjectClusteringStatusResponse;
import org.openapitools.client.model.ProjectCreate;
import org.openapitools.client.model.ProjectDetail;
import org.openapitools.client.model.ProjectDocumentsAssigneesResponse;
import org.openapitools.client.model.ProjectList;
import org.openapitools.client.model.ProjectProgressResponse;
import org.openapitools.client.model.ProjectStats;
import org.openapitools.client.model.ProjectUpdate;
import org.openapitools.client.model.ProjectUploadSessionFilesResponse;
import org.openapitools.client.model.ProjectUploadSessionPOSTResponse;
import org.openapitools.client.model.ProjectUploadSessionProgressResponse;
import org.openapitools.client.model.RatioUsage;
import org.openapitools.client.model.RawdbDocumentsPOSTRequest;
import org.openapitools.client.model.Register;
import org.openapitools.client.model.RegulationUsage;
import org.openapitools.client.model.RestAuthCommonResponse;
import org.openapitools.client.model.ReviewStatus;
import org.openapitools.client.model.ReviewStatusDetail;
import org.openapitools.client.model.ReviewStatusGroup;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.SelectProjectsRequest;
import org.openapitools.client.model.SelectProjectsResponse;
import org.openapitools.client.model.SendClusterToProjectRequest;
import org.openapitools.client.model.SetProjectAnnotationsStatusRequest;
import org.openapitools.client.model.SetProjectDocumentsStatusRequest;
import org.openapitools.client.model.SimilarityPOSTObjectResponse;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskIdResponse;
import org.openapitools.client.model.TaskQueue;
import org.openapitools.client.model.TermUsage;
import org.openapitools.client.model.TextUnitClassification;
import org.openapitools.client.model.TextUnitClassificationCreate;
import org.openapitools.client.model.TextUnitClassifier;
import org.openapitools.client.model.TextUnitClassifierSuggestion;
import org.openapitools.client.model.TextUnitCluster;
import org.openapitools.client.model.TextUnitDjangoQL;
import org.openapitools.client.model.TextUnitSimilarity;
import org.openapitools.client.model.TrademarkUsage;
import org.openapitools.client.model.Typeahead;
import org.openapitools.client.model.UploadSession;
import org.openapitools.client.model.UploadSessionBatchUploadRequest;
import org.openapitools.client.model.UploadSessionDeleteFileRequest;
import org.openapitools.client.model.UploadSessionDetail;
import org.openapitools.client.model.UrlUsage;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserProfile;
import org.openapitools.client.model.UserStats;
import org.openapitools.client.model.VerifyAuthTokenRequest;
import org.openapitools.client.model.VerifyAuthTokenResponse;
import org.openapitools.client.model.VerifyEmail;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V1Api
 */
@Ignore
public class V1ApiTest {

    private final V1Api api = new V1Api();

    
    /**
     * 
     *
     * Document Cluster List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeDocumentClusterGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentCluster> response = api.analyzeDocumentClusterGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Document Cluster
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeDocumentClusterIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentCluster response = api.analyzeDocumentClusterIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Document Cluster (name)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeDocumentClusterIdPATCHTest() throws ApiException {
        String id = null;
        DocumentClusterUpdate documentClusterUpdate = null;
        DocumentClusterUpdate response = api.analyzeDocumentClusterIdPATCH(id, documentClusterUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Document Cluster (name)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeDocumentClusterIdPUTTest() throws ApiException {
        String id = null;
        DocumentClusterUpdate documentClusterUpdate = null;
        DocumentClusterUpdate response = api.analyzeDocumentClusterIdPUT(id, documentClusterUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Similarity List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeDocumentSimilarityListGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentSimilarity> response = api.analyzeDocumentSimilarityListGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Party Similarity List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzePartySimilarityListGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<PartySimilarity> response = api.analyzePartySimilarityListGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Text Unit Classification List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassificationsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TextUnitClassification> response = api.analyzeTextUnitClassificationsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Text Unit Classification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassificationsIdDELETETest() throws ApiException {
        String id = null;
        api.analyzeTextUnitClassificationsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Text Unit Classification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassificationsIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        TextUnitClassification response = api.analyzeTextUnitClassificationsIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Text Unit Classification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassificationsPOSTTest() throws ApiException {
        TextUnitClassificationCreate textUnitClassificationCreate = null;
        TextUnitClassificationCreate response = api.analyzeTextUnitClassificationsPOST(textUnitClassificationCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Text Unit Classifier Suggestion List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassifierSuggestionsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TextUnitClassifierSuggestion> response = api.analyzeTextUnitClassifierSuggestionsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Text Unit Classifier Suggestion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassifierSuggestionsIdDELETETest() throws ApiException {
        String id = null;
        api.analyzeTextUnitClassifierSuggestionsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassifierSuggestionsIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        TextUnitClassifierSuggestion response = api.analyzeTextUnitClassifierSuggestionsIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Text Unit Classifier List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassifiersGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TextUnitClassifier> response = api.analyzeTextUnitClassifiersGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Text Unit Classifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassifiersIdDELETETest() throws ApiException {
        String id = null;
        api.analyzeTextUnitClassifiersIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassifiersIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        TextUnitClassifier response = api.analyzeTextUnitClassifiersIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Text Unit Cluster List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClusterListGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TextUnitCluster> response = api.analyzeTextUnitClusterListGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Text Unit Similarity List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitSimilarityListGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TextUnitSimilarity> response = api.analyzeTextUnitSimilarityListGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Typeahead TextUnitClassification      Kwargs: field_name: [class_name, class_value]     GET params:       - q: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTypeaheadTextUnitClassificationFieldNameGETTest() throws ApiException {
        String fieldName = null;
        String q = null;
        Typeahead response = api.analyzeTypeaheadTextUnitClassificationFieldNameGET(fieldName, q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Action List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonActionsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Action> response = api.commonActionsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Action
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonActionsIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        Action response = api.commonActionsIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete specific App Variable by name     Param:         - name: str         - category: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonAppVariablesDELETETest() throws ApiException {
        AppVarDelete appVarDelete = null;
        String response = api.commonAppVariablesDELETE(appVarDelete);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve App Variable(s)      Params:         - name: str - retrieve specific variable
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonAppVariablesGETTest() throws ApiException {
        String name = null;
        Map<String, Object> response = api.commonAppVariablesGET(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create or update App Variables      Params:         key1: val1,         key2: val2, etc
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonAppVariablesPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        String response = api.commonAppVariablesPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * If directory:   action: None: - list directory   action: download - list directory (TODO - download directory)   action: info: - dict(info about directory) If file:   action: None: - show file   action: download - download file   action: info: - dict(info about directory)  :param request: :param path: str - relative path in /media directory  :query param action: optional str [\&quot;download\&quot;, \&quot;info\&quot;] :return:
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMediaPathGETTest() throws ApiException {
        String path = null;
        String action = null;
        Map<String, Object> response = api.commonMediaPathGET(path, action);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.commonMenuGroupsFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * MenuGroup List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsGETTest() throws ApiException {
        List<MenuGroup> response = api.commonMenuGroupsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete MenuGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsIdDELETETest() throws ApiException {
        String id = null;
        api.commonMenuGroupsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsIdFormFieldsGETTest() throws ApiException {
        String id = null;
        Map<String, Object> response = api.commonMenuGroupsIdFormFieldsGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve MenuGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsIdGETTest() throws ApiException {
        String id = null;
        MenuGroup response = api.commonMenuGroupsIdGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update MenuGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsIdPATCHTest() throws ApiException {
        String id = null;
        MenuGroup menuGroup = null;
        MenuGroup response = api.commonMenuGroupsIdPATCH(id, menuGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update MenuGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsIdPUTTest() throws ApiException {
        String id = null;
        MenuGroup menuGroup = null;
        MenuGroup response = api.commonMenuGroupsIdPUT(id, menuGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create MenuGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsPOSTTest() throws ApiException {
        MenuGroup menuGroup = null;
        MenuGroup response = api.commonMenuGroupsPOST(menuGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.commonMenuItemsFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * MenuItem List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsGETTest() throws ApiException {
        List<MenuItem> response = api.commonMenuItemsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete MenuItem
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsIdDELETETest() throws ApiException {
        String id = null;
        api.commonMenuItemsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsIdFormFieldsGETTest() throws ApiException {
        String id = null;
        Map<String, Object> response = api.commonMenuItemsIdFormFieldsGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve MenuItem
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsIdGETTest() throws ApiException {
        String id = null;
        MenuItem response = api.commonMenuItemsIdGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update MenuItem
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsIdPATCHTest() throws ApiException {
        String id = null;
        MenuItem menuItem = null;
        MenuItem response = api.commonMenuItemsIdPATCH(id, menuItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update MenuItem
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsIdPUTTest() throws ApiException {
        String id = null;
        MenuItem menuItem = null;
        MenuItem response = api.commonMenuItemsIdPUT(id, menuItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create MenuItem
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsPOSTTest() throws ApiException {
        MenuItem menuItem = null;
        MenuItem response = api.commonMenuItemsPOST(menuItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * ReviewStatusGroup List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusGroupsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<ReviewStatusGroup> response = api.commonReviewStatusGroupsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete ReviewStatusGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusGroupsIdDELETETest() throws ApiException {
        String id = null;
        api.commonReviewStatusGroupsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve ReviewStatusGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusGroupsIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        ReviewStatusGroup response = api.commonReviewStatusGroupsIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update ReviewStatusGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusGroupsIdPATCHTest() throws ApiException {
        String id = null;
        ReviewStatusGroup reviewStatusGroup = null;
        ReviewStatusGroup response = api.commonReviewStatusGroupsIdPATCH(id, reviewStatusGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update ReviewStatusGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusGroupsIdPUTTest() throws ApiException {
        String id = null;
        ReviewStatusGroup reviewStatusGroup = null;
        ReviewStatusGroup response = api.commonReviewStatusGroupsIdPUT(id, reviewStatusGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create ReviewStatusGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusGroupsPOSTTest() throws ApiException {
        ReviewStatusGroup reviewStatusGroup = null;
        ReviewStatusGroup response = api.commonReviewStatusGroupsPOST(reviewStatusGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * ReviewStatus List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<ReviewStatusDetail> response = api.commonReviewStatusesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete ReviewStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusesIdDELETETest() throws ApiException {
        String id = null;
        api.commonReviewStatusesIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve ReviewStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        ReviewStatusDetail response = api.commonReviewStatusesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update ReviewStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusesIdPATCHTest() throws ApiException {
        String id = null;
        ReviewStatus reviewStatus = null;
        ReviewStatus response = api.commonReviewStatusesIdPATCH(id, reviewStatus);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update ReviewStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusesIdPUTTest() throws ApiException {
        String id = null;
        ReviewStatus reviewStatus = null;
        ReviewStatus response = api.commonReviewStatusesIdPUT(id, reviewStatus);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create ReviewStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusesPOSTTest() throws ApiException {
        ReviewStatus reviewStatus = null;
        ReviewStatus response = api.commonReviewStatusesPOST(reviewStatus);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsAnnotatePUTTest() throws ApiException {
        Annotation annotation = null;
        AnnotationUpdateResponse response = api.documentAnnotationsAnnotatePUT(annotation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create batch of annotations      PUT Params:          - operation_uid: uid          - action: str [\&quot;save\&quot;, \&quot;delete\&quot;]          - id: int - PK of DocumentFieldValue          - data: {\&quot;document\&quot;: id, \&quot;field\&quot;: uid, \&quot;location_start\&quot;: int, \&quot;location_end\&quot;: int, \&quot;value\&quot;: val}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsBatchPUTTest() throws ApiException {
        List<AnnotationBatchRequest> annotationBatchRequest = null;
        List<AnnotationBatchResponse> response = api.documentAnnotationsBatchPUT(annotationBatchRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Annotation (Document Field Value) List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsGETTest() throws ApiException {
        List<Annotation> response = api.documentAnnotationsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Annotation (Document Field Value)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsIdDELETETest() throws ApiException {
        String id = null;
        api.documentAnnotationsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Annotation (Document Field Value)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsIdGETTest() throws ApiException {
        String id = null;
        Annotation response = api.documentAnnotationsIdGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Annotation (Document Field Value)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsIdPUTTest() throws ApiException {
        String id = null;
        Annotation annotation = null;
        Annotation response = api.documentAnnotationsIdPUT(id, annotation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Annotation (Document Field Value)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsPOSTTest() throws ApiException {
        Annotation annotation = null;
        Annotation response = api.documentAnnotationsPOST(annotation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Suggest field value before creating an annotation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentAnnotationsSuggestPOSTTest() throws ApiException {
        AnnotationSuggestRequest annotationSuggestRequest = null;
        Annotation response = api.documentAnnotationsSuggestPOST(annotationSuggestRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldAnnotationsForUserGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        DocumentFieldAnnotation response = api.documentDocumentFieldAnnotationsForUserGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Field Annotation List + Field Annotation False Match List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldAnnotationsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentFieldAnnotation> response = api.documentDocumentFieldAnnotationsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Field Annotation Details (not Field Annotation False Match)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldAnnotationsUidGETTest() throws ApiException {
        String uid = null;
        Map<String, String> jqFilters = null;
        DocumentFieldAnnotation response = api.documentDocumentFieldAnnotationsUidGET(uid, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.documentDocumentFieldCategoriesFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * DocumentFieldCategory List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentFieldCategoryList> response = api.documentDocumentFieldCategoriesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete DocumentFieldCategory
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesIdDELETETest() throws ApiException {
        String id = null;
        api.documentDocumentFieldCategoriesIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesIdFormFieldsGETTest() throws ApiException {
        String id = null;
        Map<String, Object> response = api.documentDocumentFieldCategoriesIdFormFieldsGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve DocumentFieldCategory
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentFieldCategoryList response = api.documentDocumentFieldCategoriesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update DocumentFieldCategory
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesIdPATCHTest() throws ApiException {
        String id = null;
        DocumentFieldCategoryCreate documentFieldCategoryCreate = null;
        DocumentFieldCategoryCreate response = api.documentDocumentFieldCategoriesIdPATCH(id, documentFieldCategoryCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Document Type     Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesIdPUTTest() throws ApiException {
        String id = null;
        DocumentFieldCategoryCreate documentFieldCategoryCreate = null;
        DocumentFieldCategoryCreate response = api.documentDocumentFieldCategoriesIdPUT(id, documentFieldCategoryCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create DocumentFieldCategory      Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldCategoriesPOSTTest() throws ApiException {
        DocumentFieldCategoryCreate documentFieldCategoryCreate = null;
        DocumentFieldCategoryCreate response = api.documentDocumentFieldCategoriesPOST(documentFieldCategoryCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.documentDocumentFieldDetectorsFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Field List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentFieldDetectorDetail> response = api.documentDocumentFieldDetectorsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsPOSTTest() throws ApiException {
        DocumentFieldDetectorCreate documentFieldDetectorCreate = null;
        DocumentFieldDetectorCreate response = api.documentDocumentFieldDetectorsPOST(documentFieldDetectorCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsUidDELETETest() throws ApiException {
        String uid = null;
        api.documentDocumentFieldDetectorsUidDELETE(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsUidFormFieldsGETTest() throws ApiException {
        String uid = null;
        Map<String, Object> response = api.documentDocumentFieldDetectorsUidFormFieldsGET(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsUidGETTest() throws ApiException {
        String uid = null;
        Map<String, String> jqFilters = null;
        DocumentFieldDetectorDetail response = api.documentDocumentFieldDetectorsUidGET(uid, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsUidPATCHTest() throws ApiException {
        String uid = null;
        DocumentFieldDetectorCreate documentFieldDetectorCreate = null;
        DocumentFieldDetectorCreate response = api.documentDocumentFieldDetectorsUidPATCH(uid, documentFieldDetectorCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldDetectorsUidPUTTest() throws ApiException {
        String uid = null;
        DocumentFieldDetectorCreate documentFieldDetectorCreate = null;
        DocumentFieldDetectorCreate response = api.documentDocumentFieldDetectorsUidPUT(uid, documentFieldDetectorCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Field Value List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldValuesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentFieldValue> response = api.documentDocumentFieldValuesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Field Value Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldValuesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentFieldValue response = api.documentDocumentFieldValuesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.documentDocumentFieldsFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Field List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentFieldList> response = api.documentDocumentFieldsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsStatsGETTest() throws ApiException {
        String documentTypeUid = null;
        List<DocumentFieldStatsResponse> response = api.documentDocumentFieldsStatsGET(documentTypeUid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Check formula for EXISTING Document Field Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidCheckFormulaPOSTTest() throws ApiException {
        String uid = null;
        CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest = null;
        Map<String, Object> response = api.documentDocumentFieldsUidCheckFormulaPOST(uid, checkDocumentFieldFormulaRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clone existing DocumentField and its depends_on_fields and detectors
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidClonePOSTTest() throws ApiException {
        String uid = null;
        CloneDocumentFieldRequest cloneDocumentFieldRequest = null;
        DocumentFieldDetail response = api.documentDocumentFieldsUidClonePOST(uid, cloneDocumentFieldRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidDELETETest() throws ApiException {
        String uid = null;
        api.documentDocumentFieldsUidDELETE(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidFormFieldsGETTest() throws ApiException {
        String uid = null;
        Map<String, Object> response = api.documentDocumentFieldsUidFormFieldsGET(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidGETTest() throws ApiException {
        String uid = null;
        Map<String, String> jqFilters = null;
        DocumentFieldDetail response = api.documentDocumentFieldsUidGET(uid, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidPATCHTest() throws ApiException {
        String uid = null;
        DocumentFieldCreate documentFieldCreate = null;
        DocumentFieldCreate response = api.documentDocumentFieldsUidPATCH(uid, documentFieldCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Document Field
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidPUTTest() throws ApiException {
        String uid = null;
        DocumentFieldCreate documentFieldCreate = null;
        DocumentFieldCreate response = api.documentDocumentFieldsUidPUT(uid, documentFieldCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get info about related objects for ready-to-delete document type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentFieldsUidPreDeletePOSTTest() throws ApiException {
        String uid = null;
        DocumentFieldDetail documentFieldDetail = null;
        Map<String, Object> response = api.documentDocumentFieldsUidPreDeletePOST(uid, documentFieldDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Note List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentNotesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        String projectId = null;
        String documentId = null;
        Boolean force = null;
        Boolean exportTo = null;
        List<DocumentNoteDetail> response = api.documentDocumentNotesGET(jqFilters, projectId, documentId, force, exportTo);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Document Note
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentNotesIdDELETETest() throws ApiException {
        String id = null;
        api.documentDocumentNotesIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Document Note
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentNotesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentNoteDetail response = api.documentDocumentNotesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Document Note
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentNotesIdPATCHTest() throws ApiException {
        String id = null;
        DocumentNoteDetail documentNoteDetail = null;
        DocumentNoteDetail response = api.documentDocumentNotesIdPATCH(id, documentNoteDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Document Note
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentNotesIdPUTTest() throws ApiException {
        String id = null;
        DocumentNoteUpdate documentNoteUpdate = null;
        DocumentNoteUpdate response = api.documentDocumentNotesIdPUT(id, documentNoteUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Document Note
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentNotesPOSTTest() throws ApiException {
        DocumentNoteCreate documentNoteCreate = null;
        DocumentNoteCreate response = api.documentDocumentNotesPOST(documentNoteCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.documentDocumentTypesFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Type List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentTypeDetail> response = api.documentDocumentTypesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesImportDocTypePUTTest() throws ApiException {
        DocumentTypeImportRequest documentTypeImportRequest = null;
        DocumentTypeImportResponse response = api.documentDocumentTypesImportDocTypePUT(documentTypeImportRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Document Type      Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesPOSTTest() throws ApiException {
        DocumentTypeCreate documentTypeCreate = null;
        DocumentTypeCreate response = api.documentDocumentTypesPOST(documentTypeCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesStatsGETTest() throws ApiException {
        List<DocumentTypeStats> response = api.documentDocumentTypesStatsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clone existing Document Type and its fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidClonePOSTTest() throws ApiException {
        String uid = null;
        CloneDocumentTypeRequest cloneDocumentTypeRequest = null;
        DocumentTypeDetail response = api.documentDocumentTypesUidClonePOST(uid, cloneDocumentTypeRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Document Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidDELETETest() throws ApiException {
        String uid = null;
        api.documentDocumentTypesUidDELETE(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidExportDocTypeGETTest() throws ApiException {
        String uid = null;
        String targetVersion = null;
        File response = api.documentDocumentTypesUidExportDocTypeGET(uid, targetVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidFormFieldsGETTest() throws ApiException {
        String uid = null;
        Map<String, Object> response = api.documentDocumentTypesUidFormFieldsGET(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Document Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidGETTest() throws ApiException {
        String uid = null;
        Map<String, String> jqFilters = null;
        DocumentTypeDetail response = api.documentDocumentTypesUidGET(uid, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Document Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidPATCHTest() throws ApiException {
        String uid = null;
        DocumentTypeCreate documentTypeCreate = null;
        DocumentTypeCreate response = api.documentDocumentTypesUidPATCH(uid, documentTypeCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Document Type     Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidPUTTest() throws ApiException {
        String uid = null;
        DocumentTypeCreate documentTypeCreate = null;
        DocumentTypeCreate response = api.documentDocumentTypesUidPUT(uid, documentTypeCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get info about related objects for ready-to-delete document type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUidPreDeletePOSTTest() throws ApiException {
        String uid = null;
        DocumentTypeDetail documentTypeDetail = null;
        Map<String, Object> response = api.documentDocumentTypesUidPreDeletePOST(uid, documentTypeDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentTypesUserProjectTypesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        DocumentTypeDetail response = api.documentDocumentTypesUserProjectTypesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsDownloadZipGETTest() throws ApiException {
        String documentIds = null;
        String excludeDocumentIds = null;
        DocumentDownloadZipResponse response = api.documentDocumentsDownloadZipGET(documentIds, excludeDocumentIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsForUserGETTest() throws ApiException {
        DocumentsForUserResponse response = api.documentDocumentsForUserGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document List with Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        Integer clusterId = null;
        String q = null;
        List<DocumentsForUser> response = api.documentDocumentsGET(jqFilters, clusterId, q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdDELETETest() throws ApiException {
        String id = null;
        api.documentDocumentsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Restricted set of fields in response (except full_text), see get_serializer_class()
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdDataGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentDetail response = api.documentDocumentsIdDataGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdDefinitionsGETTest() throws ApiException {
        String id = null;
        List<DocumentDefinitions> response = api.documentDocumentsIdDefinitionsGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdExtractionGETTest() throws ApiException {
        String id = null;
        Map<String, Object> response = api.documentDocumentsIdExtractionGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdFieldsGETTest() throws ApiException {
        String id = null;
        Map<String, Object> response = api.documentDocumentsIdFieldsGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdFieldsPATCHTest() throws ApiException {
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentDocumentsIdFieldsPATCH(id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdFieldsPOSTTest() throws ApiException {
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentDocumentsIdFieldsPOST(id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdFieldsPUTTest() throws ApiException {
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentDocumentsIdFieldsPUT(id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdFullTextGETTest() throws ApiException {
        String id = null;
        String response = api.documentDocumentsIdFullTextGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Detail with Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentsForUser response = api.documentDocumentsIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdPATCHTest() throws ApiException {
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentDocumentsIdPATCH(id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set new assignee OR document status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdPUTTest() throws ApiException {
        String id = null;
        DocumentsForUser documentsForUser = null;
        DocumentsForUser response = api.documentDocumentsIdPUT(id, documentsForUser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsIdShowGETTest() throws ApiException {
        String id = null;
        Boolean alt = null;
        File response = api.documentDocumentsIdShowGET(id, alt);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsMarkDeletePOSTTest() throws ApiException {
        MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
        MarkUnmarkForDeleteDocumentsResponse response = api.documentDocumentsMarkDeletePOST(markUnmarkForDeleteDocumentsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsPOSTTest() throws ApiException {
        DocumentsForUser documentsForUser = null;
        DocumentsForUser response = api.documentDocumentsPOST(documentsForUser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentDocumentsUnmarkDeletePOSTTest() throws ApiException {
        MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
        MarkUnmarkForDeleteDocumentsResponse response = api.documentDocumentsUnmarkDeletePOST(markUnmarkForDeleteDocumentsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * FieldAnnotationStatus List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentFieldAnnotationStatusesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<FieldAnnotationStatus> response = api.documentFieldAnnotationStatusesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete FieldAnnotationStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentFieldAnnotationStatusesIdDELETETest() throws ApiException {
        String id = null;
        api.documentFieldAnnotationStatusesIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve FieldAnnotationStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentFieldAnnotationStatusesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        FieldAnnotationStatus response = api.documentFieldAnnotationStatusesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentFieldAnnotationStatusesIdPATCHTest() throws ApiException {
        String id = null;
        FieldAnnotationStatus fieldAnnotationStatus = null;
        FieldAnnotationStatus response = api.documentFieldAnnotationStatusesIdPATCH(id, fieldAnnotationStatus);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update FieldAnnotationStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentFieldAnnotationStatusesIdPUTTest() throws ApiException {
        String id = null;
        FieldAnnotationStatus fieldAnnotationStatus = null;
        FieldAnnotationStatus response = api.documentFieldAnnotationStatusesIdPUT(id, fieldAnnotationStatus);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create FieldAnnotationStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentFieldAnnotationStatusesPOSTTest() throws ApiException {
        FieldAnnotationStatus fieldAnnotationStatus = null;
        FieldAnnotationStatus response = api.documentFieldAnnotationStatusesPOST(fieldAnnotationStatus);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentFieldAnnotationsForUserGETTest() throws ApiException {
        String projectPk = null;
        Map<String, String> jqFilters = null;
        DocumentFieldAnnotation response = api.documentProjectProjectPkDocumentFieldAnnotationsForUserGET(projectPk, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Field Annotation List + Field Annotation False Match List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentFieldAnnotationsGETTest() throws ApiException {
        String projectPk = null;
        Map<String, String> jqFilters = null;
        List<DocumentFieldAnnotation> response = api.documentProjectProjectPkDocumentFieldAnnotationsGET(projectPk, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Field Annotation Details (not Field Annotation False Match)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentFieldAnnotationsUidGETTest() throws ApiException {
        String projectPk = null;
        String uid = null;
        Map<String, String> jqFilters = null;
        DocumentFieldAnnotation response = api.documentProjectProjectPkDocumentFieldAnnotationsUidGET(projectPk, uid, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Field Value List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentFieldValuesGETTest() throws ApiException {
        String projectPk = null;
        Map<String, String> jqFilters = null;
        List<DocumentFieldValue> response = api.documentProjectProjectPkDocumentFieldValuesGET(projectPk, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Field Value Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentFieldValuesIdGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentFieldValue response = api.documentProjectProjectPkDocumentFieldValuesIdGET(projectPk, id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDocumentPkAnnotationsGETTest() throws ApiException {
        String projectPk = null;
        String documentPk = null;
        List<AnnotationInDocument> response = api.documentProjectProjectPkDocumentsDocumentPkAnnotationsGET(projectPk, documentPk);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETETest() throws ApiException {
        String projectPk = null;
        String documentPk = null;
        String id = null;
        api.documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE(projectPk, documentPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETTest() throws ApiException {
        String projectPk = null;
        String documentPk = null;
        String id = null;
        AnnotationInDocument response = api.documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET(projectPk, documentPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHTest() throws ApiException {
        String projectPk = null;
        String documentPk = null;
        String id = null;
        AnnotationInDocument annotationInDocument = null;
        AnnotationInDocument response = api.documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH(projectPk, documentPk, id, annotationInDocument);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTTest() throws ApiException {
        String projectPk = null;
        String documentPk = null;
        String id = null;
        AnnotationInDocument annotationInDocument = null;
        AnnotationInDocument response = api.documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT(projectPk, documentPk, id, annotationInDocument);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTTest() throws ApiException {
        String projectPk = null;
        String documentPk = null;
        AnnotationInDocument annotationInDocument = null;
        AnnotationInDocument response = api.documentProjectProjectPkDocumentsDocumentPkAnnotationsPOST(projectPk, documentPk, annotationInDocument);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsDownloadZipGETTest() throws ApiException {
        String projectPk = null;
        String documentIds = null;
        String excludeDocumentIds = null;
        DocumentDownloadZipResponse response = api.documentProjectProjectPkDocumentsDownloadZipGET(projectPk, documentIds, excludeDocumentIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsForUserGETTest() throws ApiException {
        String projectPk = null;
        DocumentsForUserResponse response = api.documentProjectProjectPkDocumentsForUserGET(projectPk);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document List with Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsGETTest() throws ApiException {
        String projectPk = null;
        Map<String, String> jqFilters = null;
        Integer clusterId = null;
        String q = null;
        List<DocumentsForUser> response = api.documentProjectProjectPkDocumentsGET(projectPk, jqFilters, clusterId, q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdDELETETest() throws ApiException {
        String projectPk = null;
        String id = null;
        api.documentProjectProjectPkDocumentsIdDELETE(projectPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Restricted set of fields in response (except full_text), see get_serializer_class()
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdDataGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentDetail response = api.documentProjectProjectPkDocumentsIdDataGET(projectPk, id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdDefinitionsGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        List<DocumentDefinitions> response = api.documentProjectProjectPkDocumentsIdDefinitionsGET(projectPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdExtractionGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Map<String, Object> response = api.documentProjectProjectPkDocumentsIdExtractionGET(projectPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdFieldsGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Map<String, Object> response = api.documentProjectProjectPkDocumentsIdFieldsGET(projectPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdFieldsPATCHTest() throws ApiException {
        String projectPk = null;
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentProjectProjectPkDocumentsIdFieldsPATCH(projectPk, id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdFieldsPOSTTest() throws ApiException {
        String projectPk = null;
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentProjectProjectPkDocumentsIdFieldsPOST(projectPk, id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdFieldsPUTTest() throws ApiException {
        String projectPk = null;
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentProjectProjectPkDocumentsIdFieldsPUT(projectPk, id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdFullTextGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        String response = api.documentProjectProjectPkDocumentsIdFullTextGET(projectPk, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Document Detail with Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentsForUser response = api.documentProjectProjectPkDocumentsIdGET(projectPk, id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdPATCHTest() throws ApiException {
        String projectPk = null;
        String id = null;
        DocumentDetail documentDetail = null;
        DocumentDetail response = api.documentProjectProjectPkDocumentsIdPATCH(projectPk, id, documentDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set new assignee OR document status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdPUTTest() throws ApiException {
        String projectPk = null;
        String id = null;
        DocumentsForUser documentsForUser = null;
        DocumentsForUser response = api.documentProjectProjectPkDocumentsIdPUT(projectPk, id, documentsForUser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsIdShowGETTest() throws ApiException {
        String projectPk = null;
        String id = null;
        Boolean alt = null;
        File response = api.documentProjectProjectPkDocumentsIdShowGET(projectPk, id, alt);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsMarkDeletePOSTTest() throws ApiException {
        String projectPk = null;
        MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
        MarkUnmarkForDeleteDocumentsResponse response = api.documentProjectProjectPkDocumentsMarkDeletePOST(projectPk, markUnmarkForDeleteDocumentsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsPOSTTest() throws ApiException {
        String projectPk = null;
        DocumentsForUser documentsForUser = null;
        DocumentsForUser response = api.documentProjectProjectPkDocumentsPOST(projectPk, documentsForUser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentProjectProjectPkDocumentsUnmarkDeletePOSTTest() throws ApiException {
        String projectPk = null;
        MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest = null;
        MarkUnmarkForDeleteDocumentsResponse response = api.documentProjectProjectPkDocumentsUnmarkDeletePOST(projectPk, markUnmarkForDeleteDocumentsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentStatsGETTest() throws ApiException {
        Map<String, Object> response = api.documentStatsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * TextUnit List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentTextunitsGETTest() throws ApiException {
        String q = null;
        List<TextUnitDjangoQL> response = api.documentTextunitsGET(q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve TextUnit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentTextunitsIdGETTest() throws ApiException {
        String id = null;
        String q = null;
        TextUnitDjangoQL response = api.documentTextunitsIdGET(id, q);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Dump document types, fields, field detectors and  document filters to json.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dumpDocumentConfigGETTest() throws ApiException {
        Map<String, Object> response = api.dumpDocumentConfigGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Upload field values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dumpDocumentConfigPUTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        File response = api.dumpDocumentConfigPUT(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Download model fixture
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dumpDumpFixturePOSTTest() throws ApiException {
        DumpFixture dumpFixture = null;
        File response = api.dumpDumpFixturePOST(dumpFixture);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Dump all users, roles, email addresses, review statuses, review status groups, app vars, document types, fields, field detectors and document filters to json.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dumpDumpGETTest() throws ApiException {
        Map<String, Object> response = api.dumpDumpGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Upload field values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dumpDumpPUTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        File response = api.dumpDumpPUT(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Download field values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dumpFieldValuesGETTest() throws ApiException {
        Map<String, Object> response = api.dumpFieldValuesGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Upload field values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dumpFieldValuesPUTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        File response = api.dumpFieldValuesPUT(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Install model fixtures
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dumpLoadFixturePOSTTest() throws ApiException {
        LoadFixture loadFixture = null;
        Map<String, Object> response = api.dumpLoadFixturePOST(loadFixture);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Amount Usage List  GET params:   - document_id: int   - text_unit_id: int   - amount_search: float   - amount_str: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractAmountUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<AmountUsage> response = api.extractAmountUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Amount Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractAmountUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractAmountUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Citation Usage List  GET params:   - document_id: int   - text_unit_id: int   - citation_str: str   - citation_str_contains: str   - year_str: str   - reporter: str   - court: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCitationUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<CitationUsage> response = api.extractCitationUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Citation Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCitationUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractCitationUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Copyright Usage List  GET params:   - document_id: int   - text_unit_id: int   - copyright: str   - copyright_contains: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCopyrightUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<CopyrightUsage> response = api.extractCopyrightUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Copyright Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCopyrightUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractCopyrightUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Court Usage List  GET params:   - document_id: int   - text_unit_id: int   - court_name: str   - court_alias: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCourtUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<CourtUsage> response = api.extractCourtUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Court Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCourtUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractCourtUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Currency Usage List  GET params:   - document_id: int   - amount_search: str   - currency: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCurrencyUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<CurrencyUsage> response = api.extractCurrencyUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Currency Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCurrencyUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractCurrencyUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Date Duration Usage List  GET params:   - document_id: int   - text_unit_id: int   - duration_days_str: str/float
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateDurationUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DateDurationUsage> response = api.extractDateDurationUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Date Duration Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateDurationUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractDateDurationUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Date Usage Calendar Chart  GET params:     - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateUsageCalendarChartGETTest() throws ApiException {
        List<DateUsageCalendar> response = api.extractDateUsageCalendarChartGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Date Usage List  GET params:   - document_id: int   - date_search: str   - month_search: str (&#39;%Y-%m-%d&#39;)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DateUsage> response = api.extractDateUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Date Usage Timeline Chart  GET params:     - document_id: int     - per_month: bool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateUsageTimelineChartGETTest() throws ApiException {
        List<DateUsageTimeline> response = api.extractDateUsageTimelineChartGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Load Date Usage as iCal  GET params:     - document_id: int (required)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateUsageToIcalGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DateUsage> response = api.extractDateUsageToIcalGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Date Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractDateUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Definition Usage List  GET params:   - document_id: int   - definition: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDefinitionUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DefinitionUsage> response = api.extractDefinitionUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Definition Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDefinitionUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractDefinitionUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Distance Usage List  GET params:   - document_id: int   - distance_type: str   - amount_search: float
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDistanceUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DistanceUsage> response = api.extractDistanceUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Distance Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDistanceUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractDistanceUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Geo Alias Usage List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoAliasUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<GeoAliasUsage> response = api.extractGeoAliasUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Geo Alias Usage List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoAliasUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractGeoAliasUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Geo Entity List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoEntitiesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<GeoEntityList> response = api.extractGeoEntitiesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Geo Entity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoEntitiesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        GeoEntityList response = api.extractGeoEntitiesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Geo Entity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoEntitiesIdPUTTest() throws ApiException {
        String id = null;
        GeoEntityUpdate geoEntityUpdate = null;
        GeoEntityUpdate response = api.extractGeoEntitiesIdPUT(id, geoEntityUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Geo Entity Usage List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoEntityUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<GeoEntityUsage> response = api.extractGeoEntityUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Geo Entity Usage List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoEntityUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractGeoEntityUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Party List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPartiesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Party> response = api.extractPartiesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Party
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPartiesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        Party response = api.extractPartiesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Party Network Chart  GET params:     - party_name_iexact: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPartyNetworkChartGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<PartyUsage> response = api.extractPartyNetworkChartGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Party Usage List  GET params:   - document_id: int   - text_unit_id: int   - party_search: str   - party_search_iexact: str   - role: str   - role_contains: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPartyUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<PartyUsage> response = api.extractPartyUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Party Usage List  GET params:   - document_id: int   - party_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPartyUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractPartyUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Percent Usage List  GET params:   - document_id: int   - unit_type: str   - amount_search: float
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPercentUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<PercentUsage> response = api.extractPercentUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Percent Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPercentUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractPercentUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Ratio Usage List  GET params:   - document_id: int   - text_unit_id: int   - amount_search: float   - amount_search2: float
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractRatioUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<RatioUsage> response = api.extractRatioUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Ratio Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractRatioUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractRatioUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Regulation Usage List  GET params:   - document_id: int   - text_unit_id: int   - regulation_type: str   - regulation_name: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractRegulationUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<RegulationUsage> response = api.extractRegulationUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Regulation Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractRegulationUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractRegulationUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Term Usage List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTermUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TermUsage> response = api.extractTermUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Term Usage List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTermUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractTermUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Trademark Usage List  GET params:   - document_id: int   - text_unit_id: int   - trademark: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTrademarkUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TrademarkUsage> response = api.extractTrademarkUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Trademark Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTrademarkUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractTrademarkUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Typeahead Geo Entity Usage      Kwargs: field_name: [entity__name]     GET params:       - q: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTypeaheadGeoEntityUsageFieldNameGETTest() throws ApiException {
        String fieldName = null;
        Typeahead response = api.extractTypeaheadGeoEntityUsageFieldNameGET(fieldName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Typeahead Party Usage      Kwargs: field_name: [party__name]     GET params:       - q: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTypeaheadPartyUsageFieldNameGETTest() throws ApiException {
        String fieldName = null;
        Typeahead response = api.extractTypeaheadPartyUsageFieldNameGET(fieldName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Typeahead Term Usage      Kwargs: field_name: [term__term]     GET params:       - q: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTypeaheadTermUsageFieldNameGETTest() throws ApiException {
        String fieldName = null;
        Typeahead response = api.extractTypeaheadTermUsageFieldNameGET(fieldName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Url Usage List  GET params:   - document_id: int   - text_unit_id: int   - source_url: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractUrlUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<UrlUsage> response = api.extractUrlUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Url Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractUrlUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractUrlUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Log provided data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loggingLogMessagePOSTTest() throws ApiException {
        LoggingAPIViewRequest loggingAPIViewRequest = null;
        Map<String, Object> response = api.loggingLogMessagePOST(loggingAPIViewRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * If directory:   action: None: - list directory   action: download - list directory (TODO - download directory)   action: info: - dict(info about directory) If file:   action: None: - show file   action: download - download file   action: info: - dict(info about directory)  :param request: :param path: str - relative path in /media directory  :query param action: optional str [\&quot;download\&quot;, \&quot;info\&quot;] :return:
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mediaDataPathGETTest() throws ApiException {
        String path = null;
        String action = null;
        Map<String, Object> response = api.mediaDataPathGET(path, action);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * ProjectCluster List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectClusteringGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<ProjectClustering> response = api.projectProjectClusteringGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * ProjectCluster Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectClusteringIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        ProjectClustering response = api.projectProjectClusteringIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Project List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<ProjectList> response = api.projectProjectsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get assignees data for FieldAnnotations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdAnnotationsAssigneesGETTest() throws ApiException {
        String id = null;
        List<ProjectAnnotationsAssigneesResponse> response = api.projectProjectsIdAnnotationsAssigneesGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Bulk assign batch of annotations to a review team member      Params:         annotation_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned annotations)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdAssignAnnotationsPOSTTest() throws ApiException {
        String id = null;
        AssignProjectAnnotationsRequest assignProjectAnnotationsRequest = null;
        CountSuccessResponse response = api.projectProjectsIdAssignAnnotationsPOST(id, assignProjectAnnotationsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Bulk assign batch of documents to a review team member      Params:         document_id: int         assignee_id: int     Returns:         bool (number of reassigned documents)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdAssignDocumentPOSTTest() throws ApiException {
        String id = null;
        AssignProjectDocumentRequest assignProjectDocumentRequest = null;
        CountSuccessResponse response = api.projectProjectsIdAssignDocumentPOST(id, assignProjectDocumentRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Bulk assign batch of documents to a review team member      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned documents)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdAssignDocumentsPOSTTest() throws ApiException {
        String id = null;
        AssignProjectDocumentsRequest assignProjectDocumentsRequest = null;
        CountSuccessResponse response = api.projectProjectsIdAssignDocumentsPOST(id, assignProjectDocumentsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get assignees data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdAssigneesGETTest() throws ApiException {
        String id = null;
        List<ProjectDocumentsAssigneesResponse> response = api.projectProjectsIdAssigneesGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clean project (Generic Contract Type project)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdCleanupPOSTTest() throws ApiException {
        String id = null;
        CleanupProjectRequest cleanupProjectRequest = null;
        String response = api.projectProjectsIdCleanupPOST(id, cleanupProjectRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cluster Project Documents      Params:         - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]         - cluster_by: str[term, date, text, definition, duration, party,                           geoentity, currency_name, currency_value]         - n_clusters: int         - force: bool (optional) - force clustering if uncompleted tasks exist
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdClusterPOSTTest() throws ApiException {
        String id = null;
        ClusterProjectRequest clusterProjectRequest = null;
        ClusterProjectResponse response = api.projectProjectsIdClusterPOST(id, clusterProjectRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Last Clustering task status/data      Params:         - project_clustering_id: int (optional) - return last if not provided
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdClusteringStatusGETTest() throws ApiException {
        String id = null;
        Integer projectClusteringId = null;
        ProjectClusteringStatusResponse response = api.projectProjectsIdClusteringStatusGET(id, projectClusteringId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdDELETETest() throws ApiException {
        String id = null;
        api.projectProjectsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdDetectFieldValuesPOSTTest() throws ApiException {
        String id = null;
        DetectProjectFieldValuesRequest detectProjectFieldValuesRequest = null;
        TaskIdResponse response = api.projectProjectsIdDetectFieldValuesPOST(id, detectProjectFieldValuesRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        ProjectDetail response = api.projectProjectsIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdMakeSearchablePdfPOSTTest() throws ApiException {
        String id = null;
        MakeSearchablePDFRequest makeSearchablePDFRequest = null;
        TaskIdResponse response = api.projectProjectsIdMakeSearchablePdfPOST(id, makeSearchablePDFRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Method marks the whole project (remove_all&#x3D;True) / the project&#39;s documents (remove_all&#x3D;False) for deleting. These marked documents (and the project) will become hidden in API. Documents, listed in excluded_ids list, will not be marked for deleting.      Params:         - all: bool - mark all filtered by a user documents         - remove_all: bool - mark project+documents         - exclude_document_ids: list[int]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdMarkDeletePOSTTest() throws ApiException {
        String id = null;
        MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = null;
        MarkUnmarkForDeleteProjectsReponse response = api.projectProjectsIdMarkDeletePOST(id, markUnmarkForDeleteProjectsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdPATCHTest() throws ApiException {
        String id = null;
        ProjectUpdate projectUpdate = null;
        ProjectUpdate response = api.projectProjectsIdPATCH(id, projectUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdPUTTest() throws ApiException {
        String id = null;
        ProjectUpdate projectUpdate = null;
        ProjectUpdate response = api.projectProjectsIdPUT(id, projectUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get current progress of all project sessions / clusterings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdProgressGETTest() throws ApiException {
        String id = null;
        ProjectProgressResponse response = api.projectProjectsIdProgressGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Send clusters to another Project      Params:         - cluster_ids: list[int]         - project_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdSendClustersToProjectPOSTTest() throws ApiException {
        String id = null;
        SendClusterToProjectRequest sendClusterToProjectRequest = null;
        String response = api.projectProjectsIdSendClustersToProjectPOST(id, sendClusterToProjectRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Bulk set status for batch of annotations      Params:         document_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         status_id: int - field annotation status id         run_mode: str - &#39;sync&#39;, &#39;background&#39;, &#39;smart&#39;     Returns:         int (number of reassigned annotations)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdSetAnnotationStatusPOSTTest() throws ApiException {
        String id = null;
        SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest = null;
        OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse response = api.projectProjectsIdSetAnnotationStatusPOST(id, setProjectAnnotationsStatusRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Bulk set status for batch of documents      Params:         document_ids: list[int]         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         all: any value - update all documents if any value         status_id: int     Returns:         int (number of reassigned documents)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdSetStatusPOSTTest() throws ApiException {
        String id = null;
        SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest = null;
        CountSuccessResponse response = api.projectProjectsIdSetStatusPOST(id, setProjectDocumentsStatusRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Method removes soft delete sign from project only (remove_all&#x3D;False) or from the project and the project&#39;s documents (remove_all&#x3D;True)     Body params:         - all: bool - unmark all filtered by a user documents         - remove_all: bool - unmark project+documents         - exclude_document_ids: List[int]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdUnmarkDeletePOSTTest() throws ApiException {
        String id = null;
        MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = null;
        MarkUnmarkForDeleteProjectsReponse response = api.projectProjectsIdUnmarkDeletePOST(id, markUnmarkForDeleteProjectsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsPOSTTest() throws ApiException {
        ProjectCreate projectCreate = null;
        ProjectCreate response = api.projectProjectsPOST(projectCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get project stats across all projects see related code in get_queryset() and serializer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsProjectStatsGETTest() throws ApiException {
        String projectIds = null;
        List<ProjectStats> response = api.projectProjectsProjectStatsGET(projectIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get recent N projects      Params:         n: int - default is 5
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsRecentGETTest() throws ApiException {
        Integer n = null;
        List<Map<String, Object>> response = api.projectProjectsRecentGET(n);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Select projects for review in Explorer UI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsSelectProjectsPOSTTest() throws ApiException {
        SelectProjectsRequest selectProjectsRequest = null;
        SelectProjectsResponse response = api.projectProjectsSelectProjectsPOST(selectProjectsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Task Queue List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTaskQueuesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TaskQueue> response = api.projectTaskQueuesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Task Queue
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTaskQueuesIdDELETETest() throws ApiException {
        String id = null;
        api.projectTaskQueuesIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Task Queue
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTaskQueuesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        TaskQueue response = api.projectTaskQueuesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Task Queue
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTaskQueuesIdPATCHTest() throws ApiException {
        String id = null;
        TaskQueue taskQueue = null;
        TaskQueue response = api.projectTaskQueuesIdPATCH(id, taskQueue);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Task Queue      PUT params:         - pk: int         - description: str         - documents: list[int]         - completed_documents: list[int]         - reviewers: list[int]     Optional params for add/remove document from/to a TaskQueue:         - add_document: int         - remove_document: int     Optional params for complete/reopen document in a TaskQueue:         - complete_document: int         - open_document: int     Optional param to add documents from DocumentCluster:         - add_documents_from_cluster: int (cluster id)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTaskQueuesIdPUTTest() throws ApiException {
        String id = null;
        TaskQueue taskQueue = null;
        TaskQueue response = api.projectTaskQueuesIdPUT(id, taskQueue);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Task Queue
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTaskQueuesPOSTTest() throws ApiException {
        TaskQueue taskQueue = null;
        TaskQueue response = api.projectTaskQueuesPOST(taskQueue);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Session Upload List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<UploadSessionDetail> response = api.projectUploadSessionGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Session Upload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionPOSTTest() throws ApiException {
        UploadSession uploadSession = null;
        UploadSession response = api.projectUploadSessionPOST(uploadSession);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get status of Upload Sessions     Params:         - project_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionStatusGETTest() throws ApiException {
        String projectId = null;
        Map<String, Object> response = api.projectUploadSessionStatusGET(projectId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Upload batch of files      Params:         - folder (source_path): str - absolute path to a directory containing files         - force: bool (optional) - whether rewrite existing file and Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidBatchUploadPOSTTest() throws ApiException {
        String uid = null;
        UploadSessionDetail uploadSessionDetail = null;
        UploadSessionDetail response = api.projectUploadSessionUidBatchUploadPOST(uid, uploadSessionDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Upload files from given sub-folder in media/data/documents folder      Params:         - source_path: relative path to a folder with documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidBatchUploadPOST_0Test() throws ApiException {
        String uid = null;
        UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest = null;
        UploadSessionDetail response = api.projectUploadSessionUidBatchUploadPOST_0(uid, uploadSessionBatchUploadRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a file from session      Params:         - filename: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidCancelDELETETest() throws ApiException {
        String uid = null;
        api.projectUploadSessionUidCancelDELETE(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Session Upload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidDELETETest() throws ApiException {
        String uid = null;
        api.projectUploadSessionUidDELETE(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a file from session      Params:         - filename: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidDeleteFileDELETETest() throws ApiException {
        String uid = null;
        UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest = null;
        String response = api.projectUploadSessionUidDeleteFileDELETE(uid, uploadSessionDeleteFileRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidFilesPOSTTest() throws ApiException {
        String uid = null;
        Integer contentLength = null;
        String fileName = null;
        Boolean force = null;
        Boolean directoryPath = null;
        Boolean force2 = null;
        File body = null;
        ProjectUploadSessionFilesResponse response = api.projectUploadSessionUidFilesPOST(uid, contentLength, fileName, force, directoryPath, force2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Session Upload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidGETTest() throws ApiException {
        String uid = null;
        Map<String, String> jqFilters = null;
        UploadSessionDetail response = api.projectUploadSessionUidGET(uid, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Progress for a session per files (short form)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidProgressGETTest() throws ApiException {
        String uid = null;
        ProjectUploadSessionProgressResponse response = api.projectUploadSessionUidProgressGET(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Upload a File      Params:         - file: file object         - force: bool (optional) - whether rewrite existing file and Document         - review_file: bool - whether skip file check (exists or not)         - directory_path: str - may be passed from TUS plugin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidUploadPOSTTest() throws ApiException {
        String uid = null;
        Boolean fileName = null;
        String fileEncoding = null;
        Boolean force = null;
        Boolean reviewFile = null;
        Boolean directoryPath = null;
        File body = null;
        ProjectUploadSessionPOSTResponse response = api.projectUploadSessionUidUploadPOST(uid, fileName, fileEncoding, force, reviewFile, directoryPath, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rawdbConfigGETTest() throws ApiException {
        Map<String, Object> response = api.rawdbConfigGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rawdbDocumentsDocumentTypeCodeGETTest() throws ApiException {
        String documentTypeCode = null;
        String projectIds = null;
        String columns = null;
        Boolean associatedText = null;
        Boolean asZip = null;
        String fmt = null;
        Integer limit = null;
        String orderBy = null;
        String savedFilters = null;
        Boolean saveFilter = null;
        Boolean returnReviewed = null;
        Boolean returnTotal = null;
        Boolean returnData = null;
        Boolean ignoreErrors = null;
        Map<String, String> filters = null;
        Map<String, Object> response = api.rawdbDocumentsDocumentTypeCodeGET(documentTypeCode, projectIds, columns, associatedText, asZip, fmt, limit, orderBy, savedFilters, saveFilter, returnReviewed, returnTotal, returnData, ignoreErrors, filters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * See .get() method signature, .post() method just reflects it and uses the same request.GET params to get data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rawdbDocumentsDocumentTypeCodePOSTTest() throws ApiException {
        String documentTypeCode = null;
        RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest = null;
        Map<String, Object> response = api.rawdbDocumentsDocumentTypeCodePOST(documentTypeCode, rawdbDocumentsPOSTRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rawdbProjectStatsProjectIdGETTest() throws ApiException {
        String projectId = null;
        Map<String, Object> response = api.rawdbProjectStatsProjectIdGET(projectId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rawdbSocialAccountsGETTest() throws ApiException {
        List<Object> response = api.rawdbSocialAccountsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object&#39;s key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthLoginPOSTTest() throws ApiException {
        Login login = null;
        LoginResponse response = api.restAuthLoginPOST(login);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthLogoutGETTest() throws ApiException {
        List<RestAuthCommonResponse> response = api.restAuthLogoutGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthLogoutPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        RestAuthCommonResponse response = api.restAuthLogoutPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthPasswordChangePOSTTest() throws ApiException {
        CustomPasswordChange customPasswordChange = null;
        RestAuthCommonResponse response = api.restAuthPasswordChangePOST(customPasswordChange);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Password reset e-mail link is confirmed, therefore this resets the user&#39;s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthPasswordResetConfirmPOSTTest() throws ApiException {
        CustomPasswordResetConfirm customPasswordResetConfirm = null;
        RestAuthCommonResponse response = api.restAuthPasswordResetConfirmPOST(customPasswordResetConfirm);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthPasswordResetPOSTTest() throws ApiException {
        CustomPasswordReset customPasswordReset = null;
        RestAuthCommonResponse response = api.restAuthPasswordResetPOST(customPasswordReset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthRegistrationPOSTTest() throws ApiException {
        Register register = null;
        Register response = api.restAuthRegistrationPOST(register);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restAuthRegistrationVerifyEmailPOSTTest() throws ApiException {
        VerifyEmail verifyEmail = null;
        VerifyEmail response = api.restAuthRegistrationVerifyEmailPOST(verifyEmail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Party Similarity\&quot; admin task  POST params:     - case_sensitive: bool     - similarity_type: str[]     - similarity_threshold: int     - delete: bool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void similarityPartySimilarityGETTest() throws ApiException {
        Map<String, Object> response = api.similarityPartySimilarityGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Party Similarity\&quot; admin task  POST params:     - case_sensitive: bool     - similarity_type: str[]     - similarity_threshold: int     - delete: bool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void similarityPartySimilarityPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        SimilarityPOSTObjectResponse response = api.similarityPartySimilarityPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Similarity\&quot; admin task  POST params:     - search_similar_documents: bool     - search_similar_text_units: bool     - similarity_threshold: int     - use_idf: bool     - delete: bool     - project: int     - feature_source: list - list[date, definition, duration, court,       currency_name, currency_value, term, party, geoentity]     - unit_type: str sentence|paragraph     - distance_type: str - see scipy.spatial.distance._METRICS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void similaritySimilarityByFeaturesGETTest() throws ApiException {
        Map<String, Object> response = api.similaritySimilarityByFeaturesGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Similarity\&quot; admin task  POST params:     - search_similar_documents: bool     - search_similar_text_units: bool     - similarity_threshold: int     - use_idf: bool     - delete: bool     - project: int     - feature_source: list - list[date, definition, duration, court,       currency_name, currency_value, term, party, geoentity]     - unit_type: str sentence|paragraph     - distance_type: str - see scipy.spatial.distance._METRICS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void similaritySimilarityByFeaturesPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        SimilarityPOSTObjectResponse response = api.similaritySimilarityByFeaturesPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Similarity\&quot; admin task  POST params:     - search_similar_documents: bool     - search_similar_text_units: bool     - similarity_threshold: int     - use_idf: bool     - delete: bool     - project: bool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void similaritySimilarityGETTest() throws ApiException {
        Map<String, Object> response = api.similaritySimilarityGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Similarity\&quot; admin task  POST params:     - search_similar_documents: bool     - search_similar_text_units: bool     - similarity_threshold: int     - use_idf: bool     - delete: bool     - project: bool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void similaritySimilarityPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        SimilarityPOSTObjectResponse response = api.similaritySimilarityPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Clean Tasks\&quot; admin task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskCleanTasksPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskCleanTasksPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Load Dictionaries\&quot; admin task  POST params:     - terms_accounting: bool:     - terms_accounting_1: bool:     - terms_accounting_1_locale_en: bool:     - terms_accounting_2: bool:     - terms_accounting_2_locale_en: bool:     - terms_accounting_3: bool:     - terms_accounting_3_locale_en: bool:     - terms_accounting_4: bool:     - terms_accounting_4_locale_en: bool:     - terms_accounting_5: bool:     - terms_accounting_5_locale_en: bool:     - terms_scientific: bool:     - terms_scientific_1: bool:     - terms_scientific1_locale_en: bool:     - terms_financial: bool:     - terms_financial_1: bool:     - terms_financial_1_locale_en: bool:     - terms_legal: bool:     - terms_legal_1: bool:     - terms_legal_1_locale_en: bool:     - terms_legal_2: bool:     - terms_legal_2_locale_en: bool:     - terms_legal_3: bool:     - terms_legal_3_locale_en: bool:     - terms_legal_4: bool:     - terms_legal_4_locale_en: bool:     - terms_file_path: str:     - terms_delete: bool:     - courts: bool:     - courts_1: bool:     - courts_1_locale_en: bool:     - courts_2: bool:     - courts_2_locale_en: bool:     - courts_file_path: str:     - courts_delete: bool:     - geoentities: bool:     - geoentities_1: bool:     - geoentities_1_locale_multi: bool:     - geoentities_file_path: str:     - geoentities_delete: bool:
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskLoadDictionariesPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskLoadDictionariesPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Load Documents\&quot; admin task  POST params:     - project: int     - source_data: str     - source_type: str     - document_type: str     - delete: bool     - run_standard_locators: bool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskLoadDocumentsGETTest() throws ApiException {
        Map<String, Object> response = api.taskLoadDocumentsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Load Documents\&quot; admin task  POST params:     - project: int     - source_data: str     - source_type: str     - document_type: str     - delete: bool     - run_standard_locators: bool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskLoadDocumentsPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskLoadDocumentsPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Locate\&quot; admin task  POST params:     - locate_all: bool     - geoentity_locate: bool     - geoentity_priority: bool     - geoentity_delete: bool     - date_locate: bool     - date_strict: bool     - date_delete: bool     - amount_locate: bool     - amount_delete: bool     - citation_locate: bool     - citation_delete: bool     - copyright_locate: bool     - copyright_delete: bool     - court_locate: bool     - court_delete: bool     - currency_locate: bool     - currency_delete: bool     - duration_locate: bool     - duration_delete: bool     - definition_locate: bool     - definition_delete: bool     - distance_locate: bool     - distance_delete: bool     - party_locate: bool     - party_delete: bool     - percent_locate: bool     - percent_delete: bool     - ratio_locate: bool     - ratio_delete: bool     - regulation_locate: bool     - regulation_delete: bool     - term_locate: bool     - term_delete: bool     - trademark_locate: bool     - trademark_delete: bool     - url_locate: bool     - url_delete: bool     - parse_choice_sentence: bool     - parse_choice_paragraph: bool     - project: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskLocateGETTest() throws ApiException {
        Map<String, Object> response = api.taskLocateGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Locate\&quot; admin task  POST params:     - locate_all: bool     - geoentity_locate: bool     - geoentity_priority: bool     - geoentity_delete: bool     - date_locate: bool     - date_strict: bool     - date_delete: bool     - amount_locate: bool     - amount_delete: bool     - citation_locate: bool     - citation_delete: bool     - copyright_locate: bool     - copyright_delete: bool     - court_locate: bool     - court_delete: bool     - currency_locate: bool     - currency_delete: bool     - duration_locate: bool     - duration_delete: bool     - definition_locate: bool     - definition_delete: bool     - distance_locate: bool     - distance_delete: bool     - party_locate: bool     - party_delete: bool     - percent_locate: bool     - percent_delete: bool     - ratio_locate: bool     - ratio_delete: bool     - regulation_locate: bool     - regulation_delete: bool     - term_locate: bool     - term_delete: bool     - trademark_locate: bool     - trademark_delete: bool     - url_locate: bool     - url_delete: bool     - parse_choice_sentence: bool     - parse_choice_paragraph: bool     - project: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskLocatePOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskLocatePOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Purge Task\&quot; admin task  POST params:     - task_pk: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskPurgeTaskPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskPurgeTaskPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Recall Task\&quot; admin task  POST params:     - task_pk: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskRecallTaskGETTest() throws ApiException {
        Map<String, Object> response = api.taskRecallTaskGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Recall Task\&quot; admin task  POST params:     - task_pk: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskRecallTaskPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskRecallTaskPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get task log records GET params:     - task_id: int     - records_limit: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskTaskLogGETTest() throws ApiException {
        String taskId = null;
        Integer recordsLimit = null;
        Map<String, Object> response = api.taskTaskLogGET(taskId, recordsLimit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Check admin task status  GET params:     - task_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskTaskStatusGETTest() throws ApiException {
        String taskId = null;
        Map<String, Object> response = api.taskTaskStatusGET(taskId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Task List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskTasksGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Task> response = api.taskTasksGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskTasksIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        Task response = api.taskTasksIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Update ElasticSearch Index\&quot; admin task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskUpdateElasticIndexGETTest() throws ApiException {
        Map<String, Object> response = api.taskUpdateElasticIndexGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Update ElasticSearch Index\&quot; admin task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskUpdateElasticIndexPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskUpdateElasticIndexPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Transfer file data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tusUploadSessionUploadSessionIdUploadGuidPATCHTest() throws ApiException {
        String uploadSessionId = null;
        String guid = null;
        Integer uploadOffset = null;
        String tusResumable = null;
        Boolean force = null;
        File body = null;
        InlineResponse400 response = api.tusUploadSessionUploadSessionIdUploadGuidPATCH(uploadSessionId, guid, uploadOffset, tusResumable, force, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create an Upload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tusUploadSessionUploadSessionIdUploadPOSTTest() throws ApiException {
        String uploadSessionId = null;
        Integer uploadLength = null;
        String uploadMetadata = null;
        String tusResumable = null;
        Boolean force = null;
        Object body = null;
        api.tusUploadSessionUploadSessionIdUploadPOST(uploadSessionId, uploadLength, uploadMetadata, tusResumable, force, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Role List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersRolesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Role> response = api.usersRolesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersRolesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        Role response = api.usersRolesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersRolesIdPATCHTest() throws ApiException {
        String id = null;
        Role role = null;
        Role response = api.usersRolesIdPATCH(id, role);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersRolesIdPUTTest() throws ApiException {
        String id = null;
        Role role = null;
        Role response = api.usersRolesIdPUT(id, role);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersRolesPOSTTest() throws ApiException {
        Role role = null;
        Role response = api.usersRolesPOST(role);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.usersUsersFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * User List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<User> response = api.usersUsersGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersIdFormFieldsGETTest() throws ApiException {
        String id = null;
        Map<String, Object> response = api.usersUsersIdFormFieldsGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        User response = api.usersUsersIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersIdPATCHTest() throws ApiException {
        String id = null;
        UserProfile userProfile = null;
        UserProfile response = api.usersUsersIdPATCH(id, userProfile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersIdPUTTest() throws ApiException {
        String id = null;
        UserProfile userProfile = null;
        UserProfile response = api.usersUsersIdPUT(id, userProfile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersPOSTTest() throws ApiException {
        UserProfile userProfile = null;
        UserProfile response = api.usersUsersPOST(userProfile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * User stats: projects, document types, tasks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUsersUserStatsGETTest() throws ApiException {
        List<UserStats> response = api.usersUsersUserStatsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get user data for provided auth_token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersVerifyTokenPOSTTest() throws ApiException {
        VerifyAuthTokenRequest verifyAuthTokenRequest = null;
        VerifyAuthTokenResponse response = api.usersVerifyTokenPOST(verifyAuthTokenRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void varGETTest() throws ApiException {
        String var = null;
        Object response = api.varGET(var);

        // TODO: test validations
    }
    
}
