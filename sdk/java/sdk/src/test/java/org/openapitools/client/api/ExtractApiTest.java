/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AmountUsage;
import org.openapitools.client.model.CitationUsage;
import org.openapitools.client.model.CopyrightUsage;
import org.openapitools.client.model.CourtUsage;
import org.openapitools.client.model.CurrencyUsage;
import org.openapitools.client.model.DateDurationUsage;
import org.openapitools.client.model.DateUsage;
import org.openapitools.client.model.DateUsageCalendar;
import org.openapitools.client.model.DateUsageTimeline;
import org.openapitools.client.model.DefinitionUsage;
import org.openapitools.client.model.DistanceUsage;
import org.openapitools.client.model.GeoAliasUsage;
import org.openapitools.client.model.GeoEntityList;
import org.openapitools.client.model.GeoEntityUpdate;
import org.openapitools.client.model.GeoEntityUsage;
import org.openapitools.client.model.Party;
import org.openapitools.client.model.PartyUsage;
import org.openapitools.client.model.PercentUsage;
import org.openapitools.client.model.RatioUsage;
import org.openapitools.client.model.RegulationUsage;
import org.openapitools.client.model.TermUsage;
import org.openapitools.client.model.TrademarkUsage;
import org.openapitools.client.model.Typeahead;
import org.openapitools.client.model.UrlUsage;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExtractApi
 */
@Ignore
public class ExtractApiTest {

    private final ExtractApi api = new ExtractApi();

    
    /**
     * 
     *
     * Amount Usage List  GET params:   - document_id: int   - text_unit_id: int   - amount_search: float   - amount_str: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractAmountUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<AmountUsage> response = api.extractAmountUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Amount Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractAmountUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractAmountUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Citation Usage List  GET params:   - document_id: int   - text_unit_id: int   - citation_str: str   - citation_str_contains: str   - year_str: str   - reporter: str   - court: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCitationUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<CitationUsage> response = api.extractCitationUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Citation Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCitationUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractCitationUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Copyright Usage List  GET params:   - document_id: int   - text_unit_id: int   - copyright: str   - copyright_contains: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCopyrightUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<CopyrightUsage> response = api.extractCopyrightUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Copyright Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCopyrightUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractCopyrightUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Court Usage List  GET params:   - document_id: int   - text_unit_id: int   - court_name: str   - court_alias: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCourtUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<CourtUsage> response = api.extractCourtUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Court Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCourtUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractCourtUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Currency Usage List  GET params:   - document_id: int   - amount_search: str   - currency: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCurrencyUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<CurrencyUsage> response = api.extractCurrencyUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Currency Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractCurrencyUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractCurrencyUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Date Duration Usage List  GET params:   - document_id: int   - text_unit_id: int   - duration_days_str: str/float
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateDurationUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DateDurationUsage> response = api.extractDateDurationUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Date Duration Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateDurationUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractDateDurationUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Date Usage Calendar Chart  GET params:     - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateUsageCalendarChartGETTest() throws ApiException {
        List<DateUsageCalendar> response = api.extractDateUsageCalendarChartGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Date Usage List  GET params:   - document_id: int   - date_search: str   - month_search: str (&#39;%Y-%m-%d&#39;)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DateUsage> response = api.extractDateUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Date Usage Timeline Chart  GET params:     - document_id: int     - per_month: bool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateUsageTimelineChartGETTest() throws ApiException {
        List<DateUsageTimeline> response = api.extractDateUsageTimelineChartGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Load Date Usage as iCal  GET params:     - document_id: int (required)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateUsageToIcalGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DateUsage> response = api.extractDateUsageToIcalGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Date Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDateUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractDateUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Definition Usage List  GET params:   - document_id: int   - definition: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDefinitionUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DefinitionUsage> response = api.extractDefinitionUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Definition Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDefinitionUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractDefinitionUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Distance Usage List  GET params:   - document_id: int   - distance_type: str   - amount_search: float
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDistanceUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DistanceUsage> response = api.extractDistanceUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Distance Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractDistanceUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractDistanceUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Geo Alias Usage List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoAliasUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<GeoAliasUsage> response = api.extractGeoAliasUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Geo Alias Usage List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoAliasUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractGeoAliasUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Geo Entity List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoEntitiesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<GeoEntityList> response = api.extractGeoEntitiesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Geo Entity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoEntitiesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        GeoEntityList response = api.extractGeoEntitiesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Geo Entity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoEntitiesIdPUTTest() throws ApiException {
        String id = null;
        GeoEntityUpdate geoEntityUpdate = null;
        GeoEntityUpdate response = api.extractGeoEntitiesIdPUT(id, geoEntityUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Geo Entity Usage List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoEntityUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<GeoEntityUsage> response = api.extractGeoEntityUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Geo Entity Usage List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractGeoEntityUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractGeoEntityUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Party List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPartiesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Party> response = api.extractPartiesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Party
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPartiesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        Party response = api.extractPartiesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Party Network Chart  GET params:     - party_name_iexact: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPartyNetworkChartGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<PartyUsage> response = api.extractPartyNetworkChartGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Party Usage List  GET params:   - document_id: int   - text_unit_id: int   - party_search: str   - party_search_iexact: str   - role: str   - role_contains: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPartyUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<PartyUsage> response = api.extractPartyUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Party Usage List  GET params:   - document_id: int   - party_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPartyUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractPartyUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Percent Usage List  GET params:   - document_id: int   - unit_type: str   - amount_search: float
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPercentUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<PercentUsage> response = api.extractPercentUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Percent Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractPercentUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractPercentUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Ratio Usage List  GET params:   - document_id: int   - text_unit_id: int   - amount_search: float   - amount_search2: float
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractRatioUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<RatioUsage> response = api.extractRatioUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Ratio Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractRatioUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractRatioUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Regulation Usage List  GET params:   - document_id: int   - text_unit_id: int   - regulation_type: str   - regulation_name: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractRegulationUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<RegulationUsage> response = api.extractRegulationUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Regulation Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractRegulationUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractRegulationUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Term Usage List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTermUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TermUsage> response = api.extractTermUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Term Usage List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTermUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractTermUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Trademark Usage List  GET params:   - document_id: int   - text_unit_id: int   - trademark: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTrademarkUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TrademarkUsage> response = api.extractTrademarkUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Trademark Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTrademarkUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractTrademarkUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Typeahead Geo Entity Usage      Kwargs: field_name: [entity__name]     GET params:       - q: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTypeaheadGeoEntityUsageFieldNameGETTest() throws ApiException {
        String fieldName = null;
        Typeahead response = api.extractTypeaheadGeoEntityUsageFieldNameGET(fieldName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Typeahead Party Usage      Kwargs: field_name: [party__name]     GET params:       - q: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTypeaheadPartyUsageFieldNameGETTest() throws ApiException {
        String fieldName = null;
        Typeahead response = api.extractTypeaheadPartyUsageFieldNameGET(fieldName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Typeahead Term Usage      Kwargs: field_name: [term__term]     GET params:       - q: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractTypeaheadTermUsageFieldNameGETTest() throws ApiException {
        String fieldName = null;
        Typeahead response = api.extractTypeaheadTermUsageFieldNameGET(fieldName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Url Usage List  GET params:   - document_id: int   - text_unit_id: int   - source_url: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractUrlUsageGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<UrlUsage> response = api.extractUrlUsageGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Top Url Usage List  GET params:   - document_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractUrlUsageTopGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Object> response = api.extractUrlUsageTopGET(jqFilters);

        // TODO: test validations
    }
    
}
