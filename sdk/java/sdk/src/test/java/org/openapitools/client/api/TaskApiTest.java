/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProjectActiveTasks;
import org.openapitools.client.model.ProjectTasks;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskLogResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskApi
 */
@Ignore
public class TaskApiTest {

    private final TaskApi api = new TaskApi();

    
    /**
     * 
     *
     * \&quot;Clean Tasks\&quot; admin task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskCleanTasksPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskCleanTasksPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Load Dictionaries\&quot; admin task  POST params:     - terms_accounting: bool:     - terms_accounting_1: bool:     - terms_accounting_1_locale_en: bool:     - terms_accounting_2: bool:     - terms_accounting_2_locale_en: bool:     - terms_accounting_3: bool:     - terms_accounting_3_locale_en: bool:     - terms_accounting_4: bool:     - terms_accounting_4_locale_en: bool:     - terms_accounting_5: bool:     - terms_accounting_5_locale_en: bool:     - terms_scientific: bool:     - terms_scientific_1: bool:     - terms_scientific1_locale_en: bool:     - terms_financial: bool:     - terms_financial_1: bool:     - terms_financial_1_locale_en: bool:     - terms_legal: bool:     - terms_legal_1: bool:     - terms_legal_1_locale_en: bool:     - terms_legal_2: bool:     - terms_legal_2_locale_en: bool:     - terms_legal_3: bool:     - terms_legal_3_locale_en: bool:     - terms_legal_4: bool:     - terms_legal_4_locale_en: bool:     - terms_file_path: str:     - terms_delete: bool:     - courts: bool:     - courts_1: bool:     - courts_1_locale_en: bool:     - courts_2: bool:     - courts_2_locale_en: bool:     - courts_file_path: str:     - courts_delete: bool:     - geoentities: bool:     - geoentities_1: bool:     - geoentities_1_locale_multi: bool:     - geoentities_file_path: str:     - geoentities_delete: bool:
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskLoadDictionariesPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskLoadDictionariesPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Load Documents\&quot; admin task  POST params:     - project: int     - source_data: str     - source_type: str     - document_type: str     - delete: bool     - run_standard_locators: bool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskLoadDocumentsGETTest() throws ApiException {
        Map<String, Object> response = api.taskLoadDocumentsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Load Documents\&quot; admin task  POST params:     - project: int     - source_data: str     - source_type: str     - document_type: str     - delete: bool     - run_standard_locators: bool
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskLoadDocumentsPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskLoadDocumentsPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Locate\&quot; admin task  POST params:     - locate_all: bool     - geoentity_locate: bool     - geoentity_priority: bool     - geoentity_delete: bool     - date_locate: bool     - date_strict: bool     - date_delete: bool     - amount_locate: bool     - amount_delete: bool     - citation_locate: bool     - citation_delete: bool     - copyright_locate: bool     - copyright_delete: bool     - court_locate: bool     - court_delete: bool     - currency_locate: bool     - currency_delete: bool     - duration_locate: bool     - duration_delete: bool     - definition_locate: bool     - definition_delete: bool     - distance_locate: bool     - distance_delete: bool     - party_locate: bool     - party_delete: bool     - percent_locate: bool     - percent_delete: bool     - ratio_locate: bool     - ratio_delete: bool     - regulation_locate: bool     - regulation_delete: bool     - term_locate: bool     - term_delete: bool     - trademark_locate: bool     - trademark_delete: bool     - url_locate: bool     - url_delete: bool     - parse_choice_sentence: bool     - parse_choice_paragraph: bool     - project: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskLocateGETTest() throws ApiException {
        Map<String, Object> response = api.taskLocateGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Locate\&quot; admin task  POST params:     - locate_all: bool     - geoentity_locate: bool     - geoentity_priority: bool     - geoentity_delete: bool     - date_locate: bool     - date_strict: bool     - date_delete: bool     - amount_locate: bool     - amount_delete: bool     - citation_locate: bool     - citation_delete: bool     - copyright_locate: bool     - copyright_delete: bool     - court_locate: bool     - court_delete: bool     - currency_locate: bool     - currency_delete: bool     - duration_locate: bool     - duration_delete: bool     - definition_locate: bool     - definition_delete: bool     - distance_locate: bool     - distance_delete: bool     - party_locate: bool     - party_delete: bool     - percent_locate: bool     - percent_delete: bool     - ratio_locate: bool     - ratio_delete: bool     - regulation_locate: bool     - regulation_delete: bool     - term_locate: bool     - term_delete: bool     - trademark_locate: bool     - trademark_delete: bool     - url_locate: bool     - url_delete: bool     - parse_choice_sentence: bool     - parse_choice_paragraph: bool     - project: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskLocatePOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskLocatePOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskProcessTextExtractionResultsRequestIdPOSTTest() throws ApiException {
        String requestId = null;
        Map<String, Object> requestBody = null;
        Object response = api.taskProcessTextExtractionResultsRequestIdPOST(requestId, requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Purge Task\&quot; admin task  POST params:     - task_pk: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskPurgeTaskPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskPurgeTaskPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Recall Task\&quot; admin task  POST params:     - task_pk: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskRecallTaskGETTest() throws ApiException {
        Map<String, Object> response = api.taskRecallTaskGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Recall Task\&quot; admin task  POST params:     - task_pk: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskRecallTaskPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskRecallTaskPOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskReindexroutinesCheckSchedulePOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Object response = api.taskReindexroutinesCheckSchedulePOST(requestBody);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get task log records GET params:     - task_id: int     - records_limit: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskTaskLogGETTest() throws ApiException {
        String taskId = null;
        Integer recordsLimit = null;
        Map<String, String> jqFilters = null;
        List<TaskLogResponse> response = api.taskTaskLogGET(taskId, recordsLimit, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Check admin task status  GET params:     - task_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskTaskStatusGETTest() throws ApiException {
        String taskId = null;
        Map<String, Object> response = api.taskTaskStatusGET(taskId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Task List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskTasksGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Task> response = api.taskTasksGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskTasksIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        Task response = api.taskTasksIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskTasksProjectProjectIdActiveTasksGETTest() throws ApiException {
        String projectId = null;
        Map<String, String> jqFilters = null;
        List<ProjectActiveTasks> response = api.taskTasksProjectProjectIdActiveTasksGET(projectId, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskTasksProjectProjectIdTasksGETTest() throws ApiException {
        String projectId = null;
        Map<String, String> jqFilters = null;
        List<ProjectTasks> response = api.taskTasksProjectProjectIdTasksGET(projectId, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Update ElasticSearch Index\&quot; admin task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskUpdateElasticIndexGETTest() throws ApiException {
        Map<String, Object> response = api.taskUpdateElasticIndexGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * \&quot;Update ElasticSearch Index\&quot; admin task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void taskUpdateElasticIndexPOSTTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Map<String, Object> response = api.taskUpdateElasticIndexPOST(requestBody);

        // TODO: test validations
    }
    
}
