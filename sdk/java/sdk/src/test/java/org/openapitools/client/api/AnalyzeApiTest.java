/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DocumentCluster;
import org.openapitools.client.model.DocumentClusterUpdate;
import org.openapitools.client.model.DocumentSimilarity;
import org.openapitools.client.model.MLModel;
import org.openapitools.client.model.PartySimilarity;
import org.openapitools.client.model.ProjectDocumentSimilarity;
import org.openapitools.client.model.ProjectTextUnitSimilarity;
import org.openapitools.client.model.SimilarProjectTextUnitsRequest;
import org.openapitools.client.model.SimilarityRun;
import org.openapitools.client.model.TextUnitClassification;
import org.openapitools.client.model.TextUnitClassificationCreate;
import org.openapitools.client.model.TextUnitClassifier;
import org.openapitools.client.model.TextUnitClassifierSuggestion;
import org.openapitools.client.model.TextUnitCluster;
import org.openapitools.client.model.TextUnitSimilarity;
import org.openapitools.client.model.Transformer;
import org.openapitools.client.model.Typeahead;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalyzeApi
 */
@Ignore
public class AnalyzeApiTest {

    private final AnalyzeApi api = new AnalyzeApi();

    
    /**
     * 
     *
     * Document Cluster List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeDocumentClusterGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentCluster> response = api.analyzeDocumentClusterGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Document Cluster
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeDocumentClusterIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        DocumentCluster response = api.analyzeDocumentClusterIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Document Cluster (name)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeDocumentClusterIdPATCHTest() throws ApiException {
        String id = null;
        DocumentClusterUpdate documentClusterUpdate = null;
        DocumentClusterUpdate response = api.analyzeDocumentClusterIdPATCH(id, documentClusterUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Document Cluster (name)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeDocumentClusterIdPUTTest() throws ApiException {
        String id = null;
        DocumentClusterUpdate documentClusterUpdate = null;
        DocumentClusterUpdate response = api.analyzeDocumentClusterIdPUT(id, documentClusterUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Base Document Similarity List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeDocumentSimilarityListGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<DocumentSimilarity> response = api.analyzeDocumentSimilarityListGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * MLModel List - document transformers only
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeDocumentTransformerListGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Transformer> response = api.analyzeDocumentTransformerListGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * MLModel List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeMlModelListGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<MLModel> response = api.analyzeMlModelListGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Party Similarity List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzePartySimilarityListGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<PartySimilarity> response = api.analyzePartySimilarityListGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Project Document Similarity List for ONE document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeProjectDocumentSimilarityListGETTest() throws ApiException {
        Integer textMaxLength = null;
        Integer runId = null;
        Integer documentId = null;
        Map<String, String> jqFilters = null;
        List<ProjectDocumentSimilarity> response = api.analyzeProjectDocumentSimilarityListGET(textMaxLength, runId, documentId, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Project Text Unit Similarity List for ONE text unit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeProjectTextUnitSimilarityListGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        Integer textMaxLength = null;
        Integer runId = null;
        Boolean lastRun = null;
        Integer textUnitId = null;
        Integer documentId = null;
        Integer locationStart = null;
        Integer locationEnd = null;
        List<Object> selection = null;
        List<ProjectTextUnitSimilarity> response = api.analyzeProjectTextUnitSimilarityListGET(jqFilters, textMaxLength, runId, lastRun, textUnitId, documentId, locationStart, locationEnd, selection);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Project Text Unit Similarity List for ONE text unit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeProjectTextUnitSimilarityListPOSTTest() throws ApiException {
        SimilarProjectTextUnitsRequest similarProjectTextUnitsRequest = null;
        ProjectTextUnitSimilarity response = api.analyzeProjectTextUnitSimilarityListPOST(similarProjectTextUnitsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list Similarity Run objects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeSimilarityRunsGETTest() throws ApiException {
        String unitSource = null;
        Integer projectId = null;
        Map<String, String> jqFilters = null;
        List<SimilarityRun> response = api.analyzeSimilarityRunsGET(unitSource, projectId, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete Similarity Run object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeSimilarityRunsIdDELETETest() throws ApiException {
        String id = null;
        String unitSource = null;
        Integer projectId = null;
        api.analyzeSimilarityRunsIdDELETE(id, unitSource, projectId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get Similarity Run object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeSimilarityRunsIdGETTest() throws ApiException {
        String id = null;
        String unitSource = null;
        Integer projectId = null;
        Map<String, String> jqFilters = null;
        SimilarityRun response = api.analyzeSimilarityRunsIdGET(id, unitSource, projectId, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Text Unit Classification List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassificationsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TextUnitClassification> response = api.analyzeTextUnitClassificationsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Text Unit Classification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassificationsIdDELETETest() throws ApiException {
        String id = null;
        api.analyzeTextUnitClassificationsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Text Unit Classification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassificationsIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        TextUnitClassification response = api.analyzeTextUnitClassificationsIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Text Unit Classification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassificationsPOSTTest() throws ApiException {
        TextUnitClassificationCreate textUnitClassificationCreate = null;
        TextUnitClassificationCreate response = api.analyzeTextUnitClassificationsPOST(textUnitClassificationCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Text Unit Classifier Suggestion List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassifierSuggestionsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TextUnitClassifierSuggestion> response = api.analyzeTextUnitClassifierSuggestionsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Text Unit Classifier Suggestion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassifierSuggestionsIdDELETETest() throws ApiException {
        String id = null;
        api.analyzeTextUnitClassifierSuggestionsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassifierSuggestionsIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        TextUnitClassifierSuggestion response = api.analyzeTextUnitClassifierSuggestionsIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Text Unit Classifier List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassifiersGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TextUnitClassifier> response = api.analyzeTextUnitClassifiersGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Text Unit Classifier
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassifiersIdDELETETest() throws ApiException {
        String id = null;
        api.analyzeTextUnitClassifiersIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClassifiersIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        TextUnitClassifier response = api.analyzeTextUnitClassifiersIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Text Unit Cluster List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitClusterListGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TextUnitCluster> response = api.analyzeTextUnitClusterListGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Base Text Unit Similarity List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitSimilarityListGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TextUnitSimilarity> response = api.analyzeTextUnitSimilarityListGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * MLModel List - text unit transformers only
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTextUnitTransformerListGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<Transformer> response = api.analyzeTextUnitTransformerListGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Typeahead TextUnitClassification      Kwargs: field_name: [class_name, class_value]     GET params:       - q: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeTypeaheadTextUnitClassificationFieldNameGETTest() throws ApiException {
        String fieldName = null;
        String q = null;
        Typeahead response = api.analyzeTypeaheadTextUnitClassificationFieldNameGET(fieldName, q);

        // TODO: test validations
    }
    
}
