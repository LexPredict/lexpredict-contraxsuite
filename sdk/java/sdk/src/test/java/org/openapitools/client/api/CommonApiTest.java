/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.AppVar;
import org.openapitools.client.model.MenuGroup;
import org.openapitools.client.model.MenuItem;
import org.openapitools.client.model.ProjectAppVar;
import org.openapitools.client.model.ReviewStatus;
import org.openapitools.client.model.ReviewStatusDetail;
import org.openapitools.client.model.ReviewStatusGroup;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommonApi
 */
@Ignore
public class CommonApiTest {

    private final CommonApi api = new CommonApi();

    
    /**
     * 
     *
     * Action List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonActionsGETTest() throws ApiException {
        Integer projectId = null;
        Integer documentId = null;
        List<String> viewActions = null;
        Map<String, String> jqFilters = null;
        List<List<Action>> response = api.commonActionsGET(projectId, documentId, viewActions, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Action
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonActionsIdGETTest() throws ApiException {
        String id = null;
        Integer projectId = null;
        Integer documentId = null;
        List<String> viewActions = null;
        Map<String, String> jqFilters = null;
        List<Action> response = api.commonActionsIdGET(id, projectId, documentId, viewActions, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve App Variable(s)      Params:         - name: str - retrieve specific variable
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonAppVariablesGETTest() throws ApiException {
        String name = null;
        Map<String, Object> response = api.commonAppVariablesGET(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonAppVariablesListGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<AppVar> response = api.commonAppVariablesListGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Based on custom AppVar model storage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonAppVariablesProjectProjectIdGETTest() throws ApiException {
        String projectId = null;
        List<ProjectAppVar> response = api.commonAppVariablesProjectProjectIdGET(projectId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Based on custom AppVar model storage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonAppVariablesProjectProjectIdPUTTest() throws ApiException {
        String projectId = null;
        List<ProjectAppVar> projectAppVar = null;
        String response = api.commonAppVariablesProjectProjectIdPUT(projectId, projectAppVar);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * If directory:   action: None: - list directory   action: download - list directory (TODO - download directory)   action: info: - dict(info about directory) If file:   action: None: - show file   action: download - download file   action: info: - dict(info about directory)  :param request: :param path: str - relative path in /media directory  :query param action: optional str [\&quot;download\&quot;, \&quot;info\&quot;] :return:
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMediaPathGETTest() throws ApiException {
        String path = null;
        String action = null;
        Map<String, Object> response = api.commonMediaPathGET(path, action);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.commonMenuGroupsFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * MenuGroup List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsGETTest() throws ApiException {
        List<MenuGroup> response = api.commonMenuGroupsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete MenuGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsIdDELETETest() throws ApiException {
        String id = null;
        api.commonMenuGroupsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsIdFormFieldsGETTest() throws ApiException {
        String id = null;
        Map<String, Object> response = api.commonMenuGroupsIdFormFieldsGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve MenuGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsIdGETTest() throws ApiException {
        String id = null;
        MenuGroup response = api.commonMenuGroupsIdGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update MenuGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsIdPATCHTest() throws ApiException {
        String id = null;
        MenuGroup menuGroup = null;
        MenuGroup response = api.commonMenuGroupsIdPATCH(id, menuGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update MenuGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsIdPUTTest() throws ApiException {
        String id = null;
        MenuGroup menuGroup = null;
        MenuGroup response = api.commonMenuGroupsIdPUT(id, menuGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create MenuGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuGroupsPOSTTest() throws ApiException {
        MenuGroup menuGroup = null;
        MenuGroup response = api.commonMenuGroupsPOST(menuGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsFormFieldsGETTest() throws ApiException {
        Map<String, Object> response = api.commonMenuItemsFormFieldsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * MenuItem List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsGETTest() throws ApiException {
        List<MenuItem> response = api.commonMenuItemsGET();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete MenuItem
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsIdDELETETest() throws ApiException {
        String id = null;
        api.commonMenuItemsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsIdFormFieldsGETTest() throws ApiException {
        String id = null;
        Map<String, Object> response = api.commonMenuItemsIdFormFieldsGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve MenuItem
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsIdGETTest() throws ApiException {
        String id = null;
        MenuItem response = api.commonMenuItemsIdGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update MenuItem
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsIdPATCHTest() throws ApiException {
        String id = null;
        MenuItem menuItem = null;
        MenuItem response = api.commonMenuItemsIdPATCH(id, menuItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update MenuItem
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsIdPUTTest() throws ApiException {
        String id = null;
        MenuItem menuItem = null;
        MenuItem response = api.commonMenuItemsIdPUT(id, menuItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create MenuItem
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonMenuItemsPOSTTest() throws ApiException {
        MenuItem menuItem = null;
        MenuItem response = api.commonMenuItemsPOST(menuItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * ReviewStatusGroup List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusGroupsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<ReviewStatusGroup> response = api.commonReviewStatusGroupsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete ReviewStatusGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusGroupsIdDELETETest() throws ApiException {
        String id = null;
        api.commonReviewStatusGroupsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve ReviewStatusGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusGroupsIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        ReviewStatusGroup response = api.commonReviewStatusGroupsIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update ReviewStatusGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusGroupsIdPATCHTest() throws ApiException {
        String id = null;
        ReviewStatusGroup reviewStatusGroup = null;
        ReviewStatusGroup response = api.commonReviewStatusGroupsIdPATCH(id, reviewStatusGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update ReviewStatusGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusGroupsIdPUTTest() throws ApiException {
        String id = null;
        ReviewStatusGroup reviewStatusGroup = null;
        ReviewStatusGroup response = api.commonReviewStatusGroupsIdPUT(id, reviewStatusGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create ReviewStatusGroup
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusGroupsPOSTTest() throws ApiException {
        ReviewStatusGroup reviewStatusGroup = null;
        ReviewStatusGroup response = api.commonReviewStatusGroupsPOST(reviewStatusGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * ReviewStatus List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<ReviewStatusDetail> response = api.commonReviewStatusesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete ReviewStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusesIdDELETETest() throws ApiException {
        String id = null;
        api.commonReviewStatusesIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve ReviewStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        ReviewStatusDetail response = api.commonReviewStatusesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update ReviewStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusesIdPATCHTest() throws ApiException {
        String id = null;
        ReviewStatus reviewStatus = null;
        ReviewStatus response = api.commonReviewStatusesIdPATCH(id, reviewStatus);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update ReviewStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusesIdPUTTest() throws ApiException {
        String id = null;
        ReviewStatus reviewStatus = null;
        ReviewStatus response = api.commonReviewStatusesIdPUT(id, reviewStatus);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create ReviewStatus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commonReviewStatusesPOSTTest() throws ApiException {
        ReviewStatus reviewStatus = null;
        ReviewStatus response = api.commonReviewStatusesPOST(reviewStatus);

        // TODO: test validations
    }
    
}
