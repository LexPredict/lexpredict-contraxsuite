/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssignProjectAnnotationsRequest;
import org.openapitools.client.model.AssignProjectDocumentRequest;
import org.openapitools.client.model.AssignProjectDocumentsRequest;
import org.openapitools.client.model.CleanupProjectRequest;
import org.openapitools.client.model.ClusterProjectRequest;
import org.openapitools.client.model.ClusterProjectResponse;
import org.openapitools.client.model.CountSuccessResponse;
import org.openapitools.client.model.DetectProjectFieldValuesRequest;
import java.io.File;
import org.openapitools.client.model.InlineResponse404;
import org.openapitools.client.model.MakeSearchablePDFRequest;
import org.openapitools.client.model.MarkUnmarkForDeleteProjectsReponse;
import org.openapitools.client.model.MarkUnmarkForDeleteProjectsRequest;
import org.openapitools.client.model.OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse;
import org.openapitools.client.model.ProjectAnnotationsAssigneesResponse;
import org.openapitools.client.model.ProjectClustering;
import org.openapitools.client.model.ProjectClusteringStatusResponse;
import org.openapitools.client.model.ProjectCreate;
import org.openapitools.client.model.ProjectDetail;
import org.openapitools.client.model.ProjectDocumentsAssigneesResponse;
import org.openapitools.client.model.ProjectList;
import org.openapitools.client.model.ProjectProgressResponse;
import org.openapitools.client.model.ProjectStats;
import org.openapitools.client.model.ProjectUpdate;
import org.openapitools.client.model.ProjectUploadSessionFilesResponse;
import org.openapitools.client.model.ProjectUploadSessionPOSTResponse;
import org.openapitools.client.model.ProjectUploadSessionProgressResponse;
import org.openapitools.client.model.SelectProjectsRequest;
import org.openapitools.client.model.SelectProjectsResponse;
import org.openapitools.client.model.SendClusterToProjectRequest;
import org.openapitools.client.model.SetProjectAnnotationsStatusRequest;
import org.openapitools.client.model.SetProjectDocumentsStatusRequest;
import org.openapitools.client.model.TaskIdResponse;
import org.openapitools.client.model.TaskQueue;
import org.openapitools.client.model.UploadSession;
import org.openapitools.client.model.UploadSessionBatchUploadRequest;
import org.openapitools.client.model.UploadSessionDeleteFileRequest;
import org.openapitools.client.model.UploadSessionDetail;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectApi
 */
@Ignore
public class ProjectApiTest {

    private final ProjectApi api = new ProjectApi();

    
    /**
     * 
     *
     * ProjectCluster List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectClusteringGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<ProjectClustering> response = api.projectProjectClusteringGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * ProjectCluster Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectClusteringIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        ProjectClustering response = api.projectProjectClusteringIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Project List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<ProjectList> response = api.projectProjectsGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get assignees data for FieldAnnotations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdAnnotationsAssigneesGETTest() throws ApiException {
        String id = null;
        List<ProjectAnnotationsAssigneesResponse> response = api.projectProjectsIdAnnotationsAssigneesGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Bulk assign batch of annotations to a review team member      Params:         annotation_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned annotations)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdAssignAnnotationsPOSTTest() throws ApiException {
        String id = null;
        AssignProjectAnnotationsRequest assignProjectAnnotationsRequest = null;
        CountSuccessResponse response = api.projectProjectsIdAssignAnnotationsPOST(id, assignProjectAnnotationsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Bulk assign batch of documents to a review team member      Params:         document_id: int         assignee_id: int     Returns:         bool (number of reassigned documents)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdAssignDocumentPOSTTest() throws ApiException {
        String id = null;
        AssignProjectDocumentRequest assignProjectDocumentRequest = null;
        CountSuccessResponse response = api.projectProjectsIdAssignDocumentPOST(id, assignProjectDocumentRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Bulk assign batch of documents to a review team member      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned documents)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdAssignDocumentsPOSTTest() throws ApiException {
        String id = null;
        AssignProjectDocumentsRequest assignProjectDocumentsRequest = null;
        CountSuccessResponse response = api.projectProjectsIdAssignDocumentsPOST(id, assignProjectDocumentsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get assignees data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdAssigneesGETTest() throws ApiException {
        String id = null;
        List<ProjectDocumentsAssigneesResponse> response = api.projectProjectsIdAssigneesGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clean project (Generic Contract Type project)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdCleanupPOSTTest() throws ApiException {
        String id = null;
        CleanupProjectRequest cleanupProjectRequest = null;
        String response = api.projectProjectsIdCleanupPOST(id, cleanupProjectRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cluster Project Documents      Params:         - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]         - cluster_by: str[term, date, text, definition, duration, party,                           geoentity, currency_name, currency_value]         - n_clusters: int         - force: bool (optional) - force clustering if uncompleted tasks exist
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdClusterPOSTTest() throws ApiException {
        String id = null;
        ClusterProjectRequest clusterProjectRequest = null;
        ClusterProjectResponse response = api.projectProjectsIdClusterPOST(id, clusterProjectRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Last Clustering task status/data      Params:         - project_clustering_id: int (optional) - return last if not provided
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdClusteringStatusGETTest() throws ApiException {
        String id = null;
        Integer projectClusteringId = null;
        ProjectClusteringStatusResponse response = api.projectProjectsIdClusteringStatusGET(id, projectClusteringId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdDELETETest() throws ApiException {
        String id = null;
        api.projectProjectsIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdDetectFieldValuesPOSTTest() throws ApiException {
        String id = null;
        DetectProjectFieldValuesRequest detectProjectFieldValuesRequest = null;
        TaskIdResponse response = api.projectProjectsIdDetectFieldValuesPOST(id, detectProjectFieldValuesRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        ProjectDetail response = api.projectProjectsIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdMakeSearchablePdfPOSTTest() throws ApiException {
        String id = null;
        MakeSearchablePDFRequest makeSearchablePDFRequest = null;
        TaskIdResponse response = api.projectProjectsIdMakeSearchablePdfPOST(id, makeSearchablePDFRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Method marks the whole project (remove_all&#x3D;True) / the project&#39;s documents (remove_all&#x3D;False) for deleting. These marked documents (and the project) will become hidden in API. Documents, listed in excluded_ids list, will not be marked for deleting.      Params:         - all: bool - mark all filtered by a user documents         - remove_all: bool - mark project+documents         - exclude_document_ids: list[int]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdMarkDeletePOSTTest() throws ApiException {
        String id = null;
        MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = null;
        MarkUnmarkForDeleteProjectsReponse response = api.projectProjectsIdMarkDeletePOST(id, markUnmarkForDeleteProjectsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdPATCHTest() throws ApiException {
        String id = null;
        ProjectUpdate projectUpdate = null;
        ProjectUpdate response = api.projectProjectsIdPATCH(id, projectUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdPUTTest() throws ApiException {
        String id = null;
        ProjectUpdate projectUpdate = null;
        ProjectUpdate response = api.projectProjectsIdPUT(id, projectUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get current progress of all project sessions / clusterings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdProgressGETTest() throws ApiException {
        String id = null;
        ProjectProgressResponse response = api.projectProjectsIdProgressGET(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Send clusters to another Project      Params:         - cluster_ids: list[int]         - project_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdSendClustersToProjectPOSTTest() throws ApiException {
        String id = null;
        SendClusterToProjectRequest sendClusterToProjectRequest = null;
        String response = api.projectProjectsIdSendClustersToProjectPOST(id, sendClusterToProjectRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Bulk set status for batch of annotations      Params:         document_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         status_id: int - field annotation status id         run_mode: str - &#39;sync&#39;, &#39;background&#39;, &#39;smart&#39;     Returns:         int (number of reassigned annotations)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdSetAnnotationStatusPOSTTest() throws ApiException {
        String id = null;
        SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest = null;
        OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse response = api.projectProjectsIdSetAnnotationStatusPOST(id, setProjectAnnotationsStatusRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Bulk set status for batch of documents      Params:         document_ids: list[int]         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         all: any value - update all documents if any value         status_id: int     Returns:         int (number of reassigned documents)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdSetStatusPOSTTest() throws ApiException {
        String id = null;
        SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest = null;
        CountSuccessResponse response = api.projectProjectsIdSetStatusPOST(id, setProjectDocumentsStatusRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Method removes soft delete sign from project only (remove_all&#x3D;False) or from the project and the project&#39;s documents (remove_all&#x3D;True)     Body params:         - all: bool - unmark all filtered by a user documents         - remove_all: bool - unmark project+documents         - exclude_document_ids: List[int]
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsIdUnmarkDeletePOSTTest() throws ApiException {
        String id = null;
        MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest = null;
        MarkUnmarkForDeleteProjectsReponse response = api.projectProjectsIdUnmarkDeletePOST(id, markUnmarkForDeleteProjectsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsPOSTTest() throws ApiException {
        ProjectCreate projectCreate = null;
        ProjectCreate response = api.projectProjectsPOST(projectCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get project stats across all projects see related code in get_queryset() and serializer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsProjectStatsGETTest() throws ApiException {
        String projectIds = null;
        List<ProjectStats> response = api.projectProjectsProjectStatsGET(projectIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get recent N projects      Params:         n: int - default is 5
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsRecentGETTest() throws ApiException {
        Integer n = null;
        List<Map<String, Object>> response = api.projectProjectsRecentGET(n);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Select projects for review in Explorer UI
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectProjectsSelectProjectsPOSTTest() throws ApiException {
        SelectProjectsRequest selectProjectsRequest = null;
        SelectProjectsResponse response = api.projectProjectsSelectProjectsPOST(selectProjectsRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Task Queue List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTaskQueuesGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<TaskQueue> response = api.projectTaskQueuesGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Task Queue
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTaskQueuesIdDELETETest() throws ApiException {
        String id = null;
        api.projectTaskQueuesIdDELETE(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Task Queue
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTaskQueuesIdGETTest() throws ApiException {
        String id = null;
        Map<String, String> jqFilters = null;
        TaskQueue response = api.projectTaskQueuesIdGET(id, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update Task Queue
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTaskQueuesIdPATCHTest() throws ApiException {
        String id = null;
        TaskQueue taskQueue = null;
        TaskQueue response = api.projectTaskQueuesIdPATCH(id, taskQueue);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update Task Queue      PUT params:         - pk: int         - description: str         - documents: list[int]         - completed_documents: list[int]         - reviewers: list[int]     Optional params for add/remove document from/to a TaskQueue:         - add_document: int         - remove_document: int     Optional params for complete/reopen document in a TaskQueue:         - complete_document: int         - open_document: int     Optional param to add documents from DocumentCluster:         - add_documents_from_cluster: int (cluster id)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTaskQueuesIdPUTTest() throws ApiException {
        String id = null;
        TaskQueue taskQueue = null;
        TaskQueue response = api.projectTaskQueuesIdPUT(id, taskQueue);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Task Queue
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTaskQueuesPOSTTest() throws ApiException {
        TaskQueue taskQueue = null;
        TaskQueue response = api.projectTaskQueuesPOST(taskQueue);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Session Upload List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionGETTest() throws ApiException {
        Map<String, String> jqFilters = null;
        List<UploadSessionDetail> response = api.projectUploadSessionGET(jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create Session Upload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionPOSTTest() throws ApiException {
        UploadSession uploadSession = null;
        UploadSession response = api.projectUploadSessionPOST(uploadSession);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get status of Upload Sessions     Params:         - project_id: int
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionStatusGETTest() throws ApiException {
        String projectId = null;
        Map<String, Object> response = api.projectUploadSessionStatusGET(projectId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Upload batch of files      Params:         - folder (source_path): str - absolute path to a directory containing files         - force: bool (optional) - whether rewrite existing file and Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidBatchUploadPOSTTest() throws ApiException {
        String uid = null;
        UploadSessionDetail uploadSessionDetail = null;
        UploadSessionDetail response = api.projectUploadSessionUidBatchUploadPOST(uid, uploadSessionDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Upload files from given sub-folder in media/data/documents folder      Params:         - source_path: relative path to a folder with documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidBatchUploadPOST_0Test() throws ApiException {
        String uid = null;
        UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest = null;
        UploadSessionDetail response = api.projectUploadSessionUidBatchUploadPOST_0(uid, uploadSessionBatchUploadRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a file from session      Params:         - filename: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidCancelDELETETest() throws ApiException {
        String uid = null;
        api.projectUploadSessionUidCancelDELETE(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Session Upload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidDELETETest() throws ApiException {
        String uid = null;
        api.projectUploadSessionUidDELETE(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a file from session      Params:         - filename: str
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidDeleteFileDELETETest() throws ApiException {
        String uid = null;
        UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest = null;
        String response = api.projectUploadSessionUidDeleteFileDELETE(uid, uploadSessionDeleteFileRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidFilesPOSTTest() throws ApiException {
        String uid = null;
        Integer contentLength = null;
        String fileName = null;
        Boolean force = null;
        Boolean directoryPath = null;
        Boolean force2 = null;
        File body = null;
        ProjectUploadSessionFilesResponse response = api.projectUploadSessionUidFilesPOST(uid, contentLength, fileName, force, directoryPath, force2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Session Upload
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidGETTest() throws ApiException {
        String uid = null;
        Map<String, String> jqFilters = null;
        UploadSessionDetail response = api.projectUploadSessionUidGET(uid, jqFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Progress for a session per files (short form)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidProgressGETTest() throws ApiException {
        String uid = null;
        ProjectUploadSessionProgressResponse response = api.projectUploadSessionUidProgressGET(uid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Upload a File      Params:         - file: file object         - force: bool (optional) - whether rewrite existing file and Document         - review_file: bool - whether skip file check (exists or not)         - directory_path: str - may be passed from TUS plugin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUploadSessionUidUploadPOSTTest() throws ApiException {
        String uid = null;
        Boolean fileName = null;
        String fileEncoding = null;
        Boolean force = null;
        Boolean reviewFile = null;
        Boolean directoryPath = null;
        File body = null;
        ProjectUploadSessionPOSTResponse response = api.projectUploadSessionUidUploadPOST(uid, fileName, fileEncoding, force, reviewFile, directoryPath, body);

        // TODO: test validations
    }
    
}
