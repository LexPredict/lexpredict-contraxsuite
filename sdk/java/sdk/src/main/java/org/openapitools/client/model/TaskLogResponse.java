/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.TaskLogResponseRecords;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskLogResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class TaskLogResponse {
  public static final String SERIALIZED_NAME_RECORDS = "records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private TaskLogResponseRecords records;

  public static final String SERIALIZED_NAME_TOTAL_RECORDS_COUNT = "total_records_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECORDS_COUNT)
  private Integer totalRecordsCount;

  public static final String SERIALIZED_NAME_FILTERED_RECORDS_COUNT = "filtered_records_count";
  @SerializedName(SERIALIZED_NAME_FILTERED_RECORDS_COUNT)
  private Integer filteredRecordsCount;

  public static final String SERIALIZED_NAME_CURRENT_RECORDS_COUNT = "current_records_count";
  @SerializedName(SERIALIZED_NAME_CURRENT_RECORDS_COUNT)
  private Integer currentRecordsCount;

  public TaskLogResponse() { 
  }

  public TaskLogResponse records(TaskLogResponseRecords records) {
    
    this.records = records;
    return this;
  }

   /**
   * Get records
   * @return records
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TaskLogResponseRecords getRecords() {
    return records;
  }


  public void setRecords(TaskLogResponseRecords records) {
    this.records = records;
  }


  public TaskLogResponse totalRecordsCount(Integer totalRecordsCount) {
    
    this.totalRecordsCount = totalRecordsCount;
    return this;
  }

   /**
   * Get totalRecordsCount
   * @return totalRecordsCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTotalRecordsCount() {
    return totalRecordsCount;
  }


  public void setTotalRecordsCount(Integer totalRecordsCount) {
    this.totalRecordsCount = totalRecordsCount;
  }


  public TaskLogResponse filteredRecordsCount(Integer filteredRecordsCount) {
    
    this.filteredRecordsCount = filteredRecordsCount;
    return this;
  }

   /**
   * Get filteredRecordsCount
   * @return filteredRecordsCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getFilteredRecordsCount() {
    return filteredRecordsCount;
  }


  public void setFilteredRecordsCount(Integer filteredRecordsCount) {
    this.filteredRecordsCount = filteredRecordsCount;
  }


  public TaskLogResponse currentRecordsCount(Integer currentRecordsCount) {
    
    this.currentRecordsCount = currentRecordsCount;
    return this;
  }

   /**
   * Get currentRecordsCount
   * @return currentRecordsCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getCurrentRecordsCount() {
    return currentRecordsCount;
  }


  public void setCurrentRecordsCount(Integer currentRecordsCount) {
    this.currentRecordsCount = currentRecordsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskLogResponse taskLogResponse = (TaskLogResponse) o;
    return Objects.equals(this.records, taskLogResponse.records) &&
        Objects.equals(this.totalRecordsCount, taskLogResponse.totalRecordsCount) &&
        Objects.equals(this.filteredRecordsCount, taskLogResponse.filteredRecordsCount) &&
        Objects.equals(this.currentRecordsCount, taskLogResponse.currentRecordsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(records, totalRecordsCount, filteredRecordsCount, currentRecordsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskLogResponse {\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("    totalRecordsCount: ").append(toIndentedString(totalRecordsCount)).append("\n");
    sb.append("    filteredRecordsCount: ").append(toIndentedString(filteredRecordsCount)).append("\n");
    sb.append("    currentRecordsCount: ").append(toIndentedString(currentRecordsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("records");
    openapiFields.add("total_records_count");
    openapiFields.add("filtered_records_count");
    openapiFields.add("current_records_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("records");
    openapiRequiredFields.add("total_records_count");
    openapiRequiredFields.add("filtered_records_count");
    openapiRequiredFields.add("current_records_count");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaskLogResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TaskLogResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskLogResponse is not found in the empty JSON string", TaskLogResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaskLogResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskLogResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TaskLogResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `records`
      if (jsonObj.getAsJsonObject("records") != null) {
        TaskLogResponseRecords.validateJsonObject(jsonObj.getAsJsonObject("records"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskLogResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskLogResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskLogResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskLogResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskLogResponse>() {
           @Override
           public void write(JsonWriter out, TaskLogResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskLogResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaskLogResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaskLogResponse
  * @throws IOException if the JSON string is invalid with respect to TaskLogResponse
  */
  public static TaskLogResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskLogResponse.class);
  }

 /**
  * Convert an instance of TaskLogResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

