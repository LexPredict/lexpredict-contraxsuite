/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ProjectClusteringDocumentClustersInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectClustering
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class ProjectClustering {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private Integer pk;

  public static final String SERIALIZED_NAME_DOCUMENT_CLUSTERS = "document_clusters";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_CLUSTERS)
  private List<ProjectClusteringDocumentClustersInner> documentClusters = null;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_PROJECT_CLUSTERS_DOCUMENTS_COUNT = "project_clusters_documents_count";
  @SerializedName(SERIALIZED_NAME_PROJECT_CLUSTERS_DOCUMENTS_COUNT)
  private Integer projectClustersDocumentsCount;

  public static final String SERIALIZED_NAME_PROJECT_CLUSTERS_ACTIONS_COUNT = "project_clusters_actions_count";
  @SerializedName(SERIALIZED_NAME_PROJECT_CLUSTERS_ACTIONS_COUNT)
  private Integer projectClustersActionsCount;

  public ProjectClustering() { 
  }

  
  public ProjectClustering(
     Integer pk, 
     List<ProjectClusteringDocumentClustersInner> documentClusters, 
     OffsetDateTime createdDate, 
     String status, 
     Integer projectClustersActionsCount
  ) {
    this();
    this.pk = pk;
    this.documentClusters = documentClusters;
    this.createdDate = createdDate;
    this.status = status;
    this.projectClustersActionsCount = projectClustersActionsCount;
  }

   /**
   * Get pk
   * @return pk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPk() {
    return pk;
  }




   /**
   * Get documentClusters
   * @return documentClusters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ProjectClusteringDocumentClustersInner> getDocumentClusters() {
    return documentClusters;
  }




  public ProjectClustering metadata(Object metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


   /**
   * Get createdDate
   * @return createdDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }




   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }




  public ProjectClustering reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public ProjectClustering projectClustersDocumentsCount(Integer projectClustersDocumentsCount) {
    
    this.projectClustersDocumentsCount = projectClustersDocumentsCount;
    return this;
  }

   /**
   * Get projectClustersDocumentsCount
   * @return projectClustersDocumentsCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getProjectClustersDocumentsCount() {
    return projectClustersDocumentsCount;
  }


  public void setProjectClustersDocumentsCount(Integer projectClustersDocumentsCount) {
    this.projectClustersDocumentsCount = projectClustersDocumentsCount;
  }


   /**
   * Get projectClustersActionsCount
   * @return projectClustersActionsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getProjectClustersActionsCount() {
    return projectClustersActionsCount;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectClustering projectClustering = (ProjectClustering) o;
    return Objects.equals(this.pk, projectClustering.pk) &&
        Objects.equals(this.documentClusters, projectClustering.documentClusters) &&
        Objects.equals(this.metadata, projectClustering.metadata) &&
        Objects.equals(this.createdDate, projectClustering.createdDate) &&
        Objects.equals(this.status, projectClustering.status) &&
        Objects.equals(this.reason, projectClustering.reason) &&
        Objects.equals(this.projectClustersDocumentsCount, projectClustering.projectClustersDocumentsCount) &&
        Objects.equals(this.projectClustersActionsCount, projectClustering.projectClustersActionsCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, documentClusters, metadata, createdDate, status, reason, projectClustersDocumentsCount, projectClustersActionsCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectClustering {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    documentClusters: ").append(toIndentedString(documentClusters)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    projectClustersDocumentsCount: ").append(toIndentedString(projectClustersDocumentsCount)).append("\n");
    sb.append("    projectClustersActionsCount: ").append(toIndentedString(projectClustersActionsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("document_clusters");
    openapiFields.add("metadata");
    openapiFields.add("created_date");
    openapiFields.add("status");
    openapiFields.add("reason");
    openapiFields.add("project_clusters_documents_count");
    openapiFields.add("project_clusters_actions_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("project_clusters_documents_count");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProjectClustering
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ProjectClustering.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectClustering is not found in the empty JSON string", ProjectClustering.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProjectClustering.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectClustering` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectClustering.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      JsonArray jsonArraydocumentClusters = jsonObj.getAsJsonArray("document_clusters");
      if (jsonArraydocumentClusters != null) {
        // ensure the json data is an array
        if (!jsonObj.get("document_clusters").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `document_clusters` to be an array in the JSON string but got `%s`", jsonObj.get("document_clusters").toString()));
        }

        // validate the optional field `document_clusters` (array)
        for (int i = 0; i < jsonArraydocumentClusters.size(); i++) {
          ProjectClusteringDocumentClustersInner.validateJsonObject(jsonArraydocumentClusters.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectClustering.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectClustering' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectClustering> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectClustering.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectClustering>() {
           @Override
           public void write(JsonWriter out, ProjectClustering value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectClustering read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProjectClustering given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProjectClustering
  * @throws IOException if the JSON string is invalid with respect to ProjectClustering
  */
  public static ProjectClustering fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectClustering.class);
  }

 /**
  * Convert an instance of ProjectClustering to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

