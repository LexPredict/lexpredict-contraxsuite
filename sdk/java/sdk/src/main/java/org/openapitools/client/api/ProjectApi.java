/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssignProjectAnnotationsRequest;
import org.openapitools.client.model.AssignProjectDocumentRequest;
import org.openapitools.client.model.AssignProjectDocumentsRequest;
import org.openapitools.client.model.CleanupProjectRequest;
import org.openapitools.client.model.ClusterProjectRequest;
import org.openapitools.client.model.ClusterProjectResponse;
import org.openapitools.client.model.CountSuccessResponse;
import org.openapitools.client.model.DetectProjectFieldValuesRequest;
import java.io.File;
import org.openapitools.client.model.InlineResponse404;
import org.openapitools.client.model.MakeSearchablePDFRequest;
import org.openapitools.client.model.MarkUnmarkForDeleteProjectsReponse;
import org.openapitools.client.model.MarkUnmarkForDeleteProjectsRequest;
import org.openapitools.client.model.OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse;
import org.openapitools.client.model.ProjectAnnotationsAssigneesResponse;
import org.openapitools.client.model.ProjectClustering;
import org.openapitools.client.model.ProjectClusteringStatusResponse;
import org.openapitools.client.model.ProjectCreate;
import org.openapitools.client.model.ProjectDetail;
import org.openapitools.client.model.ProjectDocumentsAssigneesResponse;
import org.openapitools.client.model.ProjectList;
import org.openapitools.client.model.ProjectProgressResponse;
import org.openapitools.client.model.ProjectStats;
import org.openapitools.client.model.ProjectUpdate;
import org.openapitools.client.model.ProjectUploadSessionFilesResponse;
import org.openapitools.client.model.ProjectUploadSessionPOSTResponse;
import org.openapitools.client.model.ProjectUploadSessionProgressResponse;
import org.openapitools.client.model.SelectProjectsRequest;
import org.openapitools.client.model.SelectProjectsResponse;
import org.openapitools.client.model.SendClusterToProjectRequest;
import org.openapitools.client.model.SetProjectAnnotationsStatusRequest;
import org.openapitools.client.model.SetProjectDocumentsStatusRequest;
import org.openapitools.client.model.TaskIdResponse;
import org.openapitools.client.model.TaskQueue;
import org.openapitools.client.model.UploadSession;
import org.openapitools.client.model.UploadSessionBatchUploadRequest;
import org.openapitools.client.model.UploadSessionDeleteFileRequest;
import org.openapitools.client.model.UploadSessionDetail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectApi {
    private ApiClient localVarApiClient;

    public ProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for projectProjectClusteringGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectClusteringGETCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/project-clustering/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectClusteringGETValidateBeforeCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = projectProjectClusteringGETCall(jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * ProjectCluster List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return List&lt;ProjectClustering&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectClustering> projectProjectClusteringGET(Map<String, String> jqFilters) throws ApiException {
        ApiResponse<List<ProjectClustering>> localVarResp = projectProjectClusteringGETWithHttpInfo(jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * ProjectCluster List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;List&lt;ProjectClustering&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectClustering>> projectProjectClusteringGETWithHttpInfo(Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = projectProjectClusteringGETValidateBeforeCall(jqFilters, null);
        Type localVarReturnType = new TypeToken<List<ProjectClustering>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ProjectCluster List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectClusteringGETAsync(Map<String, String> jqFilters, final ApiCallback<List<ProjectClustering>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectClusteringGETValidateBeforeCall(jqFilters, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectClustering>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectClusteringIdGET
     * @param id A unique integer value identifying this project clustering. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectClusteringIdGETCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/project-clustering/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectClusteringIdGETValidateBeforeCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectClusteringIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectClusteringIdGETCall(id, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * ProjectCluster Details
     * @param id A unique integer value identifying this project clustering. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ProjectClustering
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProjectClustering projectProjectClusteringIdGET(String id, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<ProjectClustering> localVarResp = projectProjectClusteringIdGETWithHttpInfo(id, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * ProjectCluster Details
     * @param id A unique integer value identifying this project clustering. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;ProjectClustering&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectClustering> projectProjectClusteringIdGETWithHttpInfo(String id, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = projectProjectClusteringIdGETValidateBeforeCall(id, jqFilters, null);
        Type localVarReturnType = new TypeToken<ProjectClustering>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ProjectCluster Details
     * @param id A unique integer value identifying this project clustering. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectClusteringIdGETAsync(String id, Map<String, String> jqFilters, final ApiCallback<ProjectClustering> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectClusteringIdGETValidateBeforeCall(id, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<ProjectClustering>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsGETCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsGETValidateBeforeCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = projectProjectsGETCall(jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Project List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return List&lt;ProjectList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectList> projectProjectsGET(Map<String, String> jqFilters) throws ApiException {
        ApiResponse<List<ProjectList>> localVarResp = projectProjectsGETWithHttpInfo(jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Project List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;List&lt;ProjectList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectList>> projectProjectsGETWithHttpInfo(Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsGETValidateBeforeCall(jqFilters, null);
        Type localVarReturnType = new TypeToken<List<ProjectList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Project List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsGETAsync(Map<String, String> jqFilters, final ApiCallback<List<ProjectList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsGETValidateBeforeCall(jqFilters, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdAnnotationsAssigneesGET
     * @param id A unique integer value identifying this project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdAnnotationsAssigneesGETCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/annotations_assignees/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdAnnotationsAssigneesGETValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdAnnotationsAssigneesGET(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdAnnotationsAssigneesGETCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get assignees data for FieldAnnotations
     * @param id A unique integer value identifying this project. (required)
     * @return List&lt;ProjectAnnotationsAssigneesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectAnnotationsAssigneesResponse> projectProjectsIdAnnotationsAssigneesGET(String id) throws ApiException {
        ApiResponse<List<ProjectAnnotationsAssigneesResponse>> localVarResp = projectProjectsIdAnnotationsAssigneesGETWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get assignees data for FieldAnnotations
     * @param id A unique integer value identifying this project. (required)
     * @return ApiResponse&lt;List&lt;ProjectAnnotationsAssigneesResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectAnnotationsAssigneesResponse>> projectProjectsIdAnnotationsAssigneesGETWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdAnnotationsAssigneesGETValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<ProjectAnnotationsAssigneesResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get assignees data for FieldAnnotations
     * @param id A unique integer value identifying this project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdAnnotationsAssigneesGETAsync(String id, final ApiCallback<List<ProjectAnnotationsAssigneesResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdAnnotationsAssigneesGETValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectAnnotationsAssigneesResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdAssignAnnotationsPOST
     * @param id A unique integer value identifying this project. (required)
     * @param assignProjectAnnotationsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdAssignAnnotationsPOSTCall(String id, AssignProjectAnnotationsRequest assignProjectAnnotationsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = assignProjectAnnotationsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/assign_annotations/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdAssignAnnotationsPOSTValidateBeforeCall(String id, AssignProjectAnnotationsRequest assignProjectAnnotationsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdAssignAnnotationsPOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdAssignAnnotationsPOSTCall(id, assignProjectAnnotationsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Bulk assign batch of annotations to a review team member      Params:         annotation_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned annotations)
     * @param id A unique integer value identifying this project. (required)
     * @param assignProjectAnnotationsRequest  (optional)
     * @return CountSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CountSuccessResponse projectProjectsIdAssignAnnotationsPOST(String id, AssignProjectAnnotationsRequest assignProjectAnnotationsRequest) throws ApiException {
        ApiResponse<CountSuccessResponse> localVarResp = projectProjectsIdAssignAnnotationsPOSTWithHttpInfo(id, assignProjectAnnotationsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Bulk assign batch of annotations to a review team member      Params:         annotation_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned annotations)
     * @param id A unique integer value identifying this project. (required)
     * @param assignProjectAnnotationsRequest  (optional)
     * @return ApiResponse&lt;CountSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CountSuccessResponse> projectProjectsIdAssignAnnotationsPOSTWithHttpInfo(String id, AssignProjectAnnotationsRequest assignProjectAnnotationsRequest) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdAssignAnnotationsPOSTValidateBeforeCall(id, assignProjectAnnotationsRequest, null);
        Type localVarReturnType = new TypeToken<CountSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Bulk assign batch of annotations to a review team member      Params:         annotation_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned annotations)
     * @param id A unique integer value identifying this project. (required)
     * @param assignProjectAnnotationsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdAssignAnnotationsPOSTAsync(String id, AssignProjectAnnotationsRequest assignProjectAnnotationsRequest, final ApiCallback<CountSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdAssignAnnotationsPOSTValidateBeforeCall(id, assignProjectAnnotationsRequest, _callback);
        Type localVarReturnType = new TypeToken<CountSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdAssignDocumentPOST
     * @param id A unique integer value identifying this project. (required)
     * @param assignProjectDocumentRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdAssignDocumentPOSTCall(String id, AssignProjectDocumentRequest assignProjectDocumentRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = assignProjectDocumentRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/assign_document/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdAssignDocumentPOSTValidateBeforeCall(String id, AssignProjectDocumentRequest assignProjectDocumentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdAssignDocumentPOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdAssignDocumentPOSTCall(id, assignProjectDocumentRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Bulk assign batch of documents to a review team member      Params:         document_id: int         assignee_id: int     Returns:         bool (number of reassigned documents)
     * @param id A unique integer value identifying this project. (required)
     * @param assignProjectDocumentRequest  (optional)
     * @return CountSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CountSuccessResponse projectProjectsIdAssignDocumentPOST(String id, AssignProjectDocumentRequest assignProjectDocumentRequest) throws ApiException {
        ApiResponse<CountSuccessResponse> localVarResp = projectProjectsIdAssignDocumentPOSTWithHttpInfo(id, assignProjectDocumentRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Bulk assign batch of documents to a review team member      Params:         document_id: int         assignee_id: int     Returns:         bool (number of reassigned documents)
     * @param id A unique integer value identifying this project. (required)
     * @param assignProjectDocumentRequest  (optional)
     * @return ApiResponse&lt;CountSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CountSuccessResponse> projectProjectsIdAssignDocumentPOSTWithHttpInfo(String id, AssignProjectDocumentRequest assignProjectDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdAssignDocumentPOSTValidateBeforeCall(id, assignProjectDocumentRequest, null);
        Type localVarReturnType = new TypeToken<CountSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Bulk assign batch of documents to a review team member      Params:         document_id: int         assignee_id: int     Returns:         bool (number of reassigned documents)
     * @param id A unique integer value identifying this project. (required)
     * @param assignProjectDocumentRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdAssignDocumentPOSTAsync(String id, AssignProjectDocumentRequest assignProjectDocumentRequest, final ApiCallback<CountSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdAssignDocumentPOSTValidateBeforeCall(id, assignProjectDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<CountSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdAssignDocumentsPOST
     * @param id A unique integer value identifying this project. (required)
     * @param assignProjectDocumentsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdAssignDocumentsPOSTCall(String id, AssignProjectDocumentsRequest assignProjectDocumentsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = assignProjectDocumentsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/assign_documents/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdAssignDocumentsPOSTValidateBeforeCall(String id, AssignProjectDocumentsRequest assignProjectDocumentsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdAssignDocumentsPOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdAssignDocumentsPOSTCall(id, assignProjectDocumentsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Bulk assign batch of documents to a review team member      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned documents)
     * @param id A unique integer value identifying this project. (required)
     * @param assignProjectDocumentsRequest  (optional)
     * @return CountSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CountSuccessResponse projectProjectsIdAssignDocumentsPOST(String id, AssignProjectDocumentsRequest assignProjectDocumentsRequest) throws ApiException {
        ApiResponse<CountSuccessResponse> localVarResp = projectProjectsIdAssignDocumentsPOSTWithHttpInfo(id, assignProjectDocumentsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Bulk assign batch of documents to a review team member      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned documents)
     * @param id A unique integer value identifying this project. (required)
     * @param assignProjectDocumentsRequest  (optional)
     * @return ApiResponse&lt;CountSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CountSuccessResponse> projectProjectsIdAssignDocumentsPOSTWithHttpInfo(String id, AssignProjectDocumentsRequest assignProjectDocumentsRequest) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdAssignDocumentsPOSTValidateBeforeCall(id, assignProjectDocumentsRequest, null);
        Type localVarReturnType = new TypeToken<CountSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Bulk assign batch of documents to a review team member      Params:         document_ids: list[int]         all: any value - update all documents if any value         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         assignee_id: int     Returns:         int (number of reassigned documents)
     * @param id A unique integer value identifying this project. (required)
     * @param assignProjectDocumentsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdAssignDocumentsPOSTAsync(String id, AssignProjectDocumentsRequest assignProjectDocumentsRequest, final ApiCallback<CountSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdAssignDocumentsPOSTValidateBeforeCall(id, assignProjectDocumentsRequest, _callback);
        Type localVarReturnType = new TypeToken<CountSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdAssigneesGET
     * @param id A unique integer value identifying this project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdAssigneesGETCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/assignees/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdAssigneesGETValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdAssigneesGET(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdAssigneesGETCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get assignees data
     * @param id A unique integer value identifying this project. (required)
     * @return List&lt;ProjectDocumentsAssigneesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectDocumentsAssigneesResponse> projectProjectsIdAssigneesGET(String id) throws ApiException {
        ApiResponse<List<ProjectDocumentsAssigneesResponse>> localVarResp = projectProjectsIdAssigneesGETWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get assignees data
     * @param id A unique integer value identifying this project. (required)
     * @return ApiResponse&lt;List&lt;ProjectDocumentsAssigneesResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectDocumentsAssigneesResponse>> projectProjectsIdAssigneesGETWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdAssigneesGETValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<ProjectDocumentsAssigneesResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get assignees data
     * @param id A unique integer value identifying this project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdAssigneesGETAsync(String id, final ApiCallback<List<ProjectDocumentsAssigneesResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdAssigneesGETValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectDocumentsAssigneesResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdCleanupPOST
     * @param id A unique integer value identifying this project. (required)
     * @param cleanupProjectRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdCleanupPOSTCall(String id, CleanupProjectRequest cleanupProjectRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cleanupProjectRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/cleanup/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdCleanupPOSTValidateBeforeCall(String id, CleanupProjectRequest cleanupProjectRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdCleanupPOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdCleanupPOSTCall(id, cleanupProjectRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clean project (Generic Contract Type project)
     * @param id A unique integer value identifying this project. (required)
     * @param cleanupProjectRequest  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String projectProjectsIdCleanupPOST(String id, CleanupProjectRequest cleanupProjectRequest) throws ApiException {
        ApiResponse<String> localVarResp = projectProjectsIdCleanupPOSTWithHttpInfo(id, cleanupProjectRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Clean project (Generic Contract Type project)
     * @param id A unique integer value identifying this project. (required)
     * @param cleanupProjectRequest  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> projectProjectsIdCleanupPOSTWithHttpInfo(String id, CleanupProjectRequest cleanupProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdCleanupPOSTValidateBeforeCall(id, cleanupProjectRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clean project (Generic Contract Type project)
     * @param id A unique integer value identifying this project. (required)
     * @param cleanupProjectRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdCleanupPOSTAsync(String id, CleanupProjectRequest cleanupProjectRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdCleanupPOSTValidateBeforeCall(id, cleanupProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdClusterPOST
     * @param id A unique integer value identifying this project. (required)
     * @param clusterProjectRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdClusterPOSTCall(String id, ClusterProjectRequest clusterProjectRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = clusterProjectRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/cluster/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdClusterPOSTValidateBeforeCall(String id, ClusterProjectRequest clusterProjectRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdClusterPOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdClusterPOSTCall(id, clusterProjectRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Cluster Project Documents      Params:         - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]         - cluster_by: str[term, date, text, definition, duration, party,                           geoentity, currency_name, currency_value]         - n_clusters: int         - force: bool (optional) - force clustering if uncompleted tasks exist
     * @param id A unique integer value identifying this project. (required)
     * @param clusterProjectRequest  (optional)
     * @return ClusterProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ClusterProjectResponse projectProjectsIdClusterPOST(String id, ClusterProjectRequest clusterProjectRequest) throws ApiException {
        ApiResponse<ClusterProjectResponse> localVarResp = projectProjectsIdClusterPOSTWithHttpInfo(id, clusterProjectRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Cluster Project Documents      Params:         - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]         - cluster_by: str[term, date, text, definition, duration, party,                           geoentity, currency_name, currency_value]         - n_clusters: int         - force: bool (optional) - force clustering if uncompleted tasks exist
     * @param id A unique integer value identifying this project. (required)
     * @param clusterProjectRequest  (optional)
     * @return ApiResponse&lt;ClusterProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterProjectResponse> projectProjectsIdClusterPOSTWithHttpInfo(String id, ClusterProjectRequest clusterProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdClusterPOSTValidateBeforeCall(id, clusterProjectRequest, null);
        Type localVarReturnType = new TypeToken<ClusterProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cluster Project Documents      Params:         - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]         - cluster_by: str[term, date, text, definition, duration, party,                           geoentity, currency_name, currency_value]         - n_clusters: int         - force: bool (optional) - force clustering if uncompleted tasks exist
     * @param id A unique integer value identifying this project. (required)
     * @param clusterProjectRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdClusterPOSTAsync(String id, ClusterProjectRequest clusterProjectRequest, final ApiCallback<ClusterProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdClusterPOSTValidateBeforeCall(id, clusterProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<ClusterProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdClusteringStatusGET
     * @param id A unique integer value identifying this project. (required)
     * @param projectClusteringId Get by project_clustering_id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdClusteringStatusGETCall(String id, Integer projectClusteringId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/clustering-status/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectClusteringId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project_clustering_id", projectClusteringId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdClusteringStatusGETValidateBeforeCall(String id, Integer projectClusteringId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdClusteringStatusGET(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdClusteringStatusGETCall(id, projectClusteringId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Last Clustering task status/data      Params:         - project_clustering_id: int (optional) - return last if not provided
     * @param id A unique integer value identifying this project. (required)
     * @param projectClusteringId Get by project_clustering_id (optional)
     * @return ProjectClusteringStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProjectClusteringStatusResponse projectProjectsIdClusteringStatusGET(String id, Integer projectClusteringId) throws ApiException {
        ApiResponse<ProjectClusteringStatusResponse> localVarResp = projectProjectsIdClusteringStatusGETWithHttpInfo(id, projectClusteringId);
        return localVarResp.getData();
    }

    /**
     * 
     * Last Clustering task status/data      Params:         - project_clustering_id: int (optional) - return last if not provided
     * @param id A unique integer value identifying this project. (required)
     * @param projectClusteringId Get by project_clustering_id (optional)
     * @return ApiResponse&lt;ProjectClusteringStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectClusteringStatusResponse> projectProjectsIdClusteringStatusGETWithHttpInfo(String id, Integer projectClusteringId) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdClusteringStatusGETValidateBeforeCall(id, projectClusteringId, null);
        Type localVarReturnType = new TypeToken<ProjectClusteringStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Last Clustering task status/data      Params:         - project_clustering_id: int (optional) - return last if not provided
     * @param id A unique integer value identifying this project. (required)
     * @param projectClusteringId Get by project_clustering_id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdClusteringStatusGETAsync(String id, Integer projectClusteringId, final ApiCallback<ProjectClusteringStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdClusteringStatusGETValidateBeforeCall(id, projectClusteringId, _callback);
        Type localVarReturnType = new TypeToken<ProjectClusteringStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdDELETE
     * @param id A unique integer value identifying this project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdDELETECall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdDELETEValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdDELETECall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete Project
     * @param id A unique integer value identifying this project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectProjectsIdDELETE(String id) throws ApiException {
        projectProjectsIdDELETEWithHttpInfo(id);
    }

    /**
     * 
     * Delete Project
     * @param id A unique integer value identifying this project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectProjectsIdDELETEWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdDELETEValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete Project
     * @param id A unique integer value identifying this project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdDELETEAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdDELETEValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdDetectFieldValuesPOST
     * @param id A unique integer value identifying this project. (required)
     * @param detectProjectFieldValuesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdDetectFieldValuesPOSTCall(String id, DetectProjectFieldValuesRequest detectProjectFieldValuesRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = detectProjectFieldValuesRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/detect_field_values/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdDetectFieldValuesPOSTValidateBeforeCall(String id, DetectProjectFieldValuesRequest detectProjectFieldValuesRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdDetectFieldValuesPOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdDetectFieldValuesPOSTCall(id, detectProjectFieldValuesRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this project. (required)
     * @param detectProjectFieldValuesRequest  (optional)
     * @return TaskIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaskIdResponse projectProjectsIdDetectFieldValuesPOST(String id, DetectProjectFieldValuesRequest detectProjectFieldValuesRequest) throws ApiException {
        ApiResponse<TaskIdResponse> localVarResp = projectProjectsIdDetectFieldValuesPOSTWithHttpInfo(id, detectProjectFieldValuesRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this project. (required)
     * @param detectProjectFieldValuesRequest  (optional)
     * @return ApiResponse&lt;TaskIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskIdResponse> projectProjectsIdDetectFieldValuesPOSTWithHttpInfo(String id, DetectProjectFieldValuesRequest detectProjectFieldValuesRequest) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdDetectFieldValuesPOSTValidateBeforeCall(id, detectProjectFieldValuesRequest, null);
        Type localVarReturnType = new TypeToken<TaskIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this project. (required)
     * @param detectProjectFieldValuesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdDetectFieldValuesPOSTAsync(String id, DetectProjectFieldValuesRequest detectProjectFieldValuesRequest, final ApiCallback<TaskIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdDetectFieldValuesPOSTValidateBeforeCall(id, detectProjectFieldValuesRequest, _callback);
        Type localVarReturnType = new TypeToken<TaskIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdGET
     * @param id A unique integer value identifying this project. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdGETCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdGETValidateBeforeCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdGETCall(id, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve Project
     * @param id A unique integer value identifying this project. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ProjectDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDetail projectProjectsIdGET(String id, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<ProjectDetail> localVarResp = projectProjectsIdGETWithHttpInfo(id, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve Project
     * @param id A unique integer value identifying this project. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;ProjectDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDetail> projectProjectsIdGETWithHttpInfo(String id, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdGETValidateBeforeCall(id, jqFilters, null);
        Type localVarReturnType = new TypeToken<ProjectDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve Project
     * @param id A unique integer value identifying this project. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdGETAsync(String id, Map<String, String> jqFilters, final ApiCallback<ProjectDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdGETValidateBeforeCall(id, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<ProjectDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdMakeSearchablePdfPOST
     * @param id A unique integer value identifying this project. (required)
     * @param makeSearchablePDFRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdMakeSearchablePdfPOSTCall(String id, MakeSearchablePDFRequest makeSearchablePDFRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = makeSearchablePDFRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/make-searchable-pdf/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdMakeSearchablePdfPOSTValidateBeforeCall(String id, MakeSearchablePDFRequest makeSearchablePDFRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdMakeSearchablePdfPOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdMakeSearchablePdfPOSTCall(id, makeSearchablePDFRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this project. (required)
     * @param makeSearchablePDFRequest  (optional)
     * @return TaskIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaskIdResponse projectProjectsIdMakeSearchablePdfPOST(String id, MakeSearchablePDFRequest makeSearchablePDFRequest) throws ApiException {
        ApiResponse<TaskIdResponse> localVarResp = projectProjectsIdMakeSearchablePdfPOSTWithHttpInfo(id, makeSearchablePDFRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this project. (required)
     * @param makeSearchablePDFRequest  (optional)
     * @return ApiResponse&lt;TaskIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskIdResponse> projectProjectsIdMakeSearchablePdfPOSTWithHttpInfo(String id, MakeSearchablePDFRequest makeSearchablePDFRequest) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdMakeSearchablePdfPOSTValidateBeforeCall(id, makeSearchablePDFRequest, null);
        Type localVarReturnType = new TypeToken<TaskIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this project. (required)
     * @param makeSearchablePDFRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdMakeSearchablePdfPOSTAsync(String id, MakeSearchablePDFRequest makeSearchablePDFRequest, final ApiCallback<TaskIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdMakeSearchablePdfPOSTValidateBeforeCall(id, makeSearchablePDFRequest, _callback);
        Type localVarReturnType = new TypeToken<TaskIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdMarkDeletePOST
     * @param id A unique integer value identifying this project. (required)
     * @param markUnmarkForDeleteProjectsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdMarkDeletePOSTCall(String id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = markUnmarkForDeleteProjectsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/mark_delete/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdMarkDeletePOSTValidateBeforeCall(String id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdMarkDeletePOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdMarkDeletePOSTCall(id, markUnmarkForDeleteProjectsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Method marks the whole project (remove_all&#x3D;True) / the project&#39;s documents (remove_all&#x3D;False) for deleting. These marked documents (and the project) will become hidden in API. Documents, listed in excluded_ids list, will not be marked for deleting.      Params:         - all: bool - mark all filtered by a user documents         - remove_all: bool - mark project+documents         - exclude_document_ids: list[int]
     * @param id A unique integer value identifying this project. (required)
     * @param markUnmarkForDeleteProjectsRequest  (optional)
     * @return MarkUnmarkForDeleteProjectsReponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MarkUnmarkForDeleteProjectsReponse projectProjectsIdMarkDeletePOST(String id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest) throws ApiException {
        ApiResponse<MarkUnmarkForDeleteProjectsReponse> localVarResp = projectProjectsIdMarkDeletePOSTWithHttpInfo(id, markUnmarkForDeleteProjectsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Method marks the whole project (remove_all&#x3D;True) / the project&#39;s documents (remove_all&#x3D;False) for deleting. These marked documents (and the project) will become hidden in API. Documents, listed in excluded_ids list, will not be marked for deleting.      Params:         - all: bool - mark all filtered by a user documents         - remove_all: bool - mark project+documents         - exclude_document_ids: list[int]
     * @param id A unique integer value identifying this project. (required)
     * @param markUnmarkForDeleteProjectsRequest  (optional)
     * @return ApiResponse&lt;MarkUnmarkForDeleteProjectsReponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarkUnmarkForDeleteProjectsReponse> projectProjectsIdMarkDeletePOSTWithHttpInfo(String id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdMarkDeletePOSTValidateBeforeCall(id, markUnmarkForDeleteProjectsRequest, null);
        Type localVarReturnType = new TypeToken<MarkUnmarkForDeleteProjectsReponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Method marks the whole project (remove_all&#x3D;True) / the project&#39;s documents (remove_all&#x3D;False) for deleting. These marked documents (and the project) will become hidden in API. Documents, listed in excluded_ids list, will not be marked for deleting.      Params:         - all: bool - mark all filtered by a user documents         - remove_all: bool - mark project+documents         - exclude_document_ids: list[int]
     * @param id A unique integer value identifying this project. (required)
     * @param markUnmarkForDeleteProjectsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdMarkDeletePOSTAsync(String id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest, final ApiCallback<MarkUnmarkForDeleteProjectsReponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdMarkDeletePOSTValidateBeforeCall(id, markUnmarkForDeleteProjectsRequest, _callback);
        Type localVarReturnType = new TypeToken<MarkUnmarkForDeleteProjectsReponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdPATCH
     * @param id A unique integer value identifying this project. (required)
     * @param projectUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdPATCHCall(String id, ProjectUpdate projectUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = projectUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdPATCHValidateBeforeCall(String id, ProjectUpdate projectUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdPATCHCall(id, projectUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update Project
     * @param id A unique integer value identifying this project. (required)
     * @param projectUpdate  (optional)
     * @return ProjectUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUpdate projectProjectsIdPATCH(String id, ProjectUpdate projectUpdate) throws ApiException {
        ApiResponse<ProjectUpdate> localVarResp = projectProjectsIdPATCHWithHttpInfo(id, projectUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update Project
     * @param id A unique integer value identifying this project. (required)
     * @param projectUpdate  (optional)
     * @return ApiResponse&lt;ProjectUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUpdate> projectProjectsIdPATCHWithHttpInfo(String id, ProjectUpdate projectUpdate) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdPATCHValidateBeforeCall(id, projectUpdate, null);
        Type localVarReturnType = new TypeToken<ProjectUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update Project
     * @param id A unique integer value identifying this project. (required)
     * @param projectUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdPATCHAsync(String id, ProjectUpdate projectUpdate, final ApiCallback<ProjectUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdPATCHValidateBeforeCall(id, projectUpdate, _callback);
        Type localVarReturnType = new TypeToken<ProjectUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdPUT
     * @param id A unique integer value identifying this project. (required)
     * @param projectUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdPUTCall(String id, ProjectUpdate projectUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = projectUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdPUTValidateBeforeCall(String id, ProjectUpdate projectUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdPUT(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdPUTCall(id, projectUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update Project
     * @param id A unique integer value identifying this project. (required)
     * @param projectUpdate  (optional)
     * @return ProjectUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUpdate projectProjectsIdPUT(String id, ProjectUpdate projectUpdate) throws ApiException {
        ApiResponse<ProjectUpdate> localVarResp = projectProjectsIdPUTWithHttpInfo(id, projectUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update Project
     * @param id A unique integer value identifying this project. (required)
     * @param projectUpdate  (optional)
     * @return ApiResponse&lt;ProjectUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUpdate> projectProjectsIdPUTWithHttpInfo(String id, ProjectUpdate projectUpdate) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdPUTValidateBeforeCall(id, projectUpdate, null);
        Type localVarReturnType = new TypeToken<ProjectUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Project
     * @param id A unique integer value identifying this project. (required)
     * @param projectUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdPUTAsync(String id, ProjectUpdate projectUpdate, final ApiCallback<ProjectUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdPUTValidateBeforeCall(id, projectUpdate, _callback);
        Type localVarReturnType = new TypeToken<ProjectUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdProgressGET
     * @param id A unique integer value identifying this project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdProgressGETCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/progress/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdProgressGETValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdProgressGET(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdProgressGETCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get current progress of all project sessions / clusterings
     * @param id A unique integer value identifying this project. (required)
     * @return ProjectProgressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProjectProgressResponse projectProjectsIdProgressGET(String id) throws ApiException {
        ApiResponse<ProjectProgressResponse> localVarResp = projectProjectsIdProgressGETWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get current progress of all project sessions / clusterings
     * @param id A unique integer value identifying this project. (required)
     * @return ApiResponse&lt;ProjectProgressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectProgressResponse> projectProjectsIdProgressGETWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdProgressGETValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProjectProgressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get current progress of all project sessions / clusterings
     * @param id A unique integer value identifying this project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdProgressGETAsync(String id, final ApiCallback<ProjectProgressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdProgressGETValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProjectProgressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdSendClustersToProjectPOST
     * @param id A unique integer value identifying this project. (required)
     * @param sendClusterToProjectRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdSendClustersToProjectPOSTCall(String id, SendClusterToProjectRequest sendClusterToProjectRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sendClusterToProjectRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/send-clusters-to-project/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdSendClustersToProjectPOSTValidateBeforeCall(String id, SendClusterToProjectRequest sendClusterToProjectRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdSendClustersToProjectPOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdSendClustersToProjectPOSTCall(id, sendClusterToProjectRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Send clusters to another Project      Params:         - cluster_ids: list[int]         - project_id: int
     * @param id A unique integer value identifying this project. (required)
     * @param sendClusterToProjectRequest  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String projectProjectsIdSendClustersToProjectPOST(String id, SendClusterToProjectRequest sendClusterToProjectRequest) throws ApiException {
        ApiResponse<String> localVarResp = projectProjectsIdSendClustersToProjectPOSTWithHttpInfo(id, sendClusterToProjectRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Send clusters to another Project      Params:         - cluster_ids: list[int]         - project_id: int
     * @param id A unique integer value identifying this project. (required)
     * @param sendClusterToProjectRequest  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> projectProjectsIdSendClustersToProjectPOSTWithHttpInfo(String id, SendClusterToProjectRequest sendClusterToProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdSendClustersToProjectPOSTValidateBeforeCall(id, sendClusterToProjectRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send clusters to another Project      Params:         - cluster_ids: list[int]         - project_id: int
     * @param id A unique integer value identifying this project. (required)
     * @param sendClusterToProjectRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdSendClustersToProjectPOSTAsync(String id, SendClusterToProjectRequest sendClusterToProjectRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdSendClustersToProjectPOSTValidateBeforeCall(id, sendClusterToProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdSetAnnotationStatusPOST
     * @param id A unique integer value identifying this project. (required)
     * @param setProjectAnnotationsStatusRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdSetAnnotationStatusPOSTCall(String id, SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = setProjectAnnotationsStatusRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/set_annotation_status/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdSetAnnotationStatusPOSTValidateBeforeCall(String id, SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdSetAnnotationStatusPOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdSetAnnotationStatusPOSTCall(id, setProjectAnnotationsStatusRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Bulk set status for batch of annotations      Params:         document_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         status_id: int - field annotation status id         run_mode: str - &#39;sync&#39;, &#39;background&#39;, &#39;smart&#39;     Returns:         int (number of reassigned annotations)
     * @param id A unique integer value identifying this project. (required)
     * @param setProjectAnnotationsStatusRequest  (optional)
     * @return OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse projectProjectsIdSetAnnotationStatusPOST(String id, SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest) throws ApiException {
        ApiResponse<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse> localVarResp = projectProjectsIdSetAnnotationStatusPOSTWithHttpInfo(id, setProjectAnnotationsStatusRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Bulk set status for batch of annotations      Params:         document_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         status_id: int - field annotation status id         run_mode: str - &#39;sync&#39;, &#39;background&#39;, &#39;smart&#39;     Returns:         int (number of reassigned annotations)
     * @param id A unique integer value identifying this project. (required)
     * @param setProjectAnnotationsStatusRequest  (optional)
     * @return ApiResponse&lt;OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse> projectProjectsIdSetAnnotationStatusPOSTWithHttpInfo(String id, SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdSetAnnotationStatusPOSTValidateBeforeCall(id, setProjectAnnotationsStatusRequest, null);
        Type localVarReturnType = new TypeToken<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Bulk set status for batch of annotations      Params:         document_ids: list[int]         all: any value - update all annotations if any value         no_annotation_ids: list[int] - exclude those annotations from action (if \&quot;all\&quot; is set)         status_id: int - field annotation status id         run_mode: str - &#39;sync&#39;, &#39;background&#39;, &#39;smart&#39;     Returns:         int (number of reassigned annotations)
     * @param id A unique integer value identifying this project. (required)
     * @param setProjectAnnotationsStatusRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdSetAnnotationStatusPOSTAsync(String id, SetProjectAnnotationsStatusRequest setProjectAnnotationsStatusRequest, final ApiCallback<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdSetAnnotationStatusPOSTValidateBeforeCall(id, setProjectAnnotationsStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<OneOfCountSuccessResponseSetProjectAnnotationsStatusAsyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdSetStatusPOST
     * @param id A unique integer value identifying this project. (required)
     * @param setProjectDocumentsStatusRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdSetStatusPOSTCall(String id, SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = setProjectDocumentsStatusRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/set_status/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdSetStatusPOSTValidateBeforeCall(String id, SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdSetStatusPOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdSetStatusPOSTCall(id, setProjectDocumentsStatusRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Bulk set status for batch of documents      Params:         document_ids: list[int]         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         all: any value - update all documents if any value         status_id: int     Returns:         int (number of reassigned documents)
     * @param id A unique integer value identifying this project. (required)
     * @param setProjectDocumentsStatusRequest  (optional)
     * @return CountSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CountSuccessResponse projectProjectsIdSetStatusPOST(String id, SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest) throws ApiException {
        ApiResponse<CountSuccessResponse> localVarResp = projectProjectsIdSetStatusPOSTWithHttpInfo(id, setProjectDocumentsStatusRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Bulk set status for batch of documents      Params:         document_ids: list[int]         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         all: any value - update all documents if any value         status_id: int     Returns:         int (number of reassigned documents)
     * @param id A unique integer value identifying this project. (required)
     * @param setProjectDocumentsStatusRequest  (optional)
     * @return ApiResponse&lt;CountSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CountSuccessResponse> projectProjectsIdSetStatusPOSTWithHttpInfo(String id, SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdSetStatusPOSTValidateBeforeCall(id, setProjectDocumentsStatusRequest, null);
        Type localVarReturnType = new TypeToken<CountSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Bulk set status for batch of documents      Params:         document_ids: list[int]         no_document_ids: list[int] - exclude those docs from action (if \&quot;all\&quot; is set)         all: any value - update all documents if any value         status_id: int     Returns:         int (number of reassigned documents)
     * @param id A unique integer value identifying this project. (required)
     * @param setProjectDocumentsStatusRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdSetStatusPOSTAsync(String id, SetProjectDocumentsStatusRequest setProjectDocumentsStatusRequest, final ApiCallback<CountSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdSetStatusPOSTValidateBeforeCall(id, setProjectDocumentsStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<CountSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsIdUnmarkDeletePOST
     * @param id A unique integer value identifying this project. (required)
     * @param markUnmarkForDeleteProjectsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdUnmarkDeletePOSTCall(String id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = markUnmarkForDeleteProjectsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/{id}/unmark_delete/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsIdUnmarkDeletePOSTValidateBeforeCall(String id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectProjectsIdUnmarkDeletePOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectProjectsIdUnmarkDeletePOSTCall(id, markUnmarkForDeleteProjectsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Method removes soft delete sign from project only (remove_all&#x3D;False) or from the project and the project&#39;s documents (remove_all&#x3D;True)     Body params:         - all: bool - unmark all filtered by a user documents         - remove_all: bool - unmark project+documents         - exclude_document_ids: List[int]
     * @param id A unique integer value identifying this project. (required)
     * @param markUnmarkForDeleteProjectsRequest  (optional)
     * @return MarkUnmarkForDeleteProjectsReponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MarkUnmarkForDeleteProjectsReponse projectProjectsIdUnmarkDeletePOST(String id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest) throws ApiException {
        ApiResponse<MarkUnmarkForDeleteProjectsReponse> localVarResp = projectProjectsIdUnmarkDeletePOSTWithHttpInfo(id, markUnmarkForDeleteProjectsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Method removes soft delete sign from project only (remove_all&#x3D;False) or from the project and the project&#39;s documents (remove_all&#x3D;True)     Body params:         - all: bool - unmark all filtered by a user documents         - remove_all: bool - unmark project+documents         - exclude_document_ids: List[int]
     * @param id A unique integer value identifying this project. (required)
     * @param markUnmarkForDeleteProjectsRequest  (optional)
     * @return ApiResponse&lt;MarkUnmarkForDeleteProjectsReponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarkUnmarkForDeleteProjectsReponse> projectProjectsIdUnmarkDeletePOSTWithHttpInfo(String id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsIdUnmarkDeletePOSTValidateBeforeCall(id, markUnmarkForDeleteProjectsRequest, null);
        Type localVarReturnType = new TypeToken<MarkUnmarkForDeleteProjectsReponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Method removes soft delete sign from project only (remove_all&#x3D;False) or from the project and the project&#39;s documents (remove_all&#x3D;True)     Body params:         - all: bool - unmark all filtered by a user documents         - remove_all: bool - unmark project+documents         - exclude_document_ids: List[int]
     * @param id A unique integer value identifying this project. (required)
     * @param markUnmarkForDeleteProjectsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsIdUnmarkDeletePOSTAsync(String id, MarkUnmarkForDeleteProjectsRequest markUnmarkForDeleteProjectsRequest, final ApiCallback<MarkUnmarkForDeleteProjectsReponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsIdUnmarkDeletePOSTValidateBeforeCall(id, markUnmarkForDeleteProjectsRequest, _callback);
        Type localVarReturnType = new TypeToken<MarkUnmarkForDeleteProjectsReponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsPOST
     * @param projectCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsPOSTCall(ProjectCreate projectCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = projectCreate;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsPOSTValidateBeforeCall(ProjectCreate projectCreate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = projectProjectsPOSTCall(projectCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create Project
     * @param projectCreate  (optional)
     * @return ProjectCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProjectCreate projectProjectsPOST(ProjectCreate projectCreate) throws ApiException {
        ApiResponse<ProjectCreate> localVarResp = projectProjectsPOSTWithHttpInfo(projectCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create Project
     * @param projectCreate  (optional)
     * @return ApiResponse&lt;ProjectCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectCreate> projectProjectsPOSTWithHttpInfo(ProjectCreate projectCreate) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsPOSTValidateBeforeCall(projectCreate, null);
        Type localVarReturnType = new TypeToken<ProjectCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Project
     * @param projectCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsPOSTAsync(ProjectCreate projectCreate, final ApiCallback<ProjectCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsPOSTValidateBeforeCall(projectCreate, _callback);
        Type localVarReturnType = new TypeToken<ProjectCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsProjectStatsGET
     * @param projectIds Project ids separated by commas (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsProjectStatsGETCall(String projectIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/project_stats/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project_ids", projectIds));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsProjectStatsGETValidateBeforeCall(String projectIds, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = projectProjectsProjectStatsGETCall(projectIds, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get project stats across all projects see related code in get_queryset() and serializer
     * @param projectIds Project ids separated by commas (optional)
     * @return List&lt;ProjectStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectStats> projectProjectsProjectStatsGET(String projectIds) throws ApiException {
        ApiResponse<List<ProjectStats>> localVarResp = projectProjectsProjectStatsGETWithHttpInfo(projectIds);
        return localVarResp.getData();
    }

    /**
     * 
     * Get project stats across all projects see related code in get_queryset() and serializer
     * @param projectIds Project ids separated by commas (optional)
     * @return ApiResponse&lt;List&lt;ProjectStats&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectStats>> projectProjectsProjectStatsGETWithHttpInfo(String projectIds) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsProjectStatsGETValidateBeforeCall(projectIds, null);
        Type localVarReturnType = new TypeToken<List<ProjectStats>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get project stats across all projects see related code in get_queryset() and serializer
     * @param projectIds Project ids separated by commas (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsProjectStatsGETAsync(String projectIds, final ApiCallback<List<ProjectStats>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsProjectStatsGETValidateBeforeCall(projectIds, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectStats>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsRecentGET
     * @param n Max rows number (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsRecentGETCall(Integer n, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/recent/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsRecentGETValidateBeforeCall(Integer n, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = projectProjectsRecentGETCall(n, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get recent N projects      Params:         n: int - default is 5
     * @param n Max rows number (optional)
     * @return List&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Map<String, Object>> projectProjectsRecentGET(Integer n) throws ApiException {
        ApiResponse<List<Map<String, Object>>> localVarResp = projectProjectsRecentGETWithHttpInfo(n);
        return localVarResp.getData();
    }

    /**
     * 
     * Get recent N projects      Params:         n: int - default is 5
     * @param n Max rows number (optional)
     * @return ApiResponse&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Map<String, Object>>> projectProjectsRecentGETWithHttpInfo(Integer n) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsRecentGETValidateBeforeCall(n, null);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get recent N projects      Params:         n: int - default is 5
     * @param n Max rows number (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsRecentGETAsync(Integer n, final ApiCallback<List<Map<String, Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsRecentGETValidateBeforeCall(n, _callback);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectProjectsSelectProjectsPOST
     * @param selectProjectsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsSelectProjectsPOSTCall(SelectProjectsRequest selectProjectsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = selectProjectsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/projects/select_projects/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectProjectsSelectProjectsPOSTValidateBeforeCall(SelectProjectsRequest selectProjectsRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = projectProjectsSelectProjectsPOSTCall(selectProjectsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Select projects for review in Explorer UI
     * @param selectProjectsRequest  (optional)
     * @return SelectProjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SelectProjectsResponse projectProjectsSelectProjectsPOST(SelectProjectsRequest selectProjectsRequest) throws ApiException {
        ApiResponse<SelectProjectsResponse> localVarResp = projectProjectsSelectProjectsPOSTWithHttpInfo(selectProjectsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Select projects for review in Explorer UI
     * @param selectProjectsRequest  (optional)
     * @return ApiResponse&lt;SelectProjectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SelectProjectsResponse> projectProjectsSelectProjectsPOSTWithHttpInfo(SelectProjectsRequest selectProjectsRequest) throws ApiException {
        okhttp3.Call localVarCall = projectProjectsSelectProjectsPOSTValidateBeforeCall(selectProjectsRequest, null);
        Type localVarReturnType = new TypeToken<SelectProjectsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Select projects for review in Explorer UI
     * @param selectProjectsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectProjectsSelectProjectsPOSTAsync(SelectProjectsRequest selectProjectsRequest, final ApiCallback<SelectProjectsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectProjectsSelectProjectsPOSTValidateBeforeCall(selectProjectsRequest, _callback);
        Type localVarReturnType = new TypeToken<SelectProjectsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTaskQueuesGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskQueuesGETCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/task-queues/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTaskQueuesGETValidateBeforeCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = projectTaskQueuesGETCall(jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Task Queue List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return List&lt;TaskQueue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<TaskQueue> projectTaskQueuesGET(Map<String, String> jqFilters) throws ApiException {
        ApiResponse<List<TaskQueue>> localVarResp = projectTaskQueuesGETWithHttpInfo(jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Task Queue List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;List&lt;TaskQueue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TaskQueue>> projectTaskQueuesGETWithHttpInfo(Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = projectTaskQueuesGETValidateBeforeCall(jqFilters, null);
        Type localVarReturnType = new TypeToken<List<TaskQueue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Task Queue List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskQueuesGETAsync(Map<String, String> jqFilters, final ApiCallback<List<TaskQueue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTaskQueuesGETValidateBeforeCall(jqFilters, _callback);
        Type localVarReturnType = new TypeToken<List<TaskQueue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTaskQueuesIdDELETE
     * @param id A unique integer value identifying this task queue. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskQueuesIdDELETECall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/task-queues/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTaskQueuesIdDELETEValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectTaskQueuesIdDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = projectTaskQueuesIdDELETECall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete Task Queue
     * @param id A unique integer value identifying this task queue. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectTaskQueuesIdDELETE(String id) throws ApiException {
        projectTaskQueuesIdDELETEWithHttpInfo(id);
    }

    /**
     * 
     * Delete Task Queue
     * @param id A unique integer value identifying this task queue. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectTaskQueuesIdDELETEWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = projectTaskQueuesIdDELETEValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete Task Queue
     * @param id A unique integer value identifying this task queue. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskQueuesIdDELETEAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTaskQueuesIdDELETEValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTaskQueuesIdGET
     * @param id A unique integer value identifying this task queue. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskQueuesIdGETCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/task-queues/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTaskQueuesIdGETValidateBeforeCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectTaskQueuesIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = projectTaskQueuesIdGETCall(id, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve Task Queue
     * @param id A unique integer value identifying this task queue. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return TaskQueue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaskQueue projectTaskQueuesIdGET(String id, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<TaskQueue> localVarResp = projectTaskQueuesIdGETWithHttpInfo(id, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve Task Queue
     * @param id A unique integer value identifying this task queue. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;TaskQueue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskQueue> projectTaskQueuesIdGETWithHttpInfo(String id, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = projectTaskQueuesIdGETValidateBeforeCall(id, jqFilters, null);
        Type localVarReturnType = new TypeToken<TaskQueue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve Task Queue
     * @param id A unique integer value identifying this task queue. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskQueuesIdGETAsync(String id, Map<String, String> jqFilters, final ApiCallback<TaskQueue> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTaskQueuesIdGETValidateBeforeCall(id, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<TaskQueue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTaskQueuesIdPATCH
     * @param id A unique integer value identifying this task queue. (required)
     * @param taskQueue  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskQueuesIdPATCHCall(String id, TaskQueue taskQueue, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taskQueue;

        // create path and map variables
        String localVarPath = "/api/v1/project/task-queues/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTaskQueuesIdPATCHValidateBeforeCall(String id, TaskQueue taskQueue, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectTaskQueuesIdPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = projectTaskQueuesIdPATCHCall(id, taskQueue, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update Task Queue
     * @param id A unique integer value identifying this task queue. (required)
     * @param taskQueue  (optional)
     * @return TaskQueue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaskQueue projectTaskQueuesIdPATCH(String id, TaskQueue taskQueue) throws ApiException {
        ApiResponse<TaskQueue> localVarResp = projectTaskQueuesIdPATCHWithHttpInfo(id, taskQueue);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update Task Queue
     * @param id A unique integer value identifying this task queue. (required)
     * @param taskQueue  (optional)
     * @return ApiResponse&lt;TaskQueue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskQueue> projectTaskQueuesIdPATCHWithHttpInfo(String id, TaskQueue taskQueue) throws ApiException {
        okhttp3.Call localVarCall = projectTaskQueuesIdPATCHValidateBeforeCall(id, taskQueue, null);
        Type localVarReturnType = new TypeToken<TaskQueue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update Task Queue
     * @param id A unique integer value identifying this task queue. (required)
     * @param taskQueue  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskQueuesIdPATCHAsync(String id, TaskQueue taskQueue, final ApiCallback<TaskQueue> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTaskQueuesIdPATCHValidateBeforeCall(id, taskQueue, _callback);
        Type localVarReturnType = new TypeToken<TaskQueue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTaskQueuesIdPUT
     * @param id A unique integer value identifying this task queue. (required)
     * @param taskQueue  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskQueuesIdPUTCall(String id, TaskQueue taskQueue, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taskQueue;

        // create path and map variables
        String localVarPath = "/api/v1/project/task-queues/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTaskQueuesIdPUTValidateBeforeCall(String id, TaskQueue taskQueue, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectTaskQueuesIdPUT(Async)");
        }
        

        okhttp3.Call localVarCall = projectTaskQueuesIdPUTCall(id, taskQueue, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update Task Queue      PUT params:         - pk: int         - description: str         - documents: list[int]         - completed_documents: list[int]         - reviewers: list[int]     Optional params for add/remove document from/to a TaskQueue:         - add_document: int         - remove_document: int     Optional params for complete/reopen document in a TaskQueue:         - complete_document: int         - open_document: int     Optional param to add documents from DocumentCluster:         - add_documents_from_cluster: int (cluster id)
     * @param id A unique integer value identifying this task queue. (required)
     * @param taskQueue  (optional)
     * @return TaskQueue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaskQueue projectTaskQueuesIdPUT(String id, TaskQueue taskQueue) throws ApiException {
        ApiResponse<TaskQueue> localVarResp = projectTaskQueuesIdPUTWithHttpInfo(id, taskQueue);
        return localVarResp.getData();
    }

    /**
     * 
     * Update Task Queue      PUT params:         - pk: int         - description: str         - documents: list[int]         - completed_documents: list[int]         - reviewers: list[int]     Optional params for add/remove document from/to a TaskQueue:         - add_document: int         - remove_document: int     Optional params for complete/reopen document in a TaskQueue:         - complete_document: int         - open_document: int     Optional param to add documents from DocumentCluster:         - add_documents_from_cluster: int (cluster id)
     * @param id A unique integer value identifying this task queue. (required)
     * @param taskQueue  (optional)
     * @return ApiResponse&lt;TaskQueue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskQueue> projectTaskQueuesIdPUTWithHttpInfo(String id, TaskQueue taskQueue) throws ApiException {
        okhttp3.Call localVarCall = projectTaskQueuesIdPUTValidateBeforeCall(id, taskQueue, null);
        Type localVarReturnType = new TypeToken<TaskQueue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Task Queue      PUT params:         - pk: int         - description: str         - documents: list[int]         - completed_documents: list[int]         - reviewers: list[int]     Optional params for add/remove document from/to a TaskQueue:         - add_document: int         - remove_document: int     Optional params for complete/reopen document in a TaskQueue:         - complete_document: int         - open_document: int     Optional param to add documents from DocumentCluster:         - add_documents_from_cluster: int (cluster id)
     * @param id A unique integer value identifying this task queue. (required)
     * @param taskQueue  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskQueuesIdPUTAsync(String id, TaskQueue taskQueue, final ApiCallback<TaskQueue> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTaskQueuesIdPUTValidateBeforeCall(id, taskQueue, _callback);
        Type localVarReturnType = new TypeToken<TaskQueue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectTaskQueuesPOST
     * @param taskQueue  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskQueuesPOSTCall(TaskQueue taskQueue, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taskQueue;

        // create path and map variables
        String localVarPath = "/api/v1/project/task-queues/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectTaskQueuesPOSTValidateBeforeCall(TaskQueue taskQueue, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = projectTaskQueuesPOSTCall(taskQueue, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create Task Queue
     * @param taskQueue  (optional)
     * @return TaskQueue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaskQueue projectTaskQueuesPOST(TaskQueue taskQueue) throws ApiException {
        ApiResponse<TaskQueue> localVarResp = projectTaskQueuesPOSTWithHttpInfo(taskQueue);
        return localVarResp.getData();
    }

    /**
     * 
     * Create Task Queue
     * @param taskQueue  (optional)
     * @return ApiResponse&lt;TaskQueue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskQueue> projectTaskQueuesPOSTWithHttpInfo(TaskQueue taskQueue) throws ApiException {
        okhttp3.Call localVarCall = projectTaskQueuesPOSTValidateBeforeCall(taskQueue, null);
        Type localVarReturnType = new TypeToken<TaskQueue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Task Queue
     * @param taskQueue  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectTaskQueuesPOSTAsync(TaskQueue taskQueue, final ApiCallback<TaskQueue> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectTaskQueuesPOSTValidateBeforeCall(taskQueue, _callback);
        Type localVarReturnType = new TypeToken<TaskQueue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUploadSessionGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionGETCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/upload-session/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUploadSessionGETValidateBeforeCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = projectUploadSessionGETCall(jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Session Upload List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return List&lt;UploadSessionDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UploadSessionDetail> projectUploadSessionGET(Map<String, String> jqFilters) throws ApiException {
        ApiResponse<List<UploadSessionDetail>> localVarResp = projectUploadSessionGETWithHttpInfo(jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Session Upload List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;List&lt;UploadSessionDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UploadSessionDetail>> projectUploadSessionGETWithHttpInfo(Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = projectUploadSessionGETValidateBeforeCall(jqFilters, null);
        Type localVarReturnType = new TypeToken<List<UploadSessionDetail>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Session Upload List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionGETAsync(Map<String, String> jqFilters, final ApiCallback<List<UploadSessionDetail>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUploadSessionGETValidateBeforeCall(jqFilters, _callback);
        Type localVarReturnType = new TypeToken<List<UploadSessionDetail>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUploadSessionPOST
     * @param uploadSession  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionPOSTCall(UploadSession uploadSession, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = uploadSession;

        // create path and map variables
        String localVarPath = "/api/v1/project/upload-session/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUploadSessionPOSTValidateBeforeCall(UploadSession uploadSession, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = projectUploadSessionPOSTCall(uploadSession, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create Session Upload
     * @param uploadSession  (optional)
     * @return UploadSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UploadSession projectUploadSessionPOST(UploadSession uploadSession) throws ApiException {
        ApiResponse<UploadSession> localVarResp = projectUploadSessionPOSTWithHttpInfo(uploadSession);
        return localVarResp.getData();
    }

    /**
     * 
     * Create Session Upload
     * @param uploadSession  (optional)
     * @return ApiResponse&lt;UploadSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadSession> projectUploadSessionPOSTWithHttpInfo(UploadSession uploadSession) throws ApiException {
        okhttp3.Call localVarCall = projectUploadSessionPOSTValidateBeforeCall(uploadSession, null);
        Type localVarReturnType = new TypeToken<UploadSession>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Session Upload
     * @param uploadSession  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionPOSTAsync(UploadSession uploadSession, final ApiCallback<UploadSession> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUploadSessionPOSTValidateBeforeCall(uploadSession, _callback);
        Type localVarReturnType = new TypeToken<UploadSession>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUploadSessionStatusGET
     * @param projectId Project id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionStatusGETCall(String projectId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/upload-session/status/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project_id", projectId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUploadSessionStatusGETValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = projectUploadSessionStatusGETCall(projectId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get status of Upload Sessions     Params:         - project_id: int
     * @param projectId Project id (optional)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> projectUploadSessionStatusGET(String projectId) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = projectUploadSessionStatusGETWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get status of Upload Sessions     Params:         - project_id: int
     * @param projectId Project id (optional)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> projectUploadSessionStatusGETWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = projectUploadSessionStatusGETValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get status of Upload Sessions     Params:         - project_id: int
     * @param projectId Project id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionStatusGETAsync(String projectId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUploadSessionStatusGETValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUploadSessionUidBatchUploadPOST
     * @param uid A UUID string identifying this upload session. (required)
     * @param uploadSessionDetail  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidBatchUploadPOSTCall(String uid, UploadSessionDetail uploadSessionDetail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = uploadSessionDetail;

        // create path and map variables
        String localVarPath = "/api/v1/project/upload-session/{uid}/_batch_upload/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUploadSessionUidBatchUploadPOSTValidateBeforeCall(String uid, UploadSessionDetail uploadSessionDetail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling projectUploadSessionUidBatchUploadPOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectUploadSessionUidBatchUploadPOSTCall(uid, uploadSessionDetail, _callback);
        return localVarCall;

    }

    /**
     * 
     * Upload batch of files      Params:         - folder (source_path): str - absolute path to a directory containing files         - force: bool (optional) - whether rewrite existing file and Document
     * @param uid A UUID string identifying this upload session. (required)
     * @param uploadSessionDetail  (optional)
     * @return UploadSessionDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UploadSessionDetail projectUploadSessionUidBatchUploadPOST(String uid, UploadSessionDetail uploadSessionDetail) throws ApiException {
        ApiResponse<UploadSessionDetail> localVarResp = projectUploadSessionUidBatchUploadPOSTWithHttpInfo(uid, uploadSessionDetail);
        return localVarResp.getData();
    }

    /**
     * 
     * Upload batch of files      Params:         - folder (source_path): str - absolute path to a directory containing files         - force: bool (optional) - whether rewrite existing file and Document
     * @param uid A UUID string identifying this upload session. (required)
     * @param uploadSessionDetail  (optional)
     * @return ApiResponse&lt;UploadSessionDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadSessionDetail> projectUploadSessionUidBatchUploadPOSTWithHttpInfo(String uid, UploadSessionDetail uploadSessionDetail) throws ApiException {
        okhttp3.Call localVarCall = projectUploadSessionUidBatchUploadPOSTValidateBeforeCall(uid, uploadSessionDetail, null);
        Type localVarReturnType = new TypeToken<UploadSessionDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upload batch of files      Params:         - folder (source_path): str - absolute path to a directory containing files         - force: bool (optional) - whether rewrite existing file and Document
     * @param uid A UUID string identifying this upload session. (required)
     * @param uploadSessionDetail  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidBatchUploadPOSTAsync(String uid, UploadSessionDetail uploadSessionDetail, final ApiCallback<UploadSessionDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUploadSessionUidBatchUploadPOSTValidateBeforeCall(uid, uploadSessionDetail, _callback);
        Type localVarReturnType = new TypeToken<UploadSessionDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUploadSessionUidBatchUploadPOST_0
     * @param uid A UUID string identifying this upload session. (required)
     * @param uploadSessionBatchUploadRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidBatchUploadPOST_0Call(String uid, UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = uploadSessionBatchUploadRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/upload-session/{uid}/batch_upload/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUploadSessionUidBatchUploadPOST_0ValidateBeforeCall(String uid, UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling projectUploadSessionUidBatchUploadPOST_0(Async)");
        }
        

        okhttp3.Call localVarCall = projectUploadSessionUidBatchUploadPOST_0Call(uid, uploadSessionBatchUploadRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Upload files from given sub-folder in media/data/documents folder      Params:         - source_path: relative path to a folder with documents
     * @param uid A UUID string identifying this upload session. (required)
     * @param uploadSessionBatchUploadRequest  (optional)
     * @return UploadSessionDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UploadSessionDetail projectUploadSessionUidBatchUploadPOST_0(String uid, UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest) throws ApiException {
        ApiResponse<UploadSessionDetail> localVarResp = projectUploadSessionUidBatchUploadPOST_0WithHttpInfo(uid, uploadSessionBatchUploadRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Upload files from given sub-folder in media/data/documents folder      Params:         - source_path: relative path to a folder with documents
     * @param uid A UUID string identifying this upload session. (required)
     * @param uploadSessionBatchUploadRequest  (optional)
     * @return ApiResponse&lt;UploadSessionDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadSessionDetail> projectUploadSessionUidBatchUploadPOST_0WithHttpInfo(String uid, UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = projectUploadSessionUidBatchUploadPOST_0ValidateBeforeCall(uid, uploadSessionBatchUploadRequest, null);
        Type localVarReturnType = new TypeToken<UploadSessionDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upload files from given sub-folder in media/data/documents folder      Params:         - source_path: relative path to a folder with documents
     * @param uid A UUID string identifying this upload session. (required)
     * @param uploadSessionBatchUploadRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidBatchUploadPOST_0Async(String uid, UploadSessionBatchUploadRequest uploadSessionBatchUploadRequest, final ApiCallback<UploadSessionDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUploadSessionUidBatchUploadPOST_0ValidateBeforeCall(uid, uploadSessionBatchUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadSessionDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUploadSessionUidCancelDELETE
     * @param uid A UUID string identifying this upload session. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidCancelDELETECall(String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/upload-session/{uid}/cancel/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUploadSessionUidCancelDELETEValidateBeforeCall(String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling projectUploadSessionUidCancelDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = projectUploadSessionUidCancelDELETECall(uid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a file from session      Params:         - filename: str
     * @param uid A UUID string identifying this upload session. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectUploadSessionUidCancelDELETE(String uid) throws ApiException {
        projectUploadSessionUidCancelDELETEWithHttpInfo(uid);
    }

    /**
     * 
     * Delete a file from session      Params:         - filename: str
     * @param uid A UUID string identifying this upload session. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectUploadSessionUidCancelDELETEWithHttpInfo(String uid) throws ApiException {
        okhttp3.Call localVarCall = projectUploadSessionUidCancelDELETEValidateBeforeCall(uid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a file from session      Params:         - filename: str
     * @param uid A UUID string identifying this upload session. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidCancelDELETEAsync(String uid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUploadSessionUidCancelDELETEValidateBeforeCall(uid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUploadSessionUidDELETE
     * @param uid A UUID string identifying this upload session. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidDELETECall(String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/upload-session/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUploadSessionUidDELETEValidateBeforeCall(String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling projectUploadSessionUidDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = projectUploadSessionUidDELETECall(uid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete Session Upload
     * @param uid A UUID string identifying this upload session. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectUploadSessionUidDELETE(String uid) throws ApiException {
        projectUploadSessionUidDELETEWithHttpInfo(uid);
    }

    /**
     * 
     * Delete Session Upload
     * @param uid A UUID string identifying this upload session. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectUploadSessionUidDELETEWithHttpInfo(String uid) throws ApiException {
        okhttp3.Call localVarCall = projectUploadSessionUidDELETEValidateBeforeCall(uid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete Session Upload
     * @param uid A UUID string identifying this upload session. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidDELETEAsync(String uid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUploadSessionUidDELETEValidateBeforeCall(uid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUploadSessionUidDeleteFileDELETE
     * @param uid A UUID string identifying this upload session. (required)
     * @param uploadSessionDeleteFileRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidDeleteFileDELETECall(String uid, UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = uploadSessionDeleteFileRequest;

        // create path and map variables
        String localVarPath = "/api/v1/project/upload-session/{uid}/delete-file/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUploadSessionUidDeleteFileDELETEValidateBeforeCall(String uid, UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling projectUploadSessionUidDeleteFileDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = projectUploadSessionUidDeleteFileDELETECall(uid, uploadSessionDeleteFileRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a file from session      Params:         - filename: str
     * @param uid A UUID string identifying this upload session. (required)
     * @param uploadSessionDeleteFileRequest  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String projectUploadSessionUidDeleteFileDELETE(String uid, UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest) throws ApiException {
        ApiResponse<String> localVarResp = projectUploadSessionUidDeleteFileDELETEWithHttpInfo(uid, uploadSessionDeleteFileRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a file from session      Params:         - filename: str
     * @param uid A UUID string identifying this upload session. (required)
     * @param uploadSessionDeleteFileRequest  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> projectUploadSessionUidDeleteFileDELETEWithHttpInfo(String uid, UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest) throws ApiException {
        okhttp3.Call localVarCall = projectUploadSessionUidDeleteFileDELETEValidateBeforeCall(uid, uploadSessionDeleteFileRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a file from session      Params:         - filename: str
     * @param uid A UUID string identifying this upload session. (required)
     * @param uploadSessionDeleteFileRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidDeleteFileDELETEAsync(String uid, UploadSessionDeleteFileRequest uploadSessionDeleteFileRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUploadSessionUidDeleteFileDELETEValidateBeforeCall(uid, uploadSessionDeleteFileRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUploadSessionUidFilesPOST
     * @param uid A UUID string identifying this upload session. (required)
     * @param contentLength Content Length (required)
     * @param fileName Content Length (required)
     * @param force Force upload (optional)
     * @param directoryPath Directory Path (optional)
     * @param force2 Force upload (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidFilesPOSTCall(String uid, Integer contentLength, String fileName, Boolean force, Boolean directoryPath, Boolean force2, File body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/project/upload-session/{uid}/files/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force2));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentLength != null) {
            localVarHeaderParams.put("Content-Length", localVarApiClient.parameterToString(contentLength));
        }

        if (fileName != null) {
            localVarHeaderParams.put("File-Name", localVarApiClient.parameterToString(fileName));
        }

        if (force != null) {
            localVarHeaderParams.put("Force", localVarApiClient.parameterToString(force));
        }

        if (directoryPath != null) {
            localVarHeaderParams.put("Directory-Path", localVarApiClient.parameterToString(directoryPath));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/offset+octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUploadSessionUidFilesPOSTValidateBeforeCall(String uid, Integer contentLength, String fileName, Boolean force, Boolean directoryPath, Boolean force2, File body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling projectUploadSessionUidFilesPOST(Async)");
        }
        
        // verify the required parameter 'contentLength' is set
        if (contentLength == null) {
            throw new ApiException("Missing the required parameter 'contentLength' when calling projectUploadSessionUidFilesPOST(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling projectUploadSessionUidFilesPOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectUploadSessionUidFilesPOSTCall(uid, contentLength, fileName, force, directoryPath, force2, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param uid A UUID string identifying this upload session. (required)
     * @param contentLength Content Length (required)
     * @param fileName Content Length (required)
     * @param force Force upload (optional)
     * @param directoryPath Directory Path (optional)
     * @param force2 Force upload (optional)
     * @param body  (optional)
     * @return ProjectUploadSessionFilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUploadSessionFilesResponse projectUploadSessionUidFilesPOST(String uid, Integer contentLength, String fileName, Boolean force, Boolean directoryPath, Boolean force2, File body) throws ApiException {
        ApiResponse<ProjectUploadSessionFilesResponse> localVarResp = projectUploadSessionUidFilesPOSTWithHttpInfo(uid, contentLength, fileName, force, directoryPath, force2, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uid A UUID string identifying this upload session. (required)
     * @param contentLength Content Length (required)
     * @param fileName Content Length (required)
     * @param force Force upload (optional)
     * @param directoryPath Directory Path (optional)
     * @param force2 Force upload (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;ProjectUploadSessionFilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUploadSessionFilesResponse> projectUploadSessionUidFilesPOSTWithHttpInfo(String uid, Integer contentLength, String fileName, Boolean force, Boolean directoryPath, Boolean force2, File body) throws ApiException {
        okhttp3.Call localVarCall = projectUploadSessionUidFilesPOSTValidateBeforeCall(uid, contentLength, fileName, force, directoryPath, force2, body, null);
        Type localVarReturnType = new TypeToken<ProjectUploadSessionFilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uid A UUID string identifying this upload session. (required)
     * @param contentLength Content Length (required)
     * @param fileName Content Length (required)
     * @param force Force upload (optional)
     * @param directoryPath Directory Path (optional)
     * @param force2 Force upload (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidFilesPOSTAsync(String uid, Integer contentLength, String fileName, Boolean force, Boolean directoryPath, Boolean force2, File body, final ApiCallback<ProjectUploadSessionFilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUploadSessionUidFilesPOSTValidateBeforeCall(uid, contentLength, fileName, force, directoryPath, force2, body, _callback);
        Type localVarReturnType = new TypeToken<ProjectUploadSessionFilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUploadSessionUidGET
     * @param uid A UUID string identifying this upload session. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidGETCall(String uid, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/upload-session/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUploadSessionUidGETValidateBeforeCall(String uid, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling projectUploadSessionUidGET(Async)");
        }
        

        okhttp3.Call localVarCall = projectUploadSessionUidGETCall(uid, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve Session Upload
     * @param uid A UUID string identifying this upload session. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return UploadSessionDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UploadSessionDetail projectUploadSessionUidGET(String uid, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<UploadSessionDetail> localVarResp = projectUploadSessionUidGETWithHttpInfo(uid, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve Session Upload
     * @param uid A UUID string identifying this upload session. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;UploadSessionDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadSessionDetail> projectUploadSessionUidGETWithHttpInfo(String uid, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = projectUploadSessionUidGETValidateBeforeCall(uid, jqFilters, null);
        Type localVarReturnType = new TypeToken<UploadSessionDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve Session Upload
     * @param uid A UUID string identifying this upload session. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidGETAsync(String uid, Map<String, String> jqFilters, final ApiCallback<UploadSessionDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUploadSessionUidGETValidateBeforeCall(uid, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<UploadSessionDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUploadSessionUidProgressGET
     * @param uid A UUID string identifying this upload session. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidProgressGETCall(String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/upload-session/{uid}/progress/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUploadSessionUidProgressGETValidateBeforeCall(String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling projectUploadSessionUidProgressGET(Async)");
        }
        

        okhttp3.Call localVarCall = projectUploadSessionUidProgressGETCall(uid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get Progress for a session per files (short form)
     * @param uid A UUID string identifying this upload session. (required)
     * @return ProjectUploadSessionProgressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUploadSessionProgressResponse projectUploadSessionUidProgressGET(String uid) throws ApiException {
        ApiResponse<ProjectUploadSessionProgressResponse> localVarResp = projectUploadSessionUidProgressGETWithHttpInfo(uid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get Progress for a session per files (short form)
     * @param uid A UUID string identifying this upload session. (required)
     * @return ApiResponse&lt;ProjectUploadSessionProgressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUploadSessionProgressResponse> projectUploadSessionUidProgressGETWithHttpInfo(String uid) throws ApiException {
        okhttp3.Call localVarCall = projectUploadSessionUidProgressGETValidateBeforeCall(uid, null);
        Type localVarReturnType = new TypeToken<ProjectUploadSessionProgressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Progress for a session per files (short form)
     * @param uid A UUID string identifying this upload session. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidProgressGETAsync(String uid, final ApiCallback<ProjectUploadSessionProgressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUploadSessionUidProgressGETValidateBeforeCall(uid, _callback);
        Type localVarReturnType = new TypeToken<ProjectUploadSessionProgressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUploadSessionUidUploadPOST
     * @param uid A UUID string identifying this upload session. (required)
     * @param fileName File Name (required)
     * @param fileEncoding File Encoding (required)
     * @param force Force upload (optional)
     * @param reviewFile Review File (optional)
     * @param directoryPath Directory Path (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidUploadPOSTCall(String uid, Boolean fileName, String fileEncoding, Boolean force, Boolean reviewFile, Boolean directoryPath, File body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/project/upload-session/{uid}/upload/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (fileName != null) {
            localVarHeaderParams.put("File-Name", localVarApiClient.parameterToString(fileName));
        }

        if (fileEncoding != null) {
            localVarHeaderParams.put("File-Encoding", localVarApiClient.parameterToString(fileEncoding));
        }

        if (force != null) {
            localVarHeaderParams.put("Force", localVarApiClient.parameterToString(force));
        }

        if (reviewFile != null) {
            localVarHeaderParams.put("Review-File", localVarApiClient.parameterToString(reviewFile));
        }

        if (directoryPath != null) {
            localVarHeaderParams.put("Directory-Path", localVarApiClient.parameterToString(directoryPath));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUploadSessionUidUploadPOSTValidateBeforeCall(String uid, Boolean fileName, String fileEncoding, Boolean force, Boolean reviewFile, Boolean directoryPath, File body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling projectUploadSessionUidUploadPOST(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling projectUploadSessionUidUploadPOST(Async)");
        }
        
        // verify the required parameter 'fileEncoding' is set
        if (fileEncoding == null) {
            throw new ApiException("Missing the required parameter 'fileEncoding' when calling projectUploadSessionUidUploadPOST(Async)");
        }
        

        okhttp3.Call localVarCall = projectUploadSessionUidUploadPOSTCall(uid, fileName, fileEncoding, force, reviewFile, directoryPath, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Upload a File      Params:         - file: file object         - force: bool (optional) - whether rewrite existing file and Document         - review_file: bool - whether skip file check (exists or not)         - directory_path: str - may be passed from TUS plugin
     * @param uid A UUID string identifying this upload session. (required)
     * @param fileName File Name (required)
     * @param fileEncoding File Encoding (required)
     * @param force Force upload (optional)
     * @param reviewFile Review File (optional)
     * @param directoryPath Directory Path (optional)
     * @param body  (optional)
     * @return ProjectUploadSessionPOSTResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUploadSessionPOSTResponse projectUploadSessionUidUploadPOST(String uid, Boolean fileName, String fileEncoding, Boolean force, Boolean reviewFile, Boolean directoryPath, File body) throws ApiException {
        ApiResponse<ProjectUploadSessionPOSTResponse> localVarResp = projectUploadSessionUidUploadPOSTWithHttpInfo(uid, fileName, fileEncoding, force, reviewFile, directoryPath, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Upload a File      Params:         - file: file object         - force: bool (optional) - whether rewrite existing file and Document         - review_file: bool - whether skip file check (exists or not)         - directory_path: str - may be passed from TUS plugin
     * @param uid A UUID string identifying this upload session. (required)
     * @param fileName File Name (required)
     * @param fileEncoding File Encoding (required)
     * @param force Force upload (optional)
     * @param reviewFile Review File (optional)
     * @param directoryPath Directory Path (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;ProjectUploadSessionPOSTResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUploadSessionPOSTResponse> projectUploadSessionUidUploadPOSTWithHttpInfo(String uid, Boolean fileName, String fileEncoding, Boolean force, Boolean reviewFile, Boolean directoryPath, File body) throws ApiException {
        okhttp3.Call localVarCall = projectUploadSessionUidUploadPOSTValidateBeforeCall(uid, fileName, fileEncoding, force, reviewFile, directoryPath, body, null);
        Type localVarReturnType = new TypeToken<ProjectUploadSessionPOSTResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upload a File      Params:         - file: file object         - force: bool (optional) - whether rewrite existing file and Document         - review_file: bool - whether skip file check (exists or not)         - directory_path: str - may be passed from TUS plugin
     * @param uid A UUID string identifying this upload session. (required)
     * @param fileName File Name (required)
     * @param fileEncoding File Encoding (required)
     * @param force Force upload (optional)
     * @param reviewFile Review File (optional)
     * @param directoryPath Directory Path (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUploadSessionUidUploadPOSTAsync(String uid, Boolean fileName, String fileEncoding, Boolean force, Boolean reviewFile, Boolean directoryPath, File body, final ApiCallback<ProjectUploadSessionPOSTResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUploadSessionUidUploadPOSTValidateBeforeCall(uid, fileName, fileEncoding, force, reviewFile, directoryPath, body, _callback);
        Type localVarReturnType = new TypeToken<ProjectUploadSessionPOSTResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
