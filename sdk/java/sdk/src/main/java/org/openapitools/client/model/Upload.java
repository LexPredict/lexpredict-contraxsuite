/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.File;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Upload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class Upload {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private UUID guid;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_UPLOAD_OFFSET = "upload_offset";
  @SerializedName(SERIALIZED_NAME_UPLOAD_OFFSET)
  private Long uploadOffset;

  public static final String SERIALIZED_NAME_UPLOAD_LENGTH = "upload_length";
  @SerializedName(SERIALIZED_NAME_UPLOAD_LENGTH)
  private Long uploadLength;

  public static final String SERIALIZED_NAME_UPLOAD_METADATA = "upload_metadata";
  @SerializedName(SERIALIZED_NAME_UPLOAD_METADATA)
  private String uploadMetadata;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_TEMPORARY_FILE_PATH = "temporary_file_path";
  @SerializedName(SERIALIZED_NAME_TEMPORARY_FILE_PATH)
  private String temporaryFilePath;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private OffsetDateTime expires;

  public static final String SERIALIZED_NAME_UPLOADED_FILE = "uploaded_file";
  @SerializedName(SERIALIZED_NAME_UPLOADED_FILE)
  private File uploadedFile;

  public Upload() { 
  }

  
  public Upload(
     Integer id
  ) {
    this();
    this.id = id;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




  public Upload guid(UUID guid) {
    
    this.guid = guid;
    return this;
  }

   /**
   * Get guid
   * @return guid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getGuid() {
    return guid;
  }


  public void setGuid(UUID guid) {
    this.guid = guid;
  }


  public Upload state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public Upload uploadOffset(Long uploadOffset) {
    
    this.uploadOffset = uploadOffset;
    return this;
  }

   /**
   * Get uploadOffset
   * minimum: -9223372036854775808
   * maximum: 9223372036854775807
   * @return uploadOffset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getUploadOffset() {
    return uploadOffset;
  }


  public void setUploadOffset(Long uploadOffset) {
    this.uploadOffset = uploadOffset;
  }


  public Upload uploadLength(Long uploadLength) {
    
    this.uploadLength = uploadLength;
    return this;
  }

   /**
   * Get uploadLength
   * minimum: -9223372036854775808
   * maximum: 9223372036854775807
   * @return uploadLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getUploadLength() {
    return uploadLength;
  }


  public void setUploadLength(Long uploadLength) {
    this.uploadLength = uploadLength;
  }


  public Upload uploadMetadata(String uploadMetadata) {
    
    this.uploadMetadata = uploadMetadata;
    return this;
  }

   /**
   * Get uploadMetadata
   * @return uploadMetadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUploadMetadata() {
    return uploadMetadata;
  }


  public void setUploadMetadata(String uploadMetadata) {
    this.uploadMetadata = uploadMetadata;
  }


  public Upload filename(String filename) {
    
    this.filename = filename;
    return this;
  }

   /**
   * Get filename
   * @return filename
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFilename() {
    return filename;
  }


  public void setFilename(String filename) {
    this.filename = filename;
  }


  public Upload temporaryFilePath(String temporaryFilePath) {
    
    this.temporaryFilePath = temporaryFilePath;
    return this;
  }

   /**
   * Get temporaryFilePath
   * @return temporaryFilePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTemporaryFilePath() {
    return temporaryFilePath;
  }


  public void setTemporaryFilePath(String temporaryFilePath) {
    this.temporaryFilePath = temporaryFilePath;
  }


  public Upload expires(OffsetDateTime expires) {
    
    this.expires = expires;
    return this;
  }

   /**
   * Get expires
   * @return expires
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getExpires() {
    return expires;
  }


  public void setExpires(OffsetDateTime expires) {
    this.expires = expires;
  }


  public Upload uploadedFile(File uploadedFile) {
    
    this.uploadedFile = uploadedFile;
    return this;
  }

   /**
   * Get uploadedFile
   * @return uploadedFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public File getUploadedFile() {
    return uploadedFile;
  }


  public void setUploadedFile(File uploadedFile) {
    this.uploadedFile = uploadedFile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Upload upload = (Upload) o;
    return Objects.equals(this.id, upload.id) &&
        Objects.equals(this.guid, upload.guid) &&
        Objects.equals(this.state, upload.state) &&
        Objects.equals(this.uploadOffset, upload.uploadOffset) &&
        Objects.equals(this.uploadLength, upload.uploadLength) &&
        Objects.equals(this.uploadMetadata, upload.uploadMetadata) &&
        Objects.equals(this.filename, upload.filename) &&
        Objects.equals(this.temporaryFilePath, upload.temporaryFilePath) &&
        Objects.equals(this.expires, upload.expires) &&
        Objects.equals(this.uploadedFile, upload.uploadedFile);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, guid, state, uploadOffset, uploadLength, uploadMetadata, filename, temporaryFilePath, expires, uploadedFile);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Upload {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uploadOffset: ").append(toIndentedString(uploadOffset)).append("\n");
    sb.append("    uploadLength: ").append(toIndentedString(uploadLength)).append("\n");
    sb.append("    uploadMetadata: ").append(toIndentedString(uploadMetadata)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    temporaryFilePath: ").append(toIndentedString(temporaryFilePath)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    uploadedFile: ").append(toIndentedString(uploadedFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("guid");
    openapiFields.add("state");
    openapiFields.add("upload_offset");
    openapiFields.add("upload_length");
    openapiFields.add("upload_metadata");
    openapiFields.add("filename");
    openapiFields.add("temporary_file_path");
    openapiFields.add("expires");
    openapiFields.add("uploaded_file");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("upload_metadata");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Upload
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Upload.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Upload is not found in the empty JSON string", Upload.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Upload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Upload` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Upload.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (jsonObj.get("upload_metadata") != null && !jsonObj.get("upload_metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upload_metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upload_metadata").toString()));
      }
      if (jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if (jsonObj.get("temporary_file_path") != null && !jsonObj.get("temporary_file_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temporary_file_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temporary_file_path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Upload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Upload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Upload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Upload.class));

       return (TypeAdapter<T>) new TypeAdapter<Upload>() {
           @Override
           public void write(JsonWriter out, Upload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Upload read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Upload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Upload
  * @throws IOException if the JSON string is invalid with respect to Upload
  */
  public static Upload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Upload.class);
  }

 /**
  * Convert an instance of Upload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

