/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssignProjectAnnotationsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class AssignProjectAnnotationsRequest {
  public static final String SERIALIZED_NAME_ASSIGNEE_ID = "assignee_id";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_ID)
  private Integer assigneeId;

  public static final String SERIALIZED_NAME_ALL = "all";
  @SerializedName(SERIALIZED_NAME_ALL)
  private Boolean all;

  public static final String SERIALIZED_NAME_ANNOTATION_IDS = "annotation_ids";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_IDS)
  private List<Integer> annotationIds = null;

  public static final String SERIALIZED_NAME_NO_ANNOTATION_IDS = "no_annotation_ids";
  @SerializedName(SERIALIZED_NAME_NO_ANNOTATION_IDS)
  private List<Integer> noAnnotationIds = null;

  public AssignProjectAnnotationsRequest() { 
  }

  public AssignProjectAnnotationsRequest assigneeId(Integer assigneeId) {
    
    this.assigneeId = assigneeId;
    return this;
  }

   /**
   * Get assigneeId
   * @return assigneeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAssigneeId() {
    return assigneeId;
  }


  public void setAssigneeId(Integer assigneeId) {
    this.assigneeId = assigneeId;
  }


  public AssignProjectAnnotationsRequest all(Boolean all) {
    
    this.all = all;
    return this;
  }

   /**
   * Get all
   * @return all
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAll() {
    return all;
  }


  public void setAll(Boolean all) {
    this.all = all;
  }


  public AssignProjectAnnotationsRequest annotationIds(List<Integer> annotationIds) {
    
    this.annotationIds = annotationIds;
    return this;
  }

  public AssignProjectAnnotationsRequest addAnnotationIdsItem(Integer annotationIdsItem) {
    if (this.annotationIds == null) {
      this.annotationIds = new ArrayList<>();
    }
    this.annotationIds.add(annotationIdsItem);
    return this;
  }

   /**
   * Get annotationIds
   * @return annotationIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getAnnotationIds() {
    return annotationIds;
  }


  public void setAnnotationIds(List<Integer> annotationIds) {
    this.annotationIds = annotationIds;
  }


  public AssignProjectAnnotationsRequest noAnnotationIds(List<Integer> noAnnotationIds) {
    
    this.noAnnotationIds = noAnnotationIds;
    return this;
  }

  public AssignProjectAnnotationsRequest addNoAnnotationIdsItem(Integer noAnnotationIdsItem) {
    if (this.noAnnotationIds == null) {
      this.noAnnotationIds = new ArrayList<>();
    }
    this.noAnnotationIds.add(noAnnotationIdsItem);
    return this;
  }

   /**
   * Get noAnnotationIds
   * @return noAnnotationIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getNoAnnotationIds() {
    return noAnnotationIds;
  }


  public void setNoAnnotationIds(List<Integer> noAnnotationIds) {
    this.noAnnotationIds = noAnnotationIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignProjectAnnotationsRequest assignProjectAnnotationsRequest = (AssignProjectAnnotationsRequest) o;
    return Objects.equals(this.assigneeId, assignProjectAnnotationsRequest.assigneeId) &&
        Objects.equals(this.all, assignProjectAnnotationsRequest.all) &&
        Objects.equals(this.annotationIds, assignProjectAnnotationsRequest.annotationIds) &&
        Objects.equals(this.noAnnotationIds, assignProjectAnnotationsRequest.noAnnotationIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assigneeId, all, annotationIds, noAnnotationIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignProjectAnnotationsRequest {\n");
    sb.append("    assigneeId: ").append(toIndentedString(assigneeId)).append("\n");
    sb.append("    all: ").append(toIndentedString(all)).append("\n");
    sb.append("    annotationIds: ").append(toIndentedString(annotationIds)).append("\n");
    sb.append("    noAnnotationIds: ").append(toIndentedString(noAnnotationIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignee_id");
    openapiFields.add("all");
    openapiFields.add("annotation_ids");
    openapiFields.add("no_annotation_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AssignProjectAnnotationsRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AssignProjectAnnotationsRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssignProjectAnnotationsRequest is not found in the empty JSON string", AssignProjectAnnotationsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AssignProjectAnnotationsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssignProjectAnnotationsRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("annotation_ids") != null && !jsonObj.get("annotation_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotation_ids` to be an array in the JSON string but got `%s`", jsonObj.get("annotation_ids").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("no_annotation_ids") != null && !jsonObj.get("no_annotation_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `no_annotation_ids` to be an array in the JSON string but got `%s`", jsonObj.get("no_annotation_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssignProjectAnnotationsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssignProjectAnnotationsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssignProjectAnnotationsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssignProjectAnnotationsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AssignProjectAnnotationsRequest>() {
           @Override
           public void write(JsonWriter out, AssignProjectAnnotationsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssignProjectAnnotationsRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AssignProjectAnnotationsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AssignProjectAnnotationsRequest
  * @throws IOException if the JSON string is invalid with respect to AssignProjectAnnotationsRequest
  */
  public static AssignProjectAnnotationsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssignProjectAnnotationsRequest.class);
  }

 /**
  * Convert an instance of AssignProjectAnnotationsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

