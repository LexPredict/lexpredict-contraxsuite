/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ProjectActiveTasksTasks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectActiveTasks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class ProjectActiveTasks {
  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private ProjectActiveTasksTasks tasks;

  public static final String SERIALIZED_NAME_DOCUMENT_TRANSFORMER_CHANGE_IN_PROGRESS = "document_transformer_change_in_progress";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TRANSFORMER_CHANGE_IN_PROGRESS)
  private Boolean documentTransformerChangeInProgress;

  public static final String SERIALIZED_NAME_TEXT_UNIT_TRANSFORMER_CHANGE_IN_PROGRESS = "text_unit_transformer_change_in_progress";
  @SerializedName(SERIALIZED_NAME_TEXT_UNIT_TRANSFORMER_CHANGE_IN_PROGRESS)
  private Boolean textUnitTransformerChangeInProgress;

  public static final String SERIALIZED_NAME_LOCATE_TERMS_IN_PROGRESS = "locate_terms_in_progress";
  @SerializedName(SERIALIZED_NAME_LOCATE_TERMS_IN_PROGRESS)
  private Boolean locateTermsInProgress;

  public static final String SERIALIZED_NAME_LOCATE_COMPANIES_IN_PROGRESS = "locate_companies_in_progress";
  @SerializedName(SERIALIZED_NAME_LOCATE_COMPANIES_IN_PROGRESS)
  private Boolean locateCompaniesInProgress;

  public ProjectActiveTasks() { 
  }

  public ProjectActiveTasks tasks(ProjectActiveTasksTasks tasks) {
    
    this.tasks = tasks;
    return this;
  }

   /**
   * Get tasks
   * @return tasks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ProjectActiveTasksTasks getTasks() {
    return tasks;
  }


  public void setTasks(ProjectActiveTasksTasks tasks) {
    this.tasks = tasks;
  }


  public ProjectActiveTasks documentTransformerChangeInProgress(Boolean documentTransformerChangeInProgress) {
    
    this.documentTransformerChangeInProgress = documentTransformerChangeInProgress;
    return this;
  }

   /**
   * Get documentTransformerChangeInProgress
   * @return documentTransformerChangeInProgress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getDocumentTransformerChangeInProgress() {
    return documentTransformerChangeInProgress;
  }


  public void setDocumentTransformerChangeInProgress(Boolean documentTransformerChangeInProgress) {
    this.documentTransformerChangeInProgress = documentTransformerChangeInProgress;
  }


  public ProjectActiveTasks textUnitTransformerChangeInProgress(Boolean textUnitTransformerChangeInProgress) {
    
    this.textUnitTransformerChangeInProgress = textUnitTransformerChangeInProgress;
    return this;
  }

   /**
   * Get textUnitTransformerChangeInProgress
   * @return textUnitTransformerChangeInProgress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getTextUnitTransformerChangeInProgress() {
    return textUnitTransformerChangeInProgress;
  }


  public void setTextUnitTransformerChangeInProgress(Boolean textUnitTransformerChangeInProgress) {
    this.textUnitTransformerChangeInProgress = textUnitTransformerChangeInProgress;
  }


  public ProjectActiveTasks locateTermsInProgress(Boolean locateTermsInProgress) {
    
    this.locateTermsInProgress = locateTermsInProgress;
    return this;
  }

   /**
   * Get locateTermsInProgress
   * @return locateTermsInProgress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getLocateTermsInProgress() {
    return locateTermsInProgress;
  }


  public void setLocateTermsInProgress(Boolean locateTermsInProgress) {
    this.locateTermsInProgress = locateTermsInProgress;
  }


  public ProjectActiveTasks locateCompaniesInProgress(Boolean locateCompaniesInProgress) {
    
    this.locateCompaniesInProgress = locateCompaniesInProgress;
    return this;
  }

   /**
   * Get locateCompaniesInProgress
   * @return locateCompaniesInProgress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getLocateCompaniesInProgress() {
    return locateCompaniesInProgress;
  }


  public void setLocateCompaniesInProgress(Boolean locateCompaniesInProgress) {
    this.locateCompaniesInProgress = locateCompaniesInProgress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectActiveTasks projectActiveTasks = (ProjectActiveTasks) o;
    return Objects.equals(this.tasks, projectActiveTasks.tasks) &&
        Objects.equals(this.documentTransformerChangeInProgress, projectActiveTasks.documentTransformerChangeInProgress) &&
        Objects.equals(this.textUnitTransformerChangeInProgress, projectActiveTasks.textUnitTransformerChangeInProgress) &&
        Objects.equals(this.locateTermsInProgress, projectActiveTasks.locateTermsInProgress) &&
        Objects.equals(this.locateCompaniesInProgress, projectActiveTasks.locateCompaniesInProgress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tasks, documentTransformerChangeInProgress, textUnitTransformerChangeInProgress, locateTermsInProgress, locateCompaniesInProgress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectActiveTasks {\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    documentTransformerChangeInProgress: ").append(toIndentedString(documentTransformerChangeInProgress)).append("\n");
    sb.append("    textUnitTransformerChangeInProgress: ").append(toIndentedString(textUnitTransformerChangeInProgress)).append("\n");
    sb.append("    locateTermsInProgress: ").append(toIndentedString(locateTermsInProgress)).append("\n");
    sb.append("    locateCompaniesInProgress: ").append(toIndentedString(locateCompaniesInProgress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tasks");
    openapiFields.add("document_transformer_change_in_progress");
    openapiFields.add("text_unit_transformer_change_in_progress");
    openapiFields.add("locate_terms_in_progress");
    openapiFields.add("locate_companies_in_progress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tasks");
    openapiRequiredFields.add("document_transformer_change_in_progress");
    openapiRequiredFields.add("text_unit_transformer_change_in_progress");
    openapiRequiredFields.add("locate_terms_in_progress");
    openapiRequiredFields.add("locate_companies_in_progress");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProjectActiveTasks
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ProjectActiveTasks.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectActiveTasks is not found in the empty JSON string", ProjectActiveTasks.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProjectActiveTasks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectActiveTasks` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectActiveTasks.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `tasks`
      if (jsonObj.getAsJsonObject("tasks") != null) {
        ProjectActiveTasksTasks.validateJsonObject(jsonObj.getAsJsonObject("tasks"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectActiveTasks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectActiveTasks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectActiveTasks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectActiveTasks.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectActiveTasks>() {
           @Override
           public void write(JsonWriter out, ProjectActiveTasks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectActiveTasks read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProjectActiveTasks given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProjectActiveTasks
  * @throws IOException if the JSON string is invalid with respect to ProjectActiveTasks
  */
  public static ProjectActiveTasks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectActiveTasks.class);
  }

 /**
  * Convert an instance of ProjectActiveTasks to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

