/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RawdbDocumentsPOSTRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RawdbApi {
    private ApiClient localVarApiClient;

    public RawdbApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RawdbApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for rawdbConfigGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawdbConfigGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rawdb/config/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rawdbConfigGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = rawdbConfigGETCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> rawdbConfigGET() throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = rawdbConfigGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> rawdbConfigGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = rawdbConfigGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawdbConfigGETAsync(final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rawdbConfigGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rawdbDocumentsDocumentTypeCodeGET
     * @param documentTypeCode  (required)
     * @param projectIds Project ids separated by commas (optional)
     * @param columns Column names separated by commas (optional)
     * @param associatedText Boolean - show associated text (optional)
     * @param asZip Boolean - export as zip (optional)
     * @param fmt Export format (optional)
     * @param limit Page Size (optional)
     * @param orderBy Sort order - column names separated by commas (optional)
     * @param savedFilters Saved filter ids separated by commas (optional)
     * @param saveFilter Save filter (optional)
     * @param returnReviewed Return Reviewed documents count (optional)
     * @param returnTotal Return total documents count (optional)
     * @param returnData Return data (optional)
     * @param ignoreErrors Ignore errors (optional)
     * @param filters Filter params (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawdbDocumentsDocumentTypeCodeGETCall(String documentTypeCode, String projectIds, String columns, Boolean associatedText, Boolean asZip, String fmt, Integer limit, String orderBy, String savedFilters, Boolean saveFilter, Boolean returnReviewed, Boolean returnTotal, Boolean returnData, Boolean ignoreErrors, Map<String, String> filters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rawdb/documents/{document_type_code}/"
            .replaceAll("\\{" + "document_type_code" + "\\}", localVarApiClient.escapeString(documentTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project_ids", projectIds));
        }

        if (columns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("columns", columns));
        }

        if (associatedText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associated_text", associatedText));
        }

        if (asZip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("as_zip", asZip));
        }

        if (fmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fmt", fmt));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (savedFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("saved_filters", savedFilters));
        }

        if (saveFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("save_filter", saveFilter));
        }

        if (returnReviewed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_reviewed", returnReviewed));
        }

        if (returnTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_total", returnTotal));
        }

        if (returnData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_data", returnData));
        }

        if (ignoreErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignore_errors", ignoreErrors));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rawdbDocumentsDocumentTypeCodeGETValidateBeforeCall(String documentTypeCode, String projectIds, String columns, Boolean associatedText, Boolean asZip, String fmt, Integer limit, String orderBy, String savedFilters, Boolean saveFilter, Boolean returnReviewed, Boolean returnTotal, Boolean returnData, Boolean ignoreErrors, Map<String, String> filters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentTypeCode' is set
        if (documentTypeCode == null) {
            throw new ApiException("Missing the required parameter 'documentTypeCode' when calling rawdbDocumentsDocumentTypeCodeGET(Async)");
        }
        

        okhttp3.Call localVarCall = rawdbDocumentsDocumentTypeCodeGETCall(documentTypeCode, projectIds, columns, associatedText, asZip, fmt, limit, orderBy, savedFilters, saveFilter, returnReviewed, returnTotal, returnData, ignoreErrors, filters, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param documentTypeCode  (required)
     * @param projectIds Project ids separated by commas (optional)
     * @param columns Column names separated by commas (optional)
     * @param associatedText Boolean - show associated text (optional)
     * @param asZip Boolean - export as zip (optional)
     * @param fmt Export format (optional)
     * @param limit Page Size (optional)
     * @param orderBy Sort order - column names separated by commas (optional)
     * @param savedFilters Saved filter ids separated by commas (optional)
     * @param saveFilter Save filter (optional)
     * @param returnReviewed Return Reviewed documents count (optional)
     * @param returnTotal Return total documents count (optional)
     * @param returnData Return data (optional)
     * @param ignoreErrors Ignore errors (optional)
     * @param filters Filter params (optional)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> rawdbDocumentsDocumentTypeCodeGET(String documentTypeCode, String projectIds, String columns, Boolean associatedText, Boolean asZip, String fmt, Integer limit, String orderBy, String savedFilters, Boolean saveFilter, Boolean returnReviewed, Boolean returnTotal, Boolean returnData, Boolean ignoreErrors, Map<String, String> filters) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = rawdbDocumentsDocumentTypeCodeGETWithHttpInfo(documentTypeCode, projectIds, columns, associatedText, asZip, fmt, limit, orderBy, savedFilters, saveFilter, returnReviewed, returnTotal, returnData, ignoreErrors, filters);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param documentTypeCode  (required)
     * @param projectIds Project ids separated by commas (optional)
     * @param columns Column names separated by commas (optional)
     * @param associatedText Boolean - show associated text (optional)
     * @param asZip Boolean - export as zip (optional)
     * @param fmt Export format (optional)
     * @param limit Page Size (optional)
     * @param orderBy Sort order - column names separated by commas (optional)
     * @param savedFilters Saved filter ids separated by commas (optional)
     * @param saveFilter Save filter (optional)
     * @param returnReviewed Return Reviewed documents count (optional)
     * @param returnTotal Return total documents count (optional)
     * @param returnData Return data (optional)
     * @param ignoreErrors Ignore errors (optional)
     * @param filters Filter params (optional)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> rawdbDocumentsDocumentTypeCodeGETWithHttpInfo(String documentTypeCode, String projectIds, String columns, Boolean associatedText, Boolean asZip, String fmt, Integer limit, String orderBy, String savedFilters, Boolean saveFilter, Boolean returnReviewed, Boolean returnTotal, Boolean returnData, Boolean ignoreErrors, Map<String, String> filters) throws ApiException {
        okhttp3.Call localVarCall = rawdbDocumentsDocumentTypeCodeGETValidateBeforeCall(documentTypeCode, projectIds, columns, associatedText, asZip, fmt, limit, orderBy, savedFilters, saveFilter, returnReviewed, returnTotal, returnData, ignoreErrors, filters, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param documentTypeCode  (required)
     * @param projectIds Project ids separated by commas (optional)
     * @param columns Column names separated by commas (optional)
     * @param associatedText Boolean - show associated text (optional)
     * @param asZip Boolean - export as zip (optional)
     * @param fmt Export format (optional)
     * @param limit Page Size (optional)
     * @param orderBy Sort order - column names separated by commas (optional)
     * @param savedFilters Saved filter ids separated by commas (optional)
     * @param saveFilter Save filter (optional)
     * @param returnReviewed Return Reviewed documents count (optional)
     * @param returnTotal Return total documents count (optional)
     * @param returnData Return data (optional)
     * @param ignoreErrors Ignore errors (optional)
     * @param filters Filter params (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawdbDocumentsDocumentTypeCodeGETAsync(String documentTypeCode, String projectIds, String columns, Boolean associatedText, Boolean asZip, String fmt, Integer limit, String orderBy, String savedFilters, Boolean saveFilter, Boolean returnReviewed, Boolean returnTotal, Boolean returnData, Boolean ignoreErrors, Map<String, String> filters, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rawdbDocumentsDocumentTypeCodeGETValidateBeforeCall(documentTypeCode, projectIds, columns, associatedText, asZip, fmt, limit, orderBy, savedFilters, saveFilter, returnReviewed, returnTotal, returnData, ignoreErrors, filters, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rawdbDocumentsDocumentTypeCodePOST
     * @param documentTypeCode  (required)
     * @param rawdbDocumentsPOSTRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawdbDocumentsDocumentTypeCodePOSTCall(String documentTypeCode, RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = rawdbDocumentsPOSTRequest;

        // create path and map variables
        String localVarPath = "/api/v1/rawdb/documents/{document_type_code}/"
            .replaceAll("\\{" + "document_type_code" + "\\}", localVarApiClient.escapeString(documentTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rawdbDocumentsDocumentTypeCodePOSTValidateBeforeCall(String documentTypeCode, RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentTypeCode' is set
        if (documentTypeCode == null) {
            throw new ApiException("Missing the required parameter 'documentTypeCode' when calling rawdbDocumentsDocumentTypeCodePOST(Async)");
        }
        

        okhttp3.Call localVarCall = rawdbDocumentsDocumentTypeCodePOSTCall(documentTypeCode, rawdbDocumentsPOSTRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * See .get() method signature, .post() method just reflects it and uses the same request.GET params to get data
     * @param documentTypeCode  (required)
     * @param rawdbDocumentsPOSTRequest  (optional)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> rawdbDocumentsDocumentTypeCodePOST(String documentTypeCode, RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = rawdbDocumentsDocumentTypeCodePOSTWithHttpInfo(documentTypeCode, rawdbDocumentsPOSTRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * See .get() method signature, .post() method just reflects it and uses the same request.GET params to get data
     * @param documentTypeCode  (required)
     * @param rawdbDocumentsPOSTRequest  (optional)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> rawdbDocumentsDocumentTypeCodePOSTWithHttpInfo(String documentTypeCode, RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest) throws ApiException {
        okhttp3.Call localVarCall = rawdbDocumentsDocumentTypeCodePOSTValidateBeforeCall(documentTypeCode, rawdbDocumentsPOSTRequest, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * See .get() method signature, .post() method just reflects it and uses the same request.GET params to get data
     * @param documentTypeCode  (required)
     * @param rawdbDocumentsPOSTRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawdbDocumentsDocumentTypeCodePOSTAsync(String documentTypeCode, RawdbDocumentsPOSTRequest rawdbDocumentsPOSTRequest, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rawdbDocumentsDocumentTypeCodePOSTValidateBeforeCall(documentTypeCode, rawdbDocumentsPOSTRequest, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rawdbProjectStatsProjectIdGET
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawdbProjectStatsProjectIdGETCall(String projectId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rawdb/project_stats/{project_id}/"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rawdbProjectStatsProjectIdGETValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling rawdbProjectStatsProjectIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = rawdbProjectStatsProjectIdGETCall(projectId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectId  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> rawdbProjectStatsProjectIdGET(String projectId) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = rawdbProjectStatsProjectIdGETWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectId  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> rawdbProjectStatsProjectIdGETWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = rawdbProjectStatsProjectIdGETValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawdbProjectStatsProjectIdGETAsync(String projectId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rawdbProjectStatsProjectIdGETValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rawdbSocialAccountsGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawdbSocialAccountsGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rawdb/social_accounts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rawdbSocialAccountsGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = rawdbSocialAccountsGETCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> rawdbSocialAccountsGET() throws ApiException {
        ApiResponse<List<Object>> localVarResp = rawdbSocialAccountsGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> rawdbSocialAccountsGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = rawdbSocialAccountsGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawdbSocialAccountsGETAsync(final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rawdbSocialAccountsGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
