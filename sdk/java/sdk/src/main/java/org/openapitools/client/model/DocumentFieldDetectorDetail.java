/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * DocumentFieldDetectorDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-12-11T16:57:55.511+03:00[Europe/Moscow]")
public class DocumentFieldDetectorDetail {
  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private UUID uid;

  /**
   * Field detector category used for technical needs e.g. for determining  which field detectors were created automatically during import process.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    SIMPLE_CONFIG("simple_config");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_FIELD_CODE = "field__code";
  @SerializedName(SERIALIZED_NAME_FIELD_CODE)
  private String fieldCode;

  public static final String SERIALIZED_NAME_FIELD_TITLE = "field__title";
  @SerializedName(SERIALIZED_NAME_FIELD_TITLE)
  private String fieldTitle;

  public static final String SERIALIZED_NAME_FIELD_UID = "field__uid";
  @SerializedName(SERIALIZED_NAME_FIELD_UID)
  private String fieldUid;

  public static final String SERIALIZED_NAME_FIELD_TYPE = "field__type";
  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  private String fieldType;

  public static final String SERIALIZED_NAME_FIELD_DOCUMENT_TYPE_TITLE = "field__document_type__title";
  @SerializedName(SERIALIZED_NAME_FIELD_DOCUMENT_TYPE_TITLE)
  private String fieldDocumentTypeTitle;

  public static final String SERIALIZED_NAME_EXCLUDE_REGEXPS = "exclude_regexps";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_REGEXPS)
  private String excludeRegexps;

  public static final String SERIALIZED_NAME_DEFINITION_WORDS = "definition_words";
  @SerializedName(SERIALIZED_NAME_DEFINITION_WORDS)
  private String definitionWords;

  public static final String SERIALIZED_NAME_INCLUDE_REGEXPS = "include_regexps";
  @SerializedName(SERIALIZED_NAME_INCLUDE_REGEXPS)
  private String includeRegexps;

  public static final String SERIALIZED_NAME_REGEXPS_PRE_PROCESS_LOWER = "regexps_pre_process_lower";
  @SerializedName(SERIALIZED_NAME_REGEXPS_PRE_PROCESS_LOWER)
  private Boolean regexpsPreProcessLower;

  public static final String SERIALIZED_NAME_DETECTED_VALUE = "detected_value";
  @SerializedName(SERIALIZED_NAME_DETECTED_VALUE)
  private String detectedValue;

  /**
   * Provide additional instruction on which  specific values should be prioritized for extraction, when multiple values of the same type  (e.g., Company, Person, Geography) are found within the relevant detected Text Unit.
   */
  @JsonAdapter(ExtractionHintEnum.Adapter.class)
  public enum ExtractionHintEnum {
    FIRST("TAKE_FIRST"),
    
    SECOND("TAKE_SECOND"),
    
    LAST("TAKE_LAST"),
    
    MIN("TAKE_MIN"),
    
    MAX("TAKE_MAX");

    private String value;

    ExtractionHintEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExtractionHintEnum fromValue(String value) {
      for (ExtractionHintEnum b : ExtractionHintEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ExtractionHintEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExtractionHintEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExtractionHintEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExtractionHintEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EXTRACTION_HINT = "extraction_hint";
  @SerializedName(SERIALIZED_NAME_EXTRACTION_HINT)
  private ExtractionHintEnum extractionHint;

  /**
   * Defines which part of the matched Text Unit  should be passed to the extraction function. Example: In the string \&quot;2019-01-23 is the start date and 2019-01-24 is the  end date,\&quot; if text part &#x3D; \&quot;Before matching substring\&quot; and Include regexp is \&quot;is.{0,100}start\&quot; then \&quot;2019-01-23\&quot; will be  parsed correctly as the start date.
   */
  @JsonAdapter(TextPartEnum.Adapter.class)
  public enum TextPartEnum {
    FULL("FULL"),
    
    BEFORE_REGEXP("BEFORE_REGEXP"),
    
    AFTER_REGEXP("AFTER_REGEXP"),
    
    INSIDE_REGEXP("INSIDE_REGEXP");

    private String value;

    TextPartEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextPartEnum fromValue(String value) {
      for (TextPartEnum b : TextPartEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextPartEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextPartEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextPartEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextPartEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TEXT_PART = "text_part";
  @SerializedName(SERIALIZED_NAME_TEXT_PART)
  private TextPartEnum textPart;


   /**
   * Get uid
   * @return uid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getUid() {
    return uid;
  }




  public DocumentFieldDetectorDetail category(CategoryEnum category) {
    
    this.category = category;
    return this;
  }

   /**
   * Field detector category used for technical needs e.g. for determining  which field detectors were created automatically during import process.
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Field detector category used for technical needs e.g. for determining  which field detectors were created automatically during import process.")

  public CategoryEnum getCategory() {
    return category;
  }


  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public DocumentFieldDetectorDetail field(String field) {
    
    this.field = field;
    return this;
  }

   /**
   * Get field
   * @return field
  **/
  @ApiModelProperty(required = true, value = "")

  public String getField() {
    return field;
  }


  public void setField(String field) {
    this.field = field;
  }


   /**
   * Get fieldCode
   * @return fieldCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFieldCode() {
    return fieldCode;
  }




   /**
   * Get fieldTitle
   * @return fieldTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFieldTitle() {
    return fieldTitle;
  }




   /**
   * Get fieldUid
   * @return fieldUid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFieldUid() {
    return fieldUid;
  }




   /**
   * Get fieldType
   * @return fieldType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFieldType() {
    return fieldType;
  }




   /**
   * Get fieldDocumentTypeTitle
   * @return fieldDocumentTypeTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFieldDocumentTypeTitle() {
    return fieldDocumentTypeTitle;
  }




  public DocumentFieldDetectorDetail excludeRegexps(String excludeRegexps) {
    
    this.excludeRegexps = excludeRegexps;
    return this;
  }

   /**
   * Enter regular expressions, each on a new line, for text patterns  you want EXCLUDED. The Field Detector will attempt to skip any Text Unit that contains any of the patterns written  here, and will move on to the next Text Unit. Avoid using “.*” and similar unlimited multipliers, as they can crash  or slow ContraxSuite. Use bounded multipliers for variable length matching, like “.{0,100}” or similar. Note that  Exclude regexps are checked before Definition words and Include regexps. If a Field Detector has Exclude regexps, but  no Definition words or Include regexps, it will not extract any data.
   * @return excludeRegexps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enter regular expressions, each on a new line, for text patterns  you want EXCLUDED. The Field Detector will attempt to skip any Text Unit that contains any of the patterns written  here, and will move on to the next Text Unit. Avoid using “.*” and similar unlimited multipliers, as they can crash  or slow ContraxSuite. Use bounded multipliers for variable length matching, like “.{0,100}” or similar. Note that  Exclude regexps are checked before Definition words and Include regexps. If a Field Detector has Exclude regexps, but  no Definition words or Include regexps, it will not extract any data.")

  public String getExcludeRegexps() {
    return excludeRegexps;
  }


  public void setExcludeRegexps(String excludeRegexps) {
    this.excludeRegexps = excludeRegexps;
  }


  public DocumentFieldDetectorDetail definitionWords(String definitionWords) {
    
    this.definitionWords = definitionWords;
    return this;
  }

   /**
   * Enter words or phrases, each on a new line, that must be present  in the Text Unit. These words must be in the Definitions List. If ContraxSuite fails to recognize these words as  definitions, then the Field Detector skips and moves to the next Text Unit. If there are Include regexps, then the  Field Detector checks against those requirements. The Field Detector marks the entire Text Unit as a match. Note that  the Field Detector checks for definition words after filtering using the Exclude regexps.
   * @return definitionWords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enter words or phrases, each on a new line, that must be present  in the Text Unit. These words must be in the Definitions List. If ContraxSuite fails to recognize these words as  definitions, then the Field Detector skips and moves to the next Text Unit. If there are Include regexps, then the  Field Detector checks against those requirements. The Field Detector marks the entire Text Unit as a match. Note that  the Field Detector checks for definition words after filtering using the Exclude regexps.")

  public String getDefinitionWords() {
    return definitionWords;
  }


  public void setDefinitionWords(String definitionWords) {
    this.definitionWords = definitionWords;
  }


   /**
   * Get includeRegexps
   * @return includeRegexps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIncludeRegexps() {
    return includeRegexps;
  }




  public DocumentFieldDetectorDetail regexpsPreProcessLower(Boolean regexpsPreProcessLower) {
    
    this.regexpsPreProcessLower = regexpsPreProcessLower;
    return this;
  }

   /**
   * Set &#39;ignore case&#39; flag for both &#39;Include regexps&#39; and &#39;Exclude regexps&#39; options.
   * @return regexpsPreProcessLower
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set 'ignore case' flag for both 'Include regexps' and 'Exclude regexps' options.")

  public Boolean getRegexpsPreProcessLower() {
    return regexpsPreProcessLower;
  }


  public void setRegexpsPreProcessLower(Boolean regexpsPreProcessLower) {
    this.regexpsPreProcessLower = regexpsPreProcessLower;
  }


  public DocumentFieldDetectorDetail detectedValue(String detectedValue) {
    
    this.detectedValue = detectedValue;
    return this;
  }

   /**
   * The string value written here  will be assigned to the field if the Field Detector positively matches a Text Unit. This is only applicable to Choice,  Multichoice, and String fields, as their respective Field Detectors do not extract and display values from the source  text.
   * @return detectedValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The string value written here  will be assigned to the field if the Field Detector positively matches a Text Unit. This is only applicable to Choice,  Multichoice, and String fields, as their respective Field Detectors do not extract and display values from the source  text.")

  public String getDetectedValue() {
    return detectedValue;
  }


  public void setDetectedValue(String detectedValue) {
    this.detectedValue = detectedValue;
  }


  public DocumentFieldDetectorDetail extractionHint(ExtractionHintEnum extractionHint) {
    
    this.extractionHint = extractionHint;
    return this;
  }

   /**
   * Provide additional instruction on which  specific values should be prioritized for extraction, when multiple values of the same type  (e.g., Company, Person, Geography) are found within the relevant detected Text Unit.
   * @return extractionHint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provide additional instruction on which  specific values should be prioritized for extraction, when multiple values of the same type  (e.g., Company, Person, Geography) are found within the relevant detected Text Unit.")

  public ExtractionHintEnum getExtractionHint() {
    return extractionHint;
  }


  public void setExtractionHint(ExtractionHintEnum extractionHint) {
    this.extractionHint = extractionHint;
  }


  public DocumentFieldDetectorDetail textPart(TextPartEnum textPart) {
    
    this.textPart = textPart;
    return this;
  }

   /**
   * Defines which part of the matched Text Unit  should be passed to the extraction function. Example: In the string \&quot;2019-01-23 is the start date and 2019-01-24 is the  end date,\&quot; if text part &#x3D; \&quot;Before matching substring\&quot; and Include regexp is \&quot;is.{0,100}start\&quot; then \&quot;2019-01-23\&quot; will be  parsed correctly as the start date.
   * @return textPart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines which part of the matched Text Unit  should be passed to the extraction function. Example: In the string \"2019-01-23 is the start date and 2019-01-24 is the  end date,\" if text part = \"Before matching substring\" and Include regexp is \"is.{0,100}start\" then \"2019-01-23\" will be  parsed correctly as the start date.")

  public TextPartEnum getTextPart() {
    return textPart;
  }


  public void setTextPart(TextPartEnum textPart) {
    this.textPart = textPart;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentFieldDetectorDetail documentFieldDetectorDetail = (DocumentFieldDetectorDetail) o;
    return Objects.equals(this.uid, documentFieldDetectorDetail.uid) &&
        Objects.equals(this.category, documentFieldDetectorDetail.category) &&
        Objects.equals(this.field, documentFieldDetectorDetail.field) &&
        Objects.equals(this.fieldCode, documentFieldDetectorDetail.fieldCode) &&
        Objects.equals(this.fieldTitle, documentFieldDetectorDetail.fieldTitle) &&
        Objects.equals(this.fieldUid, documentFieldDetectorDetail.fieldUid) &&
        Objects.equals(this.fieldType, documentFieldDetectorDetail.fieldType) &&
        Objects.equals(this.fieldDocumentTypeTitle, documentFieldDetectorDetail.fieldDocumentTypeTitle) &&
        Objects.equals(this.excludeRegexps, documentFieldDetectorDetail.excludeRegexps) &&
        Objects.equals(this.definitionWords, documentFieldDetectorDetail.definitionWords) &&
        Objects.equals(this.includeRegexps, documentFieldDetectorDetail.includeRegexps) &&
        Objects.equals(this.regexpsPreProcessLower, documentFieldDetectorDetail.regexpsPreProcessLower) &&
        Objects.equals(this.detectedValue, documentFieldDetectorDetail.detectedValue) &&
        Objects.equals(this.extractionHint, documentFieldDetectorDetail.extractionHint) &&
        Objects.equals(this.textPart, documentFieldDetectorDetail.textPart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uid, category, field, fieldCode, fieldTitle, fieldUid, fieldType, fieldDocumentTypeTitle, excludeRegexps, definitionWords, includeRegexps, regexpsPreProcessLower, detectedValue, extractionHint, textPart);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentFieldDetectorDetail {\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    fieldCode: ").append(toIndentedString(fieldCode)).append("\n");
    sb.append("    fieldTitle: ").append(toIndentedString(fieldTitle)).append("\n");
    sb.append("    fieldUid: ").append(toIndentedString(fieldUid)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    fieldDocumentTypeTitle: ").append(toIndentedString(fieldDocumentTypeTitle)).append("\n");
    sb.append("    excludeRegexps: ").append(toIndentedString(excludeRegexps)).append("\n");
    sb.append("    definitionWords: ").append(toIndentedString(definitionWords)).append("\n");
    sb.append("    includeRegexps: ").append(toIndentedString(includeRegexps)).append("\n");
    sb.append("    regexpsPreProcessLower: ").append(toIndentedString(regexpsPreProcessLower)).append("\n");
    sb.append("    detectedValue: ").append(toIndentedString(detectedValue)).append("\n");
    sb.append("    extractionHint: ").append(toIndentedString(extractionHint)).append("\n");
    sb.append("    textPart: ").append(toIndentedString(textPart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

