/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomPasswordChange;
import org.openapitools.client.model.CustomPasswordReset;
import org.openapitools.client.model.CustomPasswordResetConfirm;
import org.openapitools.client.model.Login;
import org.openapitools.client.model.LoginResponse;
import org.openapitools.client.model.Register;
import org.openapitools.client.model.RestAuthCommonResponse;
import org.openapitools.client.model.VerifyEmail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RestAuthApi {
    private ApiClient localVarApiClient;

    public RestAuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RestAuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for restAuthLoginPOST
     * @param login  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthLoginPOSTCall(Login login, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = login;

        // create path and map variables
        String localVarPath = "/rest-auth/login/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restAuthLoginPOSTValidateBeforeCall(Login login, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = restAuthLoginPOSTCall(login, _callback);
        return localVarCall;

    }

    /**
     * 
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object&#39;s key.
     * @param login  (optional)
     * @return LoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public LoginResponse restAuthLoginPOST(Login login) throws ApiException {
        ApiResponse<LoginResponse> localVarResp = restAuthLoginPOSTWithHttpInfo(login);
        return localVarResp.getData();
    }

    /**
     * 
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object&#39;s key.
     * @param login  (optional)
     * @return ApiResponse&lt;LoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginResponse> restAuthLoginPOSTWithHttpInfo(Login login) throws ApiException {
        okhttp3.Call localVarCall = restAuthLoginPOSTValidateBeforeCall(login, null);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object&#39;s key.
     * @param login  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthLoginPOSTAsync(Login login, final ApiCallback<LoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = restAuthLoginPOSTValidateBeforeCall(login, _callback);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restAuthLogoutGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthLogoutGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest-auth/logout/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restAuthLogoutGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = restAuthLogoutGETCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     * @return List&lt;RestAuthCommonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<RestAuthCommonResponse> restAuthLogoutGET() throws ApiException {
        ApiResponse<List<RestAuthCommonResponse>> localVarResp = restAuthLogoutGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     * @return ApiResponse&lt;List&lt;RestAuthCommonResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RestAuthCommonResponse>> restAuthLogoutGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = restAuthLogoutGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<RestAuthCommonResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthLogoutGETAsync(final ApiCallback<List<RestAuthCommonResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = restAuthLogoutGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<RestAuthCommonResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restAuthLogoutPOST
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthLogoutPOSTCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/rest-auth/logout/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restAuthLogoutPOSTValidateBeforeCall(Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = restAuthLogoutPOSTCall(requestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     * @param requestBody  (optional)
     * @return RestAuthCommonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RestAuthCommonResponse restAuthLogoutPOST(Map<String, Object> requestBody) throws ApiException {
        ApiResponse<RestAuthCommonResponse> localVarResp = restAuthLogoutPOSTWithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     * @param requestBody  (optional)
     * @return ApiResponse&lt;RestAuthCommonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestAuthCommonResponse> restAuthLogoutPOSTWithHttpInfo(Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = restAuthLogoutPOSTValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<RestAuthCommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthLogoutPOSTAsync(Map<String, Object> requestBody, final ApiCallback<RestAuthCommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = restAuthLogoutPOSTValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<RestAuthCommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restAuthPasswordChangePOST
     * @param customPasswordChange  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthPasswordChangePOSTCall(CustomPasswordChange customPasswordChange, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customPasswordChange;

        // create path and map variables
        String localVarPath = "/rest-auth/password/change/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restAuthPasswordChangePOSTValidateBeforeCall(CustomPasswordChange customPasswordChange, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = restAuthPasswordChangePOSTCall(customPasswordChange, _callback);
        return localVarCall;

    }

    /**
     * 
     * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     * @param customPasswordChange  (optional)
     * @return RestAuthCommonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RestAuthCommonResponse restAuthPasswordChangePOST(CustomPasswordChange customPasswordChange) throws ApiException {
        ApiResponse<RestAuthCommonResponse> localVarResp = restAuthPasswordChangePOSTWithHttpInfo(customPasswordChange);
        return localVarResp.getData();
    }

    /**
     * 
     * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     * @param customPasswordChange  (optional)
     * @return ApiResponse&lt;RestAuthCommonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestAuthCommonResponse> restAuthPasswordChangePOSTWithHttpInfo(CustomPasswordChange customPasswordChange) throws ApiException {
        okhttp3.Call localVarCall = restAuthPasswordChangePOSTValidateBeforeCall(customPasswordChange, null);
        Type localVarReturnType = new TypeToken<RestAuthCommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     * @param customPasswordChange  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthPasswordChangePOSTAsync(CustomPasswordChange customPasswordChange, final ApiCallback<RestAuthCommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = restAuthPasswordChangePOSTValidateBeforeCall(customPasswordChange, _callback);
        Type localVarReturnType = new TypeToken<RestAuthCommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restAuthPasswordResetConfirmPOST
     * @param customPasswordResetConfirm  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthPasswordResetConfirmPOSTCall(CustomPasswordResetConfirm customPasswordResetConfirm, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customPasswordResetConfirm;

        // create path and map variables
        String localVarPath = "/rest-auth/password/reset/confirm/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restAuthPasswordResetConfirmPOSTValidateBeforeCall(CustomPasswordResetConfirm customPasswordResetConfirm, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = restAuthPasswordResetConfirmPOSTCall(customPasswordResetConfirm, _callback);
        return localVarCall;

    }

    /**
     * 
     * Password reset e-mail link is confirmed, therefore this resets the user&#39;s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
     * @param customPasswordResetConfirm  (optional)
     * @return RestAuthCommonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RestAuthCommonResponse restAuthPasswordResetConfirmPOST(CustomPasswordResetConfirm customPasswordResetConfirm) throws ApiException {
        ApiResponse<RestAuthCommonResponse> localVarResp = restAuthPasswordResetConfirmPOSTWithHttpInfo(customPasswordResetConfirm);
        return localVarResp.getData();
    }

    /**
     * 
     * Password reset e-mail link is confirmed, therefore this resets the user&#39;s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
     * @param customPasswordResetConfirm  (optional)
     * @return ApiResponse&lt;RestAuthCommonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestAuthCommonResponse> restAuthPasswordResetConfirmPOSTWithHttpInfo(CustomPasswordResetConfirm customPasswordResetConfirm) throws ApiException {
        okhttp3.Call localVarCall = restAuthPasswordResetConfirmPOSTValidateBeforeCall(customPasswordResetConfirm, null);
        Type localVarReturnType = new TypeToken<RestAuthCommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Password reset e-mail link is confirmed, therefore this resets the user&#39;s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
     * @param customPasswordResetConfirm  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthPasswordResetConfirmPOSTAsync(CustomPasswordResetConfirm customPasswordResetConfirm, final ApiCallback<RestAuthCommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = restAuthPasswordResetConfirmPOSTValidateBeforeCall(customPasswordResetConfirm, _callback);
        Type localVarReturnType = new TypeToken<RestAuthCommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restAuthPasswordResetPOST
     * @param customPasswordReset  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthPasswordResetPOSTCall(CustomPasswordReset customPasswordReset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customPasswordReset;

        // create path and map variables
        String localVarPath = "/rest-auth/password/reset/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restAuthPasswordResetPOSTValidateBeforeCall(CustomPasswordReset customPasswordReset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = restAuthPasswordResetPOSTCall(customPasswordReset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
     * @param customPasswordReset  (optional)
     * @return RestAuthCommonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RestAuthCommonResponse restAuthPasswordResetPOST(CustomPasswordReset customPasswordReset) throws ApiException {
        ApiResponse<RestAuthCommonResponse> localVarResp = restAuthPasswordResetPOSTWithHttpInfo(customPasswordReset);
        return localVarResp.getData();
    }

    /**
     * 
     * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
     * @param customPasswordReset  (optional)
     * @return ApiResponse&lt;RestAuthCommonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestAuthCommonResponse> restAuthPasswordResetPOSTWithHttpInfo(CustomPasswordReset customPasswordReset) throws ApiException {
        okhttp3.Call localVarCall = restAuthPasswordResetPOSTValidateBeforeCall(customPasswordReset, null);
        Type localVarReturnType = new TypeToken<RestAuthCommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
     * @param customPasswordReset  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthPasswordResetPOSTAsync(CustomPasswordReset customPasswordReset, final ApiCallback<RestAuthCommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = restAuthPasswordResetPOSTValidateBeforeCall(customPasswordReset, _callback);
        Type localVarReturnType = new TypeToken<RestAuthCommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restAuthRegistrationPOST
     * @param register  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthRegistrationPOSTCall(Register register, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = register;

        // create path and map variables
        String localVarPath = "/rest-auth/registration/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restAuthRegistrationPOSTValidateBeforeCall(Register register, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = restAuthRegistrationPOSTCall(register, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param register  (optional)
     * @return Register
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Register restAuthRegistrationPOST(Register register) throws ApiException {
        ApiResponse<Register> localVarResp = restAuthRegistrationPOSTWithHttpInfo(register);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param register  (optional)
     * @return ApiResponse&lt;Register&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Register> restAuthRegistrationPOSTWithHttpInfo(Register register) throws ApiException {
        okhttp3.Call localVarCall = restAuthRegistrationPOSTValidateBeforeCall(register, null);
        Type localVarReturnType = new TypeToken<Register>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param register  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthRegistrationPOSTAsync(Register register, final ApiCallback<Register> _callback) throws ApiException {

        okhttp3.Call localVarCall = restAuthRegistrationPOSTValidateBeforeCall(register, _callback);
        Type localVarReturnType = new TypeToken<Register>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restAuthRegistrationVerifyEmailPOST
     * @param verifyEmail  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthRegistrationVerifyEmailPOSTCall(VerifyEmail verifyEmail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = verifyEmail;

        // create path and map variables
        String localVarPath = "/rest-auth/registration/verify-email/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restAuthRegistrationVerifyEmailPOSTValidateBeforeCall(VerifyEmail verifyEmail, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = restAuthRegistrationVerifyEmailPOSTCall(verifyEmail, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param verifyEmail  (optional)
     * @return VerifyEmail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerifyEmail restAuthRegistrationVerifyEmailPOST(VerifyEmail verifyEmail) throws ApiException {
        ApiResponse<VerifyEmail> localVarResp = restAuthRegistrationVerifyEmailPOSTWithHttpInfo(verifyEmail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param verifyEmail  (optional)
     * @return ApiResponse&lt;VerifyEmail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyEmail> restAuthRegistrationVerifyEmailPOSTWithHttpInfo(VerifyEmail verifyEmail) throws ApiException {
        okhttp3.Call localVarCall = restAuthRegistrationVerifyEmailPOSTValidateBeforeCall(verifyEmail, null);
        Type localVarReturnType = new TypeToken<VerifyEmail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param verifyEmail  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restAuthRegistrationVerifyEmailPOSTAsync(VerifyEmail verifyEmail, final ApiCallback<VerifyEmail> _callback) throws ApiException {

        okhttp3.Call localVarCall = restAuthRegistrationVerifyEmailPOSTValidateBeforeCall(verifyEmail, _callback);
        Type localVarReturnType = new TypeToken<VerifyEmail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
