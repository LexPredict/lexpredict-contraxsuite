/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.1.188
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.InlineResponse400;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TusApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TusApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TusApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tusUploadSessionUploadSessionIdUploadGuidPATCH
     * @param uploadSessionId  (required)
     * @param guid  (required)
     * @param uploadOffset Upload offset, bytes. (required)
     * @param tusResumable 1.0.0 (required)
     * @param force Upload a file even if it exists. (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  * Upload-Offset -  <br>  * Upload-Expires -  <br>  * Tus-Resumable -  <br>  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 460 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tusUploadSessionUploadSessionIdUploadGuidPATCHCall(String uploadSessionId, String guid, Integer uploadOffset, String tusResumable, Boolean force, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/tus/upload-session/{upload_session_id}/upload/{guid}/"
            .replaceAll("\\{" + "upload_session_id" + "\\}", localVarApiClient.escapeString(uploadSessionId.toString()))
            .replaceAll("\\{" + "guid" + "\\}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarHeaderParams.put("force", localVarApiClient.parameterToString(force));
        }

        if (uploadOffset != null) {
            localVarHeaderParams.put("Upload-Offset", localVarApiClient.parameterToString(uploadOffset));
        }

        if (tusResumable != null) {
            localVarHeaderParams.put("Tus-Resumable", localVarApiClient.parameterToString(tusResumable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/offset+octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tusUploadSessionUploadSessionIdUploadGuidPATCHValidateBeforeCall(String uploadSessionId, String guid, Integer uploadOffset, String tusResumable, Boolean force, File body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uploadSessionId' is set
        if (uploadSessionId == null) {
            throw new ApiException("Missing the required parameter 'uploadSessionId' when calling tusUploadSessionUploadSessionIdUploadGuidPATCH(Async)");
        }
        
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling tusUploadSessionUploadSessionIdUploadGuidPATCH(Async)");
        }
        
        // verify the required parameter 'uploadOffset' is set
        if (uploadOffset == null) {
            throw new ApiException("Missing the required parameter 'uploadOffset' when calling tusUploadSessionUploadSessionIdUploadGuidPATCH(Async)");
        }
        
        // verify the required parameter 'tusResumable' is set
        if (tusResumable == null) {
            throw new ApiException("Missing the required parameter 'tusResumable' when calling tusUploadSessionUploadSessionIdUploadGuidPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = tusUploadSessionUploadSessionIdUploadGuidPATCHCall(uploadSessionId, guid, uploadOffset, tusResumable, force, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Transfer file data
     * @param uploadSessionId  (required)
     * @param guid  (required)
     * @param uploadOffset Upload offset, bytes. (required)
     * @param tusResumable 1.0.0 (required)
     * @param force Upload a file even if it exists. (optional)
     * @param body  (optional)
     * @return InlineResponse400
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  * Upload-Offset -  <br>  * Upload-Expires -  <br>  * Tus-Resumable -  <br>  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 460 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse400 tusUploadSessionUploadSessionIdUploadGuidPATCH(String uploadSessionId, String guid, Integer uploadOffset, String tusResumable, Boolean force, File body) throws ApiException {
        ApiResponse<InlineResponse400> localVarResp = tusUploadSessionUploadSessionIdUploadGuidPATCHWithHttpInfo(uploadSessionId, guid, uploadOffset, tusResumable, force, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Transfer file data
     * @param uploadSessionId  (required)
     * @param guid  (required)
     * @param uploadOffset Upload offset, bytes. (required)
     * @param tusResumable 1.0.0 (required)
     * @param force Upload a file even if it exists. (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponse400&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  * Upload-Offset -  <br>  * Upload-Expires -  <br>  * Tus-Resumable -  <br>  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 460 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse400> tusUploadSessionUploadSessionIdUploadGuidPATCHWithHttpInfo(String uploadSessionId, String guid, Integer uploadOffset, String tusResumable, Boolean force, File body) throws ApiException {
        okhttp3.Call localVarCall = tusUploadSessionUploadSessionIdUploadGuidPATCHValidateBeforeCall(uploadSessionId, guid, uploadOffset, tusResumable, force, body, null);
        Type localVarReturnType = new TypeToken<InlineResponse400>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Transfer file data
     * @param uploadSessionId  (required)
     * @param guid  (required)
     * @param uploadOffset Upload offset, bytes. (required)
     * @param tusResumable 1.0.0 (required)
     * @param force Upload a file even if it exists. (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  * Upload-Offset -  <br>  * Upload-Expires -  <br>  * Tus-Resumable -  <br>  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 460 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tusUploadSessionUploadSessionIdUploadGuidPATCHAsync(String uploadSessionId, String guid, Integer uploadOffset, String tusResumable, Boolean force, File body, final ApiCallback<InlineResponse400> _callback) throws ApiException {

        okhttp3.Call localVarCall = tusUploadSessionUploadSessionIdUploadGuidPATCHValidateBeforeCall(uploadSessionId, guid, uploadOffset, tusResumable, force, body, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse400>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tusUploadSessionUploadSessionIdUploadPOST
     * @param uploadSessionId  (required)
     * @param uploadLength File length. (required)
     * @param uploadMetadata Upload metadata include file name, relative path, etc. (required)
     * @param tusResumable 1.0.0 (required)
     * @param force Upload a file even if it exists. (optional)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  * Location -  <br>  * Upload-Expires -  <br>  * Tus-Resumable -  <br>  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tusUploadSessionUploadSessionIdUploadPOSTCall(String uploadSessionId, Integer uploadLength, String uploadMetadata, String tusResumable, Boolean force, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/tus/upload-session/{upload_session_id}/upload/"
            .replaceAll("\\{" + "upload_session_id" + "\\}", localVarApiClient.escapeString(uploadSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarHeaderParams.put("force", localVarApiClient.parameterToString(force));
        }

        if (uploadLength != null) {
            localVarHeaderParams.put("Upload-Length", localVarApiClient.parameterToString(uploadLength));
        }

        if (uploadMetadata != null) {
            localVarHeaderParams.put("Upload-Metadata", localVarApiClient.parameterToString(uploadMetadata));
        }

        if (tusResumable != null) {
            localVarHeaderParams.put("Tus-Resumable", localVarApiClient.parameterToString(tusResumable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tusUploadSessionUploadSessionIdUploadPOSTValidateBeforeCall(String uploadSessionId, Integer uploadLength, String uploadMetadata, String tusResumable, Boolean force, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uploadSessionId' is set
        if (uploadSessionId == null) {
            throw new ApiException("Missing the required parameter 'uploadSessionId' when calling tusUploadSessionUploadSessionIdUploadPOST(Async)");
        }
        
        // verify the required parameter 'uploadLength' is set
        if (uploadLength == null) {
            throw new ApiException("Missing the required parameter 'uploadLength' when calling tusUploadSessionUploadSessionIdUploadPOST(Async)");
        }
        
        // verify the required parameter 'uploadMetadata' is set
        if (uploadMetadata == null) {
            throw new ApiException("Missing the required parameter 'uploadMetadata' when calling tusUploadSessionUploadSessionIdUploadPOST(Async)");
        }
        
        // verify the required parameter 'tusResumable' is set
        if (tusResumable == null) {
            throw new ApiException("Missing the required parameter 'tusResumable' when calling tusUploadSessionUploadSessionIdUploadPOST(Async)");
        }
        

        okhttp3.Call localVarCall = tusUploadSessionUploadSessionIdUploadPOSTCall(uploadSessionId, uploadLength, uploadMetadata, tusResumable, force, requestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create an Upload
     * @param uploadSessionId  (required)
     * @param uploadLength File length. (required)
     * @param uploadMetadata Upload metadata include file name, relative path, etc. (required)
     * @param tusResumable 1.0.0 (required)
     * @param force Upload a file even if it exists. (optional)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  * Location -  <br>  * Upload-Expires -  <br>  * Tus-Resumable -  <br>  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void tusUploadSessionUploadSessionIdUploadPOST(String uploadSessionId, Integer uploadLength, String uploadMetadata, String tusResumable, Boolean force, Map<String, Object> requestBody) throws ApiException {
        tusUploadSessionUploadSessionIdUploadPOSTWithHttpInfo(uploadSessionId, uploadLength, uploadMetadata, tusResumable, force, requestBody);
    }

    /**
     * 
     * Create an Upload
     * @param uploadSessionId  (required)
     * @param uploadLength File length. (required)
     * @param uploadMetadata Upload metadata include file name, relative path, etc. (required)
     * @param tusResumable 1.0.0 (required)
     * @param force Upload a file even if it exists. (optional)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  * Location -  <br>  * Upload-Expires -  <br>  * Tus-Resumable -  <br>  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tusUploadSessionUploadSessionIdUploadPOSTWithHttpInfo(String uploadSessionId, Integer uploadLength, String uploadMetadata, String tusResumable, Boolean force, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = tusUploadSessionUploadSessionIdUploadPOSTValidateBeforeCall(uploadSessionId, uploadLength, uploadMetadata, tusResumable, force, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create an Upload
     * @param uploadSessionId  (required)
     * @param uploadLength File length. (required)
     * @param uploadMetadata Upload metadata include file name, relative path, etc. (required)
     * @param tusResumable 1.0.0 (required)
     * @param force Upload a file even if it exists. (optional)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  * Location -  <br>  * Upload-Expires -  <br>  * Tus-Resumable -  <br>  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tusUploadSessionUploadSessionIdUploadPOSTAsync(String uploadSessionId, Integer uploadLength, String uploadMetadata, String tusResumable, Boolean force, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tusUploadSessionUploadSessionIdUploadPOSTValidateBeforeCall(uploadSessionId, uploadLength, uploadMetadata, tusResumable, force, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
