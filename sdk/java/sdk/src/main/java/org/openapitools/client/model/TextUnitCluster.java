/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TextUnitCluster
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class TextUnitCluster {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private Integer pk;

  public static final String SERIALIZED_NAME_CLUSTER_ID = "cluster_id";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ID)
  private Integer clusterId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SELF_NAME = "self_name";
  @SerializedName(SERIALIZED_NAME_SELF_NAME)
  private String selfName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CLUSTER_BY = "cluster_by";
  @SerializedName(SERIALIZED_NAME_CLUSTER_BY)
  private String clusterBy;

  public static final String SERIALIZED_NAME_USING = "using";
  @SerializedName(SERIALIZED_NAME_USING)
  private String using;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_TEXT_UNIT_COUNT = "text_unit_count";
  @SerializedName(SERIALIZED_NAME_TEXT_UNIT_COUNT)
  private Integer textUnitCount;

  public static final String SERIALIZED_NAME_TEXT_UNIT_DATA = "text_unit_data";
  @SerializedName(SERIALIZED_NAME_TEXT_UNIT_DATA)
  private List<Object> textUnitData = null;

  public TextUnitCluster() { 
  }

  
  public TextUnitCluster(
     Integer pk, 
     Integer textUnitCount, 
     List<Object> textUnitData
  ) {
    this();
    this.pk = pk;
    this.textUnitCount = textUnitCount;
    this.textUnitData = textUnitData;
  }

   /**
   * Get pk
   * @return pk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPk() {
    return pk;
  }




  public TextUnitCluster clusterId(Integer clusterId) {
    
    this.clusterId = clusterId;
    return this;
  }

   /**
   * Get clusterId
   * minimum: -2147483648
   * maximum: 2147483647
   * @return clusterId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getClusterId() {
    return clusterId;
  }


  public void setClusterId(Integer clusterId) {
    this.clusterId = clusterId;
  }


  public TextUnitCluster name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TextUnitCluster selfName(String selfName) {
    
    this.selfName = selfName;
    return this;
  }

   /**
   * Get selfName
   * @return selfName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSelfName() {
    return selfName;
  }


  public void setSelfName(String selfName) {
    this.selfName = selfName;
  }


  public TextUnitCluster description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TextUnitCluster clusterBy(String clusterBy) {
    
    this.clusterBy = clusterBy;
    return this;
  }

   /**
   * Get clusterBy
   * @return clusterBy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getClusterBy() {
    return clusterBy;
  }


  public void setClusterBy(String clusterBy) {
    this.clusterBy = clusterBy;
  }


  public TextUnitCluster using(String using) {
    
    this.using = using;
    return this;
  }

   /**
   * Get using
   * @return using
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUsing() {
    return using;
  }


  public void setUsing(String using) {
    this.using = using;
  }


  public TextUnitCluster createdDate(OffsetDateTime createdDate) {
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


   /**
   * Get textUnitCount
   * @return textUnitCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTextUnitCount() {
    return textUnitCount;
  }




   /**
   * Get textUnitData
   * @return textUnitData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Object> getTextUnitData() {
    return textUnitData;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextUnitCluster textUnitCluster = (TextUnitCluster) o;
    return Objects.equals(this.pk, textUnitCluster.pk) &&
        Objects.equals(this.clusterId, textUnitCluster.clusterId) &&
        Objects.equals(this.name, textUnitCluster.name) &&
        Objects.equals(this.selfName, textUnitCluster.selfName) &&
        Objects.equals(this.description, textUnitCluster.description) &&
        Objects.equals(this.clusterBy, textUnitCluster.clusterBy) &&
        Objects.equals(this.using, textUnitCluster.using) &&
        Objects.equals(this.createdDate, textUnitCluster.createdDate) &&
        Objects.equals(this.textUnitCount, textUnitCluster.textUnitCount) &&
        Objects.equals(this.textUnitData, textUnitCluster.textUnitData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, clusterId, name, selfName, description, clusterBy, using, createdDate, textUnitCount, textUnitData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextUnitCluster {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    selfName: ").append(toIndentedString(selfName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    clusterBy: ").append(toIndentedString(clusterBy)).append("\n");
    sb.append("    using: ").append(toIndentedString(using)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    textUnitCount: ").append(toIndentedString(textUnitCount)).append("\n");
    sb.append("    textUnitData: ").append(toIndentedString(textUnitData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("cluster_id");
    openapiFields.add("name");
    openapiFields.add("self_name");
    openapiFields.add("description");
    openapiFields.add("cluster_by");
    openapiFields.add("using");
    openapiFields.add("created_date");
    openapiFields.add("text_unit_count");
    openapiFields.add("text_unit_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("self_name");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("cluster_by");
    openapiRequiredFields.add("using");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TextUnitCluster
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TextUnitCluster.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextUnitCluster is not found in the empty JSON string", TextUnitCluster.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TextUnitCluster.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextUnitCluster` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TextUnitCluster.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("self_name") != null && !jsonObj.get("self_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `self_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("self_name").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("cluster_by") != null && !jsonObj.get("cluster_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster_by").toString()));
      }
      if (jsonObj.get("using") != null && !jsonObj.get("using").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `using` to be a primitive type in the JSON string but got `%s`", jsonObj.get("using").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("text_unit_data") != null && !jsonObj.get("text_unit_data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_unit_data` to be an array in the JSON string but got `%s`", jsonObj.get("text_unit_data").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextUnitCluster.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextUnitCluster' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextUnitCluster> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextUnitCluster.class));

       return (TypeAdapter<T>) new TypeAdapter<TextUnitCluster>() {
           @Override
           public void write(JsonWriter out, TextUnitCluster value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextUnitCluster read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TextUnitCluster given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TextUnitCluster
  * @throws IOException if the JSON string is invalid with respect to TextUnitCluster
  */
  public static TextUnitCluster fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextUnitCluster.class);
  }

 /**
  * Convert an instance of TextUnitCluster to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

