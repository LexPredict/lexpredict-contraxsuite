/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CheckNewDocumentFieldFormulaRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class CheckNewDocumentFieldFormulaRequest {
  public static final String SERIALIZED_NAME_FORMULA = "formula";
  @SerializedName(SERIALIZED_NAME_FORMULA)
  private String formula;

  public static final String SERIALIZED_NAME_HIDE_UNTIL_PYTHON = "hide_until_python";
  @SerializedName(SERIALIZED_NAME_HIDE_UNTIL_PYTHON)
  private String hideUntilPython;

  public static final String SERIALIZED_NAME_FIELD_TYPE = "field_type";
  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  private String fieldType;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "document_type";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_DEPENDS_ON_FIELDS = "depends_on_fields";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON_FIELDS)
  private List<UUID> dependsOnFields = new ArrayList<>();

  public CheckNewDocumentFieldFormulaRequest() { 
  }

  public CheckNewDocumentFieldFormulaRequest formula(String formula) {
    
    this.formula = formula;
    return this;
  }

   /**
   * Get formula
   * @return formula
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFormula() {
    return formula;
  }


  public void setFormula(String formula) {
    this.formula = formula;
  }


  public CheckNewDocumentFieldFormulaRequest hideUntilPython(String hideUntilPython) {
    
    this.hideUntilPython = hideUntilPython;
    return this;
  }

   /**
   * Get hideUntilPython
   * @return hideUntilPython
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHideUntilPython() {
    return hideUntilPython;
  }


  public void setHideUntilPython(String hideUntilPython) {
    this.hideUntilPython = hideUntilPython;
  }


  public CheckNewDocumentFieldFormulaRequest fieldType(String fieldType) {
    
    this.fieldType = fieldType;
    return this;
  }

   /**
   * Get fieldType
   * @return fieldType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFieldType() {
    return fieldType;
  }


  public void setFieldType(String fieldType) {
    this.fieldType = fieldType;
  }


  public CheckNewDocumentFieldFormulaRequest documentType(String documentType) {
    
    this.documentType = documentType;
    return this;
  }

   /**
   * Get documentType
   * @return documentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDocumentType() {
    return documentType;
  }


  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public CheckNewDocumentFieldFormulaRequest dependsOnFields(List<UUID> dependsOnFields) {
    
    this.dependsOnFields = dependsOnFields;
    return this;
  }

  public CheckNewDocumentFieldFormulaRequest addDependsOnFieldsItem(UUID dependsOnFieldsItem) {
    this.dependsOnFields.add(dependsOnFieldsItem);
    return this;
  }

   /**
   * Get dependsOnFields
   * @return dependsOnFields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<UUID> getDependsOnFields() {
    return dependsOnFields;
  }


  public void setDependsOnFields(List<UUID> dependsOnFields) {
    this.dependsOnFields = dependsOnFields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckNewDocumentFieldFormulaRequest checkNewDocumentFieldFormulaRequest = (CheckNewDocumentFieldFormulaRequest) o;
    return Objects.equals(this.formula, checkNewDocumentFieldFormulaRequest.formula) &&
        Objects.equals(this.hideUntilPython, checkNewDocumentFieldFormulaRequest.hideUntilPython) &&
        Objects.equals(this.fieldType, checkNewDocumentFieldFormulaRequest.fieldType) &&
        Objects.equals(this.documentType, checkNewDocumentFieldFormulaRequest.documentType) &&
        Objects.equals(this.dependsOnFields, checkNewDocumentFieldFormulaRequest.dependsOnFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formula, hideUntilPython, fieldType, documentType, dependsOnFields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckNewDocumentFieldFormulaRequest {\n");
    sb.append("    formula: ").append(toIndentedString(formula)).append("\n");
    sb.append("    hideUntilPython: ").append(toIndentedString(hideUntilPython)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    dependsOnFields: ").append(toIndentedString(dependsOnFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("formula");
    openapiFields.add("hide_until_python");
    openapiFields.add("field_type");
    openapiFields.add("document_type");
    openapiFields.add("depends_on_fields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("depends_on_fields");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckNewDocumentFieldFormulaRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CheckNewDocumentFieldFormulaRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckNewDocumentFieldFormulaRequest is not found in the empty JSON string", CheckNewDocumentFieldFormulaRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CheckNewDocumentFieldFormulaRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckNewDocumentFieldFormulaRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckNewDocumentFieldFormulaRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("formula") != null && !jsonObj.get("formula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formula").toString()));
      }
      if (jsonObj.get("hide_until_python") != null && !jsonObj.get("hide_until_python").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hide_until_python` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hide_until_python").toString()));
      }
      if (jsonObj.get("field_type") != null && !jsonObj.get("field_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field_type").toString()));
      }
      if (jsonObj.get("document_type") != null && !jsonObj.get("document_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_type").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("depends_on_fields") != null && !jsonObj.get("depends_on_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `depends_on_fields` to be an array in the JSON string but got `%s`", jsonObj.get("depends_on_fields").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckNewDocumentFieldFormulaRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckNewDocumentFieldFormulaRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckNewDocumentFieldFormulaRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckNewDocumentFieldFormulaRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckNewDocumentFieldFormulaRequest>() {
           @Override
           public void write(JsonWriter out, CheckNewDocumentFieldFormulaRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckNewDocumentFieldFormulaRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckNewDocumentFieldFormulaRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckNewDocumentFieldFormulaRequest
  * @throws IOException if the JSON string is invalid with respect to CheckNewDocumentFieldFormulaRequest
  */
  public static CheckNewDocumentFieldFormulaRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckNewDocumentFieldFormulaRequest.class);
  }

 /**
  * Convert an instance of CheckNewDocumentFieldFormulaRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

