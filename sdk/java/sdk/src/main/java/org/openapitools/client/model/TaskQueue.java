/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.TaskQueueDocumentsDataInner;
import org.openapitools.client.model.TaskQueueReviewersDataInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskQueue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class TaskQueue {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private Integer pk;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<Integer> documents = null;

  public static final String SERIALIZED_NAME_DOCUMENTS_DATA = "documents_data";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS_DATA)
  private List<TaskQueueDocumentsDataInner> documentsData = null;

  public static final String SERIALIZED_NAME_COMPLETED_DOCUMENTS = "completed_documents";
  @SerializedName(SERIALIZED_NAME_COMPLETED_DOCUMENTS)
  private List<Integer> completedDocuments = null;

  public static final String SERIALIZED_NAME_COMPLETED_DOCUMENTS_DATA = "completed_documents_data";
  @SerializedName(SERIALIZED_NAME_COMPLETED_DOCUMENTS_DATA)
  private List<TaskQueueDocumentsDataInner> completedDocumentsData = null;

  public static final String SERIALIZED_NAME_REVIEWERS = "reviewers";
  @SerializedName(SERIALIZED_NAME_REVIEWERS)
  private List<Integer> reviewers = null;

  public static final String SERIALIZED_NAME_REVIEWERS_DATA = "reviewers_data";
  @SerializedName(SERIALIZED_NAME_REVIEWERS_DATA)
  private List<TaskQueueReviewersDataInner> reviewersData = null;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private String progress;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public TaskQueue() { 
  }

  
  public TaskQueue(
     Integer pk, 
     List<TaskQueueDocumentsDataInner> documentsData, 
     List<TaskQueueDocumentsDataInner> completedDocumentsData, 
     List<TaskQueueReviewersDataInner> reviewersData, 
     String progress, 
     String data
  ) {
    this();
    this.pk = pk;
    this.documentsData = documentsData;
    this.completedDocumentsData = completedDocumentsData;
    this.reviewersData = reviewersData;
    this.progress = progress;
    this.data = data;
  }

   /**
   * Get pk
   * @return pk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPk() {
    return pk;
  }




  public TaskQueue description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TaskQueue documents(List<Integer> documents) {
    
    this.documents = documents;
    return this;
  }

  public TaskQueue addDocumentsItem(Integer documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

   /**
   * Get documents
   * @return documents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getDocuments() {
    return documents;
  }


  public void setDocuments(List<Integer> documents) {
    this.documents = documents;
  }


   /**
   * Get documentsData
   * @return documentsData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TaskQueueDocumentsDataInner> getDocumentsData() {
    return documentsData;
  }




  public TaskQueue completedDocuments(List<Integer> completedDocuments) {
    
    this.completedDocuments = completedDocuments;
    return this;
  }

  public TaskQueue addCompletedDocumentsItem(Integer completedDocumentsItem) {
    if (this.completedDocuments == null) {
      this.completedDocuments = new ArrayList<>();
    }
    this.completedDocuments.add(completedDocumentsItem);
    return this;
  }

   /**
   * Get completedDocuments
   * @return completedDocuments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getCompletedDocuments() {
    return completedDocuments;
  }


  public void setCompletedDocuments(List<Integer> completedDocuments) {
    this.completedDocuments = completedDocuments;
  }


   /**
   * Get completedDocumentsData
   * @return completedDocumentsData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TaskQueueDocumentsDataInner> getCompletedDocumentsData() {
    return completedDocumentsData;
  }




  public TaskQueue reviewers(List<Integer> reviewers) {
    
    this.reviewers = reviewers;
    return this;
  }

  public TaskQueue addReviewersItem(Integer reviewersItem) {
    if (this.reviewers == null) {
      this.reviewers = new ArrayList<>();
    }
    this.reviewers.add(reviewersItem);
    return this;
  }

   /**
   * Get reviewers
   * @return reviewers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getReviewers() {
    return reviewers;
  }


  public void setReviewers(List<Integer> reviewers) {
    this.reviewers = reviewers;
  }


   /**
   * Get reviewersData
   * @return reviewersData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TaskQueueReviewersDataInner> getReviewersData() {
    return reviewersData;
  }




   /**
   * Get progress
   * @return progress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProgress() {
    return progress;
  }




   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getData() {
    return data;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskQueue taskQueue = (TaskQueue) o;
    return Objects.equals(this.pk, taskQueue.pk) &&
        Objects.equals(this.description, taskQueue.description) &&
        Objects.equals(this.documents, taskQueue.documents) &&
        Objects.equals(this.documentsData, taskQueue.documentsData) &&
        Objects.equals(this.completedDocuments, taskQueue.completedDocuments) &&
        Objects.equals(this.completedDocumentsData, taskQueue.completedDocumentsData) &&
        Objects.equals(this.reviewers, taskQueue.reviewers) &&
        Objects.equals(this.reviewersData, taskQueue.reviewersData) &&
        Objects.equals(this.progress, taskQueue.progress) &&
        Objects.equals(this.data, taskQueue.data);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, description, documents, documentsData, completedDocuments, completedDocumentsData, reviewers, reviewersData, progress, data);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskQueue {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    documentsData: ").append(toIndentedString(documentsData)).append("\n");
    sb.append("    completedDocuments: ").append(toIndentedString(completedDocuments)).append("\n");
    sb.append("    completedDocumentsData: ").append(toIndentedString(completedDocumentsData)).append("\n");
    sb.append("    reviewers: ").append(toIndentedString(reviewers)).append("\n");
    sb.append("    reviewersData: ").append(toIndentedString(reviewersData)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("description");
    openapiFields.add("documents");
    openapiFields.add("documents_data");
    openapiFields.add("completed_documents");
    openapiFields.add("completed_documents_data");
    openapiFields.add("reviewers");
    openapiFields.add("reviewers_data");
    openapiFields.add("progress");
    openapiFields.add("data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaskQueue
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TaskQueue.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskQueue is not found in the empty JSON string", TaskQueue.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaskQueue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskQueue` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
      }
      JsonArray jsonArraydocumentsData = jsonObj.getAsJsonArray("documents_data");
      if (jsonArraydocumentsData != null) {
        // ensure the json data is an array
        if (!jsonObj.get("documents_data").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `documents_data` to be an array in the JSON string but got `%s`", jsonObj.get("documents_data").toString()));
        }

        // validate the optional field `documents_data` (array)
        for (int i = 0; i < jsonArraydocumentsData.size(); i++) {
          TaskQueueDocumentsDataInner.validateJsonObject(jsonArraydocumentsData.get(i).getAsJsonObject());
        };
      }
      // ensure the json data is an array
      if (jsonObj.get("completed_documents") != null && !jsonObj.get("completed_documents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `completed_documents` to be an array in the JSON string but got `%s`", jsonObj.get("completed_documents").toString()));
      }
      JsonArray jsonArraycompletedDocumentsData = jsonObj.getAsJsonArray("completed_documents_data");
      if (jsonArraycompletedDocumentsData != null) {
        // ensure the json data is an array
        if (!jsonObj.get("completed_documents_data").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `completed_documents_data` to be an array in the JSON string but got `%s`", jsonObj.get("completed_documents_data").toString()));
        }

        // validate the optional field `completed_documents_data` (array)
        for (int i = 0; i < jsonArraycompletedDocumentsData.size(); i++) {
          TaskQueueDocumentsDataInner.validateJsonObject(jsonArraycompletedDocumentsData.get(i).getAsJsonObject());
        };
      }
      // ensure the json data is an array
      if (jsonObj.get("reviewers") != null && !jsonObj.get("reviewers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewers` to be an array in the JSON string but got `%s`", jsonObj.get("reviewers").toString()));
      }
      JsonArray jsonArrayreviewersData = jsonObj.getAsJsonArray("reviewers_data");
      if (jsonArrayreviewersData != null) {
        // ensure the json data is an array
        if (!jsonObj.get("reviewers_data").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `reviewers_data` to be an array in the JSON string but got `%s`", jsonObj.get("reviewers_data").toString()));
        }

        // validate the optional field `reviewers_data` (array)
        for (int i = 0; i < jsonArrayreviewersData.size(); i++) {
          TaskQueueReviewersDataInner.validateJsonObject(jsonArrayreviewersData.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `progress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("progress").toString()));
      }
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskQueue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskQueue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskQueue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskQueue.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskQueue>() {
           @Override
           public void write(JsonWriter out, TaskQueue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskQueue read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaskQueue given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaskQueue
  * @throws IOException if the JSON string is invalid with respect to TaskQueue
  */
  public static TaskQueue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskQueue.class);
  }

 /**
  * Convert an instance of TaskQueue to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

