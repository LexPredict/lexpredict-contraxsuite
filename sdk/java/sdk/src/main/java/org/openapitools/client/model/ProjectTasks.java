/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectTasks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class ProjectTasks {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VERBOSE_NAME = "verbose_name";
  @SerializedName(SERIALIZED_NAME_VERBOSE_NAME)
  private String verboseName;

  public static final String SERIALIZED_NAME_USER_NAME = "user__name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_WORKER = "worker";
  @SerializedName(SERIALIZED_NAME_WORKER)
  private String worker;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    FAILURE("FAILURE"),
    
    PENDING("PENDING"),
    
    RECEIVED("RECEIVED"),
    
    RETRY("RETRY"),
    
    REVOKED("REVOKED"),
    
    STARTED("STARTED"),
    
    SUCCESS("SUCCESS");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Integer progress;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DATE_START = "date_start";
  @SerializedName(SERIALIZED_NAME_DATE_START)
  private OffsetDateTime dateStart;

  public static final String SERIALIZED_NAME_DATE_WORK_START = "date_work_start";
  @SerializedName(SERIALIZED_NAME_DATE_WORK_START)
  private OffsetDateTime dateWorkStart;

  public static final String SERIALIZED_NAME_DATE_DONE = "date_done";
  @SerializedName(SERIALIZED_NAME_DATE_DONE)
  private OffsetDateTime dateDone;

  public static final String SERIALIZED_NAME_TOTAL_TIME = "total_time";
  @SerializedName(SERIALIZED_NAME_TOTAL_TIME)
  private String totalTime;

  public static final String SERIALIZED_NAME_WORK_TIME = "work_time";
  @SerializedName(SERIALIZED_NAME_WORK_TIME)
  private String workTime;

  public ProjectTasks() { 
  }

  
  public ProjectTasks(
     String userName, 
     String description
  ) {
    this();
    this.userName = userName;
    this.description = description;
  }

  public ProjectTasks id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ProjectTasks name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ProjectTasks verboseName(String verboseName) {
    
    this.verboseName = verboseName;
    return this;
  }

   /**
   * Get verboseName
   * @return verboseName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getVerboseName() {
    return verboseName;
  }


  public void setVerboseName(String verboseName) {
    this.verboseName = verboseName;
  }


   /**
   * Get userName
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserName() {
    return userName;
  }




  public ProjectTasks worker(String worker) {
    
    this.worker = worker;
    return this;
  }

   /**
   * Get worker
   * @return worker
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWorker() {
    return worker;
  }


  public void setWorker(String worker) {
    this.worker = worker;
  }


  public ProjectTasks status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ProjectTasks progress(Integer progress) {
    
    this.progress = progress;
    return this;
  }

   /**
   * Get progress
   * minimum: 0
   * maximum: 2147483647
   * @return progress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getProgress() {
    return progress;
  }


  public void setProgress(Integer progress) {
    this.progress = progress;
  }


   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }




  public ProjectTasks dateStart(OffsetDateTime dateStart) {
    
    this.dateStart = dateStart;
    return this;
  }

   /**
   * Get dateStart
   * @return dateStart
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getDateStart() {
    return dateStart;
  }


  public void setDateStart(OffsetDateTime dateStart) {
    this.dateStart = dateStart;
  }


  public ProjectTasks dateWorkStart(OffsetDateTime dateWorkStart) {
    
    this.dateWorkStart = dateWorkStart;
    return this;
  }

   /**
   * Get dateWorkStart
   * @return dateWorkStart
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getDateWorkStart() {
    return dateWorkStart;
  }


  public void setDateWorkStart(OffsetDateTime dateWorkStart) {
    this.dateWorkStart = dateWorkStart;
  }


  public ProjectTasks dateDone(OffsetDateTime dateDone) {
    
    this.dateDone = dateDone;
    return this;
  }

   /**
   * Get dateDone
   * @return dateDone
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getDateDone() {
    return dateDone;
  }


  public void setDateDone(OffsetDateTime dateDone) {
    this.dateDone = dateDone;
  }


  public ProjectTasks totalTime(String totalTime) {
    
    this.totalTime = totalTime;
    return this;
  }

   /**
   * Get totalTime
   * @return totalTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getTotalTime() {
    return totalTime;
  }


  public void setTotalTime(String totalTime) {
    this.totalTime = totalTime;
  }


  public ProjectTasks workTime(String workTime) {
    
    this.workTime = workTime;
    return this;
  }

   /**
   * Get workTime
   * @return workTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getWorkTime() {
    return workTime;
  }


  public void setWorkTime(String workTime) {
    this.workTime = workTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectTasks projectTasks = (ProjectTasks) o;
    return Objects.equals(this.id, projectTasks.id) &&
        Objects.equals(this.name, projectTasks.name) &&
        Objects.equals(this.verboseName, projectTasks.verboseName) &&
        Objects.equals(this.userName, projectTasks.userName) &&
        Objects.equals(this.worker, projectTasks.worker) &&
        Objects.equals(this.status, projectTasks.status) &&
        Objects.equals(this.progress, projectTasks.progress) &&
        Objects.equals(this.description, projectTasks.description) &&
        Objects.equals(this.dateStart, projectTasks.dateStart) &&
        Objects.equals(this.dateWorkStart, projectTasks.dateWorkStart) &&
        Objects.equals(this.dateDone, projectTasks.dateDone) &&
        Objects.equals(this.totalTime, projectTasks.totalTime) &&
        Objects.equals(this.workTime, projectTasks.workTime);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, verboseName, userName, worker, status, progress, description, dateStart, dateWorkStart, dateDone, totalTime, workTime);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectTasks {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    verboseName: ").append(toIndentedString(verboseName)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    worker: ").append(toIndentedString(worker)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dateStart: ").append(toIndentedString(dateStart)).append("\n");
    sb.append("    dateWorkStart: ").append(toIndentedString(dateWorkStart)).append("\n");
    sb.append("    dateDone: ").append(toIndentedString(dateDone)).append("\n");
    sb.append("    totalTime: ").append(toIndentedString(totalTime)).append("\n");
    sb.append("    workTime: ").append(toIndentedString(workTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("verbose_name");
    openapiFields.add("user__name");
    openapiFields.add("worker");
    openapiFields.add("status");
    openapiFields.add("progress");
    openapiFields.add("description");
    openapiFields.add("date_start");
    openapiFields.add("date_work_start");
    openapiFields.add("date_done");
    openapiFields.add("total_time");
    openapiFields.add("work_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("verbose_name");
    openapiRequiredFields.add("date_start");
    openapiRequiredFields.add("date_work_start");
    openapiRequiredFields.add("date_done");
    openapiRequiredFields.add("total_time");
    openapiRequiredFields.add("work_time");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProjectTasks
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ProjectTasks.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectTasks is not found in the empty JSON string", ProjectTasks.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProjectTasks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectTasks` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectTasks.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("verbose_name") != null && !jsonObj.get("verbose_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbose_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbose_name").toString()));
      }
      if (jsonObj.get("user__name") != null && !jsonObj.get("user__name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user__name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user__name").toString()));
      }
      if (jsonObj.get("worker") != null && !jsonObj.get("worker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `worker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("worker").toString()));
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("total_time") != null && !jsonObj.get("total_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_time").toString()));
      }
      if (jsonObj.get("work_time") != null && !jsonObj.get("work_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectTasks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectTasks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectTasks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectTasks.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectTasks>() {
           @Override
           public void write(JsonWriter out, ProjectTasks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectTasks read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProjectTasks given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProjectTasks
  * @throws IOException if the JSON string is invalid with respect to ProjectTasks
  */
  public static ProjectTasks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectTasks.class);
  }

 /**
  * Convert an instance of ProjectTasks to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

