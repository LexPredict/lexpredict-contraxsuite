/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentFieldCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class DocumentFieldCreate {
  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "document_type";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_LONG_CODE = "long_code";
  @SerializedName(SERIALIZED_NAME_LONG_CODE)
  private String longCode;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ADDRESS("address"),
    
    CHOICE("choice"),
    
    COMPANY("company"),
    
    DATE("date"),
    
    DATE_RECURRING("date_recurring"),
    
    DATETIME("datetime"),
    
    DURATION("duration"),
    
    FLOAT("float"),
    
    GEOGRAPHY("geography"),
    
    INT("int"),
    
    LINKED_DOCUMENTS("linked_documents"),
    
    MONEY("money"),
    
    MULTI_CHOICE("multi_choice"),
    
    PERCENT("percent"),
    
    PERSON("person"),
    
    RATIO("ratio"),
    
    RELATED_INFO("related_info"),
    
    STRING("string"),
    
    STRING_NO_WORD_WRAP("string_no_word_wrap"),
    
    TEXT("text");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Gets or Sets textUnitType
   */
  @JsonAdapter(TextUnitTypeEnum.Adapter.class)
  public enum TextUnitTypeEnum {
    SENTENCE("sentence"),
    
    PARAGRAPH("paragraph"),
    
    SECTION("section");

    private String value;

    TextUnitTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextUnitTypeEnum fromValue(String value) {
      for (TextUnitTypeEnum b : TextUnitTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextUnitTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextUnitTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextUnitTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextUnitTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TEXT_UNIT_TYPE = "text_unit_type";
  @SerializedName(SERIALIZED_NAME_TEXT_UNIT_TYPE)
  private TextUnitTypeEnum textUnitType;

  /**
   * Gets or Sets valueDetectionStrategy
   */
  @JsonAdapter(ValueDetectionStrategyEnum.Adapter.class)
  public enum ValueDetectionStrategyEnum {
    DISABLED("disabled"),
    
    USE_REGEXPS_ONLY("use_regexps_only"),
    
    USE_FORMULA_ONLY("use_formula_only"),
    
    REGEXP_TABLE("regexp_table"),
    
    TEXT_BASED_ML_ONLY("text_based_ml_only"),
    
    MLFLOW_MODEL("mlflow_model");

    private String value;

    ValueDetectionStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueDetectionStrategyEnum fromValue(String value) {
      for (ValueDetectionStrategyEnum b : ValueDetectionStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValueDetectionStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueDetectionStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueDetectionStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValueDetectionStrategyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VALUE_DETECTION_STRATEGY = "value_detection_strategy";
  @SerializedName(SERIALIZED_NAME_VALUE_DETECTION_STRATEGY)
  private ValueDetectionStrategyEnum valueDetectionStrategy;

  public static final String SERIALIZED_NAME_CLASSIFIER_INIT_SCRIPT = "classifier_init_script";
  @SerializedName(SERIALIZED_NAME_CLASSIFIER_INIT_SCRIPT)
  private String classifierInitScript;

  public static final String SERIALIZED_NAME_FORMULA = "formula";
  @SerializedName(SERIALIZED_NAME_FORMULA)
  private String formula;

  public static final String SERIALIZED_NAME_CONVERT_DECIMALS_TO_FLOATS_IN_FORMULA_ARGS = "convert_decimals_to_floats_in_formula_args";
  @SerializedName(SERIALIZED_NAME_CONVERT_DECIMALS_TO_FLOATS_IN_FORMULA_ARGS)
  private Boolean convertDecimalsToFloatsInFormulaArgs;

  public static final String SERIALIZED_NAME_VALUE_REGEXP = "value_regexp";
  @SerializedName(SERIALIZED_NAME_VALUE_REGEXP)
  private String valueRegexp;

  public static final String SERIALIZED_NAME_DEPENDS_ON_FIELDS = "depends_on_fields";
  @SerializedName(SERIALIZED_NAME_DEPENDS_ON_FIELDS)
  private List<String> dependsOnFields = null;

  /**
   * Gets or Sets confidence
   */
  @JsonAdapter(ConfidenceEnum.Adapter.class)
  public enum ConfidenceEnum {
    HIGH("High"),
    
    MEDIUM("Medium"),
    
    LOW("Low");

    private String value;

    ConfidenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfidenceEnum fromValue(String value) {
      for (ConfidenceEnum b : ConfidenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ConfidenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfidenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfidenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfidenceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private ConfidenceEnum confidence;

  public static final String SERIALIZED_NAME_REQUIRES_TEXT_ANNOTATIONS = "requires_text_annotations";
  @SerializedName(SERIALIZED_NAME_REQUIRES_TEXT_ANNOTATIONS)
  private Boolean requiresTextAnnotations;

  public static final String SERIALIZED_NAME_READ_ONLY = "read_only";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Integer category;

  public static final String SERIALIZED_NAME_FAMILY = "family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private Integer family;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "default_value";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private Object defaultValue;

  public static final String SERIALIZED_NAME_CHOICES = "choices";
  @SerializedName(SERIALIZED_NAME_CHOICES)
  private String choices;

  public static final String SERIALIZED_NAME_ALLOW_VALUES_NOT_SPECIFIED_IN_CHOICES = "allow_values_not_specified_in_choices";
  @SerializedName(SERIALIZED_NAME_ALLOW_VALUES_NOT_SPECIFIED_IN_CHOICES)
  private Boolean allowValuesNotSpecifiedInChoices;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_TRAINING_FINISHED = "training_finished";
  @SerializedName(SERIALIZED_NAME_TRAINING_FINISHED)
  private Boolean trainingFinished;

  public static final String SERIALIZED_NAME_DIRTY = "dirty";
  @SerializedName(SERIALIZED_NAME_DIRTY)
  private Boolean dirty;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_TRAINED_AFTER_DOCUMENTS_NUMBER = "trained_after_documents_number";
  @SerializedName(SERIALIZED_NAME_TRAINED_AFTER_DOCUMENTS_NUMBER)
  private Integer trainedAfterDocumentsNumber;

  public static final String SERIALIZED_NAME_HIDDEN_ALWAYS = "hidden_always";
  @SerializedName(SERIALIZED_NAME_HIDDEN_ALWAYS)
  private Boolean hiddenAlways;

  public static final String SERIALIZED_NAME_HIDE_UNTIL_PYTHON = "hide_until_python";
  @SerializedName(SERIALIZED_NAME_HIDE_UNTIL_PYTHON)
  private String hideUntilPython;

  public static final String SERIALIZED_NAME_HIDE_UNTIL_JS = "hide_until_js";
  @SerializedName(SERIALIZED_NAME_HIDE_UNTIL_JS)
  private String hideUntilJs;

  public static final String SERIALIZED_NAME_DISPLAY_YES_NO = "display_yes_no";
  @SerializedName(SERIALIZED_NAME_DISPLAY_YES_NO)
  private Boolean displayYesNo;

  public static final String SERIALIZED_NAME_VECTORIZER_STOP_WORDS = "vectorizer_stop_words";
  @SerializedName(SERIALIZED_NAME_VECTORIZER_STOP_WORDS)
  private String vectorizerStopWords;

  public static final String SERIALIZED_NAME_UNSURE_CHOICE_VALUE = "unsure_choice_value";
  @SerializedName(SERIALIZED_NAME_UNSURE_CHOICE_VALUE)
  private String unsureChoiceValue;

  public static final String SERIALIZED_NAME_UNSURE_THRESHOLDS_BY_VALUE = "unsure_thresholds_by_value";
  @SerializedName(SERIALIZED_NAME_UNSURE_THRESHOLDS_BY_VALUE)
  private Object unsureThresholdsByValue;

  public static final String SERIALIZED_NAME_MLFLOW_MODEL_URI = "mlflow_model_uri";
  @SerializedName(SERIALIZED_NAME_MLFLOW_MODEL_URI)
  private String mlflowModelUri;

  public static final String SERIALIZED_NAME_MLFLOW_DETECT_ON_DOCUMENT_LEVEL = "mlflow_detect_on_document_level";
  @SerializedName(SERIALIZED_NAME_MLFLOW_DETECT_ON_DOCUMENT_LEVEL)
  private Boolean mlflowDetectOnDocumentLevel;

  public static final String SERIALIZED_NAME_WARNING_MESSAGE = "warning_message";
  @SerializedName(SERIALIZED_NAME_WARNING_MESSAGE)
  private String warningMessage;

  public DocumentFieldCreate() { 
  }

  
  public DocumentFieldCreate(
     String longCode, 
     String hideUntilJs, 
     String warningMessage
  ) {
    this();
    this.longCode = longCode;
    this.hideUntilJs = hideUntilJs;
    this.warningMessage = warningMessage;
  }

  public DocumentFieldCreate documentType(String documentType) {
    
    this.documentType = documentType;
    return this;
  }

   /**
   * Get documentType
   * @return documentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDocumentType() {
    return documentType;
  }


  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public DocumentFieldCreate code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Field codes must be lowercase, should start with  a Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.
   * @return code
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Field codes must be lowercase, should start with  a Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


   /**
   * Get longCode
   * @return longCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLongCode() {
    return longCode;
  }




  public DocumentFieldCreate title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public DocumentFieldCreate description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public DocumentFieldCreate type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public DocumentFieldCreate textUnitType(TextUnitTypeEnum textUnitType) {
    
    this.textUnitType = textUnitType;
    return this;
  }

   /**
   * Get textUnitType
   * @return textUnitType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TextUnitTypeEnum getTextUnitType() {
    return textUnitType;
  }


  public void setTextUnitType(TextUnitTypeEnum textUnitType) {
    this.textUnitType = textUnitType;
  }


  public DocumentFieldCreate valueDetectionStrategy(ValueDetectionStrategyEnum valueDetectionStrategy) {
    
    this.valueDetectionStrategy = valueDetectionStrategy;
    return this;
  }

   /**
   * Get valueDetectionStrategy
   * @return valueDetectionStrategy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ValueDetectionStrategyEnum getValueDetectionStrategy() {
    return valueDetectionStrategy;
  }


  public void setValueDetectionStrategy(ValueDetectionStrategyEnum valueDetectionStrategy) {
    this.valueDetectionStrategy = valueDetectionStrategy;
  }


  public DocumentFieldCreate classifierInitScript(String classifierInitScript) {
    
    this.classifierInitScript = classifierInitScript;
    return this;
  }

   /**
   * Classifier initialization script. Here is how it used: &lt;br /&gt;&lt;br /&gt;def&amp;nbsp;init_classifier_impl(field_code:&amp;nbsp;str,&amp;nbsp;init_script:&amp;nbsp;str):&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;init_script&amp;nbsp;is&amp;nbsp;not&amp;nbsp;None:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;init_script&amp;nbsp;&#x3D;&amp;nbsp;init_script.strip()&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;init_script:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from&amp;nbsp;sklearn&amp;nbsp;import&amp;nbsp;tree&amp;nbsp;as&amp;nbsp;sklearn_tree&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;sklearn_tree.DecisionTreeClassifier()&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from&amp;nbsp;sklearn&amp;nbsp;import&amp;nbsp;tree&amp;nbsp;as&amp;nbsp;sklearn_tree&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from&amp;nbsp;sklearn&amp;nbsp;import&amp;nbsp;neural_network&amp;nbsp;as&amp;nbsp;sklearn_neural_network&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from&amp;nbsp;sklearn&amp;nbsp;import&amp;nbsp;neighbors&amp;nbsp;as&amp;nbsp;sklearn_neighbors&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from&amp;nbsp;sklearn&amp;nbsp;import&amp;nbsp;svm&amp;nbsp;as&amp;nbsp;sklearn_svm&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from&amp;nbsp;sklearn&amp;nbsp;import&amp;nbsp;gaussian_process&amp;nbsp;as&amp;nbsp;sklearn_gaussian_process&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from&amp;nbsp;sklearn.gaussian_process&amp;nbsp;import&amp;nbsp;kernels&amp;nbsp;as&amp;nbsp;sklearn_gaussian_process_kernels&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from&amp;nbsp;sklearn&amp;nbsp;import&amp;nbsp;ensemble&amp;nbsp;as&amp;nbsp;sklearn_ensemble&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from&amp;nbsp;sklearn&amp;nbsp;import&amp;nbsp;naive_bayes&amp;nbsp;as&amp;nbsp;sklearn_naive_bayes&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from&amp;nbsp;sklearn&amp;nbsp;import&amp;nbsp;discriminant_analysis&amp;nbsp;as&amp;nbsp;sklearn_discriminant_analysis&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from&amp;nbsp;sklearn&amp;nbsp;import&amp;nbsp;linear_model&amp;nbsp;as&amp;nbsp;sklearn_linear_model&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;eval_locals&amp;nbsp;&#x3D;&amp;nbsp;{&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39;sklearn_linear_model&#39;:&amp;nbsp;sklearn_linear_model,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39;sklearn_tree&#39;:&amp;nbsp;sklearn_tree,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39;sklearn_neural_network&#39;:&amp;nbsp;sklearn_neural_network,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39;sklearn_neighbors&#39;:&amp;nbsp;sklearn_neighbors,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39;sklearn_svm&#39;:&amp;nbsp;sklearn_svm,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39;sklearn_gaussian_process&#39;:&amp;nbsp;sklearn_gaussian_process,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39;sklearn_gaussian_process_kernels&#39;:&amp;nbsp;sklearn_gaussian_process_kernels,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39;sklearn_ensemble&#39;:&amp;nbsp;sklearn_ensemble,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39;sklearn_naive_bayes&#39;:&amp;nbsp;sklearn_naive_bayes,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39;sklearn_discriminant_analysis&#39;:&amp;nbsp;sklearn_discriminant_analysis&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;eval_script(&#39;classifier&amp;nbsp;init&amp;nbsp;script&amp;nbsp;of&amp;nbsp;field&amp;nbsp;{0}&#39;.format(field_code),&amp;nbsp;init_script,&amp;nbsp;eval_locals)&lt;br /&gt;
   * @return classifierInitScript
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Classifier initialization script. Here is how it used: <br /><br />def&nbsp;init_classifier_impl(field_code:&nbsp;str,&nbsp;init_script:&nbsp;str):<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;init_script&nbsp;is&nbsp;not&nbsp;None:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init_script&nbsp;=&nbsp;init_script.strip()<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;init_script:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;tree&nbsp;as&nbsp;sklearn_tree<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;sklearn_tree.DecisionTreeClassifier()<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;tree&nbsp;as&nbsp;sklearn_tree<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;neural_network&nbsp;as&nbsp;sklearn_neural_network<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;neighbors&nbsp;as&nbsp;sklearn_neighbors<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;svm&nbsp;as&nbsp;sklearn_svm<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;gaussian_process&nbsp;as&nbsp;sklearn_gaussian_process<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn.gaussian_process&nbsp;import&nbsp;kernels&nbsp;as&nbsp;sklearn_gaussian_process_kernels<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;ensemble&nbsp;as&nbsp;sklearn_ensemble<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;naive_bayes&nbsp;as&nbsp;sklearn_naive_bayes<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;discriminant_analysis&nbsp;as&nbsp;sklearn_discriminant_analysis<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;linear_model&nbsp;as&nbsp;sklearn_linear_model<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;eval_locals&nbsp;=&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_linear_model':&nbsp;sklearn_linear_model,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_tree':&nbsp;sklearn_tree,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_neural_network':&nbsp;sklearn_neural_network,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_neighbors':&nbsp;sklearn_neighbors,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_svm':&nbsp;sklearn_svm,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_gaussian_process':&nbsp;sklearn_gaussian_process,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_gaussian_process_kernels':&nbsp;sklearn_gaussian_process_kernels,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_ensemble':&nbsp;sklearn_ensemble,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_naive_bayes':&nbsp;sklearn_naive_bayes,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_discriminant_analysis':&nbsp;sklearn_discriminant_analysis<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;eval_script('classifier&nbsp;init&nbsp;script&nbsp;of&nbsp;field&nbsp;{0}'.format(field_code),&nbsp;init_script,&nbsp;eval_locals)<br />")

  public String getClassifierInitScript() {
    return classifierInitScript;
  }


  public void setClassifierInitScript(String classifierInitScript) {
    this.classifierInitScript = classifierInitScript;
  }


  public DocumentFieldCreate formula(String formula) {
    
    this.formula = formula;
    return this;
  }

   /**
   * Get formula
   * @return formula
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFormula() {
    return formula;
  }


  public void setFormula(String formula) {
    this.formula = formula;
  }


  public DocumentFieldCreate convertDecimalsToFloatsInFormulaArgs(Boolean convertDecimalsToFloatsInFormulaArgs) {
    
    this.convertDecimalsToFloatsInFormulaArgs = convertDecimalsToFloatsInFormulaArgs;
    return this;
  }

   /**
   * Floating point field values      are represented in Python Decimal type to avoid rounding problems in machine numbers representations.      Use this checkbox for converting them to Python float type before calculating the formula.      Float: 0.1 + 0.2 &#x3D; 0.30000000000000004. Decimal: 0.1 + 0.2 &#x3D; 0.3.
   * @return convertDecimalsToFloatsInFormulaArgs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Floating point field values      are represented in Python Decimal type to avoid rounding problems in machine numbers representations.      Use this checkbox for converting them to Python float type before calculating the formula.      Float: 0.1 + 0.2 = 0.30000000000000004. Decimal: 0.1 + 0.2 = 0.3.")

  public Boolean getConvertDecimalsToFloatsInFormulaArgs() {
    return convertDecimalsToFloatsInFormulaArgs;
  }


  public void setConvertDecimalsToFloatsInFormulaArgs(Boolean convertDecimalsToFloatsInFormulaArgs) {
    this.convertDecimalsToFloatsInFormulaArgs = convertDecimalsToFloatsInFormulaArgs;
  }


  public DocumentFieldCreate valueRegexp(String valueRegexp) {
    
    this.valueRegexp = valueRegexp;
    return this;
  }

   /**
   * This regular expression is run on the sentence      found by a Field Detector and extracts a specific string value from a Text Unit. If the regular expression returns multiple matching groups, then the first matching group will be used by the Field. This is only applicable to String Fields.
   * @return valueRegexp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This regular expression is run on the sentence      found by a Field Detector and extracts a specific string value from a Text Unit. If the regular expression returns multiple matching groups, then the first matching group will be used by the Field. This is only applicable to String Fields.")

  public String getValueRegexp() {
    return valueRegexp;
  }


  public void setValueRegexp(String valueRegexp) {
    this.valueRegexp = valueRegexp;
  }


  public DocumentFieldCreate dependsOnFields(List<String> dependsOnFields) {
    
    this.dependsOnFields = dependsOnFields;
    return this;
  }

  public DocumentFieldCreate addDependsOnFieldsItem(String dependsOnFieldsItem) {
    if (this.dependsOnFields == null) {
      this.dependsOnFields = new ArrayList<>();
    }
    this.dependsOnFields.add(dependsOnFieldsItem);
    return this;
  }

   /**
   * Get dependsOnFields
   * @return dependsOnFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDependsOnFields() {
    return dependsOnFields;
  }


  public void setDependsOnFields(List<String> dependsOnFields) {
    this.dependsOnFields = dependsOnFields;
  }


  public DocumentFieldCreate confidence(ConfidenceEnum confidence) {
    
    this.confidence = confidence;
    return this;
  }

   /**
   * Get confidence
   * @return confidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfidenceEnum getConfidence() {
    return confidence;
  }


  public void setConfidence(ConfidenceEnum confidence) {
    this.confidence = confidence;
  }


  public DocumentFieldCreate requiresTextAnnotations(Boolean requiresTextAnnotations) {
    
    this.requiresTextAnnotations = requiresTextAnnotations;
    return this;
  }

   /**
   * Get requiresTextAnnotations
   * @return requiresTextAnnotations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRequiresTextAnnotations() {
    return requiresTextAnnotations;
  }


  public void setRequiresTextAnnotations(Boolean requiresTextAnnotations) {
    this.requiresTextAnnotations = requiresTextAnnotations;
  }


  public DocumentFieldCreate readOnly(Boolean readOnly) {
    
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Get readOnly
   * @return readOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getReadOnly() {
    return readOnly;
  }


  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public DocumentFieldCreate category(Integer category) {
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCategory() {
    return category;
  }


  public void setCategory(Integer category) {
    this.category = category;
  }


  public DocumentFieldCreate family(Integer family) {
    
    this.family = family;
    return this;
  }

   /**
   * Get family
   * @return family
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFamily() {
    return family;
  }


  public void setFamily(Integer family) {
    this.family = family;
  }


  public DocumentFieldCreate defaultValue(Object defaultValue) {
    
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * If populated, the Default Value will be displayed for this Field if no other value is found by the chosen Value Detection Strategy. Leave this form blank to have the Field Value remain empty by default. Please wrap entries with quotes, example: “landlord”. This is only applicable to Choice and Multi Choice Fields.
   * @return defaultValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If populated, the Default Value will be displayed for this Field if no other value is found by the chosen Value Detection Strategy. Leave this form blank to have the Field Value remain empty by default. Please wrap entries with quotes, example: “landlord”. This is only applicable to Choice and Multi Choice Fields.")

  public Object getDefaultValue() {
    return defaultValue;
  }


  public void setDefaultValue(Object defaultValue) {
    this.defaultValue = defaultValue;
  }


  public DocumentFieldCreate choices(String choices) {
    
    this.choices = choices;
    return this;
  }

   /**
   * Newline-separated choices. A choice cannot contain a comma.
   * @return choices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Newline-separated choices. A choice cannot contain a comma.")

  public String getChoices() {
    return choices;
  }


  public void setChoices(String choices) {
    this.choices = choices;
  }


  public DocumentFieldCreate allowValuesNotSpecifiedInChoices(Boolean allowValuesNotSpecifiedInChoices) {
    
    this.allowValuesNotSpecifiedInChoices = allowValuesNotSpecifiedInChoices;
    return this;
  }

   /**
   * Get allowValuesNotSpecifiedInChoices
   * @return allowValuesNotSpecifiedInChoices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAllowValuesNotSpecifiedInChoices() {
    return allowValuesNotSpecifiedInChoices;
  }


  public void setAllowValuesNotSpecifiedInChoices(Boolean allowValuesNotSpecifiedInChoices) {
    this.allowValuesNotSpecifiedInChoices = allowValuesNotSpecifiedInChoices;
  }


  public DocumentFieldCreate metadata(Object metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public DocumentFieldCreate trainingFinished(Boolean trainingFinished) {
    
    this.trainingFinished = trainingFinished;
    return this;
  }

   /**
   * Get trainingFinished
   * @return trainingFinished
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTrainingFinished() {
    return trainingFinished;
  }


  public void setTrainingFinished(Boolean trainingFinished) {
    this.trainingFinished = trainingFinished;
  }


  public DocumentFieldCreate dirty(Boolean dirty) {
    
    this.dirty = dirty;
    return this;
  }

   /**
   * Get dirty
   * @return dirty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDirty() {
    return dirty;
  }


  public void setDirty(Boolean dirty) {
    this.dirty = dirty;
  }


  public DocumentFieldCreate order(Integer order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * minimum: 0
   * maximum: 32767
   * @return order
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getOrder() {
    return order;
  }


  public void setOrder(Integer order) {
    this.order = order;
  }


  public DocumentFieldCreate trainedAfterDocumentsNumber(Integer trainedAfterDocumentsNumber) {
    
    this.trainedAfterDocumentsNumber = trainedAfterDocumentsNumber;
    return this;
  }

   /**
   * Get trainedAfterDocumentsNumber
   * minimum: 1
   * maximum: 2147483647
   * @return trainedAfterDocumentsNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTrainedAfterDocumentsNumber() {
    return trainedAfterDocumentsNumber;
  }


  public void setTrainedAfterDocumentsNumber(Integer trainedAfterDocumentsNumber) {
    this.trainedAfterDocumentsNumber = trainedAfterDocumentsNumber;
  }


  public DocumentFieldCreate hiddenAlways(Boolean hiddenAlways) {
    
    this.hiddenAlways = hiddenAlways;
    return this;
  }

   /**
   * Get hiddenAlways
   * @return hiddenAlways
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getHiddenAlways() {
    return hiddenAlways;
  }


  public void setHiddenAlways(Boolean hiddenAlways) {
    this.hiddenAlways = hiddenAlways;
  }


  public DocumentFieldCreate hideUntilPython(String hideUntilPython) {
    
    this.hideUntilPython = hideUntilPython;
    return this;
  }

   /**
   *                      Enter a boolean expression in Python syntax. If this Python expression evaluates to True, then this              Document Field will be displayed in the user interface. Likewise, if this Python expression evaluates to              False, then this Document Field will be hidden from view. Importantly, if a document’s status is set to              complete and this Document Field remains hidden, then this Document Field’s data will be erased. Similarly,              this Document Field might contain data that a user can not review if it is hidden and the document has not              been set to complete.
   * @return hideUntilPython
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "                     Enter a boolean expression in Python syntax. If this Python expression evaluates to True, then this              Document Field will be displayed in the user interface. Likewise, if this Python expression evaluates to              False, then this Document Field will be hidden from view. Importantly, if a document’s status is set to              complete and this Document Field remains hidden, then this Document Field’s data will be erased. Similarly,              this Document Field might contain data that a user can not review if it is hidden and the document has not              been set to complete.")

  public String getHideUntilPython() {
    return hideUntilPython;
  }


  public void setHideUntilPython(String hideUntilPython) {
    this.hideUntilPython = hideUntilPython;
  }


   /**
   * Target expression (\&quot;Hide until python\&quot; expression converted to JavaScript syntax for frontend). Allowed operators: +, -, *, /, &#x3D;&#x3D;&#x3D;, !&#x3D;&#x3D;, &#x3D;&#x3D;, !&#x3D;, &amp;&amp;, ||, &gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;, %
   * @return hideUntilJs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Target expression (\"Hide until python\" expression converted to JavaScript syntax for frontend). Allowed operators: +, -, *, /, ===, !==, ==, !=, &&, ||, >, <, >=, <=, %")

  public String getHideUntilJs() {
    return hideUntilJs;
  }




  public DocumentFieldCreate displayYesNo(Boolean displayYesNo) {
    
    this.displayYesNo = displayYesNo;
    return this;
  }

   /**
   * Checking this box will      display “Yes” if Related Info text is found, and display “No” if no text is found.
   * @return displayYesNo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Checking this box will      display “Yes” if Related Info text is found, and display “No” if no text is found.")

  public Boolean getDisplayYesNo() {
    return displayYesNo;
  }


  public void setDisplayYesNo(Boolean displayYesNo) {
    this.displayYesNo = displayYesNo;
  }


  public DocumentFieldCreate vectorizerStopWords(String vectorizerStopWords) {
    
    this.vectorizerStopWords = vectorizerStopWords;
    return this;
  }

   /**
   * Stop words for vectorizers      user in field-based ML field detection. These stop words are excluded from going into the feature vector part      build based on this field. In addition to these words the standard sklearn \&quot;english\&quot; word list is used.      Format: each word on new line
   * @return vectorizerStopWords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Stop words for vectorizers      user in field-based ML field detection. These stop words are excluded from going into the feature vector part      build based on this field. In addition to these words the standard sklearn \"english\" word list is used.      Format: each word on new line")

  public String getVectorizerStopWords() {
    return vectorizerStopWords;
  }


  public void setVectorizerStopWords(String vectorizerStopWords) {
    this.vectorizerStopWords = vectorizerStopWords;
  }


  public DocumentFieldCreate unsureChoiceValue(String unsureChoiceValue) {
    
    this.unsureChoiceValue = unsureChoiceValue;
    return this;
  }

   /**
   * Makes sense for machine learning      strategies with \&quot;Unsure\&quot; category. The strategy will return this value if probabilities of all other categories      appear lower than the specified threshold.
   * @return unsureChoiceValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Makes sense for machine learning      strategies with \"Unsure\" category. The strategy will return this value if probabilities of all other categories      appear lower than the specified threshold.")

  public String getUnsureChoiceValue() {
    return unsureChoiceValue;
  }


  public void setUnsureChoiceValue(String unsureChoiceValue) {
    this.unsureChoiceValue = unsureChoiceValue;
  }


  public DocumentFieldCreate unsureThresholdsByValue(Object unsureThresholdsByValue) {
    
    this.unsureThresholdsByValue = unsureThresholdsByValue;
    return this;
  }

   /**
   * Makes sense for machine learning      strategies with \&quot;Unsure\&quot; category. The strategy will return concrete result (one of choice values) only if      the probability of the detected value is greater than this threshold. Otherwise the strategy returns None      or the choice value specified in \&quot;Unsure choice value\&quot; field. Format: { \&quot;value1\&quot;: 0.9, \&quot;value2\&quot;: 0.5, ...}.      Default: 0.9
   * @return unsureThresholdsByValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Makes sense for machine learning      strategies with \"Unsure\" category. The strategy will return concrete result (one of choice values) only if      the probability of the detected value is greater than this threshold. Otherwise the strategy returns None      or the choice value specified in \"Unsure choice value\" field. Format: { \"value1\": 0.9, \"value2\": 0.5, ...}.      Default: 0.9")

  public Object getUnsureThresholdsByValue() {
    return unsureThresholdsByValue;
  }


  public void setUnsureThresholdsByValue(Object unsureThresholdsByValue) {
    this.unsureThresholdsByValue = unsureThresholdsByValue;
  }


  public DocumentFieldCreate mlflowModelUri(String mlflowModelUri) {
    
    this.mlflowModelUri = mlflowModelUri;
    return this;
  }

   /**
   * MLFlow model URI      understandable by the MLFlow artifact downloading routines.
   * @return mlflowModelUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MLFlow model URI      understandable by the MLFlow artifact downloading routines.")

  public String getMlflowModelUri() {
    return mlflowModelUri;
  }


  public void setMlflowModelUri(String mlflowModelUri) {
    this.mlflowModelUri = mlflowModelUri;
  }


  public DocumentFieldCreate mlflowDetectOnDocumentLevel(Boolean mlflowDetectOnDocumentLevel) {
    
    this.mlflowDetectOnDocumentLevel = mlflowDetectOnDocumentLevel;
    return this;
  }

   /**
   * If true - whole      document text will be sent to the MLFlow model and the field value will be returned for the whole text with no     annotations. If false - each text unit will be sent separately.
   * @return mlflowDetectOnDocumentLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true - whole      document text will be sent to the MLFlow model and the field value will be returned for the whole text with no     annotations. If false - each text unit will be sent separately.")

  public Boolean getMlflowDetectOnDocumentLevel() {
    return mlflowDetectOnDocumentLevel;
  }


  public void setMlflowDetectOnDocumentLevel(Boolean mlflowDetectOnDocumentLevel) {
    this.mlflowDetectOnDocumentLevel = mlflowDetectOnDocumentLevel;
  }


   /**
   * Get warningMessage
   * @return warningMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWarningMessage() {
    return warningMessage;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentFieldCreate documentFieldCreate = (DocumentFieldCreate) o;
    return Objects.equals(this.documentType, documentFieldCreate.documentType) &&
        Objects.equals(this.code, documentFieldCreate.code) &&
        Objects.equals(this.longCode, documentFieldCreate.longCode) &&
        Objects.equals(this.title, documentFieldCreate.title) &&
        Objects.equals(this.description, documentFieldCreate.description) &&
        Objects.equals(this.type, documentFieldCreate.type) &&
        Objects.equals(this.textUnitType, documentFieldCreate.textUnitType) &&
        Objects.equals(this.valueDetectionStrategy, documentFieldCreate.valueDetectionStrategy) &&
        Objects.equals(this.classifierInitScript, documentFieldCreate.classifierInitScript) &&
        Objects.equals(this.formula, documentFieldCreate.formula) &&
        Objects.equals(this.convertDecimalsToFloatsInFormulaArgs, documentFieldCreate.convertDecimalsToFloatsInFormulaArgs) &&
        Objects.equals(this.valueRegexp, documentFieldCreate.valueRegexp) &&
        Objects.equals(this.dependsOnFields, documentFieldCreate.dependsOnFields) &&
        Objects.equals(this.confidence, documentFieldCreate.confidence) &&
        Objects.equals(this.requiresTextAnnotations, documentFieldCreate.requiresTextAnnotations) &&
        Objects.equals(this.readOnly, documentFieldCreate.readOnly) &&
        Objects.equals(this.category, documentFieldCreate.category) &&
        Objects.equals(this.family, documentFieldCreate.family) &&
        Objects.equals(this.defaultValue, documentFieldCreate.defaultValue) &&
        Objects.equals(this.choices, documentFieldCreate.choices) &&
        Objects.equals(this.allowValuesNotSpecifiedInChoices, documentFieldCreate.allowValuesNotSpecifiedInChoices) &&
        Objects.equals(this.metadata, documentFieldCreate.metadata) &&
        Objects.equals(this.trainingFinished, documentFieldCreate.trainingFinished) &&
        Objects.equals(this.dirty, documentFieldCreate.dirty) &&
        Objects.equals(this.order, documentFieldCreate.order) &&
        Objects.equals(this.trainedAfterDocumentsNumber, documentFieldCreate.trainedAfterDocumentsNumber) &&
        Objects.equals(this.hiddenAlways, documentFieldCreate.hiddenAlways) &&
        Objects.equals(this.hideUntilPython, documentFieldCreate.hideUntilPython) &&
        Objects.equals(this.hideUntilJs, documentFieldCreate.hideUntilJs) &&
        Objects.equals(this.displayYesNo, documentFieldCreate.displayYesNo) &&
        Objects.equals(this.vectorizerStopWords, documentFieldCreate.vectorizerStopWords) &&
        Objects.equals(this.unsureChoiceValue, documentFieldCreate.unsureChoiceValue) &&
        Objects.equals(this.unsureThresholdsByValue, documentFieldCreate.unsureThresholdsByValue) &&
        Objects.equals(this.mlflowModelUri, documentFieldCreate.mlflowModelUri) &&
        Objects.equals(this.mlflowDetectOnDocumentLevel, documentFieldCreate.mlflowDetectOnDocumentLevel) &&
        Objects.equals(this.warningMessage, documentFieldCreate.warningMessage);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentType, code, longCode, title, description, type, textUnitType, valueDetectionStrategy, classifierInitScript, formula, convertDecimalsToFloatsInFormulaArgs, valueRegexp, dependsOnFields, confidence, requiresTextAnnotations, readOnly, category, family, defaultValue, choices, allowValuesNotSpecifiedInChoices, metadata, trainingFinished, dirty, order, trainedAfterDocumentsNumber, hiddenAlways, hideUntilPython, hideUntilJs, displayYesNo, vectorizerStopWords, unsureChoiceValue, unsureThresholdsByValue, mlflowModelUri, mlflowDetectOnDocumentLevel, warningMessage);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentFieldCreate {\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    longCode: ").append(toIndentedString(longCode)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    textUnitType: ").append(toIndentedString(textUnitType)).append("\n");
    sb.append("    valueDetectionStrategy: ").append(toIndentedString(valueDetectionStrategy)).append("\n");
    sb.append("    classifierInitScript: ").append(toIndentedString(classifierInitScript)).append("\n");
    sb.append("    formula: ").append(toIndentedString(formula)).append("\n");
    sb.append("    convertDecimalsToFloatsInFormulaArgs: ").append(toIndentedString(convertDecimalsToFloatsInFormulaArgs)).append("\n");
    sb.append("    valueRegexp: ").append(toIndentedString(valueRegexp)).append("\n");
    sb.append("    dependsOnFields: ").append(toIndentedString(dependsOnFields)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    requiresTextAnnotations: ").append(toIndentedString(requiresTextAnnotations)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    choices: ").append(toIndentedString(choices)).append("\n");
    sb.append("    allowValuesNotSpecifiedInChoices: ").append(toIndentedString(allowValuesNotSpecifiedInChoices)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    trainingFinished: ").append(toIndentedString(trainingFinished)).append("\n");
    sb.append("    dirty: ").append(toIndentedString(dirty)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    trainedAfterDocumentsNumber: ").append(toIndentedString(trainedAfterDocumentsNumber)).append("\n");
    sb.append("    hiddenAlways: ").append(toIndentedString(hiddenAlways)).append("\n");
    sb.append("    hideUntilPython: ").append(toIndentedString(hideUntilPython)).append("\n");
    sb.append("    hideUntilJs: ").append(toIndentedString(hideUntilJs)).append("\n");
    sb.append("    displayYesNo: ").append(toIndentedString(displayYesNo)).append("\n");
    sb.append("    vectorizerStopWords: ").append(toIndentedString(vectorizerStopWords)).append("\n");
    sb.append("    unsureChoiceValue: ").append(toIndentedString(unsureChoiceValue)).append("\n");
    sb.append("    unsureThresholdsByValue: ").append(toIndentedString(unsureThresholdsByValue)).append("\n");
    sb.append("    mlflowModelUri: ").append(toIndentedString(mlflowModelUri)).append("\n");
    sb.append("    mlflowDetectOnDocumentLevel: ").append(toIndentedString(mlflowDetectOnDocumentLevel)).append("\n");
    sb.append("    warningMessage: ").append(toIndentedString(warningMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("document_type");
    openapiFields.add("code");
    openapiFields.add("long_code");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("type");
    openapiFields.add("text_unit_type");
    openapiFields.add("value_detection_strategy");
    openapiFields.add("classifier_init_script");
    openapiFields.add("formula");
    openapiFields.add("convert_decimals_to_floats_in_formula_args");
    openapiFields.add("value_regexp");
    openapiFields.add("depends_on_fields");
    openapiFields.add("confidence");
    openapiFields.add("requires_text_annotations");
    openapiFields.add("read_only");
    openapiFields.add("category");
    openapiFields.add("family");
    openapiFields.add("default_value");
    openapiFields.add("choices");
    openapiFields.add("allow_values_not_specified_in_choices");
    openapiFields.add("metadata");
    openapiFields.add("training_finished");
    openapiFields.add("dirty");
    openapiFields.add("order");
    openapiFields.add("trained_after_documents_number");
    openapiFields.add("hidden_always");
    openapiFields.add("hide_until_python");
    openapiFields.add("hide_until_js");
    openapiFields.add("display_yes_no");
    openapiFields.add("vectorizer_stop_words");
    openapiFields.add("unsure_choice_value");
    openapiFields.add("unsure_thresholds_by_value");
    openapiFields.add("mlflow_model_uri");
    openapiFields.add("mlflow_detect_on_document_level");
    openapiFields.add("warning_message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("document_type");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DocumentFieldCreate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (DocumentFieldCreate.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentFieldCreate is not found in the empty JSON string", DocumentFieldCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DocumentFieldCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentFieldCreate` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentFieldCreate.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("document_type") != null && !jsonObj.get("document_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_type").toString()));
      }
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (jsonObj.get("long_code") != null && !jsonObj.get("long_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `long_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("long_code").toString()));
      }
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("text_unit_type") != null && !jsonObj.get("text_unit_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_unit_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_unit_type").toString()));
      }
      if (jsonObj.get("value_detection_strategy") != null && !jsonObj.get("value_detection_strategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value_detection_strategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value_detection_strategy").toString()));
      }
      if (jsonObj.get("classifier_init_script") != null && !jsonObj.get("classifier_init_script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classifier_init_script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classifier_init_script").toString()));
      }
      if (jsonObj.get("formula") != null && !jsonObj.get("formula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formula").toString()));
      }
      if (jsonObj.get("value_regexp") != null && !jsonObj.get("value_regexp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value_regexp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value_regexp").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("depends_on_fields") != null && !jsonObj.get("depends_on_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `depends_on_fields` to be an array in the JSON string but got `%s`", jsonObj.get("depends_on_fields").toString()));
      }
      if (jsonObj.get("confidence") != null && !jsonObj.get("confidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confidence").toString()));
      }
      if (jsonObj.get("choices") != null && !jsonObj.get("choices").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `choices` to be a primitive type in the JSON string but got `%s`", jsonObj.get("choices").toString()));
      }
      if (jsonObj.get("hide_until_python") != null && !jsonObj.get("hide_until_python").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hide_until_python` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hide_until_python").toString()));
      }
      if (jsonObj.get("hide_until_js") != null && !jsonObj.get("hide_until_js").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hide_until_js` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hide_until_js").toString()));
      }
      if (jsonObj.get("vectorizer_stop_words") != null && !jsonObj.get("vectorizer_stop_words").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vectorizer_stop_words` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vectorizer_stop_words").toString()));
      }
      if (jsonObj.get("unsure_choice_value") != null && !jsonObj.get("unsure_choice_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unsure_choice_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unsure_choice_value").toString()));
      }
      if (jsonObj.get("mlflow_model_uri") != null && !jsonObj.get("mlflow_model_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mlflow_model_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mlflow_model_uri").toString()));
      }
      if (jsonObj.get("warning_message") != null && !jsonObj.get("warning_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warning_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warning_message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentFieldCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentFieldCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentFieldCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentFieldCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentFieldCreate>() {
           @Override
           public void write(JsonWriter out, DocumentFieldCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentFieldCreate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocumentFieldCreate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocumentFieldCreate
  * @throws IOException if the JSON string is invalid with respect to DocumentFieldCreate
  */
  public static DocumentFieldCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentFieldCreate.class);
  }

 /**
  * Convert an instance of DocumentFieldCreate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

