/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Action
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class Action {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_VIEW_ACTION = "view_action";
  @SerializedName(SERIALIZED_NAME_VIEW_ACTION)
  private String viewAction;

  public static final String SERIALIZED_NAME_OBJECT_PK = "object_pk";
  @SerializedName(SERIALIZED_NAME_OBJECT_PK)
  private String objectPk;

  public static final String SERIALIZED_NAME_MODEL_NAME = "model_name";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_USER_NAME = "user__name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_USER_INITIALS = "user__initials";
  @SerializedName(SERIALIZED_NAME_USER_INITIALS)
  private String userInitials;

  public static final String SERIALIZED_NAME_USER_PHOTO_URL = "user_photo_url";
  @SerializedName(SERIALIZED_NAME_USER_PHOTO_URL)
  private String userPhotoUrl;

  public static final String SERIALIZED_NAME_REQUEST_DATA = "request_data";
  @SerializedName(SERIALIZED_NAME_REQUEST_DATA)
  private Object requestData;

  public Action() { 
  }

  
  public Action(
     Integer id, 
     OffsetDateTime date, 
     String userName, 
     String userInitials, 
     String userPhotoUrl
  ) {
    this();
    this.id = id;
    this.date = date;
    this.userName = userName;
    this.userInitials = userInitials;
    this.userPhotoUrl = userPhotoUrl;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




  public Action name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Action message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public Action viewAction(String viewAction) {
    
    this.viewAction = viewAction;
    return this;
  }

   /**
   * Get viewAction
   * @return viewAction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getViewAction() {
    return viewAction;
  }


  public void setViewAction(String viewAction) {
    this.viewAction = viewAction;
  }


  public Action objectPk(String objectPk) {
    
    this.objectPk = objectPk;
    return this;
  }

   /**
   * Get objectPk
   * @return objectPk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getObjectPk() {
    return objectPk;
  }


  public void setObjectPk(String objectPk) {
    this.objectPk = objectPk;
  }


  public Action modelName(String modelName) {
    
    this.modelName = modelName;
    return this;
  }

   /**
   * Get modelName
   * @return modelName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getModelName() {
    return modelName;
  }


  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDate() {
    return date;
  }




   /**
   * Get userName
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserName() {
    return userName;
  }




   /**
   * Get userInitials
   * @return userInitials
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserInitials() {
    return userInitials;
  }




   /**
   * Get userPhotoUrl
   * @return userPhotoUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserPhotoUrl() {
    return userPhotoUrl;
  }




  public Action requestData(Object requestData) {
    
    this.requestData = requestData;
    return this;
  }

   /**
   * Get requestData
   * @return requestData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getRequestData() {
    return requestData;
  }


  public void setRequestData(Object requestData) {
    this.requestData = requestData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Action action = (Action) o;
    return Objects.equals(this.id, action.id) &&
        Objects.equals(this.name, action.name) &&
        Objects.equals(this.message, action.message) &&
        Objects.equals(this.viewAction, action.viewAction) &&
        Objects.equals(this.objectPk, action.objectPk) &&
        Objects.equals(this.modelName, action.modelName) &&
        Objects.equals(this.date, action.date) &&
        Objects.equals(this.userName, action.userName) &&
        Objects.equals(this.userInitials, action.userInitials) &&
        Objects.equals(this.userPhotoUrl, action.userPhotoUrl) &&
        Objects.equals(this.requestData, action.requestData);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, message, viewAction, objectPk, modelName, date, userName, userInitials, userPhotoUrl, requestData);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Action {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    viewAction: ").append(toIndentedString(viewAction)).append("\n");
    sb.append("    objectPk: ").append(toIndentedString(objectPk)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    userInitials: ").append(toIndentedString(userInitials)).append("\n");
    sb.append("    userPhotoUrl: ").append(toIndentedString(userPhotoUrl)).append("\n");
    sb.append("    requestData: ").append(toIndentedString(requestData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("message");
    openapiFields.add("view_action");
    openapiFields.add("object_pk");
    openapiFields.add("model_name");
    openapiFields.add("date");
    openapiFields.add("user__name");
    openapiFields.add("user__initials");
    openapiFields.add("user_photo_url");
    openapiFields.add("request_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Action
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Action.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Action is not found in the empty JSON string", Action.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Action.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Action` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (jsonObj.get("view_action") != null && !jsonObj.get("view_action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view_action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view_action").toString()));
      }
      if (jsonObj.get("object_pk") != null && !jsonObj.get("object_pk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object_pk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object_pk").toString()));
      }
      if (jsonObj.get("model_name") != null && !jsonObj.get("model_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model_name").toString()));
      }
      if (jsonObj.get("user__name") != null && !jsonObj.get("user__name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user__name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user__name").toString()));
      }
      if (jsonObj.get("user__initials") != null && !jsonObj.get("user__initials").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user__initials` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user__initials").toString()));
      }
      if (jsonObj.get("user_photo_url") != null && !jsonObj.get("user_photo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_photo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_photo_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Action.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Action' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Action> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Action.class));

       return (TypeAdapter<T>) new TypeAdapter<Action>() {
           @Override
           public void write(JsonWriter out, Action value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Action read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Action given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Action
  * @throws IOException if the JSON string is invalid with respect to Action
  */
  public static Action fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Action.class);
  }

 /**
  * Convert an instance of Action to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

