/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClusterProjectRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class ClusterProjectRequest {
  public static final String SERIALIZED_NAME_N_CLUSTERS = "n_clusters";
  @SerializedName(SERIALIZED_NAME_N_CLUSTERS)
  private Integer nClusters;

  public static final String SERIALIZED_NAME_FORCE = "force";
  @SerializedName(SERIALIZED_NAME_FORCE)
  private Boolean force;

  /**
   * Gets or Sets clusterBy
   */
  @JsonAdapter(ClusterByEnum.Adapter.class)
  public enum ClusterByEnum {
    TERM("term"),
    
    DATE("date"),
    
    TEXT("text"),
    
    DEFINITION("definition"),
    
    DURATION("duration"),
    
    PARTY("party"),
    
    GEOENTITY("geoentity"),
    
    CURRENCY_NAME("currency_name"),
    
    CURRENCY_VALUE("currency_value");

    private String value;

    ClusterByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClusterByEnum fromValue(String value) {
      for (ClusterByEnum b : ClusterByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClusterByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClusterByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClusterByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClusterByEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLUSTER_BY = "cluster_by";
  @SerializedName(SERIALIZED_NAME_CLUSTER_BY)
  private ClusterByEnum clusterBy;

  /**
   * Gets or Sets method
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    KMEANS("kmeans"),
    
    MINIBATCHKMEANS("minibatchkmeans"),
    
    BIRCH("birch");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private MethodEnum method;

  public static final String SERIALIZED_NAME_REQUIRE_CONFIRMATION = "require_confirmation";
  @SerializedName(SERIALIZED_NAME_REQUIRE_CONFIRMATION)
  private Boolean requireConfirmation;

  public ClusterProjectRequest() { 
  }

  public ClusterProjectRequest nClusters(Integer nClusters) {
    
    this.nClusters = nClusters;
    return this;
  }

   /**
   * Get nClusters
   * @return nClusters
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getnClusters() {
    return nClusters;
  }


  public void setnClusters(Integer nClusters) {
    this.nClusters = nClusters;
  }


  public ClusterProjectRequest force(Boolean force) {
    
    this.force = force;
    return this;
  }

   /**
   * Get force
   * @return force
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getForce() {
    return force;
  }


  public void setForce(Boolean force) {
    this.force = force;
  }


  public ClusterProjectRequest clusterBy(ClusterByEnum clusterBy) {
    
    this.clusterBy = clusterBy;
    return this;
  }

   /**
   * Get clusterBy
   * @return clusterBy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ClusterByEnum getClusterBy() {
    return clusterBy;
  }


  public void setClusterBy(ClusterByEnum clusterBy) {
    this.clusterBy = clusterBy;
  }


  public ClusterProjectRequest method(MethodEnum method) {
    
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public MethodEnum getMethod() {
    return method;
  }


  public void setMethod(MethodEnum method) {
    this.method = method;
  }


  public ClusterProjectRequest requireConfirmation(Boolean requireConfirmation) {
    
    this.requireConfirmation = requireConfirmation;
    return this;
  }

   /**
   * Get requireConfirmation
   * @return requireConfirmation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRequireConfirmation() {
    return requireConfirmation;
  }


  public void setRequireConfirmation(Boolean requireConfirmation) {
    this.requireConfirmation = requireConfirmation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterProjectRequest clusterProjectRequest = (ClusterProjectRequest) o;
    return Objects.equals(this.nClusters, clusterProjectRequest.nClusters) &&
        Objects.equals(this.force, clusterProjectRequest.force) &&
        Objects.equals(this.clusterBy, clusterProjectRequest.clusterBy) &&
        Objects.equals(this.method, clusterProjectRequest.method) &&
        Objects.equals(this.requireConfirmation, clusterProjectRequest.requireConfirmation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nClusters, force, clusterBy, method, requireConfirmation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterProjectRequest {\n");
    sb.append("    nClusters: ").append(toIndentedString(nClusters)).append("\n");
    sb.append("    force: ").append(toIndentedString(force)).append("\n");
    sb.append("    clusterBy: ").append(toIndentedString(clusterBy)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    requireConfirmation: ").append(toIndentedString(requireConfirmation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("n_clusters");
    openapiFields.add("force");
    openapiFields.add("cluster_by");
    openapiFields.add("method");
    openapiFields.add("require_confirmation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("n_clusters");
    openapiRequiredFields.add("cluster_by");
    openapiRequiredFields.add("method");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ClusterProjectRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ClusterProjectRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterProjectRequest is not found in the empty JSON string", ClusterProjectRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ClusterProjectRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterProjectRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClusterProjectRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("cluster_by") != null && !jsonObj.get("cluster_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster_by").toString()));
      }
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterProjectRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterProjectRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterProjectRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterProjectRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterProjectRequest>() {
           @Override
           public void write(JsonWriter out, ClusterProjectRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterProjectRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClusterProjectRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClusterProjectRequest
  * @throws IOException if the JSON string is invalid with respect to ClusterProjectRequest
  */
  public static ClusterProjectRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterProjectRequest.class);
  }

 /**
  * Convert an instance of ClusterProjectRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

