/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegulationUsage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class RegulationUsage {
  public static final String SERIALIZED_NAME_REGULATION_TYPE = "regulation_type";
  @SerializedName(SERIALIZED_NAME_REGULATION_TYPE)
  private String regulationType;

  public static final String SERIALIZED_NAME_REGULATION_NAME = "regulation_name";
  @SerializedName(SERIALIZED_NAME_REGULATION_NAME)
  private String regulationName;

  public static final String SERIALIZED_NAME_ENTITY_NAME = "entity__name";
  @SerializedName(SERIALIZED_NAME_ENTITY_NAME)
  private String entityName;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private Integer pk;

  public static final String SERIALIZED_NAME_TEXT_UNIT_PK = "text_unit__pk";
  @SerializedName(SERIALIZED_NAME_TEXT_UNIT_PK)
  private String textUnitPk;

  public static final String SERIALIZED_NAME_TEXT_UNIT_UNIT_TYPE = "text_unit__unit_type";
  @SerializedName(SERIALIZED_NAME_TEXT_UNIT_UNIT_TYPE)
  private String textUnitUnitType;

  public static final String SERIALIZED_NAME_TEXT_UNIT_LOCATION_START = "text_unit__location_start";
  @SerializedName(SERIALIZED_NAME_TEXT_UNIT_LOCATION_START)
  private String textUnitLocationStart;

  public static final String SERIALIZED_NAME_TEXT_UNIT_LOCATION_END = "text_unit__location_end";
  @SerializedName(SERIALIZED_NAME_TEXT_UNIT_LOCATION_END)
  private String textUnitLocationEnd;

  public static final String SERIALIZED_NAME_TEXT_UNIT_DOCUMENT_PK = "text_unit__document__pk";
  @SerializedName(SERIALIZED_NAME_TEXT_UNIT_DOCUMENT_PK)
  private String textUnitDocumentPk;

  public static final String SERIALIZED_NAME_TEXT_UNIT_DOCUMENT_NAME = "text_unit__document__name";
  @SerializedName(SERIALIZED_NAME_TEXT_UNIT_DOCUMENT_NAME)
  private String textUnitDocumentName;

  public static final String SERIALIZED_NAME_TEXT_UNIT_DOCUMENT_DESCRIPTION = "text_unit__document__description";
  @SerializedName(SERIALIZED_NAME_TEXT_UNIT_DOCUMENT_DESCRIPTION)
  private String textUnitDocumentDescription;

  public static final String SERIALIZED_NAME_TEXT_UNIT_DOCUMENT_DOCUMENT_TYPE = "text_unit__document__document_type";
  @SerializedName(SERIALIZED_NAME_TEXT_UNIT_DOCUMENT_DOCUMENT_TYPE)
  private String textUnitDocumentDocumentType;

  public RegulationUsage() { 
  }

  
  public RegulationUsage(
     String entityName, 
     Integer pk, 
     String textUnitPk, 
     String textUnitUnitType, 
     String textUnitLocationStart, 
     String textUnitLocationEnd, 
     String textUnitDocumentPk, 
     String textUnitDocumentName, 
     String textUnitDocumentDescription, 
     String textUnitDocumentDocumentType
  ) {
    this();
    this.entityName = entityName;
    this.pk = pk;
    this.textUnitPk = textUnitPk;
    this.textUnitUnitType = textUnitUnitType;
    this.textUnitLocationStart = textUnitLocationStart;
    this.textUnitLocationEnd = textUnitLocationEnd;
    this.textUnitDocumentPk = textUnitDocumentPk;
    this.textUnitDocumentName = textUnitDocumentName;
    this.textUnitDocumentDescription = textUnitDocumentDescription;
    this.textUnitDocumentDocumentType = textUnitDocumentDocumentType;
  }

  public RegulationUsage regulationType(String regulationType) {
    
    this.regulationType = regulationType;
    return this;
  }

   /**
   * Get regulationType
   * @return regulationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getRegulationType() {
    return regulationType;
  }


  public void setRegulationType(String regulationType) {
    this.regulationType = regulationType;
  }


  public RegulationUsage regulationName(String regulationName) {
    
    this.regulationName = regulationName;
    return this;
  }

   /**
   * Get regulationName
   * @return regulationName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getRegulationName() {
    return regulationName;
  }


  public void setRegulationName(String regulationName) {
    this.regulationName = regulationName;
  }


   /**
   * Get entityName
   * @return entityName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEntityName() {
    return entityName;
  }




  public RegulationUsage count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * Get count
   * minimum: -2147483648
   * maximum: 2147483647
   * @return count
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    this.count = count;
  }


   /**
   * Get pk
   * @return pk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPk() {
    return pk;
  }




   /**
   * Get textUnitPk
   * @return textUnitPk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTextUnitPk() {
    return textUnitPk;
  }




   /**
   * Get textUnitUnitType
   * @return textUnitUnitType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTextUnitUnitType() {
    return textUnitUnitType;
  }




   /**
   * Get textUnitLocationStart
   * @return textUnitLocationStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTextUnitLocationStart() {
    return textUnitLocationStart;
  }




   /**
   * Get textUnitLocationEnd
   * @return textUnitLocationEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTextUnitLocationEnd() {
    return textUnitLocationEnd;
  }




   /**
   * Get textUnitDocumentPk
   * @return textUnitDocumentPk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTextUnitDocumentPk() {
    return textUnitDocumentPk;
  }




   /**
   * Get textUnitDocumentName
   * @return textUnitDocumentName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTextUnitDocumentName() {
    return textUnitDocumentName;
  }




   /**
   * Get textUnitDocumentDescription
   * @return textUnitDocumentDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTextUnitDocumentDescription() {
    return textUnitDocumentDescription;
  }




   /**
   * Get textUnitDocumentDocumentType
   * @return textUnitDocumentDocumentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTextUnitDocumentDocumentType() {
    return textUnitDocumentDocumentType;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegulationUsage regulationUsage = (RegulationUsage) o;
    return Objects.equals(this.regulationType, regulationUsage.regulationType) &&
        Objects.equals(this.regulationName, regulationUsage.regulationName) &&
        Objects.equals(this.entityName, regulationUsage.entityName) &&
        Objects.equals(this.count, regulationUsage.count) &&
        Objects.equals(this.pk, regulationUsage.pk) &&
        Objects.equals(this.textUnitPk, regulationUsage.textUnitPk) &&
        Objects.equals(this.textUnitUnitType, regulationUsage.textUnitUnitType) &&
        Objects.equals(this.textUnitLocationStart, regulationUsage.textUnitLocationStart) &&
        Objects.equals(this.textUnitLocationEnd, regulationUsage.textUnitLocationEnd) &&
        Objects.equals(this.textUnitDocumentPk, regulationUsage.textUnitDocumentPk) &&
        Objects.equals(this.textUnitDocumentName, regulationUsage.textUnitDocumentName) &&
        Objects.equals(this.textUnitDocumentDescription, regulationUsage.textUnitDocumentDescription) &&
        Objects.equals(this.textUnitDocumentDocumentType, regulationUsage.textUnitDocumentDocumentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(regulationType, regulationName, entityName, count, pk, textUnitPk, textUnitUnitType, textUnitLocationStart, textUnitLocationEnd, textUnitDocumentPk, textUnitDocumentName, textUnitDocumentDescription, textUnitDocumentDocumentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegulationUsage {\n");
    sb.append("    regulationType: ").append(toIndentedString(regulationType)).append("\n");
    sb.append("    regulationName: ").append(toIndentedString(regulationName)).append("\n");
    sb.append("    entityName: ").append(toIndentedString(entityName)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    textUnitPk: ").append(toIndentedString(textUnitPk)).append("\n");
    sb.append("    textUnitUnitType: ").append(toIndentedString(textUnitUnitType)).append("\n");
    sb.append("    textUnitLocationStart: ").append(toIndentedString(textUnitLocationStart)).append("\n");
    sb.append("    textUnitLocationEnd: ").append(toIndentedString(textUnitLocationEnd)).append("\n");
    sb.append("    textUnitDocumentPk: ").append(toIndentedString(textUnitDocumentPk)).append("\n");
    sb.append("    textUnitDocumentName: ").append(toIndentedString(textUnitDocumentName)).append("\n");
    sb.append("    textUnitDocumentDescription: ").append(toIndentedString(textUnitDocumentDescription)).append("\n");
    sb.append("    textUnitDocumentDocumentType: ").append(toIndentedString(textUnitDocumentDocumentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("regulation_type");
    openapiFields.add("regulation_name");
    openapiFields.add("entity__name");
    openapiFields.add("count");
    openapiFields.add("pk");
    openapiFields.add("text_unit__pk");
    openapiFields.add("text_unit__unit_type");
    openapiFields.add("text_unit__location_start");
    openapiFields.add("text_unit__location_end");
    openapiFields.add("text_unit__document__pk");
    openapiFields.add("text_unit__document__name");
    openapiFields.add("text_unit__document__description");
    openapiFields.add("text_unit__document__document_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("regulation_type");
    openapiRequiredFields.add("regulation_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RegulationUsage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RegulationUsage.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegulationUsage is not found in the empty JSON string", RegulationUsage.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RegulationUsage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegulationUsage` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegulationUsage.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("regulation_type") != null && !jsonObj.get("regulation_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regulation_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regulation_type").toString()));
      }
      if (jsonObj.get("regulation_name") != null && !jsonObj.get("regulation_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regulation_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regulation_name").toString()));
      }
      if (jsonObj.get("entity__name") != null && !jsonObj.get("entity__name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity__name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity__name").toString()));
      }
      if (jsonObj.get("text_unit__pk") != null && !jsonObj.get("text_unit__pk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_unit__pk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_unit__pk").toString()));
      }
      if (jsonObj.get("text_unit__unit_type") != null && !jsonObj.get("text_unit__unit_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_unit__unit_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_unit__unit_type").toString()));
      }
      if (jsonObj.get("text_unit__location_start") != null && !jsonObj.get("text_unit__location_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_unit__location_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_unit__location_start").toString()));
      }
      if (jsonObj.get("text_unit__location_end") != null && !jsonObj.get("text_unit__location_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_unit__location_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_unit__location_end").toString()));
      }
      if (jsonObj.get("text_unit__document__pk") != null && !jsonObj.get("text_unit__document__pk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_unit__document__pk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_unit__document__pk").toString()));
      }
      if (jsonObj.get("text_unit__document__name") != null && !jsonObj.get("text_unit__document__name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_unit__document__name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_unit__document__name").toString()));
      }
      if (jsonObj.get("text_unit__document__description") != null && !jsonObj.get("text_unit__document__description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_unit__document__description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_unit__document__description").toString()));
      }
      if (jsonObj.get("text_unit__document__document_type") != null && !jsonObj.get("text_unit__document__document_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_unit__document__document_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_unit__document__document_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegulationUsage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegulationUsage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegulationUsage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegulationUsage.class));

       return (TypeAdapter<T>) new TypeAdapter<RegulationUsage>() {
           @Override
           public void write(JsonWriter out, RegulationUsage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegulationUsage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegulationUsage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegulationUsage
  * @throws IOException if the JSON string is invalid with respect to RegulationUsage
  */
  public static RegulationUsage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegulationUsage.class);
  }

 /**
  * Convert an instance of RegulationUsage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

