/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Annotation;
import org.openapitools.client.model.AnnotationBatchRequest;
import org.openapitools.client.model.AnnotationBatchResponse;
import org.openapitools.client.model.AnnotationInDocument;
import org.openapitools.client.model.AnnotationSuggestRequest;
import org.openapitools.client.model.AnnotationUpdateResponse;
import org.openapitools.client.model.CheckDocumentFieldFormulaRequest;
import org.openapitools.client.model.CloneDocumentFieldRequest;
import org.openapitools.client.model.CloneDocumentTypeRequest;
import org.openapitools.client.model.DocumentDefinitions;
import org.openapitools.client.model.DocumentDetail;
import org.openapitools.client.model.DocumentDownloadZipResponse;
import org.openapitools.client.model.DocumentFieldAnnotation;
import org.openapitools.client.model.DocumentFieldCategoryCreate;
import org.openapitools.client.model.DocumentFieldCategoryList;
import org.openapitools.client.model.DocumentFieldCreate;
import org.openapitools.client.model.DocumentFieldDetail;
import org.openapitools.client.model.DocumentFieldDetectorCreate;
import org.openapitools.client.model.DocumentFieldDetectorDetail;
import org.openapitools.client.model.DocumentFieldList;
import org.openapitools.client.model.DocumentFieldStatsResponse;
import org.openapitools.client.model.DocumentFieldValue;
import org.openapitools.client.model.DocumentNoteCreate;
import org.openapitools.client.model.DocumentNoteDetail;
import org.openapitools.client.model.DocumentNoteUpdate;
import org.openapitools.client.model.DocumentTypeCreate;
import org.openapitools.client.model.DocumentTypeDetail;
import org.openapitools.client.model.DocumentTypeImportRequest;
import org.openapitools.client.model.DocumentTypeImportResponse;
import org.openapitools.client.model.DocumentTypeStats;
import org.openapitools.client.model.DocumentsForUser;
import org.openapitools.client.model.DocumentsForUserResponse;
import org.openapitools.client.model.FieldAnnotationStatus;
import java.io.File;
import org.openapitools.client.model.InlineResponse4041;
import org.openapitools.client.model.MarkUnmarkForDeleteDocumentsRequest;
import org.openapitools.client.model.MarkUnmarkForDeleteDocumentsResponse;
import org.openapitools.client.model.TextUnitDjangoQL;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentApi {
    private ApiClient localVarApiClient;

    public DocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for documentAnnotationsAnnotatePUT
     * @param annotation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsAnnotatePUTCall(Annotation annotation, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/api/v1/document/annotations/annotate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentAnnotationsAnnotatePUTValidateBeforeCall(Annotation annotation, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentAnnotationsAnnotatePUTCall(annotation, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param annotation  (optional)
     * @return AnnotationUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationUpdateResponse documentAnnotationsAnnotatePUT(Annotation annotation) throws ApiException {
        ApiResponse<AnnotationUpdateResponse> localVarResp = documentAnnotationsAnnotatePUTWithHttpInfo(annotation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param annotation  (optional)
     * @return ApiResponse&lt;AnnotationUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationUpdateResponse> documentAnnotationsAnnotatePUTWithHttpInfo(Annotation annotation) throws ApiException {
        okhttp3.Call localVarCall = documentAnnotationsAnnotatePUTValidateBeforeCall(annotation, null);
        Type localVarReturnType = new TypeToken<AnnotationUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param annotation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsAnnotatePUTAsync(Annotation annotation, final ApiCallback<AnnotationUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentAnnotationsAnnotatePUTValidateBeforeCall(annotation, _callback);
        Type localVarReturnType = new TypeToken<AnnotationUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentAnnotationsBatchPUT
     * @param annotationBatchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsBatchPUTCall(List<AnnotationBatchRequest> annotationBatchRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = annotationBatchRequest;

        // create path and map variables
        String localVarPath = "/api/v1/document/annotations/batch/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentAnnotationsBatchPUTValidateBeforeCall(List<AnnotationBatchRequest> annotationBatchRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentAnnotationsBatchPUTCall(annotationBatchRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create batch of annotations      PUT Params:          - operation_uid: uid          - action: str [\&quot;save\&quot;, \&quot;delete\&quot;]          - id: int - PK of DocumentFieldValue          - data: {\&quot;document\&quot;: id, \&quot;field\&quot;: uid, \&quot;location_start\&quot;: int, \&quot;location_end\&quot;: int, \&quot;value\&quot;: val}
     * @param annotationBatchRequest  (optional)
     * @return List&lt;AnnotationBatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<AnnotationBatchResponse> documentAnnotationsBatchPUT(List<AnnotationBatchRequest> annotationBatchRequest) throws ApiException {
        ApiResponse<List<AnnotationBatchResponse>> localVarResp = documentAnnotationsBatchPUTWithHttpInfo(annotationBatchRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create batch of annotations      PUT Params:          - operation_uid: uid          - action: str [\&quot;save\&quot;, \&quot;delete\&quot;]          - id: int - PK of DocumentFieldValue          - data: {\&quot;document\&quot;: id, \&quot;field\&quot;: uid, \&quot;location_start\&quot;: int, \&quot;location_end\&quot;: int, \&quot;value\&quot;: val}
     * @param annotationBatchRequest  (optional)
     * @return ApiResponse&lt;List&lt;AnnotationBatchResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnnotationBatchResponse>> documentAnnotationsBatchPUTWithHttpInfo(List<AnnotationBatchRequest> annotationBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = documentAnnotationsBatchPUTValidateBeforeCall(annotationBatchRequest, null);
        Type localVarReturnType = new TypeToken<List<AnnotationBatchResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create batch of annotations      PUT Params:          - operation_uid: uid          - action: str [\&quot;save\&quot;, \&quot;delete\&quot;]          - id: int - PK of DocumentFieldValue          - data: {\&quot;document\&quot;: id, \&quot;field\&quot;: uid, \&quot;location_start\&quot;: int, \&quot;location_end\&quot;: int, \&quot;value\&quot;: val}
     * @param annotationBatchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsBatchPUTAsync(List<AnnotationBatchRequest> annotationBatchRequest, final ApiCallback<List<AnnotationBatchResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentAnnotationsBatchPUTValidateBeforeCall(annotationBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<List<AnnotationBatchResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentAnnotationsGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/annotations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentAnnotationsGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentAnnotationsGETCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Annotation (Document Field Value) List
     * @return List&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Annotation> documentAnnotationsGET() throws ApiException {
        ApiResponse<List<Annotation>> localVarResp = documentAnnotationsGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Annotation (Document Field Value) List
     * @return ApiResponse&lt;List&lt;Annotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Annotation>> documentAnnotationsGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = documentAnnotationsGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Annotation (Document Field Value) List
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsGETAsync(final ApiCallback<List<Annotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentAnnotationsGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentAnnotationsIdDELETE
     * @param id A unique integer value identifying this field annotation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsIdDELETECall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/annotations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentAnnotationsIdDELETEValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentAnnotationsIdDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = documentAnnotationsIdDELETECall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete Annotation (Document Field Value)
     * @param id A unique integer value identifying this field annotation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void documentAnnotationsIdDELETE(String id) throws ApiException {
        documentAnnotationsIdDELETEWithHttpInfo(id);
    }

    /**
     * 
     * Delete Annotation (Document Field Value)
     * @param id A unique integer value identifying this field annotation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentAnnotationsIdDELETEWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentAnnotationsIdDELETEValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete Annotation (Document Field Value)
     * @param id A unique integer value identifying this field annotation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsIdDELETEAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentAnnotationsIdDELETEValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentAnnotationsIdGET
     * @param id A unique integer value identifying this field annotation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsIdGETCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/annotations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentAnnotationsIdGETValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentAnnotationsIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentAnnotationsIdGETCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve Annotation (Document Field Value)
     * @param id A unique integer value identifying this field annotation. (required)
     * @return Annotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Annotation documentAnnotationsIdGET(String id) throws ApiException {
        ApiResponse<Annotation> localVarResp = documentAnnotationsIdGETWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve Annotation (Document Field Value)
     * @param id A unique integer value identifying this field annotation. (required)
     * @return ApiResponse&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Annotation> documentAnnotationsIdGETWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentAnnotationsIdGETValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve Annotation (Document Field Value)
     * @param id A unique integer value identifying this field annotation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsIdGETAsync(String id, final ApiCallback<Annotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentAnnotationsIdGETValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentAnnotationsIdPUT
     * @param id A unique integer value identifying this field annotation. (required)
     * @param annotation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsIdPUTCall(String id, Annotation annotation, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/api/v1/document/annotations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentAnnotationsIdPUTValidateBeforeCall(String id, Annotation annotation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentAnnotationsIdPUT(Async)");
        }
        

        okhttp3.Call localVarCall = documentAnnotationsIdPUTCall(id, annotation, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update Annotation (Document Field Value)
     * @param id A unique integer value identifying this field annotation. (required)
     * @param annotation  (optional)
     * @return Annotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Annotation documentAnnotationsIdPUT(String id, Annotation annotation) throws ApiException {
        ApiResponse<Annotation> localVarResp = documentAnnotationsIdPUTWithHttpInfo(id, annotation);
        return localVarResp.getData();
    }

    /**
     * 
     * Update Annotation (Document Field Value)
     * @param id A unique integer value identifying this field annotation. (required)
     * @param annotation  (optional)
     * @return ApiResponse&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Annotation> documentAnnotationsIdPUTWithHttpInfo(String id, Annotation annotation) throws ApiException {
        okhttp3.Call localVarCall = documentAnnotationsIdPUTValidateBeforeCall(id, annotation, null);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Annotation (Document Field Value)
     * @param id A unique integer value identifying this field annotation. (required)
     * @param annotation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsIdPUTAsync(String id, Annotation annotation, final ApiCallback<Annotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentAnnotationsIdPUTValidateBeforeCall(id, annotation, _callback);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentAnnotationsPOST
     * @param annotation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsPOSTCall(Annotation annotation, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/api/v1/document/annotations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentAnnotationsPOSTValidateBeforeCall(Annotation annotation, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentAnnotationsPOSTCall(annotation, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create Annotation (Document Field Value)
     * @param annotation  (optional)
     * @return Annotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Annotation documentAnnotationsPOST(Annotation annotation) throws ApiException {
        ApiResponse<Annotation> localVarResp = documentAnnotationsPOSTWithHttpInfo(annotation);
        return localVarResp.getData();
    }

    /**
     * 
     * Create Annotation (Document Field Value)
     * @param annotation  (optional)
     * @return ApiResponse&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Annotation> documentAnnotationsPOSTWithHttpInfo(Annotation annotation) throws ApiException {
        okhttp3.Call localVarCall = documentAnnotationsPOSTValidateBeforeCall(annotation, null);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Annotation (Document Field Value)
     * @param annotation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsPOSTAsync(Annotation annotation, final ApiCallback<Annotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentAnnotationsPOSTValidateBeforeCall(annotation, _callback);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentAnnotationsSuggestPOST
     * @param annotationSuggestRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsSuggestPOSTCall(AnnotationSuggestRequest annotationSuggestRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = annotationSuggestRequest;

        // create path and map variables
        String localVarPath = "/api/v1/document/annotations/suggest/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentAnnotationsSuggestPOSTValidateBeforeCall(AnnotationSuggestRequest annotationSuggestRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentAnnotationsSuggestPOSTCall(annotationSuggestRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Suggest field value before creating an annotation.
     * @param annotationSuggestRequest  (optional)
     * @return Annotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Annotation documentAnnotationsSuggestPOST(AnnotationSuggestRequest annotationSuggestRequest) throws ApiException {
        ApiResponse<Annotation> localVarResp = documentAnnotationsSuggestPOSTWithHttpInfo(annotationSuggestRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Suggest field value before creating an annotation.
     * @param annotationSuggestRequest  (optional)
     * @return ApiResponse&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Annotation> documentAnnotationsSuggestPOSTWithHttpInfo(AnnotationSuggestRequest annotationSuggestRequest) throws ApiException {
        okhttp3.Call localVarCall = documentAnnotationsSuggestPOSTValidateBeforeCall(annotationSuggestRequest, null);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Suggest field value before creating an annotation.
     * @param annotationSuggestRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentAnnotationsSuggestPOSTAsync(AnnotationSuggestRequest annotationSuggestRequest, final ApiCallback<Annotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentAnnotationsSuggestPOSTValidateBeforeCall(annotationSuggestRequest, _callback);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldAnnotationsForUserGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldAnnotationsForUserGETCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-annotations/for-user/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldAnnotationsForUserGETValidateBeforeCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentFieldAnnotationsForUserGETCall(jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentFieldAnnotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldAnnotation documentDocumentFieldAnnotationsForUserGET(Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentFieldAnnotation> localVarResp = documentDocumentFieldAnnotationsForUserGETWithHttpInfo(jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentFieldAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldAnnotation> documentDocumentFieldAnnotationsForUserGETWithHttpInfo(Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldAnnotationsForUserGETValidateBeforeCall(jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentFieldAnnotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldAnnotationsForUserGETAsync(Map<String, String> jqFilters, final ApiCallback<DocumentFieldAnnotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldAnnotationsForUserGETValidateBeforeCall(jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldAnnotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldAnnotationsGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldAnnotationsGETCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-annotations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldAnnotationsGETValidateBeforeCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentFieldAnnotationsGETCall(jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Field Annotation List + Field Annotation False Match List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return List&lt;DocumentFieldAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentFieldAnnotation> documentDocumentFieldAnnotationsGET(Map<String, String> jqFilters) throws ApiException {
        ApiResponse<List<DocumentFieldAnnotation>> localVarResp = documentDocumentFieldAnnotationsGETWithHttpInfo(jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Field Annotation List + Field Annotation False Match List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;List&lt;DocumentFieldAnnotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentFieldAnnotation>> documentDocumentFieldAnnotationsGETWithHttpInfo(Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldAnnotationsGETValidateBeforeCall(jqFilters, null);
        Type localVarReturnType = new TypeToken<List<DocumentFieldAnnotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Field Annotation List + Field Annotation False Match List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldAnnotationsGETAsync(Map<String, String> jqFilters, final ApiCallback<List<DocumentFieldAnnotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldAnnotationsGETValidateBeforeCall(jqFilters, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentFieldAnnotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldAnnotationsUidGET
     * @param uid  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldAnnotationsUidGETCall(String uid, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-annotations/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldAnnotationsUidGETValidateBeforeCall(String uid, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldAnnotationsUidGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldAnnotationsUidGETCall(uid, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Field Annotation Details (not Field Annotation False Match)
     * @param uid  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentFieldAnnotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldAnnotation documentDocumentFieldAnnotationsUidGET(String uid, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentFieldAnnotation> localVarResp = documentDocumentFieldAnnotationsUidGETWithHttpInfo(uid, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Field Annotation Details (not Field Annotation False Match)
     * @param uid  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentFieldAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldAnnotation> documentDocumentFieldAnnotationsUidGETWithHttpInfo(String uid, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldAnnotationsUidGETValidateBeforeCall(uid, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentFieldAnnotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Field Annotation Details (not Field Annotation False Match)
     * @param uid  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldAnnotationsUidGETAsync(String uid, Map<String, String> jqFilters, final ApiCallback<DocumentFieldAnnotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldAnnotationsUidGETValidateBeforeCall(uid, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldAnnotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldCategoriesFormFieldsGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesFormFieldsGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-categories/form-fields/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldCategoriesFormFieldsGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesFormFieldsGETCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentDocumentFieldCategoriesFormFieldsGET() throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentDocumentFieldCategoriesFormFieldsGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentDocumentFieldCategoriesFormFieldsGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldCategoriesFormFieldsGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesFormFieldsGETAsync(final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesFormFieldsGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldCategoriesGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesGETCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-categories/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldCategoriesGETValidateBeforeCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesGETCall(jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * DocumentFieldCategory List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return List&lt;DocumentFieldCategoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentFieldCategoryList> documentDocumentFieldCategoriesGET(Map<String, String> jqFilters) throws ApiException {
        ApiResponse<List<DocumentFieldCategoryList>> localVarResp = documentDocumentFieldCategoriesGETWithHttpInfo(jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * DocumentFieldCategory List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;List&lt;DocumentFieldCategoryList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentFieldCategoryList>> documentDocumentFieldCategoriesGETWithHttpInfo(Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldCategoriesGETValidateBeforeCall(jqFilters, null);
        Type localVarReturnType = new TypeToken<List<DocumentFieldCategoryList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * DocumentFieldCategory List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesGETAsync(Map<String, String> jqFilters, final ApiCallback<List<DocumentFieldCategoryList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesGETValidateBeforeCall(jqFilters, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentFieldCategoryList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldCategoriesIdDELETE
     * @param id A unique integer value identifying this document field category. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesIdDELETECall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-categories/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldCategoriesIdDELETEValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentFieldCategoriesIdDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdDELETECall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete DocumentFieldCategory
     * @param id A unique integer value identifying this document field category. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void documentDocumentFieldCategoriesIdDELETE(String id) throws ApiException {
        documentDocumentFieldCategoriesIdDELETEWithHttpInfo(id);
    }

    /**
     * 
     * Delete DocumentFieldCategory
     * @param id A unique integer value identifying this document field category. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentDocumentFieldCategoriesIdDELETEWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdDELETEValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete DocumentFieldCategory
     * @param id A unique integer value identifying this document field category. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesIdDELETEAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdDELETEValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldCategoriesIdFormFieldsGET
     * @param id A unique integer value identifying this user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesIdFormFieldsGETCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-categories/{id}/form-fields/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldCategoriesIdFormFieldsGETValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentFieldCategoriesIdFormFieldsGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdFormFieldsGETCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param id A unique integer value identifying this user. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentDocumentFieldCategoriesIdFormFieldsGET(String id) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentDocumentFieldCategoriesIdFormFieldsGETWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param id A unique integer value identifying this user. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentDocumentFieldCategoriesIdFormFieldsGETWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdFormFieldsGETValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param id A unique integer value identifying this user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesIdFormFieldsGETAsync(String id, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdFormFieldsGETValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldCategoriesIdGET
     * @param id A unique integer value identifying this document field category. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesIdGETCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-categories/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldCategoriesIdGETValidateBeforeCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentFieldCategoriesIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdGETCall(id, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve DocumentFieldCategory
     * @param id A unique integer value identifying this document field category. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentFieldCategoryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldCategoryList documentDocumentFieldCategoriesIdGET(String id, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentFieldCategoryList> localVarResp = documentDocumentFieldCategoriesIdGETWithHttpInfo(id, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve DocumentFieldCategory
     * @param id A unique integer value identifying this document field category. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentFieldCategoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldCategoryList> documentDocumentFieldCategoriesIdGETWithHttpInfo(String id, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdGETValidateBeforeCall(id, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentFieldCategoryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve DocumentFieldCategory
     * @param id A unique integer value identifying this document field category. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesIdGETAsync(String id, Map<String, String> jqFilters, final ApiCallback<DocumentFieldCategoryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdGETValidateBeforeCall(id, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldCategoryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldCategoriesIdPATCH
     * @param id A unique integer value identifying this document field category. (required)
     * @param documentFieldCategoryCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesIdPATCHCall(String id, DocumentFieldCategoryCreate documentFieldCategoryCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentFieldCategoryCreate;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-categories/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldCategoriesIdPATCHValidateBeforeCall(String id, DocumentFieldCategoryCreate documentFieldCategoryCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentFieldCategoriesIdPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdPATCHCall(id, documentFieldCategoryCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update DocumentFieldCategory
     * @param id A unique integer value identifying this document field category. (required)
     * @param documentFieldCategoryCreate  (optional)
     * @return DocumentFieldCategoryCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldCategoryCreate documentDocumentFieldCategoriesIdPATCH(String id, DocumentFieldCategoryCreate documentFieldCategoryCreate) throws ApiException {
        ApiResponse<DocumentFieldCategoryCreate> localVarResp = documentDocumentFieldCategoriesIdPATCHWithHttpInfo(id, documentFieldCategoryCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update DocumentFieldCategory
     * @param id A unique integer value identifying this document field category. (required)
     * @param documentFieldCategoryCreate  (optional)
     * @return ApiResponse&lt;DocumentFieldCategoryCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldCategoryCreate> documentDocumentFieldCategoriesIdPATCHWithHttpInfo(String id, DocumentFieldCategoryCreate documentFieldCategoryCreate) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdPATCHValidateBeforeCall(id, documentFieldCategoryCreate, null);
        Type localVarReturnType = new TypeToken<DocumentFieldCategoryCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update DocumentFieldCategory
     * @param id A unique integer value identifying this document field category. (required)
     * @param documentFieldCategoryCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesIdPATCHAsync(String id, DocumentFieldCategoryCreate documentFieldCategoryCreate, final ApiCallback<DocumentFieldCategoryCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdPATCHValidateBeforeCall(id, documentFieldCategoryCreate, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldCategoryCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldCategoriesIdPUT
     * @param id A unique integer value identifying this document field category. (required)
     * @param documentFieldCategoryCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesIdPUTCall(String id, DocumentFieldCategoryCreate documentFieldCategoryCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentFieldCategoryCreate;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-categories/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldCategoriesIdPUTValidateBeforeCall(String id, DocumentFieldCategoryCreate documentFieldCategoryCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentFieldCategoriesIdPUT(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdPUTCall(id, documentFieldCategoryCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update Document Type     Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
     * @param id A unique integer value identifying this document field category. (required)
     * @param documentFieldCategoryCreate  (optional)
     * @return DocumentFieldCategoryCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldCategoryCreate documentDocumentFieldCategoriesIdPUT(String id, DocumentFieldCategoryCreate documentFieldCategoryCreate) throws ApiException {
        ApiResponse<DocumentFieldCategoryCreate> localVarResp = documentDocumentFieldCategoriesIdPUTWithHttpInfo(id, documentFieldCategoryCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update Document Type     Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
     * @param id A unique integer value identifying this document field category. (required)
     * @param documentFieldCategoryCreate  (optional)
     * @return ApiResponse&lt;DocumentFieldCategoryCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldCategoryCreate> documentDocumentFieldCategoriesIdPUTWithHttpInfo(String id, DocumentFieldCategoryCreate documentFieldCategoryCreate) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdPUTValidateBeforeCall(id, documentFieldCategoryCreate, null);
        Type localVarReturnType = new TypeToken<DocumentFieldCategoryCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Document Type     Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
     * @param id A unique integer value identifying this document field category. (required)
     * @param documentFieldCategoryCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesIdPUTAsync(String id, DocumentFieldCategoryCreate documentFieldCategoryCreate, final ApiCallback<DocumentFieldCategoryCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesIdPUTValidateBeforeCall(id, documentFieldCategoryCreate, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldCategoryCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldCategoriesPOST
     * @param documentFieldCategoryCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesPOSTCall(DocumentFieldCategoryCreate documentFieldCategoryCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentFieldCategoryCreate;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-categories/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldCategoriesPOSTValidateBeforeCall(DocumentFieldCategoryCreate documentFieldCategoryCreate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesPOSTCall(documentFieldCategoryCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create DocumentFieldCategory      Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
     * @param documentFieldCategoryCreate  (optional)
     * @return DocumentFieldCategoryCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldCategoryCreate documentDocumentFieldCategoriesPOST(DocumentFieldCategoryCreate documentFieldCategoryCreate) throws ApiException {
        ApiResponse<DocumentFieldCategoryCreate> localVarResp = documentDocumentFieldCategoriesPOSTWithHttpInfo(documentFieldCategoryCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create DocumentFieldCategory      Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
     * @param documentFieldCategoryCreate  (optional)
     * @return ApiResponse&lt;DocumentFieldCategoryCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldCategoryCreate> documentDocumentFieldCategoriesPOSTWithHttpInfo(DocumentFieldCategoryCreate documentFieldCategoryCreate) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldCategoriesPOSTValidateBeforeCall(documentFieldCategoryCreate, null);
        Type localVarReturnType = new TypeToken<DocumentFieldCategoryCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create DocumentFieldCategory      Params:         - document_type: uid         - name: str - Verbose name for field category, max 100 symbols         - order: int         - fields: array of field uids
     * @param documentFieldCategoryCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldCategoriesPOSTAsync(DocumentFieldCategoryCreate documentFieldCategoryCreate, final ApiCallback<DocumentFieldCategoryCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldCategoriesPOSTValidateBeforeCall(documentFieldCategoryCreate, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldCategoryCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldDetectorsFormFieldsGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsFormFieldsGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-detectors/form-fields/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldDetectorsFormFieldsGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsFormFieldsGETCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentDocumentFieldDetectorsFormFieldsGET() throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentDocumentFieldDetectorsFormFieldsGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentDocumentFieldDetectorsFormFieldsGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldDetectorsFormFieldsGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsFormFieldsGETAsync(final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsFormFieldsGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldDetectorsGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsGETCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-detectors/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldDetectorsGETValidateBeforeCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsGETCall(jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Document Field List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return List&lt;DocumentFieldDetectorDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentFieldDetectorDetail> documentDocumentFieldDetectorsGET(Map<String, String> jqFilters) throws ApiException {
        ApiResponse<List<DocumentFieldDetectorDetail>> localVarResp = documentDocumentFieldDetectorsGETWithHttpInfo(jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Document Field List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;List&lt;DocumentFieldDetectorDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentFieldDetectorDetail>> documentDocumentFieldDetectorsGETWithHttpInfo(Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldDetectorsGETValidateBeforeCall(jqFilters, null);
        Type localVarReturnType = new TypeToken<List<DocumentFieldDetectorDetail>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Document Field List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsGETAsync(Map<String, String> jqFilters, final ApiCallback<List<DocumentFieldDetectorDetail>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsGETValidateBeforeCall(jqFilters, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentFieldDetectorDetail>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldDetectorsPOST
     * @param documentFieldDetectorCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsPOSTCall(DocumentFieldDetectorCreate documentFieldDetectorCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentFieldDetectorCreate;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-detectors/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldDetectorsPOSTValidateBeforeCall(DocumentFieldDetectorCreate documentFieldDetectorCreate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsPOSTCall(documentFieldDetectorCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
     * @param documentFieldDetectorCreate  (optional)
     * @return DocumentFieldDetectorCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldDetectorCreate documentDocumentFieldDetectorsPOST(DocumentFieldDetectorCreate documentFieldDetectorCreate) throws ApiException {
        ApiResponse<DocumentFieldDetectorCreate> localVarResp = documentDocumentFieldDetectorsPOSTWithHttpInfo(documentFieldDetectorCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
     * @param documentFieldDetectorCreate  (optional)
     * @return ApiResponse&lt;DocumentFieldDetectorCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldDetectorCreate> documentDocumentFieldDetectorsPOSTWithHttpInfo(DocumentFieldDetectorCreate documentFieldDetectorCreate) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldDetectorsPOSTValidateBeforeCall(documentFieldDetectorCreate, null);
        Type localVarReturnType = new TypeToken<DocumentFieldDetectorCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
     * @param documentFieldDetectorCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsPOSTAsync(DocumentFieldDetectorCreate documentFieldDetectorCreate, final ApiCallback<DocumentFieldDetectorCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsPOSTValidateBeforeCall(documentFieldDetectorCreate, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldDetectorCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldDetectorsUidDELETE
     * @param uid A UUID string identifying this document field detector. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsUidDELETECall(String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-detectors/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldDetectorsUidDELETEValidateBeforeCall(String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldDetectorsUidDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidDELETECall(uid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete Document Field
     * @param uid A UUID string identifying this document field detector. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void documentDocumentFieldDetectorsUidDELETE(String uid) throws ApiException {
        documentDocumentFieldDetectorsUidDELETEWithHttpInfo(uid);
    }

    /**
     * 
     * Delete Document Field
     * @param uid A UUID string identifying this document field detector. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentDocumentFieldDetectorsUidDELETEWithHttpInfo(String uid) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidDELETEValidateBeforeCall(uid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete Document Field
     * @param uid A UUID string identifying this document field detector. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsUidDELETEAsync(String uid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidDELETEValidateBeforeCall(uid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldDetectorsUidFormFieldsGET
     * @param uid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsUidFormFieldsGETCall(String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-detectors/{uid}/form-fields/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldDetectorsUidFormFieldsGETValidateBeforeCall(String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldDetectorsUidFormFieldsGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidFormFieldsGETCall(uid, _callback);
        return localVarCall;

    }

    /**
     * 
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param uid  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentDocumentFieldDetectorsUidFormFieldsGET(String uid) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentDocumentFieldDetectorsUidFormFieldsGETWithHttpInfo(uid);
        return localVarResp.getData();
    }

    /**
     * 
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param uid  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentDocumentFieldDetectorsUidFormFieldsGETWithHttpInfo(String uid) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidFormFieldsGETValidateBeforeCall(uid, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param uid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsUidFormFieldsGETAsync(String uid, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidFormFieldsGETValidateBeforeCall(uid, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldDetectorsUidGET
     * @param uid A UUID string identifying this document field detector. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsUidGETCall(String uid, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-detectors/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldDetectorsUidGETValidateBeforeCall(String uid, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldDetectorsUidGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidGETCall(uid, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve Document Field
     * @param uid A UUID string identifying this document field detector. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentFieldDetectorDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldDetectorDetail documentDocumentFieldDetectorsUidGET(String uid, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentFieldDetectorDetail> localVarResp = documentDocumentFieldDetectorsUidGETWithHttpInfo(uid, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve Document Field
     * @param uid A UUID string identifying this document field detector. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentFieldDetectorDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldDetectorDetail> documentDocumentFieldDetectorsUidGETWithHttpInfo(String uid, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidGETValidateBeforeCall(uid, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentFieldDetectorDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve Document Field
     * @param uid A UUID string identifying this document field detector. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsUidGETAsync(String uid, Map<String, String> jqFilters, final ApiCallback<DocumentFieldDetectorDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidGETValidateBeforeCall(uid, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldDetectorDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldDetectorsUidPATCH
     * @param uid A UUID string identifying this document field detector. (required)
     * @param documentFieldDetectorCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsUidPATCHCall(String uid, DocumentFieldDetectorCreate documentFieldDetectorCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentFieldDetectorCreate;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-detectors/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldDetectorsUidPATCHValidateBeforeCall(String uid, DocumentFieldDetectorCreate documentFieldDetectorCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldDetectorsUidPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidPATCHCall(uid, documentFieldDetectorCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update Document Field
     * @param uid A UUID string identifying this document field detector. (required)
     * @param documentFieldDetectorCreate  (optional)
     * @return DocumentFieldDetectorCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldDetectorCreate documentDocumentFieldDetectorsUidPATCH(String uid, DocumentFieldDetectorCreate documentFieldDetectorCreate) throws ApiException {
        ApiResponse<DocumentFieldDetectorCreate> localVarResp = documentDocumentFieldDetectorsUidPATCHWithHttpInfo(uid, documentFieldDetectorCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update Document Field
     * @param uid A UUID string identifying this document field detector. (required)
     * @param documentFieldDetectorCreate  (optional)
     * @return ApiResponse&lt;DocumentFieldDetectorCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldDetectorCreate> documentDocumentFieldDetectorsUidPATCHWithHttpInfo(String uid, DocumentFieldDetectorCreate documentFieldDetectorCreate) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidPATCHValidateBeforeCall(uid, documentFieldDetectorCreate, null);
        Type localVarReturnType = new TypeToken<DocumentFieldDetectorCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update Document Field
     * @param uid A UUID string identifying this document field detector. (required)
     * @param documentFieldDetectorCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsUidPATCHAsync(String uid, DocumentFieldDetectorCreate documentFieldDetectorCreate, final ApiCallback<DocumentFieldDetectorCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidPATCHValidateBeforeCall(uid, documentFieldDetectorCreate, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldDetectorCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldDetectorsUidPUT
     * @param uid A UUID string identifying this document field detector. (required)
     * @param documentFieldDetectorCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsUidPUTCall(String uid, DocumentFieldDetectorCreate documentFieldDetectorCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentFieldDetectorCreate;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-detectors/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldDetectorsUidPUTValidateBeforeCall(String uid, DocumentFieldDetectorCreate documentFieldDetectorCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldDetectorsUidPUT(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidPUTCall(uid, documentFieldDetectorCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
     * @param uid A UUID string identifying this document field detector. (required)
     * @param documentFieldDetectorCreate  (optional)
     * @return DocumentFieldDetectorCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldDetectorCreate documentDocumentFieldDetectorsUidPUT(String uid, DocumentFieldDetectorCreate documentFieldDetectorCreate) throws ApiException {
        ApiResponse<DocumentFieldDetectorCreate> localVarResp = documentDocumentFieldDetectorsUidPUTWithHttpInfo(uid, documentFieldDetectorCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
     * @param uid A UUID string identifying this document field detector. (required)
     * @param documentFieldDetectorCreate  (optional)
     * @return ApiResponse&lt;DocumentFieldDetectorCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldDetectorCreate> documentDocumentFieldDetectorsUidPUTWithHttpInfo(String uid, DocumentFieldDetectorCreate documentFieldDetectorCreate) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidPUTValidateBeforeCall(uid, documentFieldDetectorCreate, null);
        Type localVarReturnType = new TypeToken<DocumentFieldDetectorCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Document Field     Params:         - fields: uid         - category: str - max 64 symbols (from pre-defined choices)         - exclude_regexps: str - optional         - definition_words: str - optional         - include_regexps: str - optional         - regexps_pre_process_lower: bool, default&#x3D;False         - detected_value: str - max 256 chars         - extraction_hint: str - max 30 chars (from pre-defined choices)         - text_part: str - max 30 chars (from pre-defined choices)
     * @param uid A UUID string identifying this document field detector. (required)
     * @param documentFieldDetectorCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldDetectorsUidPUTAsync(String uid, DocumentFieldDetectorCreate documentFieldDetectorCreate, final ApiCallback<DocumentFieldDetectorCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldDetectorsUidPUTValidateBeforeCall(uid, documentFieldDetectorCreate, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldDetectorCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldValuesGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldValuesGETCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-values/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldValuesGETValidateBeforeCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentFieldValuesGETCall(jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Document Field Value List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return List&lt;DocumentFieldValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentFieldValue> documentDocumentFieldValuesGET(Map<String, String> jqFilters) throws ApiException {
        ApiResponse<List<DocumentFieldValue>> localVarResp = documentDocumentFieldValuesGETWithHttpInfo(jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Document Field Value List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;List&lt;DocumentFieldValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentFieldValue>> documentDocumentFieldValuesGETWithHttpInfo(Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldValuesGETValidateBeforeCall(jqFilters, null);
        Type localVarReturnType = new TypeToken<List<DocumentFieldValue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Document Field Value List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldValuesGETAsync(Map<String, String> jqFilters, final ApiCallback<List<DocumentFieldValue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldValuesGETValidateBeforeCall(jqFilters, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentFieldValue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldValuesIdGET
     * @param id A unique integer value identifying this field value. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldValuesIdGETCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-field-values/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldValuesIdGETValidateBeforeCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentFieldValuesIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldValuesIdGETCall(id, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Document Field Value Details
     * @param id A unique integer value identifying this field value. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentFieldValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldValue documentDocumentFieldValuesIdGET(String id, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentFieldValue> localVarResp = documentDocumentFieldValuesIdGETWithHttpInfo(id, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Document Field Value Details
     * @param id A unique integer value identifying this field value. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentFieldValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldValue> documentDocumentFieldValuesIdGETWithHttpInfo(String id, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldValuesIdGETValidateBeforeCall(id, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentFieldValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Document Field Value Details
     * @param id A unique integer value identifying this field value. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldValuesIdGETAsync(String id, Map<String, String> jqFilters, final ApiCallback<DocumentFieldValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldValuesIdGETValidateBeforeCall(id, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldsFormFieldsGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsFormFieldsGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-fields/form-fields/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldsFormFieldsGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentFieldsFormFieldsGETCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentDocumentFieldsFormFieldsGET() throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentDocumentFieldsFormFieldsGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentDocumentFieldsFormFieldsGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldsFormFieldsGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsFormFieldsGETAsync(final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldsFormFieldsGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldsGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsGETCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-fields/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldsGETValidateBeforeCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentFieldsGETCall(jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Document Field List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return List&lt;DocumentFieldList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentFieldList> documentDocumentFieldsGET(Map<String, String> jqFilters) throws ApiException {
        ApiResponse<List<DocumentFieldList>> localVarResp = documentDocumentFieldsGETWithHttpInfo(jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Document Field List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;List&lt;DocumentFieldList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentFieldList>> documentDocumentFieldsGETWithHttpInfo(Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldsGETValidateBeforeCall(jqFilters, null);
        Type localVarReturnType = new TypeToken<List<DocumentFieldList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Document Field List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsGETAsync(Map<String, String> jqFilters, final ApiCallback<List<DocumentFieldList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldsGETValidateBeforeCall(jqFilters, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentFieldList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldsStatsGET
     * @param documentTypeUid Filter by document type uid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsStatsGETCall(String documentTypeUid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-fields/stats/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (documentTypeUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_type_uid", documentTypeUid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldsStatsGETValidateBeforeCall(String documentTypeUid, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentFieldsStatsGETCall(documentTypeUid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param documentTypeUid Filter by document type uid (optional)
     * @return List&lt;DocumentFieldStatsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentFieldStatsResponse> documentDocumentFieldsStatsGET(String documentTypeUid) throws ApiException {
        ApiResponse<List<DocumentFieldStatsResponse>> localVarResp = documentDocumentFieldsStatsGETWithHttpInfo(documentTypeUid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param documentTypeUid Filter by document type uid (optional)
     * @return ApiResponse&lt;List&lt;DocumentFieldStatsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentFieldStatsResponse>> documentDocumentFieldsStatsGETWithHttpInfo(String documentTypeUid) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldsStatsGETValidateBeforeCall(documentTypeUid, null);
        Type localVarReturnType = new TypeToken<List<DocumentFieldStatsResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param documentTypeUid Filter by document type uid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsStatsGETAsync(String documentTypeUid, final ApiCallback<List<DocumentFieldStatsResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldsStatsGETValidateBeforeCall(documentTypeUid, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentFieldStatsResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldsUidCheckFormulaPOST
     * @param uid A UUID string identifying this document field. (required)
     * @param checkDocumentFieldFormulaRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidCheckFormulaPOSTCall(String uid, CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = checkDocumentFieldFormulaRequest;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-fields/{uid}/check_formula/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldsUidCheckFormulaPOSTValidateBeforeCall(String uid, CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldsUidCheckFormulaPOST(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldsUidCheckFormulaPOSTCall(uid, checkDocumentFieldFormulaRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Check formula for EXISTING Document Field Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled.
     * @param uid A UUID string identifying this document field. (required)
     * @param checkDocumentFieldFormulaRequest  (optional)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentDocumentFieldsUidCheckFormulaPOST(String uid, CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentDocumentFieldsUidCheckFormulaPOSTWithHttpInfo(uid, checkDocumentFieldFormulaRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Check formula for EXISTING Document Field Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled.
     * @param uid A UUID string identifying this document field. (required)
     * @param checkDocumentFieldFormulaRequest  (optional)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentDocumentFieldsUidCheckFormulaPOSTWithHttpInfo(String uid, CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldsUidCheckFormulaPOSTValidateBeforeCall(uid, checkDocumentFieldFormulaRequest, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check formula for EXISTING Document Field Expects request data arguments: - formula: str OR - convert_decimals_to_floats_in_formula_args: bool - hide_until_python: str - field_type: str - document_type: str - document type uid - depends_on_fields: List[str] - list of field uids Either \&quot;request.data.formula\&quot; or \&quot;request.data.hide_until_python\&quot; should be filled.
     * @param uid A UUID string identifying this document field. (required)
     * @param checkDocumentFieldFormulaRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidCheckFormulaPOSTAsync(String uid, CheckDocumentFieldFormulaRequest checkDocumentFieldFormulaRequest, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldsUidCheckFormulaPOSTValidateBeforeCall(uid, checkDocumentFieldFormulaRequest, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldsUidClonePOST
     * @param uid A UUID string identifying this document field. (required)
     * @param cloneDocumentFieldRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidClonePOSTCall(String uid, CloneDocumentFieldRequest cloneDocumentFieldRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cloneDocumentFieldRequest;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-fields/{uid}/clone/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldsUidClonePOSTValidateBeforeCall(String uid, CloneDocumentFieldRequest cloneDocumentFieldRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldsUidClonePOST(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldsUidClonePOSTCall(uid, cloneDocumentFieldRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clone existing DocumentField and its depends_on_fields and detectors
     * @param uid A UUID string identifying this document field. (required)
     * @param cloneDocumentFieldRequest  (optional)
     * @return DocumentFieldDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldDetail documentDocumentFieldsUidClonePOST(String uid, CloneDocumentFieldRequest cloneDocumentFieldRequest) throws ApiException {
        ApiResponse<DocumentFieldDetail> localVarResp = documentDocumentFieldsUidClonePOSTWithHttpInfo(uid, cloneDocumentFieldRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Clone existing DocumentField and its depends_on_fields and detectors
     * @param uid A UUID string identifying this document field. (required)
     * @param cloneDocumentFieldRequest  (optional)
     * @return ApiResponse&lt;DocumentFieldDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldDetail> documentDocumentFieldsUidClonePOSTWithHttpInfo(String uid, CloneDocumentFieldRequest cloneDocumentFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldsUidClonePOSTValidateBeforeCall(uid, cloneDocumentFieldRequest, null);
        Type localVarReturnType = new TypeToken<DocumentFieldDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clone existing DocumentField and its depends_on_fields and detectors
     * @param uid A UUID string identifying this document field. (required)
     * @param cloneDocumentFieldRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidClonePOSTAsync(String uid, CloneDocumentFieldRequest cloneDocumentFieldRequest, final ApiCallback<DocumentFieldDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldsUidClonePOSTValidateBeforeCall(uid, cloneDocumentFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldsUidDELETE
     * @param uid A UUID string identifying this document field. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidDELETECall(String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-fields/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldsUidDELETEValidateBeforeCall(String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldsUidDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldsUidDELETECall(uid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete Document Field
     * @param uid A UUID string identifying this document field. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void documentDocumentFieldsUidDELETE(String uid) throws ApiException {
        documentDocumentFieldsUidDELETEWithHttpInfo(uid);
    }

    /**
     * 
     * Delete Document Field
     * @param uid A UUID string identifying this document field. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentDocumentFieldsUidDELETEWithHttpInfo(String uid) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldsUidDELETEValidateBeforeCall(uid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete Document Field
     * @param uid A UUID string identifying this document field. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidDELETEAsync(String uid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldsUidDELETEValidateBeforeCall(uid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldsUidFormFieldsGET
     * @param uid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidFormFieldsGETCall(String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-fields/{uid}/form-fields/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldsUidFormFieldsGETValidateBeforeCall(String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldsUidFormFieldsGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldsUidFormFieldsGETCall(uid, _callback);
        return localVarCall;

    }

    /**
     * 
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param uid  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentDocumentFieldsUidFormFieldsGET(String uid) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentDocumentFieldsUidFormFieldsGETWithHttpInfo(uid);
        return localVarResp.getData();
    }

    /**
     * 
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param uid  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentDocumentFieldsUidFormFieldsGETWithHttpInfo(String uid) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldsUidFormFieldsGETValidateBeforeCall(uid, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param uid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidFormFieldsGETAsync(String uid, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldsUidFormFieldsGETValidateBeforeCall(uid, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldsUidGET
     * @param uid A UUID string identifying this document field. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidGETCall(String uid, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-fields/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldsUidGETValidateBeforeCall(String uid, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldsUidGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldsUidGETCall(uid, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve Document Field
     * @param uid A UUID string identifying this document field. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentFieldDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldDetail documentDocumentFieldsUidGET(String uid, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentFieldDetail> localVarResp = documentDocumentFieldsUidGETWithHttpInfo(uid, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve Document Field
     * @param uid A UUID string identifying this document field. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentFieldDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldDetail> documentDocumentFieldsUidGETWithHttpInfo(String uid, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldsUidGETValidateBeforeCall(uid, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentFieldDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve Document Field
     * @param uid A UUID string identifying this document field. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidGETAsync(String uid, Map<String, String> jqFilters, final ApiCallback<DocumentFieldDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldsUidGETValidateBeforeCall(uid, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldsUidPATCH
     * @param uid A UUID string identifying this document field. (required)
     * @param documentFieldCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidPATCHCall(String uid, DocumentFieldCreate documentFieldCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentFieldCreate;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-fields/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldsUidPATCHValidateBeforeCall(String uid, DocumentFieldCreate documentFieldCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldsUidPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldsUidPATCHCall(uid, documentFieldCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update Document Field
     * @param uid A UUID string identifying this document field. (required)
     * @param documentFieldCreate  (optional)
     * @return DocumentFieldCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldCreate documentDocumentFieldsUidPATCH(String uid, DocumentFieldCreate documentFieldCreate) throws ApiException {
        ApiResponse<DocumentFieldCreate> localVarResp = documentDocumentFieldsUidPATCHWithHttpInfo(uid, documentFieldCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update Document Field
     * @param uid A UUID string identifying this document field. (required)
     * @param documentFieldCreate  (optional)
     * @return ApiResponse&lt;DocumentFieldCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldCreate> documentDocumentFieldsUidPATCHWithHttpInfo(String uid, DocumentFieldCreate documentFieldCreate) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldsUidPATCHValidateBeforeCall(uid, documentFieldCreate, null);
        Type localVarReturnType = new TypeToken<DocumentFieldCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update Document Field
     * @param uid A UUID string identifying this document field. (required)
     * @param documentFieldCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidPATCHAsync(String uid, DocumentFieldCreate documentFieldCreate, final ApiCallback<DocumentFieldCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldsUidPATCHValidateBeforeCall(uid, documentFieldCreate, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldsUidPUT
     * @param uid A UUID string identifying this document field. (required)
     * @param documentFieldCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidPUTCall(String uid, DocumentFieldCreate documentFieldCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentFieldCreate;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-fields/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldsUidPUTValidateBeforeCall(String uid, DocumentFieldCreate documentFieldCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldsUidPUT(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldsUidPUTCall(uid, documentFieldCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update Document Field
     * @param uid A UUID string identifying this document field. (required)
     * @param documentFieldCreate  (optional)
     * @return DocumentFieldCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldCreate documentDocumentFieldsUidPUT(String uid, DocumentFieldCreate documentFieldCreate) throws ApiException {
        ApiResponse<DocumentFieldCreate> localVarResp = documentDocumentFieldsUidPUTWithHttpInfo(uid, documentFieldCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update Document Field
     * @param uid A UUID string identifying this document field. (required)
     * @param documentFieldCreate  (optional)
     * @return ApiResponse&lt;DocumentFieldCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldCreate> documentDocumentFieldsUidPUTWithHttpInfo(String uid, DocumentFieldCreate documentFieldCreate) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldsUidPUTValidateBeforeCall(uid, documentFieldCreate, null);
        Type localVarReturnType = new TypeToken<DocumentFieldCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Document Field
     * @param uid A UUID string identifying this document field. (required)
     * @param documentFieldCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidPUTAsync(String uid, DocumentFieldCreate documentFieldCreate, final ApiCallback<DocumentFieldCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldsUidPUTValidateBeforeCall(uid, documentFieldCreate, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentFieldsUidPreDeletePOST
     * @param uid A UUID string identifying this document field. (required)
     * @param documentFieldDetail  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidPreDeletePOSTCall(String uid, DocumentFieldDetail documentFieldDetail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentFieldDetail;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-fields/{uid}/pre_delete/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentFieldsUidPreDeletePOSTValidateBeforeCall(String uid, DocumentFieldDetail documentFieldDetail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentFieldsUidPreDeletePOST(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentFieldsUidPreDeletePOSTCall(uid, documentFieldDetail, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get info about related objects for ready-to-delete document type.
     * @param uid A UUID string identifying this document field. (required)
     * @param documentFieldDetail  (optional)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentDocumentFieldsUidPreDeletePOST(String uid, DocumentFieldDetail documentFieldDetail) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentDocumentFieldsUidPreDeletePOSTWithHttpInfo(uid, documentFieldDetail);
        return localVarResp.getData();
    }

    /**
     * 
     * Get info about related objects for ready-to-delete document type.
     * @param uid A UUID string identifying this document field. (required)
     * @param documentFieldDetail  (optional)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentDocumentFieldsUidPreDeletePOSTWithHttpInfo(String uid, DocumentFieldDetail documentFieldDetail) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentFieldsUidPreDeletePOSTValidateBeforeCall(uid, documentFieldDetail, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get info about related objects for ready-to-delete document type.
     * @param uid A UUID string identifying this document field. (required)
     * @param documentFieldDetail  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentFieldsUidPreDeletePOSTAsync(String uid, DocumentFieldDetail documentFieldDetail, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentFieldsUidPreDeletePOSTValidateBeforeCall(uid, documentFieldDetail, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentNotesGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param projectId Filter by project id (optional)
     * @param documentId Filter by document id (optional)
     * @param force For deleted documents as well (optional)
     * @param exportTo Export data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentNotesGETCall(Map<String, String> jqFilters, String projectId, String documentId, Boolean force, Boolean exportTo, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-notes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project_id", projectId));
        }

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_id", documentId));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        if (exportTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export_to", exportTo));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentNotesGETValidateBeforeCall(Map<String, String> jqFilters, String projectId, String documentId, Boolean force, Boolean exportTo, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentNotesGETCall(jqFilters, projectId, documentId, force, exportTo, _callback);
        return localVarCall;

    }

    /**
     * 
     * Document Note List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param projectId Filter by project id (optional)
     * @param documentId Filter by document id (optional)
     * @param force For deleted documents as well (optional)
     * @param exportTo Export data (optional)
     * @return List&lt;DocumentNoteDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentNoteDetail> documentDocumentNotesGET(Map<String, String> jqFilters, String projectId, String documentId, Boolean force, Boolean exportTo) throws ApiException {
        ApiResponse<List<DocumentNoteDetail>> localVarResp = documentDocumentNotesGETWithHttpInfo(jqFilters, projectId, documentId, force, exportTo);
        return localVarResp.getData();
    }

    /**
     * 
     * Document Note List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param projectId Filter by project id (optional)
     * @param documentId Filter by document id (optional)
     * @param force For deleted documents as well (optional)
     * @param exportTo Export data (optional)
     * @return ApiResponse&lt;List&lt;DocumentNoteDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentNoteDetail>> documentDocumentNotesGETWithHttpInfo(Map<String, String> jqFilters, String projectId, String documentId, Boolean force, Boolean exportTo) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentNotesGETValidateBeforeCall(jqFilters, projectId, documentId, force, exportTo, null);
        Type localVarReturnType = new TypeToken<List<DocumentNoteDetail>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Document Note List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param projectId Filter by project id (optional)
     * @param documentId Filter by document id (optional)
     * @param force For deleted documents as well (optional)
     * @param exportTo Export data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentNotesGETAsync(Map<String, String> jqFilters, String projectId, String documentId, Boolean force, Boolean exportTo, final ApiCallback<List<DocumentNoteDetail>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentNotesGETValidateBeforeCall(jqFilters, projectId, documentId, force, exportTo, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentNoteDetail>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentNotesIdDELETE
     * @param id A unique integer value identifying this document note. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentNotesIdDELETECall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-notes/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentNotesIdDELETEValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentNotesIdDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentNotesIdDELETECall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete Document Note
     * @param id A unique integer value identifying this document note. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void documentDocumentNotesIdDELETE(String id) throws ApiException {
        documentDocumentNotesIdDELETEWithHttpInfo(id);
    }

    /**
     * 
     * Delete Document Note
     * @param id A unique integer value identifying this document note. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentDocumentNotesIdDELETEWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentNotesIdDELETEValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete Document Note
     * @param id A unique integer value identifying this document note. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentNotesIdDELETEAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentNotesIdDELETEValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentNotesIdGET
     * @param id A unique integer value identifying this document note. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentNotesIdGETCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-notes/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentNotesIdGETValidateBeforeCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentNotesIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentNotesIdGETCall(id, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve Document Note
     * @param id A unique integer value identifying this document note. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentNoteDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentNoteDetail documentDocumentNotesIdGET(String id, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentNoteDetail> localVarResp = documentDocumentNotesIdGETWithHttpInfo(id, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve Document Note
     * @param id A unique integer value identifying this document note. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentNoteDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentNoteDetail> documentDocumentNotesIdGETWithHttpInfo(String id, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentNotesIdGETValidateBeforeCall(id, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentNoteDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve Document Note
     * @param id A unique integer value identifying this document note. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentNotesIdGETAsync(String id, Map<String, String> jqFilters, final ApiCallback<DocumentNoteDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentNotesIdGETValidateBeforeCall(id, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentNoteDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentNotesIdPATCH
     * @param id A unique integer value identifying this document note. (required)
     * @param documentNoteDetail  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentNotesIdPATCHCall(String id, DocumentNoteDetail documentNoteDetail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentNoteDetail;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-notes/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentNotesIdPATCHValidateBeforeCall(String id, DocumentNoteDetail documentNoteDetail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentNotesIdPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentNotesIdPATCHCall(id, documentNoteDetail, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update Document Note
     * @param id A unique integer value identifying this document note. (required)
     * @param documentNoteDetail  (optional)
     * @return DocumentNoteDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentNoteDetail documentDocumentNotesIdPATCH(String id, DocumentNoteDetail documentNoteDetail) throws ApiException {
        ApiResponse<DocumentNoteDetail> localVarResp = documentDocumentNotesIdPATCHWithHttpInfo(id, documentNoteDetail);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update Document Note
     * @param id A unique integer value identifying this document note. (required)
     * @param documentNoteDetail  (optional)
     * @return ApiResponse&lt;DocumentNoteDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentNoteDetail> documentDocumentNotesIdPATCHWithHttpInfo(String id, DocumentNoteDetail documentNoteDetail) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentNotesIdPATCHValidateBeforeCall(id, documentNoteDetail, null);
        Type localVarReturnType = new TypeToken<DocumentNoteDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update Document Note
     * @param id A unique integer value identifying this document note. (required)
     * @param documentNoteDetail  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentNotesIdPATCHAsync(String id, DocumentNoteDetail documentNoteDetail, final ApiCallback<DocumentNoteDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentNotesIdPATCHValidateBeforeCall(id, documentNoteDetail, _callback);
        Type localVarReturnType = new TypeToken<DocumentNoteDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentNotesIdPUT
     * @param id A unique integer value identifying this document note. (required)
     * @param documentNoteUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentNotesIdPUTCall(String id, DocumentNoteUpdate documentNoteUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentNoteUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-notes/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentNotesIdPUTValidateBeforeCall(String id, DocumentNoteUpdate documentNoteUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentNotesIdPUT(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentNotesIdPUTCall(id, documentNoteUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update Document Note
     * @param id A unique integer value identifying this document note. (required)
     * @param documentNoteUpdate  (optional)
     * @return DocumentNoteUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentNoteUpdate documentDocumentNotesIdPUT(String id, DocumentNoteUpdate documentNoteUpdate) throws ApiException {
        ApiResponse<DocumentNoteUpdate> localVarResp = documentDocumentNotesIdPUTWithHttpInfo(id, documentNoteUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update Document Note
     * @param id A unique integer value identifying this document note. (required)
     * @param documentNoteUpdate  (optional)
     * @return ApiResponse&lt;DocumentNoteUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentNoteUpdate> documentDocumentNotesIdPUTWithHttpInfo(String id, DocumentNoteUpdate documentNoteUpdate) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentNotesIdPUTValidateBeforeCall(id, documentNoteUpdate, null);
        Type localVarReturnType = new TypeToken<DocumentNoteUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Document Note
     * @param id A unique integer value identifying this document note. (required)
     * @param documentNoteUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentNotesIdPUTAsync(String id, DocumentNoteUpdate documentNoteUpdate, final ApiCallback<DocumentNoteUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentNotesIdPUTValidateBeforeCall(id, documentNoteUpdate, _callback);
        Type localVarReturnType = new TypeToken<DocumentNoteUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentNotesPOST
     * @param documentNoteCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentNotesPOSTCall(DocumentNoteCreate documentNoteCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentNoteCreate;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-notes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentNotesPOSTValidateBeforeCall(DocumentNoteCreate documentNoteCreate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentNotesPOSTCall(documentNoteCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create Document Note
     * @param documentNoteCreate  (optional)
     * @return DocumentNoteCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentNoteCreate documentDocumentNotesPOST(DocumentNoteCreate documentNoteCreate) throws ApiException {
        ApiResponse<DocumentNoteCreate> localVarResp = documentDocumentNotesPOSTWithHttpInfo(documentNoteCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create Document Note
     * @param documentNoteCreate  (optional)
     * @return ApiResponse&lt;DocumentNoteCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentNoteCreate> documentDocumentNotesPOSTWithHttpInfo(DocumentNoteCreate documentNoteCreate) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentNotesPOSTValidateBeforeCall(documentNoteCreate, null);
        Type localVarReturnType = new TypeToken<DocumentNoteCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Document Note
     * @param documentNoteCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentNotesPOSTAsync(DocumentNoteCreate documentNoteCreate, final ApiCallback<DocumentNoteCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentNotesPOSTValidateBeforeCall(documentNoteCreate, _callback);
        Type localVarReturnType = new TypeToken<DocumentNoteCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesFormFieldsGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesFormFieldsGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/form-fields/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesFormFieldsGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentTypesFormFieldsGETCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentDocumentTypesFormFieldsGET() throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentDocumentTypesFormFieldsGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentDocumentTypesFormFieldsGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesFormFieldsGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GET model form fields description to build UI form for an object:       - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesFormFieldsGETAsync(final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesFormFieldsGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesGETCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesGETValidateBeforeCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentTypesGETCall(jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Document Type List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return List&lt;DocumentTypeDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentTypeDetail> documentDocumentTypesGET(Map<String, String> jqFilters) throws ApiException {
        ApiResponse<List<DocumentTypeDetail>> localVarResp = documentDocumentTypesGETWithHttpInfo(jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Document Type List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;List&lt;DocumentTypeDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentTypeDetail>> documentDocumentTypesGETWithHttpInfo(Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesGETValidateBeforeCall(jqFilters, null);
        Type localVarReturnType = new TypeToken<List<DocumentTypeDetail>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Document Type List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesGETAsync(Map<String, String> jqFilters, final ApiCallback<List<DocumentTypeDetail>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesGETValidateBeforeCall(jqFilters, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentTypeDetail>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesImportDocTypePUT
     * @param documentTypeImportRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesImportDocTypePUTCall(DocumentTypeImportRequest documentTypeImportRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentTypeImportRequest;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/import_doc_type/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesImportDocTypePUTValidateBeforeCall(DocumentTypeImportRequest documentTypeImportRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentTypesImportDocTypePUTCall(documentTypeImportRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param documentTypeImportRequest  (optional)
     * @return DocumentTypeImportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentTypeImportResponse documentDocumentTypesImportDocTypePUT(DocumentTypeImportRequest documentTypeImportRequest) throws ApiException {
        ApiResponse<DocumentTypeImportResponse> localVarResp = documentDocumentTypesImportDocTypePUTWithHttpInfo(documentTypeImportRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param documentTypeImportRequest  (optional)
     * @return ApiResponse&lt;DocumentTypeImportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentTypeImportResponse> documentDocumentTypesImportDocTypePUTWithHttpInfo(DocumentTypeImportRequest documentTypeImportRequest) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesImportDocTypePUTValidateBeforeCall(documentTypeImportRequest, null);
        Type localVarReturnType = new TypeToken<DocumentTypeImportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param documentTypeImportRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesImportDocTypePUTAsync(DocumentTypeImportRequest documentTypeImportRequest, final ApiCallback<DocumentTypeImportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesImportDocTypePUTValidateBeforeCall(documentTypeImportRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentTypeImportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesPOST
     * @param documentTypeCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesPOSTCall(DocumentTypeCreate documentTypeCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentTypeCreate;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesPOSTValidateBeforeCall(DocumentTypeCreate documentTypeCreate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentTypesPOSTCall(documentTypeCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create Document Type      Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
     * @param documentTypeCreate  (optional)
     * @return DocumentTypeCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentTypeCreate documentDocumentTypesPOST(DocumentTypeCreate documentTypeCreate) throws ApiException {
        ApiResponse<DocumentTypeCreate> localVarResp = documentDocumentTypesPOSTWithHttpInfo(documentTypeCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create Document Type      Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
     * @param documentTypeCreate  (optional)
     * @return ApiResponse&lt;DocumentTypeCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentTypeCreate> documentDocumentTypesPOSTWithHttpInfo(DocumentTypeCreate documentTypeCreate) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesPOSTValidateBeforeCall(documentTypeCreate, null);
        Type localVarReturnType = new TypeToken<DocumentTypeCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Document Type      Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
     * @param documentTypeCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesPOSTAsync(DocumentTypeCreate documentTypeCreate, final ApiCallback<DocumentTypeCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesPOSTValidateBeforeCall(documentTypeCreate, _callback);
        Type localVarReturnType = new TypeToken<DocumentTypeCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesStatsGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesStatsGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/stats/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesStatsGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentTypesStatsGETCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return List&lt;DocumentTypeStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentTypeStats> documentDocumentTypesStatsGET() throws ApiException {
        ApiResponse<List<DocumentTypeStats>> localVarResp = documentDocumentTypesStatsGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;DocumentTypeStats&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentTypeStats>> documentDocumentTypesStatsGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesStatsGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DocumentTypeStats>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesStatsGETAsync(final ApiCallback<List<DocumentTypeStats>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesStatsGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DocumentTypeStats>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesUidClonePOST
     * @param uid A UUID string identifying this document type. (required)
     * @param cloneDocumentTypeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidClonePOSTCall(String uid, CloneDocumentTypeRequest cloneDocumentTypeRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cloneDocumentTypeRequest;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/{uid}/clone/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesUidClonePOSTValidateBeforeCall(String uid, CloneDocumentTypeRequest cloneDocumentTypeRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentTypesUidClonePOST(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentTypesUidClonePOSTCall(uid, cloneDocumentTypeRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clone existing Document Type and its fields
     * @param uid A UUID string identifying this document type. (required)
     * @param cloneDocumentTypeRequest  (optional)
     * @return DocumentTypeDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentTypeDetail documentDocumentTypesUidClonePOST(String uid, CloneDocumentTypeRequest cloneDocumentTypeRequest) throws ApiException {
        ApiResponse<DocumentTypeDetail> localVarResp = documentDocumentTypesUidClonePOSTWithHttpInfo(uid, cloneDocumentTypeRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Clone existing Document Type and its fields
     * @param uid A UUID string identifying this document type. (required)
     * @param cloneDocumentTypeRequest  (optional)
     * @return ApiResponse&lt;DocumentTypeDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentTypeDetail> documentDocumentTypesUidClonePOSTWithHttpInfo(String uid, CloneDocumentTypeRequest cloneDocumentTypeRequest) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesUidClonePOSTValidateBeforeCall(uid, cloneDocumentTypeRequest, null);
        Type localVarReturnType = new TypeToken<DocumentTypeDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clone existing Document Type and its fields
     * @param uid A UUID string identifying this document type. (required)
     * @param cloneDocumentTypeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidClonePOSTAsync(String uid, CloneDocumentTypeRequest cloneDocumentTypeRequest, final ApiCallback<DocumentTypeDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesUidClonePOSTValidateBeforeCall(uid, cloneDocumentTypeRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentTypeDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesUidDELETE
     * @param uid A UUID string identifying this document type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidDELETECall(String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesUidDELETEValidateBeforeCall(String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentTypesUidDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentTypesUidDELETECall(uid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete Document Type
     * @param uid A UUID string identifying this document type. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void documentDocumentTypesUidDELETE(String uid) throws ApiException {
        documentDocumentTypesUidDELETEWithHttpInfo(uid);
    }

    /**
     * 
     * Delete Document Type
     * @param uid A UUID string identifying this document type. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentDocumentTypesUidDELETEWithHttpInfo(String uid) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesUidDELETEValidateBeforeCall(uid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete Document Type
     * @param uid A UUID string identifying this document type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidDELETEAsync(String uid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesUidDELETEValidateBeforeCall(uid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesUidExportDocTypeGET
     * @param uid A UUID string identifying this document type. (required)
     * @param targetVersion Version number (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidExportDocTypeGETCall(String uid, String targetVersion, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/{uid}/export_doc_type/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (targetVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_version", targetVersion));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesUidExportDocTypeGETValidateBeforeCall(String uid, String targetVersion, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentTypesUidExportDocTypeGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentTypesUidExportDocTypeGETCall(uid, targetVersion, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param uid A UUID string identifying this document type. (required)
     * @param targetVersion Version number (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public File documentDocumentTypesUidExportDocTypeGET(String uid, String targetVersion) throws ApiException {
        ApiResponse<File> localVarResp = documentDocumentTypesUidExportDocTypeGETWithHttpInfo(uid, targetVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uid A UUID string identifying this document type. (required)
     * @param targetVersion Version number (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> documentDocumentTypesUidExportDocTypeGETWithHttpInfo(String uid, String targetVersion) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesUidExportDocTypeGETValidateBeforeCall(uid, targetVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uid A UUID string identifying this document type. (required)
     * @param targetVersion Version number (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidExportDocTypeGETAsync(String uid, String targetVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesUidExportDocTypeGETValidateBeforeCall(uid, targetVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesUidFormFieldsGET
     * @param uid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidFormFieldsGETCall(String uid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/{uid}/form-fields/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesUidFormFieldsGETValidateBeforeCall(String uid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentTypesUidFormFieldsGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentTypesUidFormFieldsGETCall(uid, _callback);
        return localVarCall;

    }

    /**
     * 
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param uid  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentDocumentTypesUidFormFieldsGET(String uid) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentDocumentTypesUidFormFieldsGETWithHttpInfo(uid);
        return localVarResp.getData();
    }

    /**
     * 
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param uid  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentDocumentTypesUidFormFieldsGETWithHttpInfo(String uid) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesUidFormFieldsGETValidateBeforeCall(uid, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GET model form fields description to build UI form for EXISTING object:       - value: any - object field value      - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer      - ui_element: dict - {type: (\&quot;input\&quot; | \&quot;select\&quot; | \&quot;checkbox\&quot; | ...), data_type: (\&quot;string\&quot;, \&quot;integer\&quot;, \&quot;date\&quot;, ...), ...}      - label: str - field label declared in a serializer field (default NULL)      - field_name: str - field name declared in a serializer field (default NULL)      - help_text: str - field help text declared in a serializer field (default NULL)      - required: bool - whether field is required      - read_only: bool - whether field is read only      - allow_null: bool - whether field is may be null      - default: bool - default (initial) field value for a new object (default NULL)      - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)
     * @param uid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidFormFieldsGETAsync(String uid, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesUidFormFieldsGETValidateBeforeCall(uid, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesUidGET
     * @param uid A UUID string identifying this document type. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidGETCall(String uid, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesUidGETValidateBeforeCall(String uid, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentTypesUidGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentTypesUidGETCall(uid, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve Document Type
     * @param uid A UUID string identifying this document type. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentTypeDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentTypeDetail documentDocumentTypesUidGET(String uid, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentTypeDetail> localVarResp = documentDocumentTypesUidGETWithHttpInfo(uid, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve Document Type
     * @param uid A UUID string identifying this document type. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentTypeDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentTypeDetail> documentDocumentTypesUidGETWithHttpInfo(String uid, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesUidGETValidateBeforeCall(uid, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentTypeDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve Document Type
     * @param uid A UUID string identifying this document type. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidGETAsync(String uid, Map<String, String> jqFilters, final ApiCallback<DocumentTypeDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesUidGETValidateBeforeCall(uid, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentTypeDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesUidPATCH
     * @param uid A UUID string identifying this document type. (required)
     * @param documentTypeCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidPATCHCall(String uid, DocumentTypeCreate documentTypeCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentTypeCreate;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesUidPATCHValidateBeforeCall(String uid, DocumentTypeCreate documentTypeCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentTypesUidPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentTypesUidPATCHCall(uid, documentTypeCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update Document Type
     * @param uid A UUID string identifying this document type. (required)
     * @param documentTypeCreate  (optional)
     * @return DocumentTypeCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentTypeCreate documentDocumentTypesUidPATCH(String uid, DocumentTypeCreate documentTypeCreate) throws ApiException {
        ApiResponse<DocumentTypeCreate> localVarResp = documentDocumentTypesUidPATCHWithHttpInfo(uid, documentTypeCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update Document Type
     * @param uid A UUID string identifying this document type. (required)
     * @param documentTypeCreate  (optional)
     * @return ApiResponse&lt;DocumentTypeCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentTypeCreate> documentDocumentTypesUidPATCHWithHttpInfo(String uid, DocumentTypeCreate documentTypeCreate) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesUidPATCHValidateBeforeCall(uid, documentTypeCreate, null);
        Type localVarReturnType = new TypeToken<DocumentTypeCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update Document Type
     * @param uid A UUID string identifying this document type. (required)
     * @param documentTypeCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidPATCHAsync(String uid, DocumentTypeCreate documentTypeCreate, final ApiCallback<DocumentTypeCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesUidPATCHValidateBeforeCall(uid, documentTypeCreate, _callback);
        Type localVarReturnType = new TypeToken<DocumentTypeCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesUidPUT
     * @param uid A UUID string identifying this document type. (required)
     * @param documentTypeCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidPUTCall(String uid, DocumentTypeCreate documentTypeCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentTypeCreate;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/{uid}/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesUidPUTValidateBeforeCall(String uid, DocumentTypeCreate documentTypeCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentTypesUidPUT(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentTypesUidPUTCall(uid, documentTypeCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update Document Type     Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
     * @param uid A UUID string identifying this document type. (required)
     * @param documentTypeCreate  (optional)
     * @return DocumentTypeCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentTypeCreate documentDocumentTypesUidPUT(String uid, DocumentTypeCreate documentTypeCreate) throws ApiException {
        ApiResponse<DocumentTypeCreate> localVarResp = documentDocumentTypesUidPUTWithHttpInfo(uid, documentTypeCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update Document Type     Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
     * @param uid A UUID string identifying this document type. (required)
     * @param documentTypeCreate  (optional)
     * @return ApiResponse&lt;DocumentTypeCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentTypeCreate> documentDocumentTypesUidPUTWithHttpInfo(String uid, DocumentTypeCreate documentTypeCreate) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesUidPUTValidateBeforeCall(uid, documentTypeCreate, null);
        Type localVarReturnType = new TypeToken<DocumentTypeCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Document Type     Params:         - code: str - Short name for field, max 50 symbols         - title: str - Verbose name for field, max 100 symbols         - field_code_aliases: json - Aliases of field codes for document import purposes         - fields: array of objects like [{id: uid, category: id, order: int}, ...]         - search_fields: array of uids - set of fields to filter/sort on Document list page         - editor_type: str - max 100 symbols (from pre-defined choices)         - metadata: json - optional
     * @param uid A UUID string identifying this document type. (required)
     * @param documentTypeCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidPUTAsync(String uid, DocumentTypeCreate documentTypeCreate, final ApiCallback<DocumentTypeCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesUidPUTValidateBeforeCall(uid, documentTypeCreate, _callback);
        Type localVarReturnType = new TypeToken<DocumentTypeCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesUidPreDeletePOST
     * @param uid A UUID string identifying this document type. (required)
     * @param documentTypeDetail  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidPreDeletePOSTCall(String uid, DocumentTypeDetail documentTypeDetail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentTypeDetail;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/{uid}/pre_delete/"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesUidPreDeletePOSTValidateBeforeCall(String uid, DocumentTypeDetail documentTypeDetail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentDocumentTypesUidPreDeletePOST(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentTypesUidPreDeletePOSTCall(uid, documentTypeDetail, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get info about related objects for ready-to-delete document type.
     * @param uid A UUID string identifying this document type. (required)
     * @param documentTypeDetail  (optional)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentDocumentTypesUidPreDeletePOST(String uid, DocumentTypeDetail documentTypeDetail) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentDocumentTypesUidPreDeletePOSTWithHttpInfo(uid, documentTypeDetail);
        return localVarResp.getData();
    }

    /**
     * 
     * Get info about related objects for ready-to-delete document type.
     * @param uid A UUID string identifying this document type. (required)
     * @param documentTypeDetail  (optional)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentDocumentTypesUidPreDeletePOSTWithHttpInfo(String uid, DocumentTypeDetail documentTypeDetail) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesUidPreDeletePOSTValidateBeforeCall(uid, documentTypeDetail, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get info about related objects for ready-to-delete document type.
     * @param uid A UUID string identifying this document type. (required)
     * @param documentTypeDetail  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUidPreDeletePOSTAsync(String uid, DocumentTypeDetail documentTypeDetail, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesUidPreDeletePOSTValidateBeforeCall(uid, documentTypeDetail, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentTypesUserProjectTypesGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUserProjectTypesGETCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/document-types/user_project_types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentTypesUserProjectTypesGETValidateBeforeCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentTypesUserProjectTypesGETCall(jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentTypeDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentTypeDetail documentDocumentTypesUserProjectTypesGET(Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentTypeDetail> localVarResp = documentDocumentTypesUserProjectTypesGETWithHttpInfo(jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentTypeDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentTypeDetail> documentDocumentTypesUserProjectTypesGETWithHttpInfo(Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentTypesUserProjectTypesGETValidateBeforeCall(jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentTypeDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentTypesUserProjectTypesGETAsync(Map<String, String> jqFilters, final ApiCallback<DocumentTypeDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentTypesUserProjectTypesGETValidateBeforeCall(jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentTypeDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsDownloadZipGET
     * @param documentIds Filter by Document ids separated by commas (optional)
     * @param excludeDocumentIds Exclude Document ids separated by commas (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsDownloadZipGETCall(String documentIds, String excludeDocumentIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/download_zip/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (documentIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_ids", documentIds));
        }

        if (excludeDocumentIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_document_ids", excludeDocumentIds));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsDownloadZipGETValidateBeforeCall(String documentIds, String excludeDocumentIds, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentsDownloadZipGETCall(documentIds, excludeDocumentIds, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param documentIds Filter by Document ids separated by commas (optional)
     * @param excludeDocumentIds Exclude Document ids separated by commas (optional)
     * @return DocumentDownloadZipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentDownloadZipResponse documentDocumentsDownloadZipGET(String documentIds, String excludeDocumentIds) throws ApiException {
        ApiResponse<DocumentDownloadZipResponse> localVarResp = documentDocumentsDownloadZipGETWithHttpInfo(documentIds, excludeDocumentIds);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param documentIds Filter by Document ids separated by commas (optional)
     * @param excludeDocumentIds Exclude Document ids separated by commas (optional)
     * @return ApiResponse&lt;DocumentDownloadZipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentDownloadZipResponse> documentDocumentsDownloadZipGETWithHttpInfo(String documentIds, String excludeDocumentIds) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsDownloadZipGETValidateBeforeCall(documentIds, excludeDocumentIds, null);
        Type localVarReturnType = new TypeToken<DocumentDownloadZipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param documentIds Filter by Document ids separated by commas (optional)
     * @param excludeDocumentIds Exclude Document ids separated by commas (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsDownloadZipGETAsync(String documentIds, String excludeDocumentIds, final ApiCallback<DocumentDownloadZipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsDownloadZipGETValidateBeforeCall(documentIds, excludeDocumentIds, _callback);
        Type localVarReturnType = new TypeToken<DocumentDownloadZipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsForUserGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsForUserGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/for-user/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsForUserGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentsForUserGETCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return DocumentsForUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsForUserResponse documentDocumentsForUserGET() throws ApiException {
        ApiResponse<DocumentsForUserResponse> localVarResp = documentDocumentsForUserGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;DocumentsForUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsForUserResponse> documentDocumentsForUserGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsForUserGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DocumentsForUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsForUserGETAsync(final ApiCallback<DocumentsForUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsForUserGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DocumentsForUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param clusterId Cluster id to filter by (optional)
     * @param q Search parameters for djangoQL (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsGETCall(Map<String, String> jqFilters, Integer clusterId, String q, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        if (clusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id", clusterId));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsGETValidateBeforeCall(Map<String, String> jqFilters, Integer clusterId, String q, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentsGETCall(jqFilters, clusterId, q, _callback);
        return localVarCall;

    }

    /**
     * 
     * Document List with Fields
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param clusterId Cluster id to filter by (optional)
     * @param q Search parameters for djangoQL (optional)
     * @return List&lt;DocumentsForUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentsForUser> documentDocumentsGET(Map<String, String> jqFilters, Integer clusterId, String q) throws ApiException {
        ApiResponse<List<DocumentsForUser>> localVarResp = documentDocumentsGETWithHttpInfo(jqFilters, clusterId, q);
        return localVarResp.getData();
    }

    /**
     * 
     * Document List with Fields
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param clusterId Cluster id to filter by (optional)
     * @param q Search parameters for djangoQL (optional)
     * @return ApiResponse&lt;List&lt;DocumentsForUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentsForUser>> documentDocumentsGETWithHttpInfo(Map<String, String> jqFilters, Integer clusterId, String q) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsGETValidateBeforeCall(jqFilters, clusterId, q, null);
        Type localVarReturnType = new TypeToken<List<DocumentsForUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Document List with Fields
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param clusterId Cluster id to filter by (optional)
     * @param q Search parameters for djangoQL (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsGETAsync(Map<String, String> jqFilters, Integer clusterId, String q, final ApiCallback<List<DocumentsForUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsGETValidateBeforeCall(jqFilters, clusterId, q, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentsForUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsIdDELETE
     * @param id A unique integer value identifying this document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdDELETECall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsIdDELETEValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentsIdDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentsIdDELETECall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void documentDocumentsIdDELETE(String id) throws ApiException {
        documentDocumentsIdDELETEWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentDocumentsIdDELETEWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsIdDELETEValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdDELETEAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsIdDELETEValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsIdDataGET
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdDataGETCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/{id}/data/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsIdDataGETValidateBeforeCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentsIdDataGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentsIdDataGETCall(id, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Restricted set of fields in response (except full_text), see get_serializer_class()
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentDetail documentDocumentsIdDataGET(String id, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentDetail> localVarResp = documentDocumentsIdDataGETWithHttpInfo(id, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Restricted set of fields in response (except full_text), see get_serializer_class()
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentDetail> documentDocumentsIdDataGETWithHttpInfo(String id, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsIdDataGETValidateBeforeCall(id, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restricted set of fields in response (except full_text), see get_serializer_class()
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdDataGETAsync(String id, Map<String, String> jqFilters, final ApiCallback<DocumentDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsIdDataGETValidateBeforeCall(id, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsIdDefinitionsGET
     * @param id A unique integer value identifying this document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdDefinitionsGETCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/{id}/definitions/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsIdDefinitionsGETValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentsIdDefinitionsGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentsIdDefinitionsGETCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @return List&lt;DocumentDefinitions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentDefinitions> documentDocumentsIdDefinitionsGET(String id) throws ApiException {
        ApiResponse<List<DocumentDefinitions>> localVarResp = documentDocumentsIdDefinitionsGETWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @return ApiResponse&lt;List&lt;DocumentDefinitions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentDefinitions>> documentDocumentsIdDefinitionsGETWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsIdDefinitionsGETValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<DocumentDefinitions>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdDefinitionsGETAsync(String id, final ApiCallback<List<DocumentDefinitions>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsIdDefinitionsGETValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentDefinitions>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsIdExtractionGET
     * @param id A unique integer value identifying this document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdExtractionGETCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/{id}/extraction/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsIdExtractionGETValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentsIdExtractionGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentsIdExtractionGETCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
     * @param id A unique integer value identifying this document. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentDocumentsIdExtractionGET(String id) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentDocumentsIdExtractionGETWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
     * @param id A unique integer value identifying this document. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentDocumentsIdExtractionGETWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsIdExtractionGETValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
     * @param id A unique integer value identifying this document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdExtractionGETAsync(String id, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsIdExtractionGETValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsIdFieldsGET
     * @param id A unique integer value identifying this document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdFieldsGETCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/{id}/fields/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsIdFieldsGETValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentsIdFieldsGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentsIdFieldsGETCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentDocumentsIdFieldsGET(String id) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentDocumentsIdFieldsGETWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentDocumentsIdFieldsGETWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsIdFieldsGETValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdFieldsGETAsync(String id, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsIdFieldsGETValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsIdFieldsPATCH
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdFieldsPATCHCall(String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentDetail;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/{id}/fields/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsIdFieldsPATCHValidateBeforeCall(String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentsIdFieldsPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentsIdFieldsPATCHCall(id, documentDetail, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return DocumentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentDetail documentDocumentsIdFieldsPATCH(String id, DocumentDetail documentDetail) throws ApiException {
        ApiResponse<DocumentDetail> localVarResp = documentDocumentsIdFieldsPATCHWithHttpInfo(id, documentDetail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return ApiResponse&lt;DocumentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentDetail> documentDocumentsIdFieldsPATCHWithHttpInfo(String id, DocumentDetail documentDetail) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsIdFieldsPATCHValidateBeforeCall(id, documentDetail, null);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdFieldsPATCHAsync(String id, DocumentDetail documentDetail, final ApiCallback<DocumentDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsIdFieldsPATCHValidateBeforeCall(id, documentDetail, _callback);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsIdFieldsPOST
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdFieldsPOSTCall(String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentDetail;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/{id}/fields/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsIdFieldsPOSTValidateBeforeCall(String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentsIdFieldsPOST(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentsIdFieldsPOSTCall(id, documentDetail, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return DocumentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentDetail documentDocumentsIdFieldsPOST(String id, DocumentDetail documentDetail) throws ApiException {
        ApiResponse<DocumentDetail> localVarResp = documentDocumentsIdFieldsPOSTWithHttpInfo(id, documentDetail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return ApiResponse&lt;DocumentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentDetail> documentDocumentsIdFieldsPOSTWithHttpInfo(String id, DocumentDetail documentDetail) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsIdFieldsPOSTValidateBeforeCall(id, documentDetail, null);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdFieldsPOSTAsync(String id, DocumentDetail documentDetail, final ApiCallback<DocumentDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsIdFieldsPOSTValidateBeforeCall(id, documentDetail, _callback);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsIdFieldsPUT
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdFieldsPUTCall(String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentDetail;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/{id}/fields/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsIdFieldsPUTValidateBeforeCall(String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentsIdFieldsPUT(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentsIdFieldsPUTCall(id, documentDetail, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return DocumentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentDetail documentDocumentsIdFieldsPUT(String id, DocumentDetail documentDetail) throws ApiException {
        ApiResponse<DocumentDetail> localVarResp = documentDocumentsIdFieldsPUTWithHttpInfo(id, documentDetail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return ApiResponse&lt;DocumentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentDetail> documentDocumentsIdFieldsPUTWithHttpInfo(String id, DocumentDetail documentDetail) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsIdFieldsPUTValidateBeforeCall(id, documentDetail, null);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdFieldsPUTAsync(String id, DocumentDetail documentDetail, final ApiCallback<DocumentDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsIdFieldsPUTValidateBeforeCall(id, documentDetail, _callback);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsIdFullTextGET
     * @param id A unique integer value identifying this document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdFullTextGETCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/{id}/full_text/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsIdFullTextGETValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentsIdFullTextGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentsIdFullTextGETCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String documentDocumentsIdFullTextGET(String id) throws ApiException {
        ApiResponse<String> localVarResp = documentDocumentsIdFullTextGETWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> documentDocumentsIdFullTextGETWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsIdFullTextGETValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdFullTextGETAsync(String id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsIdFullTextGETValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsIdGET
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdGETCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsIdGETValidateBeforeCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentsIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentsIdGETCall(id, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Document Detail with Fields
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentsForUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsForUser documentDocumentsIdGET(String id, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentsForUser> localVarResp = documentDocumentsIdGETWithHttpInfo(id, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Document Detail with Fields
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentsForUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsForUser> documentDocumentsIdGETWithHttpInfo(String id, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsIdGETValidateBeforeCall(id, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentsForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Document Detail with Fields
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdGETAsync(String id, Map<String, String> jqFilters, final ApiCallback<DocumentsForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsIdGETValidateBeforeCall(id, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentsForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsIdPATCH
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdPATCHCall(String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentDetail;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsIdPATCHValidateBeforeCall(String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentsIdPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentsIdPATCHCall(id, documentDetail, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return DocumentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentDetail documentDocumentsIdPATCH(String id, DocumentDetail documentDetail) throws ApiException {
        ApiResponse<DocumentDetail> localVarResp = documentDocumentsIdPATCHWithHttpInfo(id, documentDetail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return ApiResponse&lt;DocumentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentDetail> documentDocumentsIdPATCHWithHttpInfo(String id, DocumentDetail documentDetail) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsIdPATCHValidateBeforeCall(id, documentDetail, null);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdPATCHAsync(String id, DocumentDetail documentDetail, final ApiCallback<DocumentDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsIdPATCHValidateBeforeCall(id, documentDetail, _callback);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsIdPUT
     * @param id A unique integer value identifying this document. (required)
     * @param documentsForUser  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdPUTCall(String id, DocumentsForUser documentsForUser, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentsForUser;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsIdPUTValidateBeforeCall(String id, DocumentsForUser documentsForUser, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentsIdPUT(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentsIdPUTCall(id, documentsForUser, _callback);
        return localVarCall;

    }

    /**
     * 
     * Set new assignee OR document status
     * @param id A unique integer value identifying this document. (required)
     * @param documentsForUser  (optional)
     * @return DocumentsForUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsForUser documentDocumentsIdPUT(String id, DocumentsForUser documentsForUser) throws ApiException {
        ApiResponse<DocumentsForUser> localVarResp = documentDocumentsIdPUTWithHttpInfo(id, documentsForUser);
        return localVarResp.getData();
    }

    /**
     * 
     * Set new assignee OR document status
     * @param id A unique integer value identifying this document. (required)
     * @param documentsForUser  (optional)
     * @return ApiResponse&lt;DocumentsForUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsForUser> documentDocumentsIdPUTWithHttpInfo(String id, DocumentsForUser documentsForUser) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsIdPUTValidateBeforeCall(id, documentsForUser, null);
        Type localVarReturnType = new TypeToken<DocumentsForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set new assignee OR document status
     * @param id A unique integer value identifying this document. (required)
     * @param documentsForUser  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdPUTAsync(String id, DocumentsForUser documentsForUser, final ApiCallback<DocumentsForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsIdPUTValidateBeforeCall(id, documentsForUser, _callback);
        Type localVarReturnType = new TypeToken<DocumentsForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsIdShowGET
     * @param id A unique integer value identifying this document. (required)
     * @param alt Get alternative document file if exists (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdShowGETCall(String id, Boolean alt, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/{id}/show/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsIdShowGETValidateBeforeCall(String id, Boolean alt, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentDocumentsIdShowGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentDocumentsIdShowGETCall(id, alt, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param alt Get alternative document file if exists (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public File documentDocumentsIdShowGET(String id, Boolean alt) throws ApiException {
        ApiResponse<File> localVarResp = documentDocumentsIdShowGETWithHttpInfo(id, alt);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param alt Get alternative document file if exists (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> documentDocumentsIdShowGETWithHttpInfo(String id, Boolean alt) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsIdShowGETValidateBeforeCall(id, alt, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this document. (required)
     * @param alt Get alternative document file if exists (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsIdShowGETAsync(String id, Boolean alt, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsIdShowGETValidateBeforeCall(id, alt, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsMarkDeletePOST
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsMarkDeletePOSTCall(MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = markUnmarkForDeleteDocumentsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/mark_delete/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsMarkDeletePOSTValidateBeforeCall(MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentsMarkDeletePOSTCall(markUnmarkForDeleteDocumentsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @return MarkUnmarkForDeleteDocumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MarkUnmarkForDeleteDocumentsResponse documentDocumentsMarkDeletePOST(MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest) throws ApiException {
        ApiResponse<MarkUnmarkForDeleteDocumentsResponse> localVarResp = documentDocumentsMarkDeletePOSTWithHttpInfo(markUnmarkForDeleteDocumentsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @return ApiResponse&lt;MarkUnmarkForDeleteDocumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarkUnmarkForDeleteDocumentsResponse> documentDocumentsMarkDeletePOSTWithHttpInfo(MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsMarkDeletePOSTValidateBeforeCall(markUnmarkForDeleteDocumentsRequest, null);
        Type localVarReturnType = new TypeToken<MarkUnmarkForDeleteDocumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsMarkDeletePOSTAsync(MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest, final ApiCallback<MarkUnmarkForDeleteDocumentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsMarkDeletePOSTValidateBeforeCall(markUnmarkForDeleteDocumentsRequest, _callback);
        Type localVarReturnType = new TypeToken<MarkUnmarkForDeleteDocumentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsPOST
     * @param documentsForUser  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsPOSTCall(DocumentsForUser documentsForUser, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentsForUser;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsPOSTValidateBeforeCall(DocumentsForUser documentsForUser, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentsPOSTCall(documentsForUser, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param documentsForUser  (optional)
     * @return DocumentsForUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsForUser documentDocumentsPOST(DocumentsForUser documentsForUser) throws ApiException {
        ApiResponse<DocumentsForUser> localVarResp = documentDocumentsPOSTWithHttpInfo(documentsForUser);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param documentsForUser  (optional)
     * @return ApiResponse&lt;DocumentsForUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsForUser> documentDocumentsPOSTWithHttpInfo(DocumentsForUser documentsForUser) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsPOSTValidateBeforeCall(documentsForUser, null);
        Type localVarReturnType = new TypeToken<DocumentsForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param documentsForUser  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsPOSTAsync(DocumentsForUser documentsForUser, final ApiCallback<DocumentsForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsPOSTValidateBeforeCall(documentsForUser, _callback);
        Type localVarReturnType = new TypeToken<DocumentsForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentDocumentsUnmarkDeletePOST
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsUnmarkDeletePOSTCall(MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = markUnmarkForDeleteDocumentsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/document/documents/unmark_delete/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentDocumentsUnmarkDeletePOSTValidateBeforeCall(MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentDocumentsUnmarkDeletePOSTCall(markUnmarkForDeleteDocumentsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @return MarkUnmarkForDeleteDocumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MarkUnmarkForDeleteDocumentsResponse documentDocumentsUnmarkDeletePOST(MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest) throws ApiException {
        ApiResponse<MarkUnmarkForDeleteDocumentsResponse> localVarResp = documentDocumentsUnmarkDeletePOSTWithHttpInfo(markUnmarkForDeleteDocumentsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @return ApiResponse&lt;MarkUnmarkForDeleteDocumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarkUnmarkForDeleteDocumentsResponse> documentDocumentsUnmarkDeletePOSTWithHttpInfo(MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest) throws ApiException {
        okhttp3.Call localVarCall = documentDocumentsUnmarkDeletePOSTValidateBeforeCall(markUnmarkForDeleteDocumentsRequest, null);
        Type localVarReturnType = new TypeToken<MarkUnmarkForDeleteDocumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentDocumentsUnmarkDeletePOSTAsync(MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest, final ApiCallback<MarkUnmarkForDeleteDocumentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentDocumentsUnmarkDeletePOSTValidateBeforeCall(markUnmarkForDeleteDocumentsRequest, _callback);
        Type localVarReturnType = new TypeToken<MarkUnmarkForDeleteDocumentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentFieldAnnotationStatusesGET
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFieldAnnotationStatusesGETCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/field-annotation-statuses/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentFieldAnnotationStatusesGETValidateBeforeCall(Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentFieldAnnotationStatusesGETCall(jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * FieldAnnotationStatus List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return List&lt;FieldAnnotationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<FieldAnnotationStatus> documentFieldAnnotationStatusesGET(Map<String, String> jqFilters) throws ApiException {
        ApiResponse<List<FieldAnnotationStatus>> localVarResp = documentFieldAnnotationStatusesGETWithHttpInfo(jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * FieldAnnotationStatus List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;List&lt;FieldAnnotationStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FieldAnnotationStatus>> documentFieldAnnotationStatusesGETWithHttpInfo(Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentFieldAnnotationStatusesGETValidateBeforeCall(jqFilters, null);
        Type localVarReturnType = new TypeToken<List<FieldAnnotationStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * FieldAnnotationStatus List
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFieldAnnotationStatusesGETAsync(Map<String, String> jqFilters, final ApiCallback<List<FieldAnnotationStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentFieldAnnotationStatusesGETValidateBeforeCall(jqFilters, _callback);
        Type localVarReturnType = new TypeToken<List<FieldAnnotationStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentFieldAnnotationStatusesIdDELETE
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFieldAnnotationStatusesIdDELETECall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/field-annotation-statuses/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentFieldAnnotationStatusesIdDELETEValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentFieldAnnotationStatusesIdDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = documentFieldAnnotationStatusesIdDELETECall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete FieldAnnotationStatus
     * @param id A unique integer value identifying this field annotation status. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void documentFieldAnnotationStatusesIdDELETE(String id) throws ApiException {
        documentFieldAnnotationStatusesIdDELETEWithHttpInfo(id);
    }

    /**
     * 
     * Delete FieldAnnotationStatus
     * @param id A unique integer value identifying this field annotation status. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentFieldAnnotationStatusesIdDELETEWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentFieldAnnotationStatusesIdDELETEValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete FieldAnnotationStatus
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFieldAnnotationStatusesIdDELETEAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentFieldAnnotationStatusesIdDELETEValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentFieldAnnotationStatusesIdGET
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFieldAnnotationStatusesIdGETCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/field-annotation-statuses/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentFieldAnnotationStatusesIdGETValidateBeforeCall(String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentFieldAnnotationStatusesIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentFieldAnnotationStatusesIdGETCall(id, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve FieldAnnotationStatus
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return FieldAnnotationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FieldAnnotationStatus documentFieldAnnotationStatusesIdGET(String id, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<FieldAnnotationStatus> localVarResp = documentFieldAnnotationStatusesIdGETWithHttpInfo(id, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve FieldAnnotationStatus
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;FieldAnnotationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FieldAnnotationStatus> documentFieldAnnotationStatusesIdGETWithHttpInfo(String id, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentFieldAnnotationStatusesIdGETValidateBeforeCall(id, jqFilters, null);
        Type localVarReturnType = new TypeToken<FieldAnnotationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve FieldAnnotationStatus
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFieldAnnotationStatusesIdGETAsync(String id, Map<String, String> jqFilters, final ApiCallback<FieldAnnotationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentFieldAnnotationStatusesIdGETValidateBeforeCall(id, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<FieldAnnotationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentFieldAnnotationStatusesIdPATCH
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param fieldAnnotationStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFieldAnnotationStatusesIdPATCHCall(String id, FieldAnnotationStatus fieldAnnotationStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = fieldAnnotationStatus;

        // create path and map variables
        String localVarPath = "/api/v1/document/field-annotation-statuses/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentFieldAnnotationStatusesIdPATCHValidateBeforeCall(String id, FieldAnnotationStatus fieldAnnotationStatus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentFieldAnnotationStatusesIdPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = documentFieldAnnotationStatusesIdPATCHCall(id, fieldAnnotationStatus, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param fieldAnnotationStatus  (optional)
     * @return FieldAnnotationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FieldAnnotationStatus documentFieldAnnotationStatusesIdPATCH(String id, FieldAnnotationStatus fieldAnnotationStatus) throws ApiException {
        ApiResponse<FieldAnnotationStatus> localVarResp = documentFieldAnnotationStatusesIdPATCHWithHttpInfo(id, fieldAnnotationStatus);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param fieldAnnotationStatus  (optional)
     * @return ApiResponse&lt;FieldAnnotationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FieldAnnotationStatus> documentFieldAnnotationStatusesIdPATCHWithHttpInfo(String id, FieldAnnotationStatus fieldAnnotationStatus) throws ApiException {
        okhttp3.Call localVarCall = documentFieldAnnotationStatusesIdPATCHValidateBeforeCall(id, fieldAnnotationStatus, null);
        Type localVarReturnType = new TypeToken<FieldAnnotationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param fieldAnnotationStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFieldAnnotationStatusesIdPATCHAsync(String id, FieldAnnotationStatus fieldAnnotationStatus, final ApiCallback<FieldAnnotationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentFieldAnnotationStatusesIdPATCHValidateBeforeCall(id, fieldAnnotationStatus, _callback);
        Type localVarReturnType = new TypeToken<FieldAnnotationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentFieldAnnotationStatusesIdPUT
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param fieldAnnotationStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFieldAnnotationStatusesIdPUTCall(String id, FieldAnnotationStatus fieldAnnotationStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = fieldAnnotationStatus;

        // create path and map variables
        String localVarPath = "/api/v1/document/field-annotation-statuses/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentFieldAnnotationStatusesIdPUTValidateBeforeCall(String id, FieldAnnotationStatus fieldAnnotationStatus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentFieldAnnotationStatusesIdPUT(Async)");
        }
        

        okhttp3.Call localVarCall = documentFieldAnnotationStatusesIdPUTCall(id, fieldAnnotationStatus, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update FieldAnnotationStatus
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param fieldAnnotationStatus  (optional)
     * @return FieldAnnotationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FieldAnnotationStatus documentFieldAnnotationStatusesIdPUT(String id, FieldAnnotationStatus fieldAnnotationStatus) throws ApiException {
        ApiResponse<FieldAnnotationStatus> localVarResp = documentFieldAnnotationStatusesIdPUTWithHttpInfo(id, fieldAnnotationStatus);
        return localVarResp.getData();
    }

    /**
     * 
     * Update FieldAnnotationStatus
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param fieldAnnotationStatus  (optional)
     * @return ApiResponse&lt;FieldAnnotationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FieldAnnotationStatus> documentFieldAnnotationStatusesIdPUTWithHttpInfo(String id, FieldAnnotationStatus fieldAnnotationStatus) throws ApiException {
        okhttp3.Call localVarCall = documentFieldAnnotationStatusesIdPUTValidateBeforeCall(id, fieldAnnotationStatus, null);
        Type localVarReturnType = new TypeToken<FieldAnnotationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update FieldAnnotationStatus
     * @param id A unique integer value identifying this field annotation status. (required)
     * @param fieldAnnotationStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFieldAnnotationStatusesIdPUTAsync(String id, FieldAnnotationStatus fieldAnnotationStatus, final ApiCallback<FieldAnnotationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentFieldAnnotationStatusesIdPUTValidateBeforeCall(id, fieldAnnotationStatus, _callback);
        Type localVarReturnType = new TypeToken<FieldAnnotationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentFieldAnnotationStatusesPOST
     * @param fieldAnnotationStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFieldAnnotationStatusesPOSTCall(FieldAnnotationStatus fieldAnnotationStatus, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = fieldAnnotationStatus;

        // create path and map variables
        String localVarPath = "/api/v1/document/field-annotation-statuses/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentFieldAnnotationStatusesPOSTValidateBeforeCall(FieldAnnotationStatus fieldAnnotationStatus, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentFieldAnnotationStatusesPOSTCall(fieldAnnotationStatus, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create FieldAnnotationStatus
     * @param fieldAnnotationStatus  (optional)
     * @return FieldAnnotationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FieldAnnotationStatus documentFieldAnnotationStatusesPOST(FieldAnnotationStatus fieldAnnotationStatus) throws ApiException {
        ApiResponse<FieldAnnotationStatus> localVarResp = documentFieldAnnotationStatusesPOSTWithHttpInfo(fieldAnnotationStatus);
        return localVarResp.getData();
    }

    /**
     * 
     * Create FieldAnnotationStatus
     * @param fieldAnnotationStatus  (optional)
     * @return ApiResponse&lt;FieldAnnotationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FieldAnnotationStatus> documentFieldAnnotationStatusesPOSTWithHttpInfo(FieldAnnotationStatus fieldAnnotationStatus) throws ApiException {
        okhttp3.Call localVarCall = documentFieldAnnotationStatusesPOSTValidateBeforeCall(fieldAnnotationStatus, null);
        Type localVarReturnType = new TypeToken<FieldAnnotationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create FieldAnnotationStatus
     * @param fieldAnnotationStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFieldAnnotationStatusesPOSTAsync(FieldAnnotationStatus fieldAnnotationStatus, final ApiCallback<FieldAnnotationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentFieldAnnotationStatusesPOSTValidateBeforeCall(fieldAnnotationStatus, _callback);
        Type localVarReturnType = new TypeToken<FieldAnnotationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentFieldAnnotationsForUserGET
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentFieldAnnotationsForUserGETCall(String projectPk, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/document-field-annotations/for-user/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentFieldAnnotationsForUserGETValidateBeforeCall(String projectPk, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentFieldAnnotationsForUserGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldAnnotationsForUserGETCall(projectPk, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentFieldAnnotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldAnnotation documentProjectProjectPkDocumentFieldAnnotationsForUserGET(String projectPk, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentFieldAnnotation> localVarResp = documentProjectProjectPkDocumentFieldAnnotationsForUserGETWithHttpInfo(projectPk, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentFieldAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldAnnotation> documentProjectProjectPkDocumentFieldAnnotationsForUserGETWithHttpInfo(String projectPk, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldAnnotationsForUserGETValidateBeforeCall(projectPk, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentFieldAnnotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentFieldAnnotationsForUserGETAsync(String projectPk, Map<String, String> jqFilters, final ApiCallback<DocumentFieldAnnotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldAnnotationsForUserGETValidateBeforeCall(projectPk, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldAnnotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentFieldAnnotationsGET
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentFieldAnnotationsGETCall(String projectPk, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/document-field-annotations/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentFieldAnnotationsGETValidateBeforeCall(String projectPk, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentFieldAnnotationsGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldAnnotationsGETCall(projectPk, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Field Annotation List + Field Annotation False Match List
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return List&lt;DocumentFieldAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentFieldAnnotation> documentProjectProjectPkDocumentFieldAnnotationsGET(String projectPk, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<List<DocumentFieldAnnotation>> localVarResp = documentProjectProjectPkDocumentFieldAnnotationsGETWithHttpInfo(projectPk, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Field Annotation List + Field Annotation False Match List
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;List&lt;DocumentFieldAnnotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentFieldAnnotation>> documentProjectProjectPkDocumentFieldAnnotationsGETWithHttpInfo(String projectPk, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldAnnotationsGETValidateBeforeCall(projectPk, jqFilters, null);
        Type localVarReturnType = new TypeToken<List<DocumentFieldAnnotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Field Annotation List + Field Annotation False Match List
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentFieldAnnotationsGETAsync(String projectPk, Map<String, String> jqFilters, final ApiCallback<List<DocumentFieldAnnotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldAnnotationsGETValidateBeforeCall(projectPk, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentFieldAnnotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentFieldAnnotationsUidGET
     * @param projectPk  (required)
     * @param uid  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentFieldAnnotationsUidGETCall(String projectPk, String uid, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/document-field-annotations/{uid}/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentFieldAnnotationsUidGETValidateBeforeCall(String projectPk, String uid, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentFieldAnnotationsUidGET(Async)");
        }
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling documentProjectProjectPkDocumentFieldAnnotationsUidGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldAnnotationsUidGETCall(projectPk, uid, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Field Annotation Details (not Field Annotation False Match)
     * @param projectPk  (required)
     * @param uid  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentFieldAnnotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldAnnotation documentProjectProjectPkDocumentFieldAnnotationsUidGET(String projectPk, String uid, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentFieldAnnotation> localVarResp = documentProjectProjectPkDocumentFieldAnnotationsUidGETWithHttpInfo(projectPk, uid, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Field Annotation Details (not Field Annotation False Match)
     * @param projectPk  (required)
     * @param uid  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentFieldAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldAnnotation> documentProjectProjectPkDocumentFieldAnnotationsUidGETWithHttpInfo(String projectPk, String uid, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldAnnotationsUidGETValidateBeforeCall(projectPk, uid, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentFieldAnnotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Field Annotation Details (not Field Annotation False Match)
     * @param projectPk  (required)
     * @param uid  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentFieldAnnotationsUidGETAsync(String projectPk, String uid, Map<String, String> jqFilters, final ApiCallback<DocumentFieldAnnotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldAnnotationsUidGETValidateBeforeCall(projectPk, uid, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldAnnotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentFieldValuesGET
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentFieldValuesGETCall(String projectPk, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/document-field-values/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentFieldValuesGETValidateBeforeCall(String projectPk, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentFieldValuesGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldValuesGETCall(projectPk, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Document Field Value List
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return List&lt;DocumentFieldValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentFieldValue> documentProjectProjectPkDocumentFieldValuesGET(String projectPk, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<List<DocumentFieldValue>> localVarResp = documentProjectProjectPkDocumentFieldValuesGETWithHttpInfo(projectPk, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Document Field Value List
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;List&lt;DocumentFieldValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentFieldValue>> documentProjectProjectPkDocumentFieldValuesGETWithHttpInfo(String projectPk, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldValuesGETValidateBeforeCall(projectPk, jqFilters, null);
        Type localVarReturnType = new TypeToken<List<DocumentFieldValue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Document Field Value List
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentFieldValuesGETAsync(String projectPk, Map<String, String> jqFilters, final ApiCallback<List<DocumentFieldValue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldValuesGETValidateBeforeCall(projectPk, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentFieldValue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentFieldValuesIdGET
     * @param projectPk  (required)
     * @param id A unique integer value identifying this field value. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentFieldValuesIdGETCall(String projectPk, String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/document-field-values/{id}/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentFieldValuesIdGETValidateBeforeCall(String projectPk, String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentFieldValuesIdGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentFieldValuesIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldValuesIdGETCall(projectPk, id, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Document Field Value Details
     * @param projectPk  (required)
     * @param id A unique integer value identifying this field value. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentFieldValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentFieldValue documentProjectProjectPkDocumentFieldValuesIdGET(String projectPk, String id, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentFieldValue> localVarResp = documentProjectProjectPkDocumentFieldValuesIdGETWithHttpInfo(projectPk, id, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Document Field Value Details
     * @param projectPk  (required)
     * @param id A unique integer value identifying this field value. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentFieldValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentFieldValue> documentProjectProjectPkDocumentFieldValuesIdGETWithHttpInfo(String projectPk, String id, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldValuesIdGETValidateBeforeCall(projectPk, id, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentFieldValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Document Field Value Details
     * @param projectPk  (required)
     * @param id A unique integer value identifying this field value. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentFieldValuesIdGETAsync(String projectPk, String id, Map<String, String> jqFilters, final ApiCallback<DocumentFieldValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentFieldValuesIdGETValidateBeforeCall(projectPk, id, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentFieldValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsDocumentPkAnnotationsGET
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsGETCall(String projectPk, String documentPk, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "document_pk" + "\\}", localVarApiClient.escapeString(documentPk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsGETValidateBeforeCall(String projectPk, String documentPk, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsGET(Async)");
        }
        
        // verify the required parameter 'documentPk' is set
        if (documentPk == null) {
            throw new ApiException("Missing the required parameter 'documentPk' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsGETCall(projectPk, documentPk, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @return List&lt;AnnotationInDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<AnnotationInDocument> documentProjectProjectPkDocumentsDocumentPkAnnotationsGET(String projectPk, String documentPk) throws ApiException {
        ApiResponse<List<AnnotationInDocument>> localVarResp = documentProjectProjectPkDocumentsDocumentPkAnnotationsGETWithHttpInfo(projectPk, documentPk);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @return ApiResponse&lt;List&lt;AnnotationInDocument&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnnotationInDocument>> documentProjectProjectPkDocumentsDocumentPkAnnotationsGETWithHttpInfo(String projectPk, String documentPk) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsGETValidateBeforeCall(projectPk, documentPk, null);
        Type localVarReturnType = new TypeToken<List<AnnotationInDocument>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsGETAsync(String projectPk, String documentPk, final ApiCallback<List<AnnotationInDocument>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsGETValidateBeforeCall(projectPk, documentPk, _callback);
        Type localVarReturnType = new TypeToken<List<AnnotationInDocument>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETECall(String projectPk, String documentPk, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/{id}/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "document_pk" + "\\}", localVarApiClient.escapeString(documentPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEValidateBeforeCall(String projectPk, String documentPk, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE(Async)");
        }
        
        // verify the required parameter 'documentPk' is set
        if (documentPk == null) {
            throw new ApiException("Missing the required parameter 'documentPk' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETECall(projectPk, documentPk, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETE(String projectPk, String documentPk, String id) throws ApiException {
        documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEWithHttpInfo(projectPk, documentPk, id);
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEWithHttpInfo(String projectPk, String documentPk, String id) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEValidateBeforeCall(projectPk, documentPk, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEAsync(String projectPk, String documentPk, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdDELETEValidateBeforeCall(projectPk, documentPk, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETCall(String projectPk, String documentPk, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/{id}/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "document_pk" + "\\}", localVarApiClient.escapeString(documentPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETValidateBeforeCall(String projectPk, String documentPk, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET(Async)");
        }
        
        // verify the required parameter 'documentPk' is set
        if (documentPk == null) {
            throw new ApiException("Missing the required parameter 'documentPk' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETCall(projectPk, documentPk, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @return AnnotationInDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationInDocument documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGET(String projectPk, String documentPk, String id) throws ApiException {
        ApiResponse<AnnotationInDocument> localVarResp = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETWithHttpInfo(projectPk, documentPk, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AnnotationInDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationInDocument> documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETWithHttpInfo(String projectPk, String documentPk, String id) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETValidateBeforeCall(projectPk, documentPk, id, null);
        Type localVarReturnType = new TypeToken<AnnotationInDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETAsync(String projectPk, String documentPk, String id, final ApiCallback<AnnotationInDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdGETValidateBeforeCall(projectPk, documentPk, id, _callback);
        Type localVarReturnType = new TypeToken<AnnotationInDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @param annotationInDocument  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHCall(String projectPk, String documentPk, String id, AnnotationInDocument annotationInDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = annotationInDocument;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/{id}/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "document_pk" + "\\}", localVarApiClient.escapeString(documentPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHValidateBeforeCall(String projectPk, String documentPk, String id, AnnotationInDocument annotationInDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH(Async)");
        }
        
        // verify the required parameter 'documentPk' is set
        if (documentPk == null) {
            throw new ApiException("Missing the required parameter 'documentPk' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHCall(projectPk, documentPk, id, annotationInDocument, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @param annotationInDocument  (optional)
     * @return AnnotationInDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationInDocument documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCH(String projectPk, String documentPk, String id, AnnotationInDocument annotationInDocument) throws ApiException {
        ApiResponse<AnnotationInDocument> localVarResp = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHWithHttpInfo(projectPk, documentPk, id, annotationInDocument);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @param annotationInDocument  (optional)
     * @return ApiResponse&lt;AnnotationInDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationInDocument> documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHWithHttpInfo(String projectPk, String documentPk, String id, AnnotationInDocument annotationInDocument) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHValidateBeforeCall(projectPk, documentPk, id, annotationInDocument, null);
        Type localVarReturnType = new TypeToken<AnnotationInDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @param annotationInDocument  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHAsync(String projectPk, String documentPk, String id, AnnotationInDocument annotationInDocument, final ApiCallback<AnnotationInDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPATCHValidateBeforeCall(projectPk, documentPk, id, annotationInDocument, _callback);
        Type localVarReturnType = new TypeToken<AnnotationInDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @param annotationInDocument  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTCall(String projectPk, String documentPk, String id, AnnotationInDocument annotationInDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = annotationInDocument;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/{id}/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "document_pk" + "\\}", localVarApiClient.escapeString(documentPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTValidateBeforeCall(String projectPk, String documentPk, String id, AnnotationInDocument annotationInDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT(Async)");
        }
        
        // verify the required parameter 'documentPk' is set
        if (documentPk == null) {
            throw new ApiException("Missing the required parameter 'documentPk' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTCall(projectPk, documentPk, id, annotationInDocument, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @param annotationInDocument  (optional)
     * @return AnnotationInDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationInDocument documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUT(String projectPk, String documentPk, String id, AnnotationInDocument annotationInDocument) throws ApiException {
        ApiResponse<AnnotationInDocument> localVarResp = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTWithHttpInfo(projectPk, documentPk, id, annotationInDocument);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @param annotationInDocument  (optional)
     * @return ApiResponse&lt;AnnotationInDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationInDocument> documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTWithHttpInfo(String projectPk, String documentPk, String id, AnnotationInDocument annotationInDocument) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTValidateBeforeCall(projectPk, documentPk, id, annotationInDocument, null);
        Type localVarReturnType = new TypeToken<AnnotationInDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param id  (required)
     * @param annotationInDocument  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTAsync(String projectPk, String documentPk, String id, AnnotationInDocument annotationInDocument, final ApiCallback<AnnotationInDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsIdPUTValidateBeforeCall(projectPk, documentPk, id, annotationInDocument, _callback);
        Type localVarReturnType = new TypeToken<AnnotationInDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsDocumentPkAnnotationsPOST
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param annotationInDocument  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTCall(String projectPk, String documentPk, AnnotationInDocument annotationInDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = annotationInDocument;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "document_pk" + "\\}", localVarApiClient.escapeString(documentPk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTValidateBeforeCall(String projectPk, String documentPk, AnnotationInDocument annotationInDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsPOST(Async)");
        }
        
        // verify the required parameter 'documentPk' is set
        if (documentPk == null) {
            throw new ApiException("Missing the required parameter 'documentPk' when calling documentProjectProjectPkDocumentsDocumentPkAnnotationsPOST(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTCall(projectPk, documentPk, annotationInDocument, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param annotationInDocument  (optional)
     * @return AnnotationInDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AnnotationInDocument documentProjectProjectPkDocumentsDocumentPkAnnotationsPOST(String projectPk, String documentPk, AnnotationInDocument annotationInDocument) throws ApiException {
        ApiResponse<AnnotationInDocument> localVarResp = documentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTWithHttpInfo(projectPk, documentPk, annotationInDocument);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param annotationInDocument  (optional)
     * @return ApiResponse&lt;AnnotationInDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotationInDocument> documentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTWithHttpInfo(String projectPk, String documentPk, AnnotationInDocument annotationInDocument) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTValidateBeforeCall(projectPk, documentPk, annotationInDocument, null);
        Type localVarReturnType = new TypeToken<AnnotationInDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param documentPk  (required)
     * @param annotationInDocument  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTAsync(String projectPk, String documentPk, AnnotationInDocument annotationInDocument, final ApiCallback<AnnotationInDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDocumentPkAnnotationsPOSTValidateBeforeCall(projectPk, documentPk, annotationInDocument, _callback);
        Type localVarReturnType = new TypeToken<AnnotationInDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsDownloadZipGET
     * @param projectPk  (required)
     * @param documentIds Filter by Document ids separated by commas (optional)
     * @param excludeDocumentIds Exclude Document ids separated by commas (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDownloadZipGETCall(String projectPk, String documentIds, String excludeDocumentIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/download_zip/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (documentIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_ids", documentIds));
        }

        if (excludeDocumentIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_document_ids", excludeDocumentIds));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsDownloadZipGETValidateBeforeCall(String projectPk, String documentIds, String excludeDocumentIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsDownloadZipGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDownloadZipGETCall(projectPk, documentIds, excludeDocumentIds, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentIds Filter by Document ids separated by commas (optional)
     * @param excludeDocumentIds Exclude Document ids separated by commas (optional)
     * @return DocumentDownloadZipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentDownloadZipResponse documentProjectProjectPkDocumentsDownloadZipGET(String projectPk, String documentIds, String excludeDocumentIds) throws ApiException {
        ApiResponse<DocumentDownloadZipResponse> localVarResp = documentProjectProjectPkDocumentsDownloadZipGETWithHttpInfo(projectPk, documentIds, excludeDocumentIds);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentIds Filter by Document ids separated by commas (optional)
     * @param excludeDocumentIds Exclude Document ids separated by commas (optional)
     * @return ApiResponse&lt;DocumentDownloadZipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentDownloadZipResponse> documentProjectProjectPkDocumentsDownloadZipGETWithHttpInfo(String projectPk, String documentIds, String excludeDocumentIds) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDownloadZipGETValidateBeforeCall(projectPk, documentIds, excludeDocumentIds, null);
        Type localVarReturnType = new TypeToken<DocumentDownloadZipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param documentIds Filter by Document ids separated by commas (optional)
     * @param excludeDocumentIds Exclude Document ids separated by commas (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsDownloadZipGETAsync(String projectPk, String documentIds, String excludeDocumentIds, final ApiCallback<DocumentDownloadZipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsDownloadZipGETValidateBeforeCall(projectPk, documentIds, excludeDocumentIds, _callback);
        Type localVarReturnType = new TypeToken<DocumentDownloadZipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsForUserGET
     * @param projectPk  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsForUserGETCall(String projectPk, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/for-user/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsForUserGETValidateBeforeCall(String projectPk, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsForUserGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsForUserGETCall(projectPk, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @return DocumentsForUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsForUserResponse documentProjectProjectPkDocumentsForUserGET(String projectPk) throws ApiException {
        ApiResponse<DocumentsForUserResponse> localVarResp = documentProjectProjectPkDocumentsForUserGETWithHttpInfo(projectPk);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @return ApiResponse&lt;DocumentsForUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsForUserResponse> documentProjectProjectPkDocumentsForUserGETWithHttpInfo(String projectPk) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsForUserGETValidateBeforeCall(projectPk, null);
        Type localVarReturnType = new TypeToken<DocumentsForUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsForUserGETAsync(String projectPk, final ApiCallback<DocumentsForUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsForUserGETValidateBeforeCall(projectPk, _callback);
        Type localVarReturnType = new TypeToken<DocumentsForUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsGET
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param clusterId Cluster id to filter by (optional)
     * @param q Search parameters for djangoQL (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsGETCall(String projectPk, Map<String, String> jqFilters, Integer clusterId, String q, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        if (clusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id", clusterId));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsGETValidateBeforeCall(String projectPk, Map<String, String> jqFilters, Integer clusterId, String q, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsGETCall(projectPk, jqFilters, clusterId, q, _callback);
        return localVarCall;

    }

    /**
     * 
     * Document List with Fields
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param clusterId Cluster id to filter by (optional)
     * @param q Search parameters for djangoQL (optional)
     * @return List&lt;DocumentsForUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentsForUser> documentProjectProjectPkDocumentsGET(String projectPk, Map<String, String> jqFilters, Integer clusterId, String q) throws ApiException {
        ApiResponse<List<DocumentsForUser>> localVarResp = documentProjectProjectPkDocumentsGETWithHttpInfo(projectPk, jqFilters, clusterId, q);
        return localVarResp.getData();
    }

    /**
     * 
     * Document List with Fields
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param clusterId Cluster id to filter by (optional)
     * @param q Search parameters for djangoQL (optional)
     * @return ApiResponse&lt;List&lt;DocumentsForUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentsForUser>> documentProjectProjectPkDocumentsGETWithHttpInfo(String projectPk, Map<String, String> jqFilters, Integer clusterId, String q) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsGETValidateBeforeCall(projectPk, jqFilters, clusterId, q, null);
        Type localVarReturnType = new TypeToken<List<DocumentsForUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Document List with Fields
     * @param projectPk  (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param clusterId Cluster id to filter by (optional)
     * @param q Search parameters for djangoQL (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsGETAsync(String projectPk, Map<String, String> jqFilters, Integer clusterId, String q, final ApiCallback<List<DocumentsForUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsGETValidateBeforeCall(projectPk, jqFilters, clusterId, q, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentsForUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsIdDELETE
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdDELETECall(String projectPk, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsIdDELETEValidateBeforeCall(String projectPk, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsIdDELETE(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsIdDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdDELETECall(projectPk, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void documentProjectProjectPkDocumentsIdDELETE(String projectPk, String id) throws ApiException {
        documentProjectProjectPkDocumentsIdDELETEWithHttpInfo(projectPk, id);
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentProjectProjectPkDocumentsIdDELETEWithHttpInfo(String projectPk, String id) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdDELETEValidateBeforeCall(projectPk, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdDELETEAsync(String projectPk, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdDELETEValidateBeforeCall(projectPk, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsIdDataGET
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdDataGETCall(String projectPk, String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/data/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsIdDataGETValidateBeforeCall(String projectPk, String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsIdDataGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsIdDataGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdDataGETCall(projectPk, id, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Restricted set of fields in response (except full_text), see get_serializer_class()
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentDetail documentProjectProjectPkDocumentsIdDataGET(String projectPk, String id, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentDetail> localVarResp = documentProjectProjectPkDocumentsIdDataGETWithHttpInfo(projectPk, id, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Restricted set of fields in response (except full_text), see get_serializer_class()
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentDetail> documentProjectProjectPkDocumentsIdDataGETWithHttpInfo(String projectPk, String id, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdDataGETValidateBeforeCall(projectPk, id, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restricted set of fields in response (except full_text), see get_serializer_class()
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdDataGETAsync(String projectPk, String id, Map<String, String> jqFilters, final ApiCallback<DocumentDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdDataGETValidateBeforeCall(projectPk, id, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsIdDefinitionsGET
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdDefinitionsGETCall(String projectPk, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/definitions/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsIdDefinitionsGETValidateBeforeCall(String projectPk, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsIdDefinitionsGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsIdDefinitionsGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdDefinitionsGETCall(projectPk, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @return List&lt;DocumentDefinitions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentDefinitions> documentProjectProjectPkDocumentsIdDefinitionsGET(String projectPk, String id) throws ApiException {
        ApiResponse<List<DocumentDefinitions>> localVarResp = documentProjectProjectPkDocumentsIdDefinitionsGETWithHttpInfo(projectPk, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @return ApiResponse&lt;List&lt;DocumentDefinitions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentDefinitions>> documentProjectProjectPkDocumentsIdDefinitionsGETWithHttpInfo(String projectPk, String id) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdDefinitionsGETValidateBeforeCall(projectPk, id, null);
        Type localVarReturnType = new TypeToken<List<DocumentDefinitions>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdDefinitionsGETAsync(String projectPk, String id, final ApiCallback<List<DocumentDefinitions>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdDefinitionsGETValidateBeforeCall(projectPk, id, _callback);
        Type localVarReturnType = new TypeToken<List<DocumentDefinitions>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsIdExtractionGET
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdExtractionGETCall(String projectPk, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/extraction/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsIdExtractionGETValidateBeforeCall(String projectPk, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsIdExtractionGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsIdExtractionGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdExtractionGETCall(projectPk, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentProjectProjectPkDocumentsIdExtractionGET(String projectPk, String id) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentProjectProjectPkDocumentsIdExtractionGETWithHttpInfo(projectPk, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentProjectProjectPkDocumentsIdExtractionGETWithHttpInfo(String projectPk, String id) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdExtractionGETValidateBeforeCall(projectPk, id, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Standard extracted info - Top level + details      Params:         - skip_details: bool - show top-level data only (skip per text-unit data)         - values: str - list of str separated by comma like dates,parties,courts
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdExtractionGETAsync(String projectPk, String id, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdExtractionGETValidateBeforeCall(projectPk, id, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsIdFieldsGET
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdFieldsGETCall(String projectPk, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/fields/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsIdFieldsGETValidateBeforeCall(String projectPk, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsIdFieldsGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsIdFieldsGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFieldsGETCall(projectPk, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentProjectProjectPkDocumentsIdFieldsGET(String projectPk, String id) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentProjectProjectPkDocumentsIdFieldsGETWithHttpInfo(projectPk, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentProjectProjectPkDocumentsIdFieldsGETWithHttpInfo(String projectPk, String id) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFieldsGETValidateBeforeCall(projectPk, id, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdFieldsGETAsync(String projectPk, String id, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFieldsGETValidateBeforeCall(projectPk, id, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsIdFieldsPATCH
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdFieldsPATCHCall(String projectPk, String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentDetail;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/fields/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsIdFieldsPATCHValidateBeforeCall(String projectPk, String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsIdFieldsPATCH(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsIdFieldsPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFieldsPATCHCall(projectPk, id, documentDetail, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return DocumentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentDetail documentProjectProjectPkDocumentsIdFieldsPATCH(String projectPk, String id, DocumentDetail documentDetail) throws ApiException {
        ApiResponse<DocumentDetail> localVarResp = documentProjectProjectPkDocumentsIdFieldsPATCHWithHttpInfo(projectPk, id, documentDetail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return ApiResponse&lt;DocumentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentDetail> documentProjectProjectPkDocumentsIdFieldsPATCHWithHttpInfo(String projectPk, String id, DocumentDetail documentDetail) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFieldsPATCHValidateBeforeCall(projectPk, id, documentDetail, null);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdFieldsPATCHAsync(String projectPk, String id, DocumentDetail documentDetail, final ApiCallback<DocumentDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFieldsPATCHValidateBeforeCall(projectPk, id, documentDetail, _callback);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsIdFieldsPOST
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdFieldsPOSTCall(String projectPk, String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentDetail;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/fields/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsIdFieldsPOSTValidateBeforeCall(String projectPk, String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsIdFieldsPOST(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsIdFieldsPOST(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFieldsPOSTCall(projectPk, id, documentDetail, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return DocumentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentDetail documentProjectProjectPkDocumentsIdFieldsPOST(String projectPk, String id, DocumentDetail documentDetail) throws ApiException {
        ApiResponse<DocumentDetail> localVarResp = documentProjectProjectPkDocumentsIdFieldsPOSTWithHttpInfo(projectPk, id, documentDetail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return ApiResponse&lt;DocumentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentDetail> documentProjectProjectPkDocumentsIdFieldsPOSTWithHttpInfo(String projectPk, String id, DocumentDetail documentDetail) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFieldsPOSTValidateBeforeCall(projectPk, id, documentDetail, null);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdFieldsPOSTAsync(String projectPk, String id, DocumentDetail documentDetail, final ApiCallback<DocumentDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFieldsPOSTValidateBeforeCall(projectPk, id, documentDetail, _callback);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsIdFieldsPUT
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdFieldsPUTCall(String projectPk, String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentDetail;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/fields/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsIdFieldsPUTValidateBeforeCall(String projectPk, String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsIdFieldsPUT(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsIdFieldsPUT(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFieldsPUTCall(projectPk, id, documentDetail, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return DocumentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentDetail documentProjectProjectPkDocumentsIdFieldsPUT(String projectPk, String id, DocumentDetail documentDetail) throws ApiException {
        ApiResponse<DocumentDetail> localVarResp = documentProjectProjectPkDocumentsIdFieldsPUTWithHttpInfo(projectPk, id, documentDetail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return ApiResponse&lt;DocumentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentDetail> documentProjectProjectPkDocumentsIdFieldsPUTWithHttpInfo(String projectPk, String id, DocumentDetail documentDetail) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFieldsPUTValidateBeforeCall(projectPk, id, documentDetail, null);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdFieldsPUTAsync(String projectPk, String id, DocumentDetail documentDetail, final ApiCallback<DocumentDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFieldsPUTValidateBeforeCall(projectPk, id, documentDetail, _callback);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsIdFullTextGET
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdFullTextGETCall(String projectPk, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/full_text/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsIdFullTextGETValidateBeforeCall(String projectPk, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsIdFullTextGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsIdFullTextGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFullTextGETCall(projectPk, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public String documentProjectProjectPkDocumentsIdFullTextGET(String projectPk, String id) throws ApiException {
        ApiResponse<String> localVarResp = documentProjectProjectPkDocumentsIdFullTextGETWithHttpInfo(projectPk, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> documentProjectProjectPkDocumentsIdFullTextGETWithHttpInfo(String projectPk, String id) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFullTextGETValidateBeforeCall(projectPk, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdFullTextGETAsync(String projectPk, String id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdFullTextGETValidateBeforeCall(projectPk, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsIdGET
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdGETCall(String projectPk, String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jqFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jq_filters", jqFilters));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsIdGETValidateBeforeCall(String projectPk, String id, Map<String, String> jqFilters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsIdGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdGETCall(projectPk, id, jqFilters, _callback);
        return localVarCall;

    }

    /**
     * 
     * Document Detail with Fields
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return DocumentsForUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsForUser documentProjectProjectPkDocumentsIdGET(String projectPk, String id, Map<String, String> jqFilters) throws ApiException {
        ApiResponse<DocumentsForUser> localVarResp = documentProjectProjectPkDocumentsIdGETWithHttpInfo(projectPk, id, jqFilters);
        return localVarResp.getData();
    }

    /**
     * 
     * Document Detail with Fields
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @return ApiResponse&lt;DocumentsForUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsForUser> documentProjectProjectPkDocumentsIdGETWithHttpInfo(String projectPk, String id, Map<String, String> jqFilters) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdGETValidateBeforeCall(projectPk, id, jqFilters, null);
        Type localVarReturnType = new TypeToken<DocumentsForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Document Detail with Fields
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param jqFilters Filter params similar to JQWidgets grid filter params:                             filterscount&#x3D;1,                             filterdatafield0&#x3D;\&quot;a\&quot;,                             filtervalue0&#x3D;\&quot;b\&quot;,                             filtercondition0&#x3D;\&quot;CONTAINS\&quot;,                             filteroperator0&#x3D;1,                             sortdatafied&#x3D;\&quot;c\&quot;,                            sortorder&#x3D;\&quot;asc\&quot;                             (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdGETAsync(String projectPk, String id, Map<String, String> jqFilters, final ApiCallback<DocumentsForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdGETValidateBeforeCall(projectPk, id, jqFilters, _callback);
        Type localVarReturnType = new TypeToken<DocumentsForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsIdPATCH
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdPATCHCall(String projectPk, String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentDetail;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsIdPATCHValidateBeforeCall(String projectPk, String id, DocumentDetail documentDetail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsIdPATCH(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsIdPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdPATCHCall(projectPk, id, documentDetail, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return DocumentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentDetail documentProjectProjectPkDocumentsIdPATCH(String projectPk, String id, DocumentDetail documentDetail) throws ApiException {
        ApiResponse<DocumentDetail> localVarResp = documentProjectProjectPkDocumentsIdPATCHWithHttpInfo(projectPk, id, documentDetail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @return ApiResponse&lt;DocumentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentDetail> documentProjectProjectPkDocumentsIdPATCHWithHttpInfo(String projectPk, String id, DocumentDetail documentDetail) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdPATCHValidateBeforeCall(projectPk, id, documentDetail, null);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentDetail  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdPATCHAsync(String projectPk, String id, DocumentDetail documentDetail, final ApiCallback<DocumentDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdPATCHValidateBeforeCall(projectPk, id, documentDetail, _callback);
        Type localVarReturnType = new TypeToken<DocumentDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsIdPUT
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentsForUser  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdPUTCall(String projectPk, String id, DocumentsForUser documentsForUser, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentsForUser;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsIdPUTValidateBeforeCall(String projectPk, String id, DocumentsForUser documentsForUser, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsIdPUT(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsIdPUT(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdPUTCall(projectPk, id, documentsForUser, _callback);
        return localVarCall;

    }

    /**
     * 
     * Set new assignee OR document status
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentsForUser  (optional)
     * @return DocumentsForUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsForUser documentProjectProjectPkDocumentsIdPUT(String projectPk, String id, DocumentsForUser documentsForUser) throws ApiException {
        ApiResponse<DocumentsForUser> localVarResp = documentProjectProjectPkDocumentsIdPUTWithHttpInfo(projectPk, id, documentsForUser);
        return localVarResp.getData();
    }

    /**
     * 
     * Set new assignee OR document status
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentsForUser  (optional)
     * @return ApiResponse&lt;DocumentsForUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsForUser> documentProjectProjectPkDocumentsIdPUTWithHttpInfo(String projectPk, String id, DocumentsForUser documentsForUser) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdPUTValidateBeforeCall(projectPk, id, documentsForUser, null);
        Type localVarReturnType = new TypeToken<DocumentsForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set new assignee OR document status
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param documentsForUser  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdPUTAsync(String projectPk, String id, DocumentsForUser documentsForUser, final ApiCallback<DocumentsForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdPUTValidateBeforeCall(projectPk, id, documentsForUser, _callback);
        Type localVarReturnType = new TypeToken<DocumentsForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsIdShowGET
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param alt Get alternative document file if exists (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdShowGETCall(String projectPk, String id, Boolean alt, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/{id}/show/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsIdShowGETValidateBeforeCall(String projectPk, String id, Boolean alt, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsIdShowGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentProjectProjectPkDocumentsIdShowGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdShowGETCall(projectPk, id, alt, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param alt Get alternative document file if exists (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public File documentProjectProjectPkDocumentsIdShowGET(String projectPk, String id, Boolean alt) throws ApiException {
        ApiResponse<File> localVarResp = documentProjectProjectPkDocumentsIdShowGETWithHttpInfo(projectPk, id, alt);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param alt Get alternative document file if exists (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> documentProjectProjectPkDocumentsIdShowGETWithHttpInfo(String projectPk, String id, Boolean alt) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdShowGETValidateBeforeCall(projectPk, id, alt, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param id A unique integer value identifying this document. (required)
     * @param alt Get alternative document file if exists (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsIdShowGETAsync(String projectPk, String id, Boolean alt, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsIdShowGETValidateBeforeCall(projectPk, id, alt, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsMarkDeletePOST
     * @param projectPk  (required)
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsMarkDeletePOSTCall(String projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = markUnmarkForDeleteDocumentsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/mark_delete/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsMarkDeletePOSTValidateBeforeCall(String projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsMarkDeletePOST(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsMarkDeletePOSTCall(projectPk, markUnmarkForDeleteDocumentsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     * @param projectPk  (required)
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @return MarkUnmarkForDeleteDocumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MarkUnmarkForDeleteDocumentsResponse documentProjectProjectPkDocumentsMarkDeletePOST(String projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest) throws ApiException {
        ApiResponse<MarkUnmarkForDeleteDocumentsResponse> localVarResp = documentProjectProjectPkDocumentsMarkDeletePOSTWithHttpInfo(projectPk, markUnmarkForDeleteDocumentsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     * @param projectPk  (required)
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @return ApiResponse&lt;MarkUnmarkForDeleteDocumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarkUnmarkForDeleteDocumentsResponse> documentProjectProjectPkDocumentsMarkDeletePOSTWithHttpInfo(String projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsMarkDeletePOSTValidateBeforeCall(projectPk, markUnmarkForDeleteDocumentsRequest, null);
        Type localVarReturnType = new TypeToken<MarkUnmarkForDeleteDocumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Method marks a number of documents for deleting. These marked documents will become hidden in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     * @param projectPk  (required)
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsMarkDeletePOSTAsync(String projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest, final ApiCallback<MarkUnmarkForDeleteDocumentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsMarkDeletePOSTValidateBeforeCall(projectPk, markUnmarkForDeleteDocumentsRequest, _callback);
        Type localVarReturnType = new TypeToken<MarkUnmarkForDeleteDocumentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsPOST
     * @param projectPk  (required)
     * @param documentsForUser  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsPOSTCall(String projectPk, DocumentsForUser documentsForUser, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentsForUser;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsPOSTValidateBeforeCall(String projectPk, DocumentsForUser documentsForUser, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsPOST(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsPOSTCall(projectPk, documentsForUser, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentsForUser  (optional)
     * @return DocumentsForUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsForUser documentProjectProjectPkDocumentsPOST(String projectPk, DocumentsForUser documentsForUser) throws ApiException {
        ApiResponse<DocumentsForUser> localVarResp = documentProjectProjectPkDocumentsPOSTWithHttpInfo(projectPk, documentsForUser);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param projectPk  (required)
     * @param documentsForUser  (optional)
     * @return ApiResponse&lt;DocumentsForUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsForUser> documentProjectProjectPkDocumentsPOSTWithHttpInfo(String projectPk, DocumentsForUser documentsForUser) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsPOSTValidateBeforeCall(projectPk, documentsForUser, null);
        Type localVarReturnType = new TypeToken<DocumentsForUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectPk  (required)
     * @param documentsForUser  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsPOSTAsync(String projectPk, DocumentsForUser documentsForUser, final ApiCallback<DocumentsForUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsPOSTValidateBeforeCall(projectPk, documentsForUser, _callback);
        Type localVarReturnType = new TypeToken<DocumentsForUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentProjectProjectPkDocumentsUnmarkDeletePOST
     * @param projectPk  (required)
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsUnmarkDeletePOSTCall(String projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = markUnmarkForDeleteDocumentsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/document/project/{project_pk}/documents/unmark_delete/"
            .replaceAll("\\{" + "project_pk" + "\\}", localVarApiClient.escapeString(projectPk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentProjectProjectPkDocumentsUnmarkDeletePOSTValidateBeforeCall(String projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectPk' is set
        if (projectPk == null) {
            throw new ApiException("Missing the required parameter 'projectPk' when calling documentProjectProjectPkDocumentsUnmarkDeletePOST(Async)");
        }
        

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsUnmarkDeletePOSTCall(projectPk, markUnmarkForDeleteDocumentsRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     * @param projectPk  (required)
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @return MarkUnmarkForDeleteDocumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MarkUnmarkForDeleteDocumentsResponse documentProjectProjectPkDocumentsUnmarkDeletePOST(String projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest) throws ApiException {
        ApiResponse<MarkUnmarkForDeleteDocumentsResponse> localVarResp = documentProjectProjectPkDocumentsUnmarkDeletePOSTWithHttpInfo(projectPk, markUnmarkForDeleteDocumentsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     * @param projectPk  (required)
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @return ApiResponse&lt;MarkUnmarkForDeleteDocumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarkUnmarkForDeleteDocumentsResponse> documentProjectProjectPkDocumentsUnmarkDeletePOSTWithHttpInfo(String projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest) throws ApiException {
        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsUnmarkDeletePOSTValidateBeforeCall(projectPk, markUnmarkForDeleteDocumentsRequest, null);
        Type localVarReturnType = new TypeToken<MarkUnmarkForDeleteDocumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Method recovers documents, marked for deleting. These documents will become visible in API. :param request: provide a list of document ids here: document_ids: [...] :param kwargs: :return: OK or 404
     * @param projectPk  (required)
     * @param markUnmarkForDeleteDocumentsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentProjectProjectPkDocumentsUnmarkDeletePOSTAsync(String projectPk, MarkUnmarkForDeleteDocumentsRequest markUnmarkForDeleteDocumentsRequest, final ApiCallback<MarkUnmarkForDeleteDocumentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentProjectProjectPkDocumentsUnmarkDeletePOSTValidateBeforeCall(projectPk, markUnmarkForDeleteDocumentsRequest, _callback);
        Type localVarReturnType = new TypeToken<MarkUnmarkForDeleteDocumentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentStatsGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentStatsGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/stats/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentStatsGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentStatsGETCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> documentStatsGET() throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = documentStatsGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> documentStatsGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = documentStatsGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentStatsGETAsync(final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentStatsGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentTextunitsGET
     * @param q Search parameters for djangoQL (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentTextunitsGETCall(String q, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/textunits/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentTextunitsGETValidateBeforeCall(String q, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = documentTextunitsGETCall(q, _callback);
        return localVarCall;

    }

    /**
     * 
     * TextUnit List
     * @param q Search parameters for djangoQL (optional)
     * @return List&lt;TextUnitDjangoQL&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<TextUnitDjangoQL> documentTextunitsGET(String q) throws ApiException {
        ApiResponse<List<TextUnitDjangoQL>> localVarResp = documentTextunitsGETWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * TextUnit List
     * @param q Search parameters for djangoQL (optional)
     * @return ApiResponse&lt;List&lt;TextUnitDjangoQL&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TextUnitDjangoQL>> documentTextunitsGETWithHttpInfo(String q) throws ApiException {
        okhttp3.Call localVarCall = documentTextunitsGETValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<List<TextUnitDjangoQL>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * TextUnit List
     * @param q Search parameters for djangoQL (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentTextunitsGETAsync(String q, final ApiCallback<List<TextUnitDjangoQL>> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentTextunitsGETValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<List<TextUnitDjangoQL>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentTextunitsIdGET
     * @param id A unique integer value identifying this text unit. (required)
     * @param q Search parameters for djangoQL (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentTextunitsIdGETCall(String id, String q, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/document/textunits/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentTextunitsIdGETValidateBeforeCall(String id, String q, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentTextunitsIdGET(Async)");
        }
        

        okhttp3.Call localVarCall = documentTextunitsIdGETCall(id, q, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve TextUnit
     * @param id A unique integer value identifying this text unit. (required)
     * @param q Search parameters for djangoQL (optional)
     * @return TextUnitDjangoQL
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TextUnitDjangoQL documentTextunitsIdGET(String id, String q) throws ApiException {
        ApiResponse<TextUnitDjangoQL> localVarResp = documentTextunitsIdGETWithHttpInfo(id, q);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve TextUnit
     * @param id A unique integer value identifying this text unit. (required)
     * @param q Search parameters for djangoQL (optional)
     * @return ApiResponse&lt;TextUnitDjangoQL&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TextUnitDjangoQL> documentTextunitsIdGETWithHttpInfo(String id, String q) throws ApiException {
        okhttp3.Call localVarCall = documentTextunitsIdGETValidateBeforeCall(id, q, null);
        Type localVarReturnType = new TypeToken<TextUnitDjangoQL>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve TextUnit
     * @param id A unique integer value identifying this text unit. (required)
     * @param q Search parameters for djangoQL (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentTextunitsIdGETAsync(String id, String q, final ApiCallback<TextUnitDjangoQL> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentTextunitsIdGETValidateBeforeCall(id, q, _callback);
        Type localVarReturnType = new TypeToken<TextUnitDjangoQL>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
