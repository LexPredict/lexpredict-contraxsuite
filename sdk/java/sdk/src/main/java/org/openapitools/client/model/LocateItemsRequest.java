/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LocateItemsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class LocateItemsRequest {
  public static final String SERIALIZED_NAME_ITEMS_TO_LOCATE = "items_to_locate";
  @SerializedName(SERIALIZED_NAME_ITEMS_TO_LOCATE)
  private List<String> itemsToLocate = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Integer projectId;

  public static final String SERIALIZED_NAME_DELETE_EXISTING = "delete_existing";
  @SerializedName(SERIALIZED_NAME_DELETE_EXISTING)
  private Boolean deleteExisting;

  public static final String SERIALIZED_NAME_SEARCH_IN = "search_in";
  @SerializedName(SERIALIZED_NAME_SEARCH_IN)
  private List<String> searchIn = null;

  public static final String SERIALIZED_NAME_SELECTED_TAGS = "selected_tags";
  @SerializedName(SERIALIZED_NAME_SELECTED_TAGS)
  private List<String> selectedTags = null;

  public LocateItemsRequest() { 
  }

  public LocateItemsRequest itemsToLocate(List<String> itemsToLocate) {
    
    this.itemsToLocate = itemsToLocate;
    return this;
  }

  public LocateItemsRequest addItemsToLocateItem(String itemsToLocateItem) {
    this.itemsToLocate.add(itemsToLocateItem);
    return this;
  }

   /**
   * Get itemsToLocate
   * @return itemsToLocate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getItemsToLocate() {
    return itemsToLocate;
  }


  public void setItemsToLocate(List<String> itemsToLocate) {
    this.itemsToLocate = itemsToLocate;
  }


  public LocateItemsRequest projectId(Integer projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getProjectId() {
    return projectId;
  }


  public void setProjectId(Integer projectId) {
    this.projectId = projectId;
  }


  public LocateItemsRequest deleteExisting(Boolean deleteExisting) {
    
    this.deleteExisting = deleteExisting;
    return this;
  }

   /**
   * Get deleteExisting
   * @return deleteExisting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDeleteExisting() {
    return deleteExisting;
  }


  public void setDeleteExisting(Boolean deleteExisting) {
    this.deleteExisting = deleteExisting;
  }


  public LocateItemsRequest searchIn(List<String> searchIn) {
    
    this.searchIn = searchIn;
    return this;
  }

  public LocateItemsRequest addSearchInItem(String searchInItem) {
    if (this.searchIn == null) {
      this.searchIn = new ArrayList<>();
    }
    this.searchIn.add(searchInItem);
    return this;
  }

   /**
   * Get searchIn
   * @return searchIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSearchIn() {
    return searchIn;
  }


  public void setSearchIn(List<String> searchIn) {
    this.searchIn = searchIn;
  }


  public LocateItemsRequest selectedTags(List<String> selectedTags) {
    
    this.selectedTags = selectedTags;
    return this;
  }

  public LocateItemsRequest addSelectedTagsItem(String selectedTagsItem) {
    if (this.selectedTags == null) {
      this.selectedTags = new ArrayList<>();
    }
    this.selectedTags.add(selectedTagsItem);
    return this;
  }

   /**
   * Get selectedTags
   * @return selectedTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSelectedTags() {
    return selectedTags;
  }


  public void setSelectedTags(List<String> selectedTags) {
    this.selectedTags = selectedTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocateItemsRequest locateItemsRequest = (LocateItemsRequest) o;
    return Objects.equals(this.itemsToLocate, locateItemsRequest.itemsToLocate) &&
        Objects.equals(this.projectId, locateItemsRequest.projectId) &&
        Objects.equals(this.deleteExisting, locateItemsRequest.deleteExisting) &&
        Objects.equals(this.searchIn, locateItemsRequest.searchIn) &&
        Objects.equals(this.selectedTags, locateItemsRequest.selectedTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemsToLocate, projectId, deleteExisting, searchIn, selectedTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocateItemsRequest {\n");
    sb.append("    itemsToLocate: ").append(toIndentedString(itemsToLocate)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    deleteExisting: ").append(toIndentedString(deleteExisting)).append("\n");
    sb.append("    searchIn: ").append(toIndentedString(searchIn)).append("\n");
    sb.append("    selectedTags: ").append(toIndentedString(selectedTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("items_to_locate");
    openapiFields.add("project_id");
    openapiFields.add("delete_existing");
    openapiFields.add("search_in");
    openapiFields.add("selected_tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("items_to_locate");
    openapiRequiredFields.add("project_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LocateItemsRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (LocateItemsRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocateItemsRequest is not found in the empty JSON string", LocateItemsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LocateItemsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocateItemsRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LocateItemsRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("items_to_locate") != null && !jsonObj.get("items_to_locate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items_to_locate` to be an array in the JSON string but got `%s`", jsonObj.get("items_to_locate").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("search_in") != null && !jsonObj.get("search_in").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_in` to be an array in the JSON string but got `%s`", jsonObj.get("search_in").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("selected_tags") != null && !jsonObj.get("selected_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `selected_tags` to be an array in the JSON string but got `%s`", jsonObj.get("selected_tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocateItemsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocateItemsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocateItemsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocateItemsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LocateItemsRequest>() {
           @Override
           public void write(JsonWriter out, LocateItemsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocateItemsRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LocateItemsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LocateItemsRequest
  * @throws IOException if the JSON string is invalid with respect to LocateItemsRequest
  */
  public static LocateItemsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocateItemsRequest.class);
  }

 /**
  * Convert an instance of LocateItemsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

