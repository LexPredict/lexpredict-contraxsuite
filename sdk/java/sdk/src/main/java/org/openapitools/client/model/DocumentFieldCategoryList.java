/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.DocumentFieldCategoryListFieldsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentFieldCategoryList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class DocumentFieldCategoryList {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "document_type";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE_TITLE = "document_type_title";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE_TITLE)
  private String documentTypeTitle;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<DocumentFieldCategoryListFieldsInner> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELDS_NUMBER = "fields_number";
  @SerializedName(SERIALIZED_NAME_FIELDS_NUMBER)
  private Integer fieldsNumber;

  public static final String SERIALIZED_NAME_EXPORT_KEY = "export_key";
  @SerializedName(SERIALIZED_NAME_EXPORT_KEY)
  private UUID exportKey;

  public DocumentFieldCategoryList() { 
  }

  
  public DocumentFieldCategoryList(
     Integer id
  ) {
    this();
    this.id = id;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




  public DocumentFieldCategoryList documentType(String documentType) {
    
    this.documentType = documentType;
    return this;
  }

   /**
   * Get documentType
   * @return documentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getDocumentType() {
    return documentType;
  }


  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public DocumentFieldCategoryList documentTypeTitle(String documentTypeTitle) {
    
    this.documentTypeTitle = documentTypeTitle;
    return this;
  }

   /**
   * Get documentTypeTitle
   * @return documentTypeTitle
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDocumentTypeTitle() {
    return documentTypeTitle;
  }


  public void setDocumentTypeTitle(String documentTypeTitle) {
    this.documentTypeTitle = documentTypeTitle;
  }


  public DocumentFieldCategoryList name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public DocumentFieldCategoryList order(Integer order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * minimum: -2147483648
   * maximum: 2147483647
   * @return order
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getOrder() {
    return order;
  }


  public void setOrder(Integer order) {
    this.order = order;
  }


  public DocumentFieldCategoryList fields(List<DocumentFieldCategoryListFieldsInner> fields) {
    
    this.fields = fields;
    return this;
  }

  public DocumentFieldCategoryList addFieldsItem(DocumentFieldCategoryListFieldsInner fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<DocumentFieldCategoryListFieldsInner> getFields() {
    return fields;
  }


  public void setFields(List<DocumentFieldCategoryListFieldsInner> fields) {
    this.fields = fields;
  }


  public DocumentFieldCategoryList fieldsNumber(Integer fieldsNumber) {
    
    this.fieldsNumber = fieldsNumber;
    return this;
  }

   /**
   * Get fieldsNumber
   * @return fieldsNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getFieldsNumber() {
    return fieldsNumber;
  }


  public void setFieldsNumber(Integer fieldsNumber) {
    this.fieldsNumber = fieldsNumber;
  }


  public DocumentFieldCategoryList exportKey(UUID exportKey) {
    
    this.exportKey = exportKey;
    return this;
  }

   /**
   * Get exportKey
   * @return exportKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getExportKey() {
    return exportKey;
  }


  public void setExportKey(UUID exportKey) {
    this.exportKey = exportKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentFieldCategoryList documentFieldCategoryList = (DocumentFieldCategoryList) o;
    return Objects.equals(this.id, documentFieldCategoryList.id) &&
        Objects.equals(this.documentType, documentFieldCategoryList.documentType) &&
        Objects.equals(this.documentTypeTitle, documentFieldCategoryList.documentTypeTitle) &&
        Objects.equals(this.name, documentFieldCategoryList.name) &&
        Objects.equals(this.order, documentFieldCategoryList.order) &&
        Objects.equals(this.fields, documentFieldCategoryList.fields) &&
        Objects.equals(this.fieldsNumber, documentFieldCategoryList.fieldsNumber) &&
        Objects.equals(this.exportKey, documentFieldCategoryList.exportKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, documentType, documentTypeTitle, name, order, fields, fieldsNumber, exportKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentFieldCategoryList {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    documentTypeTitle: ").append(toIndentedString(documentTypeTitle)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    fieldsNumber: ").append(toIndentedString(fieldsNumber)).append("\n");
    sb.append("    exportKey: ").append(toIndentedString(exportKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("document_type");
    openapiFields.add("document_type_title");
    openapiFields.add("name");
    openapiFields.add("order");
    openapiFields.add("fields");
    openapiFields.add("fields_number");
    openapiFields.add("export_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("document_type");
    openapiRequiredFields.add("document_type_title");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("fields");
    openapiRequiredFields.add("fields_number");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DocumentFieldCategoryList
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (DocumentFieldCategoryList.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentFieldCategoryList is not found in the empty JSON string", DocumentFieldCategoryList.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DocumentFieldCategoryList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentFieldCategoryList` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentFieldCategoryList.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("document_type") != null && !jsonObj.get("document_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_type").toString()));
      }
      if (jsonObj.get("document_type_title") != null && !jsonObj.get("document_type_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_type_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_type_title").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
      if (jsonArrayfields != null) {
        // ensure the json data is an array
        if (!jsonObj.get("fields").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
        }

        // validate the optional field `fields` (array)
        for (int i = 0; i < jsonArrayfields.size(); i++) {
          DocumentFieldCategoryListFieldsInner.validateJsonObject(jsonArrayfields.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("export_key") != null && !jsonObj.get("export_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `export_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("export_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentFieldCategoryList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentFieldCategoryList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentFieldCategoryList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentFieldCategoryList.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentFieldCategoryList>() {
           @Override
           public void write(JsonWriter out, DocumentFieldCategoryList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentFieldCategoryList read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocumentFieldCategoryList given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocumentFieldCategoryList
  * @throws IOException if the JSON string is invalid with respect to DocumentFieldCategoryList
  */
  public static DocumentFieldCategoryList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentFieldCategoryList.class);
  }

 /**
  * Convert an instance of DocumentFieldCategoryList to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

