/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DocumentNoteDetailUser;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentNoteDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class DocumentNoteDetail {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private Integer pk;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private DocumentNoteDetailUser user;

  public static final String SERIALIZED_NAME_LOCATION_START = "location_start";
  @SerializedName(SERIALIZED_NAME_LOCATION_START)
  private Integer locationStart;

  public static final String SERIALIZED_NAME_LOCATION_END = "location_end";
  @SerializedName(SERIALIZED_NAME_LOCATION_END)
  private Integer locationEnd;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "document_id";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private Integer documentId;

  public static final String SERIALIZED_NAME_FIELD_VALUE_ID = "field_value_id";
  @SerializedName(SERIALIZED_NAME_FIELD_VALUE_ID)
  private Integer fieldValueId;

  public static final String SERIALIZED_NAME_FIELD_ID = "field_id";
  @SerializedName(SERIALIZED_NAME_FIELD_ID)
  private String fieldId;

  public static final String SERIALIZED_NAME_SELECTIONS = "selections";
  @SerializedName(SERIALIZED_NAME_SELECTIONS)
  private List<Object> selections = null;

  public DocumentNoteDetail() { 
  }

  
  public DocumentNoteDetail(
     Integer pk, 
     List<Object> selections
  ) {
    this();
    this.pk = pk;
    this.selections = selections;
  }

   /**
   * Get pk
   * @return pk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPk() {
    return pk;
  }




  public DocumentNoteDetail note(String note) {
    
    this.note = note;
    return this;
  }

   /**
   * Get note
   * @return note
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    this.note = note;
  }


  public DocumentNoteDetail timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public DocumentNoteDetail user(DocumentNoteDetailUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DocumentNoteDetailUser getUser() {
    return user;
  }


  public void setUser(DocumentNoteDetailUser user) {
    this.user = user;
  }


  public DocumentNoteDetail locationStart(Integer locationStart) {
    
    this.locationStart = locationStart;
    return this;
  }

   /**
   * Get locationStart
   * minimum: -2147483648
   * maximum: 2147483647
   * @return locationStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLocationStart() {
    return locationStart;
  }


  public void setLocationStart(Integer locationStart) {
    this.locationStart = locationStart;
  }


  public DocumentNoteDetail locationEnd(Integer locationEnd) {
    
    this.locationEnd = locationEnd;
    return this;
  }

   /**
   * Get locationEnd
   * minimum: -2147483648
   * maximum: 2147483647
   * @return locationEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLocationEnd() {
    return locationEnd;
  }


  public void setLocationEnd(Integer locationEnd) {
    this.locationEnd = locationEnd;
  }


  public DocumentNoteDetail documentId(Integer documentId) {
    
    this.documentId = documentId;
    return this;
  }

   /**
   * Get documentId
   * @return documentId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getDocumentId() {
    return documentId;
  }


  public void setDocumentId(Integer documentId) {
    this.documentId = documentId;
  }


  public DocumentNoteDetail fieldValueId(Integer fieldValueId) {
    
    this.fieldValueId = fieldValueId;
    return this;
  }

   /**
   * Get fieldValueId
   * @return fieldValueId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFieldValueId() {
    return fieldValueId;
  }


  public void setFieldValueId(Integer fieldValueId) {
    this.fieldValueId = fieldValueId;
  }


  public DocumentNoteDetail fieldId(String fieldId) {
    
    this.fieldId = fieldId;
    return this;
  }

   /**
   * Get fieldId
   * @return fieldId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFieldId() {
    return fieldId;
  }


  public void setFieldId(String fieldId) {
    this.fieldId = fieldId;
  }


   /**
   * Get selections
   * @return selections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Object> getSelections() {
    return selections;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentNoteDetail documentNoteDetail = (DocumentNoteDetail) o;
    return Objects.equals(this.pk, documentNoteDetail.pk) &&
        Objects.equals(this.note, documentNoteDetail.note) &&
        Objects.equals(this.timestamp, documentNoteDetail.timestamp) &&
        Objects.equals(this.user, documentNoteDetail.user) &&
        Objects.equals(this.locationStart, documentNoteDetail.locationStart) &&
        Objects.equals(this.locationEnd, documentNoteDetail.locationEnd) &&
        Objects.equals(this.documentId, documentNoteDetail.documentId) &&
        Objects.equals(this.fieldValueId, documentNoteDetail.fieldValueId) &&
        Objects.equals(this.fieldId, documentNoteDetail.fieldId) &&
        Objects.equals(this.selections, documentNoteDetail.selections);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, note, timestamp, user, locationStart, locationEnd, documentId, fieldValueId, fieldId, selections);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentNoteDetail {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    locationStart: ").append(toIndentedString(locationStart)).append("\n");
    sb.append("    locationEnd: ").append(toIndentedString(locationEnd)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    fieldValueId: ").append(toIndentedString(fieldValueId)).append("\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    selections: ").append(toIndentedString(selections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("note");
    openapiFields.add("timestamp");
    openapiFields.add("user");
    openapiFields.add("location_start");
    openapiFields.add("location_end");
    openapiFields.add("document_id");
    openapiFields.add("field_value_id");
    openapiFields.add("field_id");
    openapiFields.add("selections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("note");
    openapiRequiredFields.add("document_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DocumentNoteDetail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (DocumentNoteDetail.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentNoteDetail is not found in the empty JSON string", DocumentNoteDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DocumentNoteDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentNoteDetail` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentNoteDetail.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("note") != null && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.getAsJsonObject("user") != null) {
        DocumentNoteDetailUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
      if (jsonObj.get("field_id") != null && !jsonObj.get("field_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field_id").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("selections") != null && !jsonObj.get("selections").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `selections` to be an array in the JSON string but got `%s`", jsonObj.get("selections").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentNoteDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentNoteDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentNoteDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentNoteDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentNoteDetail>() {
           @Override
           public void write(JsonWriter out, DocumentNoteDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentNoteDetail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocumentNoteDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocumentNoteDetail
  * @throws IOException if the JSON string is invalid with respect to DocumentNoteDetail
  */
  public static DocumentNoteDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentNoteDetail.class);
  }

 /**
  * Convert an instance of DocumentNoteDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

