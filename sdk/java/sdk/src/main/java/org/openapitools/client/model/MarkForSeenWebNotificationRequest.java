/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MarkForSeenWebNotificationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class MarkForSeenWebNotificationRequest {
  public static final String SERIALIZED_NAME_NOTIFICATION_IDS = "notification_ids";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_IDS)
  private List<Integer> notificationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_SEEN = "is_seen";
  @SerializedName(SERIALIZED_NAME_IS_SEEN)
  private Boolean isSeen;

  public MarkForSeenWebNotificationRequest() { 
  }

  public MarkForSeenWebNotificationRequest notificationIds(List<Integer> notificationIds) {
    
    this.notificationIds = notificationIds;
    return this;
  }

  public MarkForSeenWebNotificationRequest addNotificationIdsItem(Integer notificationIdsItem) {
    this.notificationIds.add(notificationIdsItem);
    return this;
  }

   /**
   * Get notificationIds
   * @return notificationIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Integer> getNotificationIds() {
    return notificationIds;
  }


  public void setNotificationIds(List<Integer> notificationIds) {
    this.notificationIds = notificationIds;
  }


  public MarkForSeenWebNotificationRequest isSeen(Boolean isSeen) {
    
    this.isSeen = isSeen;
    return this;
  }

   /**
   * Get isSeen
   * @return isSeen
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsSeen() {
    return isSeen;
  }


  public void setIsSeen(Boolean isSeen) {
    this.isSeen = isSeen;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarkForSeenWebNotificationRequest markForSeenWebNotificationRequest = (MarkForSeenWebNotificationRequest) o;
    return Objects.equals(this.notificationIds, markForSeenWebNotificationRequest.notificationIds) &&
        Objects.equals(this.isSeen, markForSeenWebNotificationRequest.isSeen);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notificationIds, isSeen);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarkForSeenWebNotificationRequest {\n");
    sb.append("    notificationIds: ").append(toIndentedString(notificationIds)).append("\n");
    sb.append("    isSeen: ").append(toIndentedString(isSeen)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("notification_ids");
    openapiFields.add("is_seen");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("notification_ids");
    openapiRequiredFields.add("is_seen");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MarkForSeenWebNotificationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (MarkForSeenWebNotificationRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarkForSeenWebNotificationRequest is not found in the empty JSON string", MarkForSeenWebNotificationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MarkForSeenWebNotificationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarkForSeenWebNotificationRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MarkForSeenWebNotificationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("notification_ids") != null && !jsonObj.get("notification_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_ids` to be an array in the JSON string but got `%s`", jsonObj.get("notification_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarkForSeenWebNotificationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarkForSeenWebNotificationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarkForSeenWebNotificationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarkForSeenWebNotificationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MarkForSeenWebNotificationRequest>() {
           @Override
           public void write(JsonWriter out, MarkForSeenWebNotificationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarkForSeenWebNotificationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarkForSeenWebNotificationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarkForSeenWebNotificationRequest
  * @throws IOException if the JSON string is invalid with respect to MarkForSeenWebNotificationRequest
  */
  public static MarkForSeenWebNotificationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarkForSeenWebNotificationRequest.class);
  }

 /**
  * Convert an instance of MarkForSeenWebNotificationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

