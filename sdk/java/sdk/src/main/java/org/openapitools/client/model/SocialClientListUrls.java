/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SocialClientListUrls
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class SocialClientListUrls {
  public static final String SERIALIZED_NAME_AUTHORIZE_URL = "authorize_url";
  @SerializedName(SERIALIZED_NAME_AUTHORIZE_URL)
  private URI authorizeUrl;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_URL = "access_token_url";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_URL)
  private URI accessTokenUrl;

  public static final String SERIALIZED_NAME_PROFILE_URL = "profile_url";
  @SerializedName(SERIALIZED_NAME_PROFILE_URL)
  private URI profileUrl;

  public static final String SERIALIZED_NAME_LOGIN_URL = "login_url";
  @SerializedName(SERIALIZED_NAME_LOGIN_URL)
  private URI loginUrl;

  public SocialClientListUrls() { 
  }

  public SocialClientListUrls authorizeUrl(URI authorizeUrl) {
    
    this.authorizeUrl = authorizeUrl;
    return this;
  }

   /**
   * Get authorizeUrl
   * @return authorizeUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public URI getAuthorizeUrl() {
    return authorizeUrl;
  }


  public void setAuthorizeUrl(URI authorizeUrl) {
    this.authorizeUrl = authorizeUrl;
  }


  public SocialClientListUrls accessTokenUrl(URI accessTokenUrl) {
    
    this.accessTokenUrl = accessTokenUrl;
    return this;
  }

   /**
   * Get accessTokenUrl
   * @return accessTokenUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public URI getAccessTokenUrl() {
    return accessTokenUrl;
  }


  public void setAccessTokenUrl(URI accessTokenUrl) {
    this.accessTokenUrl = accessTokenUrl;
  }


  public SocialClientListUrls profileUrl(URI profileUrl) {
    
    this.profileUrl = profileUrl;
    return this;
  }

   /**
   * Get profileUrl
   * @return profileUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public URI getProfileUrl() {
    return profileUrl;
  }


  public void setProfileUrl(URI profileUrl) {
    this.profileUrl = profileUrl;
  }


  public SocialClientListUrls loginUrl(URI loginUrl) {
    
    this.loginUrl = loginUrl;
    return this;
  }

   /**
   * Get loginUrl
   * @return loginUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public URI getLoginUrl() {
    return loginUrl;
  }


  public void setLoginUrl(URI loginUrl) {
    this.loginUrl = loginUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SocialClientListUrls socialClientListUrls = (SocialClientListUrls) o;
    return Objects.equals(this.authorizeUrl, socialClientListUrls.authorizeUrl) &&
        Objects.equals(this.accessTokenUrl, socialClientListUrls.accessTokenUrl) &&
        Objects.equals(this.profileUrl, socialClientListUrls.profileUrl) &&
        Objects.equals(this.loginUrl, socialClientListUrls.loginUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizeUrl, accessTokenUrl, profileUrl, loginUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SocialClientListUrls {\n");
    sb.append("    authorizeUrl: ").append(toIndentedString(authorizeUrl)).append("\n");
    sb.append("    accessTokenUrl: ").append(toIndentedString(accessTokenUrl)).append("\n");
    sb.append("    profileUrl: ").append(toIndentedString(profileUrl)).append("\n");
    sb.append("    loginUrl: ").append(toIndentedString(loginUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorize_url");
    openapiFields.add("access_token_url");
    openapiFields.add("profile_url");
    openapiFields.add("login_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorize_url");
    openapiRequiredFields.add("access_token_url");
    openapiRequiredFields.add("profile_url");
    openapiRequiredFields.add("login_url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SocialClientListUrls
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SocialClientListUrls.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SocialClientListUrls is not found in the empty JSON string", SocialClientListUrls.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SocialClientListUrls.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SocialClientListUrls` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SocialClientListUrls.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("authorize_url") != null && !jsonObj.get("authorize_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorize_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorize_url").toString()));
      }
      if (jsonObj.get("access_token_url") != null && !jsonObj.get("access_token_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token_url").toString()));
      }
      if (jsonObj.get("profile_url") != null && !jsonObj.get("profile_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_url").toString()));
      }
      if (jsonObj.get("login_url") != null && !jsonObj.get("login_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SocialClientListUrls.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SocialClientListUrls' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SocialClientListUrls> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SocialClientListUrls.class));

       return (TypeAdapter<T>) new TypeAdapter<SocialClientListUrls>() {
           @Override
           public void write(JsonWriter out, SocialClientListUrls value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SocialClientListUrls read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SocialClientListUrls given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SocialClientListUrls
  * @throws IOException if the JSON string is invalid with respect to SocialClientListUrls
  */
  public static SocialClientListUrls fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SocialClientListUrls.class);
  }

 /**
  * Convert an instance of SocialClientListUrls to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

