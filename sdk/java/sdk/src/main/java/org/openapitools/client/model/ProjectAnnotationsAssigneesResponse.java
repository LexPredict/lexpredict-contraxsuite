/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectAnnotationsAssigneesResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class ProjectAnnotationsAssigneesResponse {
  public static final String SERIALIZED_NAME_ASSIGNEE_ID = "assignee_id";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_ID)
  private Integer assigneeId;

  public static final String SERIALIZED_NAME_ASSIGNEE_NAME = "assignee_name";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_NAME)
  private String assigneeName;

  public static final String SERIALIZED_NAME_ANNOTATIONS_COUNT = "annotations_count";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS_COUNT)
  private Integer annotationsCount;

  public static final String SERIALIZED_NAME_ANNOTATION_UIDS = "annotation_uids";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_UIDS)
  private List<UUID> annotationUids = new ArrayList<>();

  public ProjectAnnotationsAssigneesResponse() { 
  }

  public ProjectAnnotationsAssigneesResponse assigneeId(Integer assigneeId) {
    
    this.assigneeId = assigneeId;
    return this;
  }

   /**
   * Get assigneeId
   * @return assigneeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getAssigneeId() {
    return assigneeId;
  }


  public void setAssigneeId(Integer assigneeId) {
    this.assigneeId = assigneeId;
  }


  public ProjectAnnotationsAssigneesResponse assigneeName(String assigneeName) {
    
    this.assigneeName = assigneeName;
    return this;
  }

   /**
   * Get assigneeName
   * @return assigneeName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAssigneeName() {
    return assigneeName;
  }


  public void setAssigneeName(String assigneeName) {
    this.assigneeName = assigneeName;
  }


  public ProjectAnnotationsAssigneesResponse annotationsCount(Integer annotationsCount) {
    
    this.annotationsCount = annotationsCount;
    return this;
  }

   /**
   * Get annotationsCount
   * @return annotationsCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getAnnotationsCount() {
    return annotationsCount;
  }


  public void setAnnotationsCount(Integer annotationsCount) {
    this.annotationsCount = annotationsCount;
  }


  public ProjectAnnotationsAssigneesResponse annotationUids(List<UUID> annotationUids) {
    
    this.annotationUids = annotationUids;
    return this;
  }

  public ProjectAnnotationsAssigneesResponse addAnnotationUidsItem(UUID annotationUidsItem) {
    this.annotationUids.add(annotationUidsItem);
    return this;
  }

   /**
   * Get annotationUids
   * @return annotationUids
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<UUID> getAnnotationUids() {
    return annotationUids;
  }


  public void setAnnotationUids(List<UUID> annotationUids) {
    this.annotationUids = annotationUids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectAnnotationsAssigneesResponse projectAnnotationsAssigneesResponse = (ProjectAnnotationsAssigneesResponse) o;
    return Objects.equals(this.assigneeId, projectAnnotationsAssigneesResponse.assigneeId) &&
        Objects.equals(this.assigneeName, projectAnnotationsAssigneesResponse.assigneeName) &&
        Objects.equals(this.annotationsCount, projectAnnotationsAssigneesResponse.annotationsCount) &&
        Objects.equals(this.annotationUids, projectAnnotationsAssigneesResponse.annotationUids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assigneeId, assigneeName, annotationsCount, annotationUids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectAnnotationsAssigneesResponse {\n");
    sb.append("    assigneeId: ").append(toIndentedString(assigneeId)).append("\n");
    sb.append("    assigneeName: ").append(toIndentedString(assigneeName)).append("\n");
    sb.append("    annotationsCount: ").append(toIndentedString(annotationsCount)).append("\n");
    sb.append("    annotationUids: ").append(toIndentedString(annotationUids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignee_id");
    openapiFields.add("assignee_name");
    openapiFields.add("annotations_count");
    openapiFields.add("annotation_uids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assignee_id");
    openapiRequiredFields.add("assignee_name");
    openapiRequiredFields.add("annotations_count");
    openapiRequiredFields.add("annotation_uids");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProjectAnnotationsAssigneesResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ProjectAnnotationsAssigneesResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectAnnotationsAssigneesResponse is not found in the empty JSON string", ProjectAnnotationsAssigneesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProjectAnnotationsAssigneesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectAnnotationsAssigneesResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectAnnotationsAssigneesResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("assignee_name") != null && !jsonObj.get("assignee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignee_name").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("annotation_uids") != null && !jsonObj.get("annotation_uids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotation_uids` to be an array in the JSON string but got `%s`", jsonObj.get("annotation_uids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectAnnotationsAssigneesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectAnnotationsAssigneesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectAnnotationsAssigneesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectAnnotationsAssigneesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectAnnotationsAssigneesResponse>() {
           @Override
           public void write(JsonWriter out, ProjectAnnotationsAssigneesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectAnnotationsAssigneesResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProjectAnnotationsAssigneesResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProjectAnnotationsAssigneesResponse
  * @throws IOException if the JSON string is invalid with respect to ProjectAnnotationsAssigneesResponse
  */
  public static ProjectAnnotationsAssigneesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectAnnotationsAssigneesResponse.class);
  }

 /**
  * Convert an instance of ProjectAnnotationsAssigneesResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

