/*
 * Contraxsuite API
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentFieldAnnotation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-16T11:43:26.677726+03:00[Europe/Moscow]")
public class DocumentFieldAnnotation {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private Integer pk;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private UUID uid;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Integer projectId;

  public static final String SERIALIZED_NAME_PROJECT_NAME = "project_name";
  @SerializedName(SERIALIZED_NAME_PROJECT_NAME)
  private String projectName;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "document_id";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private String documentId;

  public static final String SERIALIZED_NAME_DOCUMENT_NAME = "document_name";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NAME)
  private String documentName;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "document_type";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_DOCUMENT_STATUS = "document_status";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_STATUS)
  private String documentStatus;

  public static final String SERIALIZED_NAME_FIELD_ID = "field_id";
  @SerializedName(SERIALIZED_NAME_FIELD_ID)
  private String fieldId;

  public static final String SERIALIZED_NAME_FIELD_NAME = "field_name";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Object value;

  public static final String SERIALIZED_NAME_LOCATION_START = "location_start";
  @SerializedName(SERIALIZED_NAME_LOCATION_START)
  private Integer locationStart;

  public static final String SERIALIZED_NAME_LOCATION_END = "location_end";
  @SerializedName(SERIALIZED_NAME_LOCATION_END)
  private Integer locationEnd;

  public static final String SERIALIZED_NAME_LOCATION_TEXT = "location_text";
  @SerializedName(SERIALIZED_NAME_LOCATION_TEXT)
  private String locationText;

  public static final String SERIALIZED_NAME_ASSIGNEE_ID = "assignee_id";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_ID)
  private Integer assigneeId;

  public static final String SERIALIZED_NAME_ASSIGN_DATE = "assign_date";
  @SerializedName(SERIALIZED_NAME_ASSIGN_DATE)
  private OffsetDateTime assignDate;

  public static final String SERIALIZED_NAME_STATUS_ID = "status_id";
  @SerializedName(SERIALIZED_NAME_STATUS_ID)
  private Integer statusId;

  public static final String SERIALIZED_NAME_STATUS_NAME = "status_name";
  @SerializedName(SERIALIZED_NAME_STATUS_NAME)
  private String statusName;

  public static final String SERIALIZED_NAME_ASSIGNEE_NAME = "assignee_name";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_NAME)
  private String assigneeName;

  public static final String SERIALIZED_NAME_MODIFIED_BY_ID = "modified_by_id";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY_ID)
  private String modifiedById;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modified_date";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private OffsetDateTime modifiedDate;

  public DocumentFieldAnnotation() { 
  }

  
  public DocumentFieldAnnotation(
     Integer pk, 
     UUID uid, 
     Integer projectId, 
     String projectName, 
     String documentId, 
     String documentName, 
     String documentType, 
     String documentStatus, 
     String fieldId, 
     String fieldName, 
     String statusName, 
     String assigneeName, 
     String modifiedById, 
     OffsetDateTime modifiedDate
  ) {
    this();
    this.pk = pk;
    this.uid = uid;
    this.projectId = projectId;
    this.projectName = projectName;
    this.documentId = documentId;
    this.documentName = documentName;
    this.documentType = documentType;
    this.documentStatus = documentStatus;
    this.fieldId = fieldId;
    this.fieldName = fieldName;
    this.statusName = statusName;
    this.assigneeName = assigneeName;
    this.modifiedById = modifiedById;
    this.modifiedDate = modifiedDate;
  }

   /**
   * Get pk
   * @return pk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPk() {
    return pk;
  }




   /**
   * Get uid
   * @return uid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getUid() {
    return uid;
  }




   /**
   * Get projectId
   * @return projectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getProjectId() {
    return projectId;
  }




   /**
   * Get projectName
   * @return projectName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProjectName() {
    return projectName;
  }




   /**
   * Get documentId
   * @return documentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDocumentId() {
    return documentId;
  }




   /**
   * Get documentName
   * @return documentName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDocumentName() {
    return documentName;
  }




   /**
   * Get documentType
   * @return documentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDocumentType() {
    return documentType;
  }




   /**
   * Get documentStatus
   * @return documentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDocumentStatus() {
    return documentStatus;
  }




   /**
   * Get fieldId
   * @return fieldId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFieldId() {
    return fieldId;
  }




   /**
   * Get fieldName
   * @return fieldName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFieldName() {
    return fieldName;
  }




  public DocumentFieldAnnotation value(Object value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getValue() {
    return value;
  }


  public void setValue(Object value) {
    this.value = value;
  }


  public DocumentFieldAnnotation locationStart(Integer locationStart) {
    
    this.locationStart = locationStart;
    return this;
  }

   /**
   * Get locationStart
   * minimum: 0
   * maximum: 2147483647
   * @return locationStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLocationStart() {
    return locationStart;
  }


  public void setLocationStart(Integer locationStart) {
    this.locationStart = locationStart;
  }


  public DocumentFieldAnnotation locationEnd(Integer locationEnd) {
    
    this.locationEnd = locationEnd;
    return this;
  }

   /**
   * Get locationEnd
   * minimum: 0
   * maximum: 2147483647
   * @return locationEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLocationEnd() {
    return locationEnd;
  }


  public void setLocationEnd(Integer locationEnd) {
    this.locationEnd = locationEnd;
  }


  public DocumentFieldAnnotation locationText(String locationText) {
    
    this.locationText = locationText;
    return this;
  }

   /**
   * Get locationText
   * @return locationText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocationText() {
    return locationText;
  }


  public void setLocationText(String locationText) {
    this.locationText = locationText;
  }


  public DocumentFieldAnnotation assigneeId(Integer assigneeId) {
    
    this.assigneeId = assigneeId;
    return this;
  }

   /**
   * Get assigneeId
   * @return assigneeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getAssigneeId() {
    return assigneeId;
  }


  public void setAssigneeId(Integer assigneeId) {
    this.assigneeId = assigneeId;
  }


  public DocumentFieldAnnotation assignDate(OffsetDateTime assignDate) {
    
    this.assignDate = assignDate;
    return this;
  }

   /**
   * Get assignDate
   * @return assignDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getAssignDate() {
    return assignDate;
  }


  public void setAssignDate(OffsetDateTime assignDate) {
    this.assignDate = assignDate;
  }


  public DocumentFieldAnnotation statusId(Integer statusId) {
    
    this.statusId = statusId;
    return this;
  }

   /**
   * Get statusId
   * @return statusId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getStatusId() {
    return statusId;
  }


  public void setStatusId(Integer statusId) {
    this.statusId = statusId;
  }


   /**
   * Get statusName
   * @return statusName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatusName() {
    return statusName;
  }




   /**
   * Get assigneeName
   * @return assigneeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAssigneeName() {
    return assigneeName;
  }




   /**
   * Get modifiedById
   * @return modifiedById
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getModifiedById() {
    return modifiedById;
  }




   /**
   * Get modifiedDate
   * @return modifiedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentFieldAnnotation documentFieldAnnotation = (DocumentFieldAnnotation) o;
    return Objects.equals(this.pk, documentFieldAnnotation.pk) &&
        Objects.equals(this.uid, documentFieldAnnotation.uid) &&
        Objects.equals(this.projectId, documentFieldAnnotation.projectId) &&
        Objects.equals(this.projectName, documentFieldAnnotation.projectName) &&
        Objects.equals(this.documentId, documentFieldAnnotation.documentId) &&
        Objects.equals(this.documentName, documentFieldAnnotation.documentName) &&
        Objects.equals(this.documentType, documentFieldAnnotation.documentType) &&
        Objects.equals(this.documentStatus, documentFieldAnnotation.documentStatus) &&
        Objects.equals(this.fieldId, documentFieldAnnotation.fieldId) &&
        Objects.equals(this.fieldName, documentFieldAnnotation.fieldName) &&
        Objects.equals(this.value, documentFieldAnnotation.value) &&
        Objects.equals(this.locationStart, documentFieldAnnotation.locationStart) &&
        Objects.equals(this.locationEnd, documentFieldAnnotation.locationEnd) &&
        Objects.equals(this.locationText, documentFieldAnnotation.locationText) &&
        Objects.equals(this.assigneeId, documentFieldAnnotation.assigneeId) &&
        Objects.equals(this.assignDate, documentFieldAnnotation.assignDate) &&
        Objects.equals(this.statusId, documentFieldAnnotation.statusId) &&
        Objects.equals(this.statusName, documentFieldAnnotation.statusName) &&
        Objects.equals(this.assigneeName, documentFieldAnnotation.assigneeName) &&
        Objects.equals(this.modifiedById, documentFieldAnnotation.modifiedById) &&
        Objects.equals(this.modifiedDate, documentFieldAnnotation.modifiedDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, uid, projectId, projectName, documentId, documentName, documentType, documentStatus, fieldId, fieldName, value, locationStart, locationEnd, locationText, assigneeId, assignDate, statusId, statusName, assigneeName, modifiedById, modifiedDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentFieldAnnotation {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    documentName: ").append(toIndentedString(documentName)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    documentStatus: ").append(toIndentedString(documentStatus)).append("\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    locationStart: ").append(toIndentedString(locationStart)).append("\n");
    sb.append("    locationEnd: ").append(toIndentedString(locationEnd)).append("\n");
    sb.append("    locationText: ").append(toIndentedString(locationText)).append("\n");
    sb.append("    assigneeId: ").append(toIndentedString(assigneeId)).append("\n");
    sb.append("    assignDate: ").append(toIndentedString(assignDate)).append("\n");
    sb.append("    statusId: ").append(toIndentedString(statusId)).append("\n");
    sb.append("    statusName: ").append(toIndentedString(statusName)).append("\n");
    sb.append("    assigneeName: ").append(toIndentedString(assigneeName)).append("\n");
    sb.append("    modifiedById: ").append(toIndentedString(modifiedById)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("uid");
    openapiFields.add("project_id");
    openapiFields.add("project_name");
    openapiFields.add("document_id");
    openapiFields.add("document_name");
    openapiFields.add("document_type");
    openapiFields.add("document_status");
    openapiFields.add("field_id");
    openapiFields.add("field_name");
    openapiFields.add("value");
    openapiFields.add("location_start");
    openapiFields.add("location_end");
    openapiFields.add("location_text");
    openapiFields.add("assignee_id");
    openapiFields.add("assign_date");
    openapiFields.add("status_id");
    openapiFields.add("status_name");
    openapiFields.add("assignee_name");
    openapiFields.add("modified_by_id");
    openapiFields.add("modified_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assignee_id");
    openapiRequiredFields.add("status_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DocumentFieldAnnotation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (DocumentFieldAnnotation.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentFieldAnnotation is not found in the empty JSON string", DocumentFieldAnnotation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DocumentFieldAnnotation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentFieldAnnotation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentFieldAnnotation.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if (jsonObj.get("project_name") != null && !jsonObj.get("project_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_name").toString()));
      }
      if (jsonObj.get("document_id") != null && !jsonObj.get("document_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_id").toString()));
      }
      if (jsonObj.get("document_name") != null && !jsonObj.get("document_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_name").toString()));
      }
      if (jsonObj.get("document_type") != null && !jsonObj.get("document_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_type").toString()));
      }
      if (jsonObj.get("document_status") != null && !jsonObj.get("document_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_status").toString()));
      }
      if (jsonObj.get("field_id") != null && !jsonObj.get("field_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field_id").toString()));
      }
      if (jsonObj.get("field_name") != null && !jsonObj.get("field_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field_name").toString()));
      }
      if (jsonObj.get("location_text") != null && !jsonObj.get("location_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_text").toString()));
      }
      if (jsonObj.get("status_name") != null && !jsonObj.get("status_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_name").toString()));
      }
      if (jsonObj.get("assignee_name") != null && !jsonObj.get("assignee_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignee_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignee_name").toString()));
      }
      if (jsonObj.get("modified_by_id") != null && !jsonObj.get("modified_by_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_by_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_by_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentFieldAnnotation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentFieldAnnotation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentFieldAnnotation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentFieldAnnotation.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentFieldAnnotation>() {
           @Override
           public void write(JsonWriter out, DocumentFieldAnnotation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentFieldAnnotation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocumentFieldAnnotation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocumentFieldAnnotation
  * @throws IOException if the JSON string is invalid with respect to DocumentFieldAnnotation
  */
  public static DocumentFieldAnnotation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentFieldAnnotation.class);
  }

 /**
  * Convert an instance of DocumentFieldAnnotation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

