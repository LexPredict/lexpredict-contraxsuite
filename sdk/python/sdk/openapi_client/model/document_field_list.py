"""
    Contraxsuite API

    Contraxsuite API  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.document_field_list_category import DocumentFieldListCategory
    from openapi_client.model.document_field_list_family import DocumentFieldListFamily
    globals()['DocumentFieldListCategory'] = DocumentFieldListCategory
    globals()['DocumentFieldListFamily'] = DocumentFieldListFamily


class DocumentFieldList(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('type',): {
            'ADDRESS': "address",
            'CHOICE': "choice",
            'COMPANY': "company",
            'DATE': "date",
            'DATE_RECURRING': "date_recurring",
            'DATETIME': "datetime",
            'DURATION': "duration",
            'FLOAT': "float",
            'GEOGRAPHY': "geography",
            'INT': "int",
            'LINKED_DOCUMENTS': "linked_documents",
            'MONEY': "money",
            'MULTI_CHOICE': "multi_choice",
            'PERCENT': "percent",
            'PERSON': "person",
            'RATIO': "ratio",
            'RELATED_INFO': "related_info",
            'STRING': "string",
            'STRING_NO_WORD_WRAP': "string_no_word_wrap",
            'TEXT': "text",
        },
        ('text_unit_type',): {
            'SENTENCE': "sentence",
            'PARAGRAPH': "paragraph",
            'SECTION': "section",
        },
        ('value_detection_strategy',): {
            'DISABLED': "disabled",
            'USE_REGEXPS_ONLY': "use_regexps_only",
            'USE_FORMULA_ONLY': "use_formula_only",
            'REGEXP_TABLE': "regexp_table",
            'TEXT_BASED_ML_ONLY': "text_based_ml_only",
            'FIELDS_BASED_ML_ONLY': "fields_based_ml_only",
            'FIELDS_BASED_PROB_ML_ONLY': "fields_based_prob_ml_only",
            'FIELD_BASED_REGEXPS': "field_based_regexps",
            'MLFLOW_MODEL': "mlflow_model",
        },
        ('confidence',): {
            'None': None,
            'HIGH': "High",
            'MEDIUM': "Medium",
            'LOW': "Low",
        },
    }

    validations = {
        ('code',): {
            'max_length': 50,
        },
        ('title',): {
            'max_length': 100,
        },
        ('long_code',): {
            'max_length': 150,
        },
        ('order',): {
            'inclusive_maximum': 32767,
            'inclusive_minimum': 0,
        },
        ('trained_after_documents_number',): {
            'inclusive_maximum': 2147483647,
            'inclusive_minimum': 1,
        },
        ('unsure_choice_value',): {
            'max_length': 256,
        },
        ('mlflow_model_uri',): {
            'max_length': 1024,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'document_type': (str,),  # noqa: E501
            'code': (str,),  # noqa: E501
            'title': (str,),  # noqa: E501
            'uid': (str,),  # noqa: E501
            'long_code': (str,),  # noqa: E501
            'description': (str, none_type,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'text_unit_type': (str,),  # noqa: E501
            'value_detection_strategy': (str,),  # noqa: E501
            'classifier_init_script': (str, none_type,),  # noqa: E501
            'formula': (str, none_type,),  # noqa: E501
            'convert_decimals_to_floats_in_formula_args': (bool,),  # noqa: E501
            'value_regexp': (str, none_type,),  # noqa: E501
            'depends_on_fields': ([str],),  # noqa: E501
            'value_detection_strategy_name': (str,),  # noqa: E501
            'confidence': (str, none_type,),  # noqa: E501
            'requires_text_annotations': (bool,),  # noqa: E501
            'read_only': (bool,),  # noqa: E501
            'category': (DocumentFieldListCategory,),  # noqa: E501
            'family': (DocumentFieldListFamily,),  # noqa: E501
            'default_value': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'choices': ([str],),  # noqa: E501
            'allow_values_not_specified_in_choices': (bool,),  # noqa: E501
            'metadata': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'training_finished': (bool,),  # noqa: E501
            'dirty': (bool,),  # noqa: E501
            'order': (int,),  # noqa: E501
            'trained_after_documents_number': (int,),  # noqa: E501
            'hidden_always': (bool,),  # noqa: E501
            'hide_until_python': (str, none_type,),  # noqa: E501
            'hide_until_js': (str, none_type,),  # noqa: E501
            'is_value_detection_strategy_disabled': (bool,),  # noqa: E501
            'display_yes_no': (bool,),  # noqa: E501
            'value_aware': (bool,),  # noqa: E501
            'created_by__name': (str,),  # noqa: E501
            'modified_by__name': (str,),  # noqa: E501
            'created_date': (datetime,),  # noqa: E501
            'modified_date': (datetime,),  # noqa: E501
            'vectorizer_stop_words': (str, none_type,),  # noqa: E501
            'unsure_choice_value': (str, none_type,),  # noqa: E501
            'unsure_thresholds_by_value': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'mlflow_model_uri': (str, none_type,),  # noqa: E501
            'mlflow_detect_on_document_level': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'document_type': 'document_type',  # noqa: E501
        'code': 'code',  # noqa: E501
        'title': 'title',  # noqa: E501
        'uid': 'uid',  # noqa: E501
        'long_code': 'long_code',  # noqa: E501
        'description': 'description',  # noqa: E501
        'type': 'type',  # noqa: E501
        'text_unit_type': 'text_unit_type',  # noqa: E501
        'value_detection_strategy': 'value_detection_strategy',  # noqa: E501
        'classifier_init_script': 'classifier_init_script',  # noqa: E501
        'formula': 'formula',  # noqa: E501
        'convert_decimals_to_floats_in_formula_args': 'convert_decimals_to_floats_in_formula_args',  # noqa: E501
        'value_regexp': 'value_regexp',  # noqa: E501
        'depends_on_fields': 'depends_on_fields',  # noqa: E501
        'value_detection_strategy_name': 'value_detection_strategy_name',  # noqa: E501
        'confidence': 'confidence',  # noqa: E501
        'requires_text_annotations': 'requires_text_annotations',  # noqa: E501
        'read_only': 'read_only',  # noqa: E501
        'category': 'category',  # noqa: E501
        'family': 'family',  # noqa: E501
        'default_value': 'default_value',  # noqa: E501
        'choices': 'choices',  # noqa: E501
        'allow_values_not_specified_in_choices': 'allow_values_not_specified_in_choices',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'training_finished': 'training_finished',  # noqa: E501
        'dirty': 'dirty',  # noqa: E501
        'order': 'order',  # noqa: E501
        'trained_after_documents_number': 'trained_after_documents_number',  # noqa: E501
        'hidden_always': 'hidden_always',  # noqa: E501
        'hide_until_python': 'hide_until_python',  # noqa: E501
        'hide_until_js': 'hide_until_js',  # noqa: E501
        'is_value_detection_strategy_disabled': 'is_value_detection_strategy_disabled',  # noqa: E501
        'display_yes_no': 'display_yes_no',  # noqa: E501
        'value_aware': 'value_aware',  # noqa: E501
        'created_by__name': 'created_by__name',  # noqa: E501
        'modified_by__name': 'modified_by__name',  # noqa: E501
        'created_date': 'created_date',  # noqa: E501
        'modified_date': 'modified_date',  # noqa: E501
        'vectorizer_stop_words': 'vectorizer_stop_words',  # noqa: E501
        'unsure_choice_value': 'unsure_choice_value',  # noqa: E501
        'unsure_thresholds_by_value': 'unsure_thresholds_by_value',  # noqa: E501
        'mlflow_model_uri': 'mlflow_model_uri',  # noqa: E501
        'mlflow_detect_on_document_level': 'mlflow_detect_on_document_level',  # noqa: E501
    }

    read_only_vars = {
        'uid',  # noqa: E501
        'depends_on_fields',  # noqa: E501
        'value_detection_strategy_name',  # noqa: E501
        'choices',  # noqa: E501
        'is_value_detection_strategy_disabled',  # noqa: E501
        'value_aware',  # noqa: E501
        'created_by__name',  # noqa: E501
        'modified_by__name',  # noqa: E501
        'created_date',  # noqa: E501
        'modified_date',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, document_type, code, title, *args, **kwargs):  # noqa: E501
        """DocumentFieldList - a model defined in OpenAPI

        Args:
            document_type (str):
            code (str): Field codes must be lowercase, should start with  a Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.
            title (str):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            uid (str): [optional]  # noqa: E501
            long_code (str): [optional]  # noqa: E501
            description (str, none_type): [optional]  # noqa: E501
            type (str): [optional]  # noqa: E501
            text_unit_type (str): [optional]  # noqa: E501
            value_detection_strategy (str): [optional]  # noqa: E501
            classifier_init_script (str, none_type): [optional]  # noqa: E501
            formula (str, none_type): [optional]  # noqa: E501
            convert_decimals_to_floats_in_formula_args (bool): Floating point field values      are represented in Python Decimal type to avoid rounding problems in machine numbers representations.      Use this checkbox for converting them to Python float type before calculating the formula.      Float: 0.1 + 0.2 = 0.30000000000000004. Decimal: 0.1 + 0.2 = 0.3.. [optional]  # noqa: E501
            value_regexp (str, none_type): This regular expression is run on the sentence      found by a Field Detector and extracts a specific string value from a Text Unit. If the regular expression returns multiple matching groups, then the first matching group will be used by the Field. This is only applicable to String Fields.. [optional]  # noqa: E501
            depends_on_fields ([str]): [optional]  # noqa: E501
            value_detection_strategy_name (str): [optional]  # noqa: E501
            confidence (str, none_type): [optional]  # noqa: E501
            requires_text_annotations (bool): [optional]  # noqa: E501
            read_only (bool): [optional]  # noqa: E501
            category (DocumentFieldListCategory): [optional]  # noqa: E501
            family (DocumentFieldListFamily): [optional]  # noqa: E501
            default_value ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): If populated, the Default Value will be displayed for this Field if no other value is found by the chosen Value Detection Strategy. Leave this form blank to have the Field Value remain empty by default. Please wrap entries with quotes, example: “landlord”. This is only applicable to Choice and Multi Choice Fields.. [optional]  # noqa: E501
            choices ([str]): [optional]  # noqa: E501
            allow_values_not_specified_in_choices (bool): [optional]  # noqa: E501
            metadata ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): [optional]  # noqa: E501
            training_finished (bool): [optional]  # noqa: E501
            dirty (bool): [optional]  # noqa: E501
            order (int): [optional]  # noqa: E501
            trained_after_documents_number (int): [optional]  # noqa: E501
            hidden_always (bool): [optional]  # noqa: E501
            hide_until_python (str, none_type): [optional]  # noqa: E501
            hide_until_js (str, none_type): [optional]  # noqa: E501
            is_value_detection_strategy_disabled (bool): [optional]  # noqa: E501
            display_yes_no (bool): Checking this box will      display “Yes” if Related Info text is found, and display “No” if no text is found.. [optional]  # noqa: E501
            value_aware (bool): [optional]  # noqa: E501
            created_by__name (str): [optional]  # noqa: E501
            modified_by__name (str): [optional]  # noqa: E501
            created_date (datetime): [optional]  # noqa: E501
            modified_date (datetime): [optional]  # noqa: E501
            vectorizer_stop_words (str, none_type): Stop words for vectorizers      user in field-based ML field detection. These stop words are excluded from going into the feature vector part      build based on this field. In addition to these words the standard sklearn \"english\" word list is used.      Format: each word on new line. [optional]  # noqa: E501
            unsure_choice_value (str, none_type): Makes sense for machine learning      strategies with \"Unsure\" category. The strategy will return this value if probabilities of all other categories      appear lower than the specified threshold.. [optional]  # noqa: E501
            unsure_thresholds_by_value ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Makes sense for machine learning      strategies with \"Unsure\" category. The strategy will return concrete result (one of choice values) only if      the probability of the detected value is greater than this threshold. Otherwise the strategy returns None      or the choice value specified in \"Unsure choice value\" field. Format: { \"value1\": 0.9, \"value2\": 0.5, ...}.      Default: 0.9. [optional]  # noqa: E501
            mlflow_model_uri (str, none_type): MLFlow model URI      understandable by the MLFlow artifact downloading routines.. [optional]  # noqa: E501
            mlflow_detect_on_document_level (bool): If true - whole      document text will be sent to the MLFlow model and the field value will be returned for the whole text with no     annotations. If false - each text unit will be sent separately.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.document_type = document_type
        self.code = code
        self.title = title
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, document_type, code, title, *args, **kwargs):  # noqa: E501
        """DocumentFieldList - a model defined in OpenAPI

        Args:
            document_type (str):
            code (str): Field codes must be lowercase, should start with  a Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.
            title (str):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            uid (str): [optional]  # noqa: E501
            long_code (str): [optional]  # noqa: E501
            description (str, none_type): [optional]  # noqa: E501
            type (str): [optional]  # noqa: E501
            text_unit_type (str): [optional]  # noqa: E501
            value_detection_strategy (str): [optional]  # noqa: E501
            classifier_init_script (str, none_type): [optional]  # noqa: E501
            formula (str, none_type): [optional]  # noqa: E501
            convert_decimals_to_floats_in_formula_args (bool): Floating point field values      are represented in Python Decimal type to avoid rounding problems in machine numbers representations.      Use this checkbox for converting them to Python float type before calculating the formula.      Float: 0.1 + 0.2 = 0.30000000000000004. Decimal: 0.1 + 0.2 = 0.3.. [optional]  # noqa: E501
            value_regexp (str, none_type): This regular expression is run on the sentence      found by a Field Detector and extracts a specific string value from a Text Unit. If the regular expression returns multiple matching groups, then the first matching group will be used by the Field. This is only applicable to String Fields.. [optional]  # noqa: E501
            depends_on_fields ([str]): [optional]  # noqa: E501
            value_detection_strategy_name (str): [optional]  # noqa: E501
            confidence (str, none_type): [optional]  # noqa: E501
            requires_text_annotations (bool): [optional]  # noqa: E501
            read_only (bool): [optional]  # noqa: E501
            category (DocumentFieldListCategory): [optional]  # noqa: E501
            family (DocumentFieldListFamily): [optional]  # noqa: E501
            default_value ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): If populated, the Default Value will be displayed for this Field if no other value is found by the chosen Value Detection Strategy. Leave this form blank to have the Field Value remain empty by default. Please wrap entries with quotes, example: “landlord”. This is only applicable to Choice and Multi Choice Fields.. [optional]  # noqa: E501
            choices ([str]): [optional]  # noqa: E501
            allow_values_not_specified_in_choices (bool): [optional]  # noqa: E501
            metadata ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): [optional]  # noqa: E501
            training_finished (bool): [optional]  # noqa: E501
            dirty (bool): [optional]  # noqa: E501
            order (int): [optional]  # noqa: E501
            trained_after_documents_number (int): [optional]  # noqa: E501
            hidden_always (bool): [optional]  # noqa: E501
            hide_until_python (str, none_type): [optional]  # noqa: E501
            hide_until_js (str, none_type): [optional]  # noqa: E501
            is_value_detection_strategy_disabled (bool): [optional]  # noqa: E501
            display_yes_no (bool): Checking this box will      display “Yes” if Related Info text is found, and display “No” if no text is found.. [optional]  # noqa: E501
            value_aware (bool): [optional]  # noqa: E501
            created_by__name (str): [optional]  # noqa: E501
            modified_by__name (str): [optional]  # noqa: E501
            created_date (datetime): [optional]  # noqa: E501
            modified_date (datetime): [optional]  # noqa: E501
            vectorizer_stop_words (str, none_type): Stop words for vectorizers      user in field-based ML field detection. These stop words are excluded from going into the feature vector part      build based on this field. In addition to these words the standard sklearn \"english\" word list is used.      Format: each word on new line. [optional]  # noqa: E501
            unsure_choice_value (str, none_type): Makes sense for machine learning      strategies with \"Unsure\" category. The strategy will return this value if probabilities of all other categories      appear lower than the specified threshold.. [optional]  # noqa: E501
            unsure_thresholds_by_value ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Makes sense for machine learning      strategies with \"Unsure\" category. The strategy will return concrete result (one of choice values) only if      the probability of the detected value is greater than this threshold. Otherwise the strategy returns None      or the choice value specified in \"Unsure choice value\" field. Format: { \"value1\": 0.9, \"value2\": 0.5, ...}.      Default: 0.9. [optional]  # noqa: E501
            mlflow_model_uri (str, none_type): MLFlow model URI      understandable by the MLFlow artifact downloading routines.. [optional]  # noqa: E501
            mlflow_detect_on_document_level (bool): If true - whole      document text will be sent to the MLFlow model and the field value will be returned for the whole text with no     annotations. If false - each text unit will be sent separately.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.document_type = document_type
        self.code = code
        self.title = title
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
