# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CustomPasswordResetConfirm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'new_password1': 'str',
        'new_password2': 'str',
        'uid': 'str',
        'token': 'str'
    }

    attribute_map = {
        'new_password1': 'new_password1',
        'new_password2': 'new_password2',
        'uid': 'uid',
        'token': 'token'
    }

    def __init__(self, new_password1=None, new_password2=None, uid=None, token=None, local_vars_configuration=None):  # noqa: E501
        """CustomPasswordResetConfirm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._new_password1 = None
        self._new_password2 = None
        self._uid = None
        self._token = None
        self.discriminator = None

        self.new_password1 = new_password1
        self.new_password2 = new_password2
        self.uid = uid
        self.token = token

    @property
    def new_password1(self):
        """Gets the new_password1 of this CustomPasswordResetConfirm.  # noqa: E501


        :return: The new_password1 of this CustomPasswordResetConfirm.  # noqa: E501
        :rtype: str
        """
        return self._new_password1

    @new_password1.setter
    def new_password1(self, new_password1):
        """Sets the new_password1 of this CustomPasswordResetConfirm.


        :param new_password1: The new_password1 of this CustomPasswordResetConfirm.  # noqa: E501
        :type new_password1: str
        """
        if self.local_vars_configuration.client_side_validation and new_password1 is None:  # noqa: E501
            raise ValueError("Invalid value for `new_password1`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                new_password1 is not None and len(new_password1) > 128):
            raise ValueError("Invalid value for `new_password1`, length must be less than or equal to `128`")  # noqa: E501

        self._new_password1 = new_password1

    @property
    def new_password2(self):
        """Gets the new_password2 of this CustomPasswordResetConfirm.  # noqa: E501


        :return: The new_password2 of this CustomPasswordResetConfirm.  # noqa: E501
        :rtype: str
        """
        return self._new_password2

    @new_password2.setter
    def new_password2(self, new_password2):
        """Sets the new_password2 of this CustomPasswordResetConfirm.


        :param new_password2: The new_password2 of this CustomPasswordResetConfirm.  # noqa: E501
        :type new_password2: str
        """
        if self.local_vars_configuration.client_side_validation and new_password2 is None:  # noqa: E501
            raise ValueError("Invalid value for `new_password2`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                new_password2 is not None and len(new_password2) > 128):
            raise ValueError("Invalid value for `new_password2`, length must be less than or equal to `128`")  # noqa: E501

        self._new_password2 = new_password2

    @property
    def uid(self):
        """Gets the uid of this CustomPasswordResetConfirm.  # noqa: E501


        :return: The uid of this CustomPasswordResetConfirm.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this CustomPasswordResetConfirm.


        :param uid: The uid of this CustomPasswordResetConfirm.  # noqa: E501
        :type uid: str
        """
        if self.local_vars_configuration.client_side_validation and uid is None:  # noqa: E501
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def token(self):
        """Gets the token of this CustomPasswordResetConfirm.  # noqa: E501


        :return: The token of this CustomPasswordResetConfirm.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CustomPasswordResetConfirm.


        :param token: The token of this CustomPasswordResetConfirm.  # noqa: E501
        :type token: str
        """
        if self.local_vars_configuration.client_side_validation and token is None:  # noqa: E501
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomPasswordResetConfirm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomPasswordResetConfirm):
            return True

        return self.to_dict() != other.to_dict()
