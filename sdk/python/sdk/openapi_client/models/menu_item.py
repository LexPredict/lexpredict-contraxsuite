# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class MenuItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pk': 'int',
        'name': 'str',
        'url': 'str',
        'group': 'int',
        'public': 'bool',
        'order': 'int',
        'user': 'str'
    }

    attribute_map = {
        'pk': 'pk',
        'name': 'name',
        'url': 'url',
        'group': 'group',
        'public': 'public',
        'order': 'order',
        'user': 'user'
    }

    def __init__(self, pk=None, name=None, url=None, group=None, public=None, order=None, user=None, local_vars_configuration=None):  # noqa: E501
        """MenuItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pk = None
        self._name = None
        self._url = None
        self._group = None
        self._public = None
        self._order = None
        self._user = None
        self.discriminator = None

        if pk is not None:
            self.pk = pk
        self.name = name
        self.url = url
        self.group = group
        if public is not None:
            self.public = public
        if order is not None:
            self.order = order
        if user is not None:
            self.user = user

    @property
    def pk(self):
        """Gets the pk of this MenuItem.  # noqa: E501


        :return: The pk of this MenuItem.  # noqa: E501
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this MenuItem.


        :param pk: The pk of this MenuItem.  # noqa: E501
        :type pk: int
        """

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this MenuItem.  # noqa: E501

        Menu item name.  # noqa: E501

        :return: The name of this MenuItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MenuItem.

        Menu item name.  # noqa: E501

        :param name: The name of this MenuItem.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def url(self):
        """Gets the url of this MenuItem.  # noqa: E501

        Menu item name.  # noqa: E501

        :return: The url of this MenuItem.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MenuItem.

        Menu item name.  # noqa: E501

        :param url: The url of this MenuItem.  # noqa: E501
        :type url: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) > 200):
            raise ValueError("Invalid value for `url`, length must be less than or equal to `200`")  # noqa: E501

        self._url = url

    @property
    def group(self):
        """Gets the group of this MenuItem.  # noqa: E501


        :return: The group of this MenuItem.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this MenuItem.


        :param group: The group of this MenuItem.  # noqa: E501
        :type group: int
        """

        self._group = group

    @property
    def public(self):
        """Gets the public of this MenuItem.  # noqa: E501


        :return: The public of this MenuItem.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this MenuItem.


        :param public: The public of this MenuItem.  # noqa: E501
        :type public: bool
        """

        self._public = public

    @property
    def order(self):
        """Gets the order of this MenuItem.  # noqa: E501


        :return: The order of this MenuItem.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this MenuItem.


        :param order: The order of this MenuItem.  # noqa: E501
        :type order: int
        """
        if (self.local_vars_configuration.client_side_validation and
                order is not None and order > 32767):  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                order is not None and order < 0):  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `0`")  # noqa: E501

        self._order = order

    @property
    def user(self):
        """Gets the user of this MenuItem.  # noqa: E501


        :return: The user of this MenuItem.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MenuItem.


        :param user: The user of this MenuItem.  # noqa: E501
        :type user: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MenuItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MenuItem):
            return True

        return self.to_dict() != other.to_dict()
