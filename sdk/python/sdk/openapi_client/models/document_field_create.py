# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocumentFieldCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'document_type': 'str',
        'code': 'str',
        'long_code': 'str',
        'title': 'str',
        'description': 'str',
        'type': 'str',
        'text_unit_type': 'str',
        'value_detection_strategy': 'str',
        'python_coded_field': 'str',
        'classifier_init_script': 'str',
        'formula': 'str',
        'convert_decimals_to_floats_in_formula_args': 'bool',
        'value_regexp': 'str',
        'depends_on_fields': 'list[str]',
        'confidence': 'str',
        'requires_text_annotations': 'bool',
        'read_only': 'bool',
        'category': 'int',
        'family': 'int',
        'default_value': 'object',
        'choices': 'str',
        'allow_values_not_specified_in_choices': 'bool',
        'stop_words': 'object',
        'metadata': 'object',
        'training_finished': 'bool',
        'dirty': 'bool',
        'order': 'int',
        'trained_after_documents_number': 'int',
        'hidden_always': 'bool',
        'hide_until_python': 'str',
        'hide_until_js': 'str',
        'display_yes_no': 'bool',
        'detect_limit_unit': 'str',
        'detect_limit_count': 'int',
        'vectorizer_stop_words': 'str',
        'unsure_choice_value': 'str',
        'unsure_thresholds_by_value': 'object',
        'mlflow_model_uri': 'str',
        'mlflow_detect_on_document_level': 'bool',
        'warning_message': 'str'
    }

    attribute_map = {
        'document_type': 'document_type',
        'code': 'code',
        'long_code': 'long_code',
        'title': 'title',
        'description': 'description',
        'type': 'type',
        'text_unit_type': 'text_unit_type',
        'value_detection_strategy': 'value_detection_strategy',
        'python_coded_field': 'python_coded_field',
        'classifier_init_script': 'classifier_init_script',
        'formula': 'formula',
        'convert_decimals_to_floats_in_formula_args': 'convert_decimals_to_floats_in_formula_args',
        'value_regexp': 'value_regexp',
        'depends_on_fields': 'depends_on_fields',
        'confidence': 'confidence',
        'requires_text_annotations': 'requires_text_annotations',
        'read_only': 'read_only',
        'category': 'category',
        'family': 'family',
        'default_value': 'default_value',
        'choices': 'choices',
        'allow_values_not_specified_in_choices': 'allow_values_not_specified_in_choices',
        'stop_words': 'stop_words',
        'metadata': 'metadata',
        'training_finished': 'training_finished',
        'dirty': 'dirty',
        'order': 'order',
        'trained_after_documents_number': 'trained_after_documents_number',
        'hidden_always': 'hidden_always',
        'hide_until_python': 'hide_until_python',
        'hide_until_js': 'hide_until_js',
        'display_yes_no': 'display_yes_no',
        'detect_limit_unit': 'detect_limit_unit',
        'detect_limit_count': 'detect_limit_count',
        'vectorizer_stop_words': 'vectorizer_stop_words',
        'unsure_choice_value': 'unsure_choice_value',
        'unsure_thresholds_by_value': 'unsure_thresholds_by_value',
        'mlflow_model_uri': 'mlflow_model_uri',
        'mlflow_detect_on_document_level': 'mlflow_detect_on_document_level',
        'warning_message': 'warning_message'
    }

    def __init__(self, document_type=None, code=None, long_code=None, title=None, description=None, type=None, text_unit_type=None, value_detection_strategy=None, python_coded_field=None, classifier_init_script=None, formula=None, convert_decimals_to_floats_in_formula_args=None, value_regexp=None, depends_on_fields=None, confidence=None, requires_text_annotations=None, read_only=None, category=None, family=None, default_value=None, choices=None, allow_values_not_specified_in_choices=None, stop_words=None, metadata=None, training_finished=None, dirty=None, order=None, trained_after_documents_number=None, hidden_always=None, hide_until_python=None, hide_until_js=None, display_yes_no=None, detect_limit_unit=None, detect_limit_count=None, vectorizer_stop_words=None, unsure_choice_value=None, unsure_thresholds_by_value=None, mlflow_model_uri=None, mlflow_detect_on_document_level=None, warning_message=None, local_vars_configuration=None):  # noqa: E501
        """DocumentFieldCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._document_type = None
        self._code = None
        self._long_code = None
        self._title = None
        self._description = None
        self._type = None
        self._text_unit_type = None
        self._value_detection_strategy = None
        self._python_coded_field = None
        self._classifier_init_script = None
        self._formula = None
        self._convert_decimals_to_floats_in_formula_args = None
        self._value_regexp = None
        self._depends_on_fields = None
        self._confidence = None
        self._requires_text_annotations = None
        self._read_only = None
        self._category = None
        self._family = None
        self._default_value = None
        self._choices = None
        self._allow_values_not_specified_in_choices = None
        self._stop_words = None
        self._metadata = None
        self._training_finished = None
        self._dirty = None
        self._order = None
        self._trained_after_documents_number = None
        self._hidden_always = None
        self._hide_until_python = None
        self._hide_until_js = None
        self._display_yes_no = None
        self._detect_limit_unit = None
        self._detect_limit_count = None
        self._vectorizer_stop_words = None
        self._unsure_choice_value = None
        self._unsure_thresholds_by_value = None
        self._mlflow_model_uri = None
        self._mlflow_detect_on_document_level = None
        self._warning_message = None
        self.discriminator = None

        self.document_type = document_type
        self.code = code
        if long_code is not None:
            self.long_code = long_code
        self.title = title
        self.description = description
        self.type = type
        if text_unit_type is not None:
            self.text_unit_type = text_unit_type
        if value_detection_strategy is not None:
            self.value_detection_strategy = value_detection_strategy
        self.python_coded_field = python_coded_field
        self.classifier_init_script = classifier_init_script
        self.formula = formula
        if convert_decimals_to_floats_in_formula_args is not None:
            self.convert_decimals_to_floats_in_formula_args = convert_decimals_to_floats_in_formula_args
        self.value_regexp = value_regexp
        if depends_on_fields is not None:
            self.depends_on_fields = depends_on_fields
        self.confidence = confidence
        if requires_text_annotations is not None:
            self.requires_text_annotations = requires_text_annotations
        if read_only is not None:
            self.read_only = read_only
        self.category = category
        self.family = family
        self.default_value = default_value
        self.choices = choices
        if allow_values_not_specified_in_choices is not None:
            self.allow_values_not_specified_in_choices = allow_values_not_specified_in_choices
        self.stop_words = stop_words
        self.metadata = metadata
        if training_finished is not None:
            self.training_finished = training_finished
        if dirty is not None:
            self.dirty = dirty
        if order is not None:
            self.order = order
        if trained_after_documents_number is not None:
            self.trained_after_documents_number = trained_after_documents_number
        if hidden_always is not None:
            self.hidden_always = hidden_always
        self.hide_until_python = hide_until_python
        self.hide_until_js = hide_until_js
        if display_yes_no is not None:
            self.display_yes_no = display_yes_no
        self.detect_limit_unit = detect_limit_unit
        self.detect_limit_count = detect_limit_count
        self.vectorizer_stop_words = vectorizer_stop_words
        self.unsure_choice_value = unsure_choice_value
        self.unsure_thresholds_by_value = unsure_thresholds_by_value
        self.mlflow_model_uri = mlflow_model_uri
        if mlflow_detect_on_document_level is not None:
            self.mlflow_detect_on_document_level = mlflow_detect_on_document_level
        if warning_message is not None:
            self.warning_message = warning_message

    @property
    def document_type(self):
        """Gets the document_type of this DocumentFieldCreate.  # noqa: E501


        :return: The document_type of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this DocumentFieldCreate.


        :param document_type: The document_type of this DocumentFieldCreate.  # noqa: E501
        :type document_type: str
        """

        self._document_type = document_type

    @property
    def code(self):
        """Gets the code of this DocumentFieldCreate.  # noqa: E501

        Field codes must be lowercase, should start with  a Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.  # noqa: E501

        :return: The code of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DocumentFieldCreate.

        Field codes must be lowercase, should start with  a Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.  # noqa: E501

        :param code: The code of this DocumentFieldCreate.  # noqa: E501
        :type code: str
        """
        if self.local_vars_configuration.client_side_validation and code is None:  # noqa: E501
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                code is not None and len(code) > 50):
            raise ValueError("Invalid value for `code`, length must be less than or equal to `50`")  # noqa: E501

        self._code = code

    @property
    def long_code(self):
        """Gets the long_code of this DocumentFieldCreate.  # noqa: E501


        :return: The long_code of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._long_code

    @long_code.setter
    def long_code(self, long_code):
        """Sets the long_code of this DocumentFieldCreate.


        :param long_code: The long_code of this DocumentFieldCreate.  # noqa: E501
        :type long_code: str
        """
        if (self.local_vars_configuration.client_side_validation and
                long_code is not None and len(long_code) > 150):
            raise ValueError("Invalid value for `long_code`, length must be less than or equal to `150`")  # noqa: E501

        self._long_code = long_code

    @property
    def title(self):
        """Gets the title of this DocumentFieldCreate.  # noqa: E501


        :return: The title of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DocumentFieldCreate.


        :param title: The title of this DocumentFieldCreate.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) > 100):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `100`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this DocumentFieldCreate.  # noqa: E501


        :return: The description of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DocumentFieldCreate.


        :param description: The description of this DocumentFieldCreate.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this DocumentFieldCreate.  # noqa: E501


        :return: The type of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DocumentFieldCreate.


        :param type: The type of this DocumentFieldCreate.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["address", "amount", "boolean", "choice", "company", "date", "date_recurring", "datetime", "duration", "float", "geography", "int", "linked_documents", "money", "multi_choice", "percent", "person", "ratio", "related_info", "string", "string_no_word_wrap", "text"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def text_unit_type(self):
        """Gets the text_unit_type of this DocumentFieldCreate.  # noqa: E501


        :return: The text_unit_type of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._text_unit_type

    @text_unit_type.setter
    def text_unit_type(self, text_unit_type):
        """Sets the text_unit_type of this DocumentFieldCreate.


        :param text_unit_type: The text_unit_type of this DocumentFieldCreate.  # noqa: E501
        :type text_unit_type: str
        """
        allowed_values = ["sentence", "paragraph", "section"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and text_unit_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `text_unit_type` ({0}), must be one of {1}"  # noqa: E501
                .format(text_unit_type, allowed_values)
            )

        self._text_unit_type = text_unit_type

    @property
    def value_detection_strategy(self):
        """Gets the value_detection_strategy of this DocumentFieldCreate.  # noqa: E501


        :return: The value_detection_strategy of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._value_detection_strategy

    @value_detection_strategy.setter
    def value_detection_strategy(self, value_detection_strategy):
        """Sets the value_detection_strategy of this DocumentFieldCreate.


        :param value_detection_strategy: The value_detection_strategy of this DocumentFieldCreate.  # noqa: E501
        :type value_detection_strategy: str
        """
        allowed_values = ["disabled", "use_regexps_only", "regexp_table", "use_formula_only", "regexps_and_text_based_ml", "text_based_ml_only", "formula_and_fields_based_ml", "fields_based_ml_only", "fields_based_prob_ml_only", "python_coded_field", "field_based_regexps", "mlflow_model"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and value_detection_strategy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `value_detection_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(value_detection_strategy, allowed_values)
            )

        self._value_detection_strategy = value_detection_strategy

    @property
    def python_coded_field(self):
        """Gets the python_coded_field of this DocumentFieldCreate.  # noqa: E501


        :return: The python_coded_field of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._python_coded_field

    @python_coded_field.setter
    def python_coded_field(self, python_coded_field):
        """Sets the python_coded_field of this DocumentFieldCreate.


        :param python_coded_field: The python_coded_field of this DocumentFieldCreate.  # noqa: E501
        :type python_coded_field: str
        """
        allowed_values = [None,"generic.EarliestDate", "generic.LatestDate", "generic.MaxCurrency", "generic.Parties", "similarity.SimilarDocuments"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and python_coded_field not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `python_coded_field` ({0}), must be one of {1}"  # noqa: E501
                .format(python_coded_field, allowed_values)
            )

        self._python_coded_field = python_coded_field

    @property
    def classifier_init_script(self):
        """Gets the classifier_init_script of this DocumentFieldCreate.  # noqa: E501

        Classifier initialization script. Here is how it used: <br /><br />def&nbsp;init_classifier_impl(field_code:&nbsp;str,&nbsp;init_script:&nbsp;str):<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;init_script&nbsp;is&nbsp;not&nbsp;None:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init_script&nbsp;=&nbsp;init_script.strip()<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;init_script:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;tree&nbsp;as&nbsp;sklearn_tree<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;sklearn_tree.DecisionTreeClassifier()<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;tree&nbsp;as&nbsp;sklearn_tree<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;neural_network&nbsp;as&nbsp;sklearn_neural_network<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;neighbors&nbsp;as&nbsp;sklearn_neighbors<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;svm&nbsp;as&nbsp;sklearn_svm<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;gaussian_process&nbsp;as&nbsp;sklearn_gaussian_process<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn.gaussian_process&nbsp;import&nbsp;kernels&nbsp;as&nbsp;sklearn_gaussian_process_kernels<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;ensemble&nbsp;as&nbsp;sklearn_ensemble<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;naive_bayes&nbsp;as&nbsp;sklearn_naive_bayes<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;discriminant_analysis&nbsp;as&nbsp;sklearn_discriminant_analysis<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;linear_model&nbsp;as&nbsp;sklearn_linear_model<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;eval_locals&nbsp;=&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_linear_model':&nbsp;sklearn_linear_model,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_tree':&nbsp;sklearn_tree,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_neural_network':&nbsp;sklearn_neural_network,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_neighbors':&nbsp;sklearn_neighbors,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_svm':&nbsp;sklearn_svm,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_gaussian_process':&nbsp;sklearn_gaussian_process,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_gaussian_process_kernels':&nbsp;sklearn_gaussian_process_kernels,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_ensemble':&nbsp;sklearn_ensemble,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_naive_bayes':&nbsp;sklearn_naive_bayes,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_discriminant_analysis':&nbsp;sklearn_discriminant_analysis<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;eval_script('classifier&nbsp;init&nbsp;script&nbsp;of&nbsp;field&nbsp;{0}'.format(field_code),&nbsp;init_script,&nbsp;eval_locals)<br />  # noqa: E501

        :return: The classifier_init_script of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._classifier_init_script

    @classifier_init_script.setter
    def classifier_init_script(self, classifier_init_script):
        """Sets the classifier_init_script of this DocumentFieldCreate.

        Classifier initialization script. Here is how it used: <br /><br />def&nbsp;init_classifier_impl(field_code:&nbsp;str,&nbsp;init_script:&nbsp;str):<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;init_script&nbsp;is&nbsp;not&nbsp;None:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init_script&nbsp;=&nbsp;init_script.strip()<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;init_script:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;tree&nbsp;as&nbsp;sklearn_tree<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;sklearn_tree.DecisionTreeClassifier()<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;tree&nbsp;as&nbsp;sklearn_tree<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;neural_network&nbsp;as&nbsp;sklearn_neural_network<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;neighbors&nbsp;as&nbsp;sklearn_neighbors<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;svm&nbsp;as&nbsp;sklearn_svm<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;gaussian_process&nbsp;as&nbsp;sklearn_gaussian_process<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn.gaussian_process&nbsp;import&nbsp;kernels&nbsp;as&nbsp;sklearn_gaussian_process_kernels<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;ensemble&nbsp;as&nbsp;sklearn_ensemble<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;naive_bayes&nbsp;as&nbsp;sklearn_naive_bayes<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;discriminant_analysis&nbsp;as&nbsp;sklearn_discriminant_analysis<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;linear_model&nbsp;as&nbsp;sklearn_linear_model<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;eval_locals&nbsp;=&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_linear_model':&nbsp;sklearn_linear_model,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_tree':&nbsp;sklearn_tree,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_neural_network':&nbsp;sklearn_neural_network,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_neighbors':&nbsp;sklearn_neighbors,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_svm':&nbsp;sklearn_svm,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_gaussian_process':&nbsp;sklearn_gaussian_process,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_gaussian_process_kernels':&nbsp;sklearn_gaussian_process_kernels,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_ensemble':&nbsp;sklearn_ensemble,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_naive_bayes':&nbsp;sklearn_naive_bayes,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_discriminant_analysis':&nbsp;sklearn_discriminant_analysis<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;eval_script('classifier&nbsp;init&nbsp;script&nbsp;of&nbsp;field&nbsp;{0}'.format(field_code),&nbsp;init_script,&nbsp;eval_locals)<br />  # noqa: E501

        :param classifier_init_script: The classifier_init_script of this DocumentFieldCreate.  # noqa: E501
        :type classifier_init_script: str
        """

        self._classifier_init_script = classifier_init_script

    @property
    def formula(self):
        """Gets the formula of this DocumentFieldCreate.  # noqa: E501


        :return: The formula of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this DocumentFieldCreate.


        :param formula: The formula of this DocumentFieldCreate.  # noqa: E501
        :type formula: str
        """

        self._formula = formula

    @property
    def convert_decimals_to_floats_in_formula_args(self):
        """Gets the convert_decimals_to_floats_in_formula_args of this DocumentFieldCreate.  # noqa: E501

        Floating point field values      are represented in Python Decimal type to avoid rounding problems in machine numbers representations.      Use this checkbox for converting them to Python float type before calculating the formula.      Float: 0.1 + 0.2 = 0.30000000000000004. Decimal: 0.1 + 0.2 = 0.3.  # noqa: E501

        :return: The convert_decimals_to_floats_in_formula_args of this DocumentFieldCreate.  # noqa: E501
        :rtype: bool
        """
        return self._convert_decimals_to_floats_in_formula_args

    @convert_decimals_to_floats_in_formula_args.setter
    def convert_decimals_to_floats_in_formula_args(self, convert_decimals_to_floats_in_formula_args):
        """Sets the convert_decimals_to_floats_in_formula_args of this DocumentFieldCreate.

        Floating point field values      are represented in Python Decimal type to avoid rounding problems in machine numbers representations.      Use this checkbox for converting them to Python float type before calculating the formula.      Float: 0.1 + 0.2 = 0.30000000000000004. Decimal: 0.1 + 0.2 = 0.3.  # noqa: E501

        :param convert_decimals_to_floats_in_formula_args: The convert_decimals_to_floats_in_formula_args of this DocumentFieldCreate.  # noqa: E501
        :type convert_decimals_to_floats_in_formula_args: bool
        """

        self._convert_decimals_to_floats_in_formula_args = convert_decimals_to_floats_in_formula_args

    @property
    def value_regexp(self):
        """Gets the value_regexp of this DocumentFieldCreate.  # noqa: E501

        This regular expression is run on the sentence      found by a Field Detector and extracts a specific string value from a Text Unit. The first matching group is used if      the regular expression returns multiple matching groups. This is only applicable to string fields.  # noqa: E501

        :return: The value_regexp of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._value_regexp

    @value_regexp.setter
    def value_regexp(self, value_regexp):
        """Sets the value_regexp of this DocumentFieldCreate.

        This regular expression is run on the sentence      found by a Field Detector and extracts a specific string value from a Text Unit. The first matching group is used if      the regular expression returns multiple matching groups. This is only applicable to string fields.  # noqa: E501

        :param value_regexp: The value_regexp of this DocumentFieldCreate.  # noqa: E501
        :type value_regexp: str
        """

        self._value_regexp = value_regexp

    @property
    def depends_on_fields(self):
        """Gets the depends_on_fields of this DocumentFieldCreate.  # noqa: E501


        :return: The depends_on_fields of this DocumentFieldCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._depends_on_fields

    @depends_on_fields.setter
    def depends_on_fields(self, depends_on_fields):
        """Sets the depends_on_fields of this DocumentFieldCreate.


        :param depends_on_fields: The depends_on_fields of this DocumentFieldCreate.  # noqa: E501
        :type depends_on_fields: list[str]
        """

        self._depends_on_fields = depends_on_fields

    @property
    def confidence(self):
        """Gets the confidence of this DocumentFieldCreate.  # noqa: E501


        :return: The confidence of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this DocumentFieldCreate.


        :param confidence: The confidence of this DocumentFieldCreate.  # noqa: E501
        :type confidence: str
        """
        allowed_values = [None,"High", "Medium", "Low"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and confidence not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `confidence` ({0}), must be one of {1}"  # noqa: E501
                .format(confidence, allowed_values)
            )

        self._confidence = confidence

    @property
    def requires_text_annotations(self):
        """Gets the requires_text_annotations of this DocumentFieldCreate.  # noqa: E501


        :return: The requires_text_annotations of this DocumentFieldCreate.  # noqa: E501
        :rtype: bool
        """
        return self._requires_text_annotations

    @requires_text_annotations.setter
    def requires_text_annotations(self, requires_text_annotations):
        """Sets the requires_text_annotations of this DocumentFieldCreate.


        :param requires_text_annotations: The requires_text_annotations of this DocumentFieldCreate.  # noqa: E501
        :type requires_text_annotations: bool
        """

        self._requires_text_annotations = requires_text_annotations

    @property
    def read_only(self):
        """Gets the read_only of this DocumentFieldCreate.  # noqa: E501


        :return: The read_only of this DocumentFieldCreate.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this DocumentFieldCreate.


        :param read_only: The read_only of this DocumentFieldCreate.  # noqa: E501
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def category(self):
        """Gets the category of this DocumentFieldCreate.  # noqa: E501


        :return: The category of this DocumentFieldCreate.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DocumentFieldCreate.


        :param category: The category of this DocumentFieldCreate.  # noqa: E501
        :type category: int
        """

        self._category = category

    @property
    def family(self):
        """Gets the family of this DocumentFieldCreate.  # noqa: E501


        :return: The family of this DocumentFieldCreate.  # noqa: E501
        :rtype: int
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this DocumentFieldCreate.


        :param family: The family of this DocumentFieldCreate.  # noqa: E501
        :type family: int
        """

        self._family = family

    @property
    def default_value(self):
        """Gets the default_value of this DocumentFieldCreate.  # noqa: E501

        When populated, this      default value is displayed in the user interface’s annotator sidebar for the associated field. If not populated, the      Field Value remains empty by default. Please wrap entries with quotes, example: “landlord”. This is only applicable       to Choice and Multichoice fields.  # noqa: E501

        :return: The default_value of this DocumentFieldCreate.  # noqa: E501
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this DocumentFieldCreate.

        When populated, this      default value is displayed in the user interface’s annotator sidebar for the associated field. If not populated, the      Field Value remains empty by default. Please wrap entries with quotes, example: “landlord”. This is only applicable       to Choice and Multichoice fields.  # noqa: E501

        :param default_value: The default_value of this DocumentFieldCreate.  # noqa: E501
        :type default_value: object
        """

        self._default_value = default_value

    @property
    def choices(self):
        """Gets the choices of this DocumentFieldCreate.  # noqa: E501

        Newline-separated choices. A choice cannot contain a comma.  # noqa: E501

        :return: The choices of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this DocumentFieldCreate.

        Newline-separated choices. A choice cannot contain a comma.  # noqa: E501

        :param choices: The choices of this DocumentFieldCreate.  # noqa: E501
        :type choices: str
        """

        self._choices = choices

    @property
    def allow_values_not_specified_in_choices(self):
        """Gets the allow_values_not_specified_in_choices of this DocumentFieldCreate.  # noqa: E501


        :return: The allow_values_not_specified_in_choices of this DocumentFieldCreate.  # noqa: E501
        :rtype: bool
        """
        return self._allow_values_not_specified_in_choices

    @allow_values_not_specified_in_choices.setter
    def allow_values_not_specified_in_choices(self, allow_values_not_specified_in_choices):
        """Sets the allow_values_not_specified_in_choices of this DocumentFieldCreate.


        :param allow_values_not_specified_in_choices: The allow_values_not_specified_in_choices of this DocumentFieldCreate.  # noqa: E501
        :type allow_values_not_specified_in_choices: bool
        """

        self._allow_values_not_specified_in_choices = allow_values_not_specified_in_choices

    @property
    def stop_words(self):
        """Gets the stop_words of this DocumentFieldCreate.  # noqa: E501


        :return: The stop_words of this DocumentFieldCreate.  # noqa: E501
        :rtype: object
        """
        return self._stop_words

    @stop_words.setter
    def stop_words(self, stop_words):
        """Sets the stop_words of this DocumentFieldCreate.


        :param stop_words: The stop_words of this DocumentFieldCreate.  # noqa: E501
        :type stop_words: object
        """

        self._stop_words = stop_words

    @property
    def metadata(self):
        """Gets the metadata of this DocumentFieldCreate.  # noqa: E501


        :return: The metadata of this DocumentFieldCreate.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DocumentFieldCreate.


        :param metadata: The metadata of this DocumentFieldCreate.  # noqa: E501
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def training_finished(self):
        """Gets the training_finished of this DocumentFieldCreate.  # noqa: E501


        :return: The training_finished of this DocumentFieldCreate.  # noqa: E501
        :rtype: bool
        """
        return self._training_finished

    @training_finished.setter
    def training_finished(self, training_finished):
        """Sets the training_finished of this DocumentFieldCreate.


        :param training_finished: The training_finished of this DocumentFieldCreate.  # noqa: E501
        :type training_finished: bool
        """

        self._training_finished = training_finished

    @property
    def dirty(self):
        """Gets the dirty of this DocumentFieldCreate.  # noqa: E501


        :return: The dirty of this DocumentFieldCreate.  # noqa: E501
        :rtype: bool
        """
        return self._dirty

    @dirty.setter
    def dirty(self, dirty):
        """Sets the dirty of this DocumentFieldCreate.


        :param dirty: The dirty of this DocumentFieldCreate.  # noqa: E501
        :type dirty: bool
        """

        self._dirty = dirty

    @property
    def order(self):
        """Gets the order of this DocumentFieldCreate.  # noqa: E501


        :return: The order of this DocumentFieldCreate.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DocumentFieldCreate.


        :param order: The order of this DocumentFieldCreate.  # noqa: E501
        :type order: int
        """
        if (self.local_vars_configuration.client_side_validation and
                order is not None and order > 32767):  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                order is not None and order < 0):  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `0`")  # noqa: E501

        self._order = order

    @property
    def trained_after_documents_number(self):
        """Gets the trained_after_documents_number of this DocumentFieldCreate.  # noqa: E501


        :return: The trained_after_documents_number of this DocumentFieldCreate.  # noqa: E501
        :rtype: int
        """
        return self._trained_after_documents_number

    @trained_after_documents_number.setter
    def trained_after_documents_number(self, trained_after_documents_number):
        """Sets the trained_after_documents_number of this DocumentFieldCreate.


        :param trained_after_documents_number: The trained_after_documents_number of this DocumentFieldCreate.  # noqa: E501
        :type trained_after_documents_number: int
        """
        if (self.local_vars_configuration.client_side_validation and
                trained_after_documents_number is not None and trained_after_documents_number > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `trained_after_documents_number`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                trained_after_documents_number is not None and trained_after_documents_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `trained_after_documents_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._trained_after_documents_number = trained_after_documents_number

    @property
    def hidden_always(self):
        """Gets the hidden_always of this DocumentFieldCreate.  # noqa: E501


        :return: The hidden_always of this DocumentFieldCreate.  # noqa: E501
        :rtype: bool
        """
        return self._hidden_always

    @hidden_always.setter
    def hidden_always(self, hidden_always):
        """Sets the hidden_always of this DocumentFieldCreate.


        :param hidden_always: The hidden_always of this DocumentFieldCreate.  # noqa: E501
        :type hidden_always: bool
        """

        self._hidden_always = hidden_always

    @property
    def hide_until_python(self):
        """Gets the hide_until_python of this DocumentFieldCreate.  # noqa: E501

                             Enter a boolean expression in Python syntax. If this Python expression evaluates to True, then this              Document Field will be displayed in the user interface. Likewise, if this Python expression evaluates to              False, then this Document Field will be hidden from view. Importantly, if a document’s status is set to              complete and this Document Field remains hidden, then this Document Field’s data will be erased. Similarly,              this Document Field might contain data that a user can not review if it is hidden and the document has not              been set to complete.  # noqa: E501

        :return: The hide_until_python of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._hide_until_python

    @hide_until_python.setter
    def hide_until_python(self, hide_until_python):
        """Sets the hide_until_python of this DocumentFieldCreate.

                             Enter a boolean expression in Python syntax. If this Python expression evaluates to True, then this              Document Field will be displayed in the user interface. Likewise, if this Python expression evaluates to              False, then this Document Field will be hidden from view. Importantly, if a document’s status is set to              complete and this Document Field remains hidden, then this Document Field’s data will be erased. Similarly,              this Document Field might contain data that a user can not review if it is hidden and the document has not              been set to complete.  # noqa: E501

        :param hide_until_python: The hide_until_python of this DocumentFieldCreate.  # noqa: E501
        :type hide_until_python: str
        """

        self._hide_until_python = hide_until_python

    @property
    def hide_until_js(self):
        """Gets the hide_until_js of this DocumentFieldCreate.  # noqa: E501

        Target expression (\"Hide until python\" expression converted to JavaScript syntax for frontend). Allowed operators: +, -, *, /, ===, !==, ==, !=, &&, ||, >, <, >=, <=, %  # noqa: E501

        :return: The hide_until_js of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._hide_until_js

    @hide_until_js.setter
    def hide_until_js(self, hide_until_js):
        """Sets the hide_until_js of this DocumentFieldCreate.

        Target expression (\"Hide until python\" expression converted to JavaScript syntax for frontend). Allowed operators: +, -, *, /, ===, !==, ==, !=, &&, ||, >, <, >=, <=, %  # noqa: E501

        :param hide_until_js: The hide_until_js of this DocumentFieldCreate.  # noqa: E501
        :type hide_until_js: str
        """

        self._hide_until_js = hide_until_js

    @property
    def display_yes_no(self):
        """Gets the display_yes_no of this DocumentFieldCreate.  # noqa: E501

        Checking this box will      display “Yes” if Related Info text is found, and display “No” if no text is found.  # noqa: E501

        :return: The display_yes_no of this DocumentFieldCreate.  # noqa: E501
        :rtype: bool
        """
        return self._display_yes_no

    @display_yes_no.setter
    def display_yes_no(self, display_yes_no):
        """Sets the display_yes_no of this DocumentFieldCreate.

        Checking this box will      display “Yes” if Related Info text is found, and display “No” if no text is found.  # noqa: E501

        :param display_yes_no: The display_yes_no of this DocumentFieldCreate.  # noqa: E501
        :type display_yes_no: bool
        """

        self._display_yes_no = display_yes_no

    @property
    def detect_limit_unit(self):
        """Gets the detect_limit_unit of this DocumentFieldCreate.  # noqa: E501

        Choose to add an upward limit to the amount of document text                                           ContraxSuite will search for this Document Field. For example, you can choose                                           to only search the first 10 paragraphs of text for the value required (this                                           often works best for values like “Company,” “Execution Date,” or “Parties,”                                          all of which typically appear in the first few paragraphs of a contract).  # noqa: E501

        :return: The detect_limit_unit of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._detect_limit_unit

    @detect_limit_unit.setter
    def detect_limit_unit(self, detect_limit_unit):
        """Sets the detect_limit_unit of this DocumentFieldCreate.

        Choose to add an upward limit to the amount of document text                                           ContraxSuite will search for this Document Field. For example, you can choose                                           to only search the first 10 paragraphs of text for the value required (this                                           often works best for values like “Company,” “Execution Date,” or “Parties,”                                          all of which typically appear in the first few paragraphs of a contract).  # noqa: E501

        :param detect_limit_unit: The detect_limit_unit of this DocumentFieldCreate.  # noqa: E501
        :type detect_limit_unit: str
        """
        if self.local_vars_configuration.client_side_validation and detect_limit_unit is None:  # noqa: E501
            raise ValueError("Invalid value for `detect_limit_unit`, must not be `None`")  # noqa: E501
        allowed_values = ["NONE", "UNIT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and detect_limit_unit not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `detect_limit_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(detect_limit_unit, allowed_values)
            )

        self._detect_limit_unit = detect_limit_unit

    @property
    def detect_limit_count(self):
        """Gets the detect_limit_count of this DocumentFieldCreate.  # noqa: E501

        Specify the maximum  range for a bounded search. Field detection begins at the top of the document and continues until this Nth  \"Detect limit unit\" element.  # noqa: E501

        :return: The detect_limit_count of this DocumentFieldCreate.  # noqa: E501
        :rtype: int
        """
        return self._detect_limit_count

    @detect_limit_count.setter
    def detect_limit_count(self, detect_limit_count):
        """Sets the detect_limit_count of this DocumentFieldCreate.

        Specify the maximum  range for a bounded search. Field detection begins at the top of the document and continues until this Nth  \"Detect limit unit\" element.  # noqa: E501

        :param detect_limit_count: The detect_limit_count of this DocumentFieldCreate.  # noqa: E501
        :type detect_limit_count: int
        """
        if self.local_vars_configuration.client_side_validation and detect_limit_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detect_limit_count`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                detect_limit_count is not None and detect_limit_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `detect_limit_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                detect_limit_count is not None and detect_limit_count < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `detect_limit_count`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._detect_limit_count = detect_limit_count

    @property
    def vectorizer_stop_words(self):
        """Gets the vectorizer_stop_words of this DocumentFieldCreate.  # noqa: E501

        Stop words for vectorizers      user in field-based ML field detection. These stop words are excluded from going into the feature vector part      build based on this field. In addition to these words the standard sklearn \"english\" word list is used.      Format: each word on new line  # noqa: E501

        :return: The vectorizer_stop_words of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._vectorizer_stop_words

    @vectorizer_stop_words.setter
    def vectorizer_stop_words(self, vectorizer_stop_words):
        """Sets the vectorizer_stop_words of this DocumentFieldCreate.

        Stop words for vectorizers      user in field-based ML field detection. These stop words are excluded from going into the feature vector part      build based on this field. In addition to these words the standard sklearn \"english\" word list is used.      Format: each word on new line  # noqa: E501

        :param vectorizer_stop_words: The vectorizer_stop_words of this DocumentFieldCreate.  # noqa: E501
        :type vectorizer_stop_words: str
        """

        self._vectorizer_stop_words = vectorizer_stop_words

    @property
    def unsure_choice_value(self):
        """Gets the unsure_choice_value of this DocumentFieldCreate.  # noqa: E501

        Makes sense for machine learning      strategies with \"Unsure\" category. The strategy will return this value if probabilities of all other categories      appear lower than the specified threshold.  # noqa: E501

        :return: The unsure_choice_value of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._unsure_choice_value

    @unsure_choice_value.setter
    def unsure_choice_value(self, unsure_choice_value):
        """Sets the unsure_choice_value of this DocumentFieldCreate.

        Makes sense for machine learning      strategies with \"Unsure\" category. The strategy will return this value if probabilities of all other categories      appear lower than the specified threshold.  # noqa: E501

        :param unsure_choice_value: The unsure_choice_value of this DocumentFieldCreate.  # noqa: E501
        :type unsure_choice_value: str
        """
        if (self.local_vars_configuration.client_side_validation and
                unsure_choice_value is not None and len(unsure_choice_value) > 256):
            raise ValueError("Invalid value for `unsure_choice_value`, length must be less than or equal to `256`")  # noqa: E501

        self._unsure_choice_value = unsure_choice_value

    @property
    def unsure_thresholds_by_value(self):
        """Gets the unsure_thresholds_by_value of this DocumentFieldCreate.  # noqa: E501

        Makes sense for machine learning      strategies with \"Unsure\" category. The strategy will return concrete result (one of choice values) only if      the probability of the detected value is greater than this threshold. Otherwise the strategy returns None      or the choice value specified in \"Unsure choice value\" field. Format: { \"value1\": 0.9, \"value2\": 0.5, ...}.      Default: 0.9  # noqa: E501

        :return: The unsure_thresholds_by_value of this DocumentFieldCreate.  # noqa: E501
        :rtype: object
        """
        return self._unsure_thresholds_by_value

    @unsure_thresholds_by_value.setter
    def unsure_thresholds_by_value(self, unsure_thresholds_by_value):
        """Sets the unsure_thresholds_by_value of this DocumentFieldCreate.

        Makes sense for machine learning      strategies with \"Unsure\" category. The strategy will return concrete result (one of choice values) only if      the probability of the detected value is greater than this threshold. Otherwise the strategy returns None      or the choice value specified in \"Unsure choice value\" field. Format: { \"value1\": 0.9, \"value2\": 0.5, ...}.      Default: 0.9  # noqa: E501

        :param unsure_thresholds_by_value: The unsure_thresholds_by_value of this DocumentFieldCreate.  # noqa: E501
        :type unsure_thresholds_by_value: object
        """

        self._unsure_thresholds_by_value = unsure_thresholds_by_value

    @property
    def mlflow_model_uri(self):
        """Gets the mlflow_model_uri of this DocumentFieldCreate.  # noqa: E501

        MLFlow model URI      understandable by the MLFlow artifact downloading routines.  # noqa: E501

        :return: The mlflow_model_uri of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._mlflow_model_uri

    @mlflow_model_uri.setter
    def mlflow_model_uri(self, mlflow_model_uri):
        """Sets the mlflow_model_uri of this DocumentFieldCreate.

        MLFlow model URI      understandable by the MLFlow artifact downloading routines.  # noqa: E501

        :param mlflow_model_uri: The mlflow_model_uri of this DocumentFieldCreate.  # noqa: E501
        :type mlflow_model_uri: str
        """
        if (self.local_vars_configuration.client_side_validation and
                mlflow_model_uri is not None and len(mlflow_model_uri) > 1024):
            raise ValueError("Invalid value for `mlflow_model_uri`, length must be less than or equal to `1024`")  # noqa: E501

        self._mlflow_model_uri = mlflow_model_uri

    @property
    def mlflow_detect_on_document_level(self):
        """Gets the mlflow_detect_on_document_level of this DocumentFieldCreate.  # noqa: E501

        If true - whole      document text will be sent to the MLFlow model and the field value will be returned for the whole text with no     annotations. If false - each text unit will be sent separately.  # noqa: E501

        :return: The mlflow_detect_on_document_level of this DocumentFieldCreate.  # noqa: E501
        :rtype: bool
        """
        return self._mlflow_detect_on_document_level

    @mlflow_detect_on_document_level.setter
    def mlflow_detect_on_document_level(self, mlflow_detect_on_document_level):
        """Sets the mlflow_detect_on_document_level of this DocumentFieldCreate.

        If true - whole      document text will be sent to the MLFlow model and the field value will be returned for the whole text with no     annotations. If false - each text unit will be sent separately.  # noqa: E501

        :param mlflow_detect_on_document_level: The mlflow_detect_on_document_level of this DocumentFieldCreate.  # noqa: E501
        :type mlflow_detect_on_document_level: bool
        """

        self._mlflow_detect_on_document_level = mlflow_detect_on_document_level

    @property
    def warning_message(self):
        """Gets the warning_message of this DocumentFieldCreate.  # noqa: E501


        :return: The warning_message of this DocumentFieldCreate.  # noqa: E501
        :rtype: str
        """
        return self._warning_message

    @warning_message.setter
    def warning_message(self, warning_message):
        """Sets the warning_message of this DocumentFieldCreate.


        :param warning_message: The warning_message of this DocumentFieldCreate.  # noqa: E501
        :type warning_message: str
        """

        self._warning_message = warning_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentFieldCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentFieldCreate):
            return True

        return self.to_dict() != other.to_dict()
