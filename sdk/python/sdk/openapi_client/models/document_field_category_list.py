# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocumentFieldCategoryList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'document_type': 'str',
        'document_type_title': 'str',
        'name': 'str',
        'order': 'int',
        'fields': 'list[DocumentFieldCategoryListFields]',
        'fields_number': 'int',
        'export_key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'document_type': 'document_type',
        'document_type_title': 'document_type_title',
        'name': 'name',
        'order': 'order',
        'fields': 'fields',
        'fields_number': 'fields_number',
        'export_key': 'export_key'
    }

    def __init__(self, id=None, document_type=None, document_type_title=None, name=None, order=None, fields=None, fields_number=None, export_key=None, local_vars_configuration=None):  # noqa: E501
        """DocumentFieldCategoryList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._document_type = None
        self._document_type_title = None
        self._name = None
        self._order = None
        self._fields = None
        self._fields_number = None
        self._export_key = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.document_type = document_type
        self.document_type_title = document_type_title
        self.name = name
        if order is not None:
            self.order = order
        self.fields = fields
        self.fields_number = fields_number
        if export_key is not None:
            self.export_key = export_key

    @property
    def id(self):
        """Gets the id of this DocumentFieldCategoryList.  # noqa: E501


        :return: The id of this DocumentFieldCategoryList.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentFieldCategoryList.


        :param id: The id of this DocumentFieldCategoryList.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def document_type(self):
        """Gets the document_type of this DocumentFieldCategoryList.  # noqa: E501


        :return: The document_type of this DocumentFieldCategoryList.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this DocumentFieldCategoryList.


        :param document_type: The document_type of this DocumentFieldCategoryList.  # noqa: E501
        :type document_type: str
        """

        self._document_type = document_type

    @property
    def document_type_title(self):
        """Gets the document_type_title of this DocumentFieldCategoryList.  # noqa: E501


        :return: The document_type_title of this DocumentFieldCategoryList.  # noqa: E501
        :rtype: str
        """
        return self._document_type_title

    @document_type_title.setter
    def document_type_title(self, document_type_title):
        """Sets the document_type_title of this DocumentFieldCategoryList.


        :param document_type_title: The document_type_title of this DocumentFieldCategoryList.  # noqa: E501
        :type document_type_title: str
        """
        if self.local_vars_configuration.client_side_validation and document_type_title is None:  # noqa: E501
            raise ValueError("Invalid value for `document_type_title`, must not be `None`")  # noqa: E501

        self._document_type_title = document_type_title

    @property
    def name(self):
        """Gets the name of this DocumentFieldCategoryList.  # noqa: E501


        :return: The name of this DocumentFieldCategoryList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentFieldCategoryList.


        :param name: The name of this DocumentFieldCategoryList.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def order(self):
        """Gets the order of this DocumentFieldCategoryList.  # noqa: E501


        :return: The order of this DocumentFieldCategoryList.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DocumentFieldCategoryList.


        :param order: The order of this DocumentFieldCategoryList.  # noqa: E501
        :type order: int
        """
        if (self.local_vars_configuration.client_side_validation and
                order is not None and order > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                order is not None and order < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._order = order

    @property
    def fields(self):
        """Gets the fields of this DocumentFieldCategoryList.  # noqa: E501


        :return: The fields of this DocumentFieldCategoryList.  # noqa: E501
        :rtype: list[DocumentFieldCategoryListFields]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this DocumentFieldCategoryList.


        :param fields: The fields of this DocumentFieldCategoryList.  # noqa: E501
        :type fields: list[DocumentFieldCategoryListFields]
        """
        if self.local_vars_configuration.client_side_validation and fields is None:  # noqa: E501
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501

        self._fields = fields

    @property
    def fields_number(self):
        """Gets the fields_number of this DocumentFieldCategoryList.  # noqa: E501


        :return: The fields_number of this DocumentFieldCategoryList.  # noqa: E501
        :rtype: int
        """
        return self._fields_number

    @fields_number.setter
    def fields_number(self, fields_number):
        """Sets the fields_number of this DocumentFieldCategoryList.


        :param fields_number: The fields_number of this DocumentFieldCategoryList.  # noqa: E501
        :type fields_number: int
        """
        if self.local_vars_configuration.client_side_validation and fields_number is None:  # noqa: E501
            raise ValueError("Invalid value for `fields_number`, must not be `None`")  # noqa: E501

        self._fields_number = fields_number

    @property
    def export_key(self):
        """Gets the export_key of this DocumentFieldCategoryList.  # noqa: E501


        :return: The export_key of this DocumentFieldCategoryList.  # noqa: E501
        :rtype: str
        """
        return self._export_key

    @export_key.setter
    def export_key(self, export_key):
        """Sets the export_key of this DocumentFieldCategoryList.


        :param export_key: The export_key of this DocumentFieldCategoryList.  # noqa: E501
        :type export_key: str
        """

        self._export_key = export_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentFieldCategoryList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentFieldCategoryList):
            return True

        return self.to_dict() != other.to_dict()
