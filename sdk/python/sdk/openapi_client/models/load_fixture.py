# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class LoadFixture(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fixture': 'str',
        'mode': 'str',
        'encoding': 'str'
    }

    attribute_map = {
        'fixture': 'fixture',
        'mode': 'mode',
        'encoding': 'encoding'
    }

    def __init__(self, fixture=None, mode=None, encoding=None, local_vars_configuration=None):  # noqa: E501
        """LoadFixture - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._fixture = None
        self._mode = None
        self._encoding = None
        self.discriminator = None

        self.fixture = fixture
        if mode is not None:
            self.mode = mode
        if encoding is not None:
            self.encoding = encoding

    @property
    def fixture(self):
        """Gets the fixture of this LoadFixture.  # noqa: E501


        :return: The fixture of this LoadFixture.  # noqa: E501
        :rtype: str
        """
        return self._fixture

    @fixture.setter
    def fixture(self, fixture):
        """Sets the fixture of this LoadFixture.


        :param fixture: The fixture of this LoadFixture.  # noqa: E501
        :type fixture: str
        """
        if self.local_vars_configuration.client_side_validation and fixture is None:  # noqa: E501
            raise ValueError("Invalid value for `fixture`, must not be `None`")  # noqa: E501

        self._fixture = fixture

    @property
    def mode(self):
        """Gets the mode of this LoadFixture.  # noqa: E501


        :return: The mode of this LoadFixture.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this LoadFixture.


        :param mode: The mode of this LoadFixture.  # noqa: E501
        :type mode: str
        """
        if (self.local_vars_configuration.client_side_validation and
                mode is not None and len(mode) > 10):
            raise ValueError("Invalid value for `mode`, length must be less than or equal to `10`")  # noqa: E501

        self._mode = mode

    @property
    def encoding(self):
        """Gets the encoding of this LoadFixture.  # noqa: E501


        :return: The encoding of this LoadFixture.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this LoadFixture.


        :param encoding: The encoding of this LoadFixture.  # noqa: E501
        :type encoding: str
        """
        if (self.local_vars_configuration.client_side_validation and
                encoding is not None and len(encoding) > 10):
            raise ValueError("Invalid value for `encoding`, length must be less than or equal to `10`")  # noqa: E501

        self._encoding = encoding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoadFixture):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoadFixture):
            return True

        return self.to_dict() != other.to_dict()
