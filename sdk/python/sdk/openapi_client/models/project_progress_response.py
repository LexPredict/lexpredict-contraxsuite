# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProjectProgressResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project_has_completed_sessions': 'bool',
        'user_uncompleted_session_progress': 'object',
        'other_uncompleted_session_progress': 'object',
        'clustering': 'str',
        'require_clustering': 'bool'
    }

    attribute_map = {
        'project_has_completed_sessions': 'project_has_completed_sessions',
        'user_uncompleted_session_progress': 'user_uncompleted_session_progress',
        'other_uncompleted_session_progress': 'other_uncompleted_session_progress',
        'clustering': 'clustering',
        'require_clustering': 'require_clustering'
    }

    def __init__(self, project_has_completed_sessions=None, user_uncompleted_session_progress=None, other_uncompleted_session_progress=None, clustering=None, require_clustering=None, local_vars_configuration=None):  # noqa: E501
        """ProjectProgressResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project_has_completed_sessions = None
        self._user_uncompleted_session_progress = None
        self._other_uncompleted_session_progress = None
        self._clustering = None
        self._require_clustering = None
        self.discriminator = None

        self.project_has_completed_sessions = project_has_completed_sessions
        self.user_uncompleted_session_progress = user_uncompleted_session_progress
        self.other_uncompleted_session_progress = other_uncompleted_session_progress
        if clustering is not None:
            self.clustering = clustering
        if require_clustering is not None:
            self.require_clustering = require_clustering

    @property
    def project_has_completed_sessions(self):
        """Gets the project_has_completed_sessions of this ProjectProgressResponse.  # noqa: E501


        :return: The project_has_completed_sessions of this ProjectProgressResponse.  # noqa: E501
        :rtype: bool
        """
        return self._project_has_completed_sessions

    @project_has_completed_sessions.setter
    def project_has_completed_sessions(self, project_has_completed_sessions):
        """Sets the project_has_completed_sessions of this ProjectProgressResponse.


        :param project_has_completed_sessions: The project_has_completed_sessions of this ProjectProgressResponse.  # noqa: E501
        :type project_has_completed_sessions: bool
        """
        if self.local_vars_configuration.client_side_validation and project_has_completed_sessions is None:  # noqa: E501
            raise ValueError("Invalid value for `project_has_completed_sessions`, must not be `None`")  # noqa: E501

        self._project_has_completed_sessions = project_has_completed_sessions

    @property
    def user_uncompleted_session_progress(self):
        """Gets the user_uncompleted_session_progress of this ProjectProgressResponse.  # noqa: E501


        :return: The user_uncompleted_session_progress of this ProjectProgressResponse.  # noqa: E501
        :rtype: object
        """
        return self._user_uncompleted_session_progress

    @user_uncompleted_session_progress.setter
    def user_uncompleted_session_progress(self, user_uncompleted_session_progress):
        """Sets the user_uncompleted_session_progress of this ProjectProgressResponse.


        :param user_uncompleted_session_progress: The user_uncompleted_session_progress of this ProjectProgressResponse.  # noqa: E501
        :type user_uncompleted_session_progress: object
        """

        self._user_uncompleted_session_progress = user_uncompleted_session_progress

    @property
    def other_uncompleted_session_progress(self):
        """Gets the other_uncompleted_session_progress of this ProjectProgressResponse.  # noqa: E501


        :return: The other_uncompleted_session_progress of this ProjectProgressResponse.  # noqa: E501
        :rtype: object
        """
        return self._other_uncompleted_session_progress

    @other_uncompleted_session_progress.setter
    def other_uncompleted_session_progress(self, other_uncompleted_session_progress):
        """Sets the other_uncompleted_session_progress of this ProjectProgressResponse.


        :param other_uncompleted_session_progress: The other_uncompleted_session_progress of this ProjectProgressResponse.  # noqa: E501
        :type other_uncompleted_session_progress: object
        """

        self._other_uncompleted_session_progress = other_uncompleted_session_progress

    @property
    def clustering(self):
        """Gets the clustering of this ProjectProgressResponse.  # noqa: E501


        :return: The clustering of this ProjectProgressResponse.  # noqa: E501
        :rtype: str
        """
        return self._clustering

    @clustering.setter
    def clustering(self, clustering):
        """Sets the clustering of this ProjectProgressResponse.


        :param clustering: The clustering of this ProjectProgressResponse.  # noqa: E501
        :type clustering: str
        """

        self._clustering = clustering

    @property
    def require_clustering(self):
        """Gets the require_clustering of this ProjectProgressResponse.  # noqa: E501


        :return: The require_clustering of this ProjectProgressResponse.  # noqa: E501
        :rtype: bool
        """
        return self._require_clustering

    @require_clustering.setter
    def require_clustering(self, require_clustering):
        """Sets the require_clustering of this ProjectProgressResponse.


        :param require_clustering: The require_clustering of this ProjectProgressResponse.  # noqa: E501
        :type require_clustering: bool
        """

        self._require_clustering = require_clustering

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectProgressResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectProgressResponse):
            return True

        return self.to_dict() != other.to_dict()
