# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocumentTypeCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'title': 'str',
        'code': 'str',
        'categories': 'list[DocumentTypeDetailCategories]',
        'managers': 'list[int]',
        'fields': 'list[DocumentFieldCategoryListFields]',
        'search_fields': 'list[str]',
        'editor_type': 'str',
        'field_code_aliases': 'object',
        'metadata': 'object',
        'warning_message': 'str'
    }

    attribute_map = {
        'uid': 'uid',
        'title': 'title',
        'code': 'code',
        'categories': 'categories',
        'managers': 'managers',
        'fields': 'fields',
        'search_fields': 'search_fields',
        'editor_type': 'editor_type',
        'field_code_aliases': 'field_code_aliases',
        'metadata': 'metadata',
        'warning_message': 'warning_message'
    }

    def __init__(self, uid=None, title=None, code=None, categories=None, managers=None, fields=None, search_fields=None, editor_type=None, field_code_aliases=None, metadata=None, warning_message=None, local_vars_configuration=None):  # noqa: E501
        """DocumentTypeCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uid = None
        self._title = None
        self._code = None
        self._categories = None
        self._managers = None
        self._fields = None
        self._search_fields = None
        self._editor_type = None
        self._field_code_aliases = None
        self._metadata = None
        self._warning_message = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        self.title = title
        self.code = code
        if categories is not None:
            self.categories = categories
        if managers is not None:
            self.managers = managers
        if fields is not None:
            self.fields = fields
        if search_fields is not None:
            self.search_fields = search_fields
        self.editor_type = editor_type
        self.field_code_aliases = field_code_aliases
        self.metadata = metadata
        if warning_message is not None:
            self.warning_message = warning_message

    @property
    def uid(self):
        """Gets the uid of this DocumentTypeCreate.  # noqa: E501


        :return: The uid of this DocumentTypeCreate.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DocumentTypeCreate.


        :param uid: The uid of this DocumentTypeCreate.  # noqa: E501
        :type uid: str
        """

        self._uid = uid

    @property
    def title(self):
        """Gets the title of this DocumentTypeCreate.  # noqa: E501


        :return: The title of this DocumentTypeCreate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DocumentTypeCreate.


        :param title: The title of this DocumentTypeCreate.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) > 100):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `100`")  # noqa: E501

        self._title = title

    @property
    def code(self):
        """Gets the code of this DocumentTypeCreate.  # noqa: E501

        Field codes must be lowercase, should start with a Latin letter, and contain  only Latin letters, digits, and underscores.  # noqa: E501

        :return: The code of this DocumentTypeCreate.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DocumentTypeCreate.

        Field codes must be lowercase, should start with a Latin letter, and contain  only Latin letters, digits, and underscores.  # noqa: E501

        :param code: The code of this DocumentTypeCreate.  # noqa: E501
        :type code: str
        """
        if self.local_vars_configuration.client_side_validation and code is None:  # noqa: E501
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                code is not None and len(code) > 50):
            raise ValueError("Invalid value for `code`, length must be less than or equal to `50`")  # noqa: E501

        self._code = code

    @property
    def categories(self):
        """Gets the categories of this DocumentTypeCreate.  # noqa: E501


        :return: The categories of this DocumentTypeCreate.  # noqa: E501
        :rtype: list[DocumentTypeDetailCategories]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this DocumentTypeCreate.


        :param categories: The categories of this DocumentTypeCreate.  # noqa: E501
        :type categories: list[DocumentTypeDetailCategories]
        """

        self._categories = categories

    @property
    def managers(self):
        """Gets the managers of this DocumentTypeCreate.  # noqa: E501


        :return: The managers of this DocumentTypeCreate.  # noqa: E501
        :rtype: list[int]
        """
        return self._managers

    @managers.setter
    def managers(self, managers):
        """Sets the managers of this DocumentTypeCreate.


        :param managers: The managers of this DocumentTypeCreate.  # noqa: E501
        :type managers: list[int]
        """

        self._managers = managers

    @property
    def fields(self):
        """Gets the fields of this DocumentTypeCreate.  # noqa: E501


        :return: The fields of this DocumentTypeCreate.  # noqa: E501
        :rtype: list[DocumentFieldCategoryListFields]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this DocumentTypeCreate.


        :param fields: The fields of this DocumentTypeCreate.  # noqa: E501
        :type fields: list[DocumentFieldCategoryListFields]
        """

        self._fields = fields

    @property
    def search_fields(self):
        """Gets the search_fields of this DocumentTypeCreate.  # noqa: E501


        :return: The search_fields of this DocumentTypeCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._search_fields

    @search_fields.setter
    def search_fields(self, search_fields):
        """Sets the search_fields of this DocumentTypeCreate.


        :param search_fields: The search_fields of this DocumentTypeCreate.  # noqa: E501
        :type search_fields: list[str]
        """

        self._search_fields = search_fields

    @property
    def editor_type(self):
        """Gets the editor_type of this DocumentTypeCreate.  # noqa: E501


        :return: The editor_type of this DocumentTypeCreate.  # noqa: E501
        :rtype: str
        """
        return self._editor_type

    @editor_type.setter
    def editor_type(self, editor_type):
        """Sets the editor_type of this DocumentTypeCreate.


        :param editor_type: The editor_type of this DocumentTypeCreate.  # noqa: E501
        :type editor_type: str
        """
        allowed_values = [None,"save_by_field", "save_all_fields_at_once", "no_text"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and editor_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `editor_type` ({0}), must be one of {1}"  # noqa: E501
                .format(editor_type, allowed_values)
            )

        self._editor_type = editor_type

    @property
    def field_code_aliases(self):
        """Gets the field_code_aliases of this DocumentTypeCreate.  # noqa: E501


        :return: The field_code_aliases of this DocumentTypeCreate.  # noqa: E501
        :rtype: object
        """
        return self._field_code_aliases

    @field_code_aliases.setter
    def field_code_aliases(self, field_code_aliases):
        """Sets the field_code_aliases of this DocumentTypeCreate.


        :param field_code_aliases: The field_code_aliases of this DocumentTypeCreate.  # noqa: E501
        :type field_code_aliases: object
        """

        self._field_code_aliases = field_code_aliases

    @property
    def metadata(self):
        """Gets the metadata of this DocumentTypeCreate.  # noqa: E501


        :return: The metadata of this DocumentTypeCreate.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DocumentTypeCreate.


        :param metadata: The metadata of this DocumentTypeCreate.  # noqa: E501
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def warning_message(self):
        """Gets the warning_message of this DocumentTypeCreate.  # noqa: E501


        :return: The warning_message of this DocumentTypeCreate.  # noqa: E501
        :rtype: str
        """
        return self._warning_message

    @warning_message.setter
    def warning_message(self, warning_message):
        """Sets the warning_message of this DocumentTypeCreate.


        :param warning_message: The warning_message of this DocumentTypeCreate.  # noqa: E501
        :type warning_message: str
        """

        self._warning_message = warning_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentTypeCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentTypeCreate):
            return True

        return self.to_dict() != other.to_dict()
