# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocumentDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pk': 'int',
        'name': 'str',
        'document_type': 'str',
        'file_size': 'int',
        'folder': 'str',
        'status': 'int',
        'status_data': 'DocumentDetailStatusData',
        'available_statuses_data': 'str',
        'assignee': 'int',
        'assign_date': 'datetime',
        'assignee_data': 'DocumentDetailAssigneeData',
        'available_assignees_data': 'str',
        'description': 'str',
        'title': 'str',
        'initial_annotation_id': 'str',
        'page_locations': 'str',
        'notes': 'list[DocumentDetailNotes]',
        'field_values': 'str',
        'field_value_objects': 'str',
        'prev_id': 'str',
        'next_id': 'str',
        'sections': 'str',
        'cluster_id': 'str',
        'user_permissions': 'str'
    }

    attribute_map = {
        'pk': 'pk',
        'name': 'name',
        'document_type': 'document_type',
        'file_size': 'file_size',
        'folder': 'folder',
        'status': 'status',
        'status_data': 'status_data',
        'available_statuses_data': 'available_statuses_data',
        'assignee': 'assignee',
        'assign_date': 'assign_date',
        'assignee_data': 'assignee_data',
        'available_assignees_data': 'available_assignees_data',
        'description': 'description',
        'title': 'title',
        'initial_annotation_id': 'initial_annotation_id',
        'page_locations': 'page_locations',
        'notes': 'notes',
        'field_values': 'field_values',
        'field_value_objects': 'field_value_objects',
        'prev_id': 'prev_id',
        'next_id': 'next_id',
        'sections': 'sections',
        'cluster_id': 'cluster_id',
        'user_permissions': 'user_permissions'
    }

    def __init__(self, pk=None, name=None, document_type=None, file_size=None, folder=None, status=None, status_data=None, available_statuses_data=None, assignee=None, assign_date=None, assignee_data=None, available_assignees_data=None, description=None, title=None, initial_annotation_id=None, page_locations=None, notes=None, field_values=None, field_value_objects=None, prev_id=None, next_id=None, sections=None, cluster_id=None, user_permissions=None, local_vars_configuration=None):  # noqa: E501
        """DocumentDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pk = None
        self._name = None
        self._document_type = None
        self._file_size = None
        self._folder = None
        self._status = None
        self._status_data = None
        self._available_statuses_data = None
        self._assignee = None
        self._assign_date = None
        self._assignee_data = None
        self._available_assignees_data = None
        self._description = None
        self._title = None
        self._initial_annotation_id = None
        self._page_locations = None
        self._notes = None
        self._field_values = None
        self._field_value_objects = None
        self._prev_id = None
        self._next_id = None
        self._sections = None
        self._cluster_id = None
        self._user_permissions = None
        self.discriminator = None

        if pk is not None:
            self.pk = pk
        self.name = name
        self.document_type = document_type
        if file_size is not None:
            self.file_size = file_size
        self.folder = folder
        self.status = status
        self.status_data = status_data
        if available_statuses_data is not None:
            self.available_statuses_data = available_statuses_data
        self.assignee = assignee
        self.assign_date = assign_date
        self.assignee_data = assignee_data
        if available_assignees_data is not None:
            self.available_assignees_data = available_assignees_data
        self.description = description
        self.title = title
        if initial_annotation_id is not None:
            self.initial_annotation_id = initial_annotation_id
        if page_locations is not None:
            self.page_locations = page_locations
        self.notes = notes
        if field_values is not None:
            self.field_values = field_values
        if field_value_objects is not None:
            self.field_value_objects = field_value_objects
        if prev_id is not None:
            self.prev_id = prev_id
        if next_id is not None:
            self.next_id = next_id
        if sections is not None:
            self.sections = sections
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if user_permissions is not None:
            self.user_permissions = user_permissions

    @property
    def pk(self):
        """Gets the pk of this DocumentDetail.  # noqa: E501


        :return: The pk of this DocumentDetail.  # noqa: E501
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this DocumentDetail.


        :param pk: The pk of this DocumentDetail.  # noqa: E501
        :type pk: int
        """

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this DocumentDetail.  # noqa: E501


        :return: The name of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentDetail.


        :param name: The name of this DocumentDetail.  # noqa: E501
        :type name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 1024):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1024`")  # noqa: E501

        self._name = name

    @property
    def document_type(self):
        """Gets the document_type of this DocumentDetail.  # noqa: E501


        :return: The document_type of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this DocumentDetail.


        :param document_type: The document_type of this DocumentDetail.  # noqa: E501
        :type document_type: str
        """

        self._document_type = document_type

    @property
    def file_size(self):
        """Gets the file_size of this DocumentDetail.  # noqa: E501


        :return: The file_size of this DocumentDetail.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this DocumentDetail.


        :param file_size: The file_size of this DocumentDetail.  # noqa: E501
        :type file_size: int
        """
        if (self.local_vars_configuration.client_side_validation and
                file_size is not None and file_size > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `file_size`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                file_size is not None and file_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `file_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._file_size = file_size

    @property
    def folder(self):
        """Gets the folder of this DocumentDetail.  # noqa: E501


        :return: The folder of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this DocumentDetail.


        :param folder: The folder of this DocumentDetail.  # noqa: E501
        :type folder: str
        """
        if (self.local_vars_configuration.client_side_validation and
                folder is not None and len(folder) > 1024):
            raise ValueError("Invalid value for `folder`, length must be less than or equal to `1024`")  # noqa: E501

        self._folder = folder

    @property
    def status(self):
        """Gets the status of this DocumentDetail.  # noqa: E501


        :return: The status of this DocumentDetail.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DocumentDetail.


        :param status: The status of this DocumentDetail.  # noqa: E501
        :type status: int
        """

        self._status = status

    @property
    def status_data(self):
        """Gets the status_data of this DocumentDetail.  # noqa: E501


        :return: The status_data of this DocumentDetail.  # noqa: E501
        :rtype: DocumentDetailStatusData
        """
        return self._status_data

    @status_data.setter
    def status_data(self, status_data):
        """Sets the status_data of this DocumentDetail.


        :param status_data: The status_data of this DocumentDetail.  # noqa: E501
        :type status_data: DocumentDetailStatusData
        """
        if self.local_vars_configuration.client_side_validation and status_data is None:  # noqa: E501
            raise ValueError("Invalid value for `status_data`, must not be `None`")  # noqa: E501

        self._status_data = status_data

    @property
    def available_statuses_data(self):
        """Gets the available_statuses_data of this DocumentDetail.  # noqa: E501


        :return: The available_statuses_data of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._available_statuses_data

    @available_statuses_data.setter
    def available_statuses_data(self, available_statuses_data):
        """Sets the available_statuses_data of this DocumentDetail.


        :param available_statuses_data: The available_statuses_data of this DocumentDetail.  # noqa: E501
        :type available_statuses_data: str
        """

        self._available_statuses_data = available_statuses_data

    @property
    def assignee(self):
        """Gets the assignee of this DocumentDetail.  # noqa: E501


        :return: The assignee of this DocumentDetail.  # noqa: E501
        :rtype: int
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this DocumentDetail.


        :param assignee: The assignee of this DocumentDetail.  # noqa: E501
        :type assignee: int
        """

        self._assignee = assignee

    @property
    def assign_date(self):
        """Gets the assign_date of this DocumentDetail.  # noqa: E501


        :return: The assign_date of this DocumentDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._assign_date

    @assign_date.setter
    def assign_date(self, assign_date):
        """Sets the assign_date of this DocumentDetail.


        :param assign_date: The assign_date of this DocumentDetail.  # noqa: E501
        :type assign_date: datetime
        """

        self._assign_date = assign_date

    @property
    def assignee_data(self):
        """Gets the assignee_data of this DocumentDetail.  # noqa: E501


        :return: The assignee_data of this DocumentDetail.  # noqa: E501
        :rtype: DocumentDetailAssigneeData
        """
        return self._assignee_data

    @assignee_data.setter
    def assignee_data(self, assignee_data):
        """Sets the assignee_data of this DocumentDetail.


        :param assignee_data: The assignee_data of this DocumentDetail.  # noqa: E501
        :type assignee_data: DocumentDetailAssigneeData
        """

        self._assignee_data = assignee_data

    @property
    def available_assignees_data(self):
        """Gets the available_assignees_data of this DocumentDetail.  # noqa: E501


        :return: The available_assignees_data of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._available_assignees_data

    @available_assignees_data.setter
    def available_assignees_data(self, available_assignees_data):
        """Sets the available_assignees_data of this DocumentDetail.


        :param available_assignees_data: The available_assignees_data of this DocumentDetail.  # noqa: E501
        :type available_assignees_data: str
        """

        self._available_assignees_data = available_assignees_data

    @property
    def description(self):
        """Gets the description of this DocumentDetail.  # noqa: E501


        :return: The description of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DocumentDetail.


        :param description: The description of this DocumentDetail.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def title(self):
        """Gets the title of this DocumentDetail.  # noqa: E501


        :return: The title of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DocumentDetail.


        :param title: The title of this DocumentDetail.  # noqa: E501
        :type title: str
        """
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) > 1024):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `1024`")  # noqa: E501

        self._title = title

    @property
    def initial_annotation_id(self):
        """Gets the initial_annotation_id of this DocumentDetail.  # noqa: E501


        :return: The initial_annotation_id of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._initial_annotation_id

    @initial_annotation_id.setter
    def initial_annotation_id(self, initial_annotation_id):
        """Sets the initial_annotation_id of this DocumentDetail.


        :param initial_annotation_id: The initial_annotation_id of this DocumentDetail.  # noqa: E501
        :type initial_annotation_id: str
        """

        self._initial_annotation_id = initial_annotation_id

    @property
    def page_locations(self):
        """Gets the page_locations of this DocumentDetail.  # noqa: E501


        :return: The page_locations of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._page_locations

    @page_locations.setter
    def page_locations(self, page_locations):
        """Sets the page_locations of this DocumentDetail.


        :param page_locations: The page_locations of this DocumentDetail.  # noqa: E501
        :type page_locations: str
        """

        self._page_locations = page_locations

    @property
    def notes(self):
        """Gets the notes of this DocumentDetail.  # noqa: E501


        :return: The notes of this DocumentDetail.  # noqa: E501
        :rtype: list[DocumentDetailNotes]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DocumentDetail.


        :param notes: The notes of this DocumentDetail.  # noqa: E501
        :type notes: list[DocumentDetailNotes]
        """
        if self.local_vars_configuration.client_side_validation and notes is None:  # noqa: E501
            raise ValueError("Invalid value for `notes`, must not be `None`")  # noqa: E501

        self._notes = notes

    @property
    def field_values(self):
        """Gets the field_values of this DocumentDetail.  # noqa: E501


        :return: The field_values of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._field_values

    @field_values.setter
    def field_values(self, field_values):
        """Sets the field_values of this DocumentDetail.


        :param field_values: The field_values of this DocumentDetail.  # noqa: E501
        :type field_values: str
        """

        self._field_values = field_values

    @property
    def field_value_objects(self):
        """Gets the field_value_objects of this DocumentDetail.  # noqa: E501


        :return: The field_value_objects of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._field_value_objects

    @field_value_objects.setter
    def field_value_objects(self, field_value_objects):
        """Sets the field_value_objects of this DocumentDetail.


        :param field_value_objects: The field_value_objects of this DocumentDetail.  # noqa: E501
        :type field_value_objects: str
        """

        self._field_value_objects = field_value_objects

    @property
    def prev_id(self):
        """Gets the prev_id of this DocumentDetail.  # noqa: E501


        :return: The prev_id of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._prev_id

    @prev_id.setter
    def prev_id(self, prev_id):
        """Sets the prev_id of this DocumentDetail.


        :param prev_id: The prev_id of this DocumentDetail.  # noqa: E501
        :type prev_id: str
        """

        self._prev_id = prev_id

    @property
    def next_id(self):
        """Gets the next_id of this DocumentDetail.  # noqa: E501


        :return: The next_id of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._next_id

    @next_id.setter
    def next_id(self, next_id):
        """Sets the next_id of this DocumentDetail.


        :param next_id: The next_id of this DocumentDetail.  # noqa: E501
        :type next_id: str
        """

        self._next_id = next_id

    @property
    def sections(self):
        """Gets the sections of this DocumentDetail.  # noqa: E501


        :return: The sections of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this DocumentDetail.


        :param sections: The sections of this DocumentDetail.  # noqa: E501
        :type sections: str
        """

        self._sections = sections

    @property
    def cluster_id(self):
        """Gets the cluster_id of this DocumentDetail.  # noqa: E501


        :return: The cluster_id of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this DocumentDetail.


        :param cluster_id: The cluster_id of this DocumentDetail.  # noqa: E501
        :type cluster_id: str
        """

        self._cluster_id = cluster_id

    @property
    def user_permissions(self):
        """Gets the user_permissions of this DocumentDetail.  # noqa: E501


        :return: The user_permissions of this DocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._user_permissions

    @user_permissions.setter
    def user_permissions(self, user_permissions):
        """Sets the user_permissions of this DocumentDetail.


        :param user_permissions: The user_permissions of this DocumentDetail.  # noqa: E501
        :type user_permissions: str
        """

        self._user_permissions = user_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentDetail):
            return True

        return self.to_dict() != other.to_dict()
