# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocumentFieldAnnotation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pk': 'int',
        'uid': 'str',
        'project_id': 'int',
        'project_name': 'str',
        'document_id': 'str',
        'document_name': 'str',
        'document_type': 'str',
        'document_status': 'str',
        'field_id': 'str',
        'field_name': 'str',
        'value': 'object',
        'location_start': 'int',
        'location_end': 'int',
        'location_text': 'str',
        'assignee_id': 'int',
        'assign_date': 'datetime',
        'status_id': 'int',
        'status_name': 'str',
        'assignee_name': 'str',
        'modified_by_id': 'str',
        'modified_date': 'datetime'
    }

    attribute_map = {
        'pk': 'pk',
        'uid': 'uid',
        'project_id': 'project_id',
        'project_name': 'project_name',
        'document_id': 'document_id',
        'document_name': 'document_name',
        'document_type': 'document_type',
        'document_status': 'document_status',
        'field_id': 'field_id',
        'field_name': 'field_name',
        'value': 'value',
        'location_start': 'location_start',
        'location_end': 'location_end',
        'location_text': 'location_text',
        'assignee_id': 'assignee_id',
        'assign_date': 'assign_date',
        'status_id': 'status_id',
        'status_name': 'status_name',
        'assignee_name': 'assignee_name',
        'modified_by_id': 'modified_by_id',
        'modified_date': 'modified_date'
    }

    def __init__(self, pk=None, uid=None, project_id=None, project_name=None, document_id=None, document_name=None, document_type=None, document_status=None, field_id=None, field_name=None, value=None, location_start=None, location_end=None, location_text=None, assignee_id=None, assign_date=None, status_id=None, status_name=None, assignee_name=None, modified_by_id=None, modified_date=None, local_vars_configuration=None):  # noqa: E501
        """DocumentFieldAnnotation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pk = None
        self._uid = None
        self._project_id = None
        self._project_name = None
        self._document_id = None
        self._document_name = None
        self._document_type = None
        self._document_status = None
        self._field_id = None
        self._field_name = None
        self._value = None
        self._location_start = None
        self._location_end = None
        self._location_text = None
        self._assignee_id = None
        self._assign_date = None
        self._status_id = None
        self._status_name = None
        self._assignee_name = None
        self._modified_by_id = None
        self._modified_date = None
        self.discriminator = None

        if pk is not None:
            self.pk = pk
        if uid is not None:
            self.uid = uid
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if document_id is not None:
            self.document_id = document_id
        if document_name is not None:
            self.document_name = document_name
        if document_type is not None:
            self.document_type = document_type
        if document_status is not None:
            self.document_status = document_status
        if field_id is not None:
            self.field_id = field_id
        if field_name is not None:
            self.field_name = field_name
        self.value = value
        self.location_start = location_start
        self.location_end = location_end
        self.location_text = location_text
        self.assignee_id = assignee_id
        self.assign_date = assign_date
        self.status_id = status_id
        if status_name is not None:
            self.status_name = status_name
        if assignee_name is not None:
            self.assignee_name = assignee_name
        if modified_by_id is not None:
            self.modified_by_id = modified_by_id
        if modified_date is not None:
            self.modified_date = modified_date

    @property
    def pk(self):
        """Gets the pk of this DocumentFieldAnnotation.  # noqa: E501


        :return: The pk of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this DocumentFieldAnnotation.


        :param pk: The pk of this DocumentFieldAnnotation.  # noqa: E501
        :type pk: int
        """

        self._pk = pk

    @property
    def uid(self):
        """Gets the uid of this DocumentFieldAnnotation.  # noqa: E501


        :return: The uid of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DocumentFieldAnnotation.


        :param uid: The uid of this DocumentFieldAnnotation.  # noqa: E501
        :type uid: str
        """

        self._uid = uid

    @property
    def project_id(self):
        """Gets the project_id of this DocumentFieldAnnotation.  # noqa: E501


        :return: The project_id of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DocumentFieldAnnotation.


        :param project_id: The project_id of this DocumentFieldAnnotation.  # noqa: E501
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this DocumentFieldAnnotation.  # noqa: E501


        :return: The project_name of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this DocumentFieldAnnotation.


        :param project_name: The project_name of this DocumentFieldAnnotation.  # noqa: E501
        :type project_name: str
        """

        self._project_name = project_name

    @property
    def document_id(self):
        """Gets the document_id of this DocumentFieldAnnotation.  # noqa: E501


        :return: The document_id of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this DocumentFieldAnnotation.


        :param document_id: The document_id of this DocumentFieldAnnotation.  # noqa: E501
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def document_name(self):
        """Gets the document_name of this DocumentFieldAnnotation.  # noqa: E501


        :return: The document_name of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this DocumentFieldAnnotation.


        :param document_name: The document_name of this DocumentFieldAnnotation.  # noqa: E501
        :type document_name: str
        """

        self._document_name = document_name

    @property
    def document_type(self):
        """Gets the document_type of this DocumentFieldAnnotation.  # noqa: E501


        :return: The document_type of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this DocumentFieldAnnotation.


        :param document_type: The document_type of this DocumentFieldAnnotation.  # noqa: E501
        :type document_type: str
        """

        self._document_type = document_type

    @property
    def document_status(self):
        """Gets the document_status of this DocumentFieldAnnotation.  # noqa: E501


        :return: The document_status of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._document_status

    @document_status.setter
    def document_status(self, document_status):
        """Sets the document_status of this DocumentFieldAnnotation.


        :param document_status: The document_status of this DocumentFieldAnnotation.  # noqa: E501
        :type document_status: str
        """

        self._document_status = document_status

    @property
    def field_id(self):
        """Gets the field_id of this DocumentFieldAnnotation.  # noqa: E501


        :return: The field_id of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this DocumentFieldAnnotation.


        :param field_id: The field_id of this DocumentFieldAnnotation.  # noqa: E501
        :type field_id: str
        """

        self._field_id = field_id

    @property
    def field_name(self):
        """Gets the field_name of this DocumentFieldAnnotation.  # noqa: E501


        :return: The field_name of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this DocumentFieldAnnotation.


        :param field_name: The field_name of this DocumentFieldAnnotation.  # noqa: E501
        :type field_name: str
        """

        self._field_name = field_name

    @property
    def value(self):
        """Gets the value of this DocumentFieldAnnotation.  # noqa: E501


        :return: The value of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DocumentFieldAnnotation.


        :param value: The value of this DocumentFieldAnnotation.  # noqa: E501
        :type value: object
        """

        self._value = value

    @property
    def location_start(self):
        """Gets the location_start of this DocumentFieldAnnotation.  # noqa: E501


        :return: The location_start of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: int
        """
        return self._location_start

    @location_start.setter
    def location_start(self, location_start):
        """Sets the location_start of this DocumentFieldAnnotation.


        :param location_start: The location_start of this DocumentFieldAnnotation.  # noqa: E501
        :type location_start: int
        """
        if (self.local_vars_configuration.client_side_validation and
                location_start is not None and location_start > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `location_start`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                location_start is not None and location_start < 0):  # noqa: E501
            raise ValueError("Invalid value for `location_start`, must be a value greater than or equal to `0`")  # noqa: E501

        self._location_start = location_start

    @property
    def location_end(self):
        """Gets the location_end of this DocumentFieldAnnotation.  # noqa: E501


        :return: The location_end of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: int
        """
        return self._location_end

    @location_end.setter
    def location_end(self, location_end):
        """Sets the location_end of this DocumentFieldAnnotation.


        :param location_end: The location_end of this DocumentFieldAnnotation.  # noqa: E501
        :type location_end: int
        """
        if (self.local_vars_configuration.client_side_validation and
                location_end is not None and location_end > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `location_end`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                location_end is not None and location_end < 0):  # noqa: E501
            raise ValueError("Invalid value for `location_end`, must be a value greater than or equal to `0`")  # noqa: E501

        self._location_end = location_end

    @property
    def location_text(self):
        """Gets the location_text of this DocumentFieldAnnotation.  # noqa: E501


        :return: The location_text of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._location_text

    @location_text.setter
    def location_text(self, location_text):
        """Sets the location_text of this DocumentFieldAnnotation.


        :param location_text: The location_text of this DocumentFieldAnnotation.  # noqa: E501
        :type location_text: str
        """

        self._location_text = location_text

    @property
    def assignee_id(self):
        """Gets the assignee_id of this DocumentFieldAnnotation.  # noqa: E501


        :return: The assignee_id of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: int
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this DocumentFieldAnnotation.


        :param assignee_id: The assignee_id of this DocumentFieldAnnotation.  # noqa: E501
        :type assignee_id: int
        """
        if self.local_vars_configuration.client_side_validation and assignee_id is None:  # noqa: E501
            raise ValueError("Invalid value for `assignee_id`, must not be `None`")  # noqa: E501

        self._assignee_id = assignee_id

    @property
    def assign_date(self):
        """Gets the assign_date of this DocumentFieldAnnotation.  # noqa: E501


        :return: The assign_date of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: datetime
        """
        return self._assign_date

    @assign_date.setter
    def assign_date(self, assign_date):
        """Sets the assign_date of this DocumentFieldAnnotation.


        :param assign_date: The assign_date of this DocumentFieldAnnotation.  # noqa: E501
        :type assign_date: datetime
        """

        self._assign_date = assign_date

    @property
    def status_id(self):
        """Gets the status_id of this DocumentFieldAnnotation.  # noqa: E501


        :return: The status_id of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this DocumentFieldAnnotation.


        :param status_id: The status_id of this DocumentFieldAnnotation.  # noqa: E501
        :type status_id: int
        """
        if self.local_vars_configuration.client_side_validation and status_id is None:  # noqa: E501
            raise ValueError("Invalid value for `status_id`, must not be `None`")  # noqa: E501

        self._status_id = status_id

    @property
    def status_name(self):
        """Gets the status_name of this DocumentFieldAnnotation.  # noqa: E501


        :return: The status_name of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this DocumentFieldAnnotation.


        :param status_name: The status_name of this DocumentFieldAnnotation.  # noqa: E501
        :type status_name: str
        """

        self._status_name = status_name

    @property
    def assignee_name(self):
        """Gets the assignee_name of this DocumentFieldAnnotation.  # noqa: E501


        :return: The assignee_name of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._assignee_name

    @assignee_name.setter
    def assignee_name(self, assignee_name):
        """Sets the assignee_name of this DocumentFieldAnnotation.


        :param assignee_name: The assignee_name of this DocumentFieldAnnotation.  # noqa: E501
        :type assignee_name: str
        """

        self._assignee_name = assignee_name

    @property
    def modified_by_id(self):
        """Gets the modified_by_id of this DocumentFieldAnnotation.  # noqa: E501


        :return: The modified_by_id of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._modified_by_id

    @modified_by_id.setter
    def modified_by_id(self, modified_by_id):
        """Sets the modified_by_id of this DocumentFieldAnnotation.


        :param modified_by_id: The modified_by_id of this DocumentFieldAnnotation.  # noqa: E501
        :type modified_by_id: str
        """

        self._modified_by_id = modified_by_id

    @property
    def modified_date(self):
        """Gets the modified_date of this DocumentFieldAnnotation.  # noqa: E501


        :return: The modified_date of this DocumentFieldAnnotation.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this DocumentFieldAnnotation.


        :param modified_date: The modified_date of this DocumentFieldAnnotation.  # noqa: E501
        :type modified_date: datetime
        """

        self._modified_date = modified_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentFieldAnnotation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentFieldAnnotation):
            return True

        return self.to_dict() != other.to_dict()
