# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocumentTypeStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'code': 'str',
        'title': 'str',
        'fields_count': 'int',
        'detectors_count': 'int',
        'hide_until_python_count': 'int',
        'hidden_always_count': 'int',
        'hide_until_python_pcnt': 'float',
        'hidden_always_pcnt': 'float',
        'fields_data': 'str',
        'detector_disabled_count': 'float',
        'detector_disabled_pcnt': 'float',
        'detector_use_regexps_only_count': 'float',
        'detector_use_regexps_only_pcnt': 'float',
        'detector_regexp_table_count': 'float',
        'detector_regexp_table_pcnt': 'float',
        'detector_use_formula_only_count': 'float',
        'detector_use_formula_only_pcnt': 'float',
        'detector_regexps_and_text_based_ml_count': 'float',
        'detector_regexps_and_text_based_ml_pcnt': 'float',
        'detector_text_based_ml_only_count': 'float',
        'detector_text_based_ml_only_pcnt': 'float',
        'detector_formula_and_fields_based_ml_count': 'float',
        'detector_formula_and_fields_based_ml_pcnt': 'float',
        'detector_fields_based_ml_only_count': 'float',
        'detector_fields_based_ml_only_pcnt': 'float',
        'detector_fields_based_prob_ml_only_count': 'float',
        'detector_fields_based_prob_ml_only_pcnt': 'float',
        'detector_python_coded_field_count': 'float',
        'detector_python_coded_field_pcnt': 'float',
        'detector_field_based_regexps_count': 'float',
        'detector_field_based_regexps_pcnt': 'float',
        'detector_mlflow_model_count': 'float',
        'detector_mlflow_model_pcnt': 'float'
    }

    attribute_map = {
        'uid': 'uid',
        'code': 'code',
        'title': 'title',
        'fields_count': 'fields_count',
        'detectors_count': 'detectors_count',
        'hide_until_python_count': 'hide_until_python_count',
        'hidden_always_count': 'hidden_always_count',
        'hide_until_python_pcnt': 'hide_until_python_pcnt',
        'hidden_always_pcnt': 'hidden_always_pcnt',
        'fields_data': 'fields_data',
        'detector_disabled_count': 'detector_disabled_count',
        'detector_disabled_pcnt': 'detector_disabled_pcnt',
        'detector_use_regexps_only_count': 'detector_use_regexps_only_count',
        'detector_use_regexps_only_pcnt': 'detector_use_regexps_only_pcnt',
        'detector_regexp_table_count': 'detector_regexp_table_count',
        'detector_regexp_table_pcnt': 'detector_regexp_table_pcnt',
        'detector_use_formula_only_count': 'detector_use_formula_only_count',
        'detector_use_formula_only_pcnt': 'detector_use_formula_only_pcnt',
        'detector_regexps_and_text_based_ml_count': 'detector_regexps_and_text_based_ml_count',
        'detector_regexps_and_text_based_ml_pcnt': 'detector_regexps_and_text_based_ml_pcnt',
        'detector_text_based_ml_only_count': 'detector_text_based_ml_only_count',
        'detector_text_based_ml_only_pcnt': 'detector_text_based_ml_only_pcnt',
        'detector_formula_and_fields_based_ml_count': 'detector_formula_and_fields_based_ml_count',
        'detector_formula_and_fields_based_ml_pcnt': 'detector_formula_and_fields_based_ml_pcnt',
        'detector_fields_based_ml_only_count': 'detector_fields_based_ml_only_count',
        'detector_fields_based_ml_only_pcnt': 'detector_fields_based_ml_only_pcnt',
        'detector_fields_based_prob_ml_only_count': 'detector_fields_based_prob_ml_only_count',
        'detector_fields_based_prob_ml_only_pcnt': 'detector_fields_based_prob_ml_only_pcnt',
        'detector_python_coded_field_count': 'detector_python_coded_field_count',
        'detector_python_coded_field_pcnt': 'detector_python_coded_field_pcnt',
        'detector_field_based_regexps_count': 'detector_field_based_regexps_count',
        'detector_field_based_regexps_pcnt': 'detector_field_based_regexps_pcnt',
        'detector_mlflow_model_count': 'detector_mlflow_model_count',
        'detector_mlflow_model_pcnt': 'detector_mlflow_model_pcnt'
    }

    def __init__(self, uid=None, code=None, title=None, fields_count=None, detectors_count=None, hide_until_python_count=None, hidden_always_count=None, hide_until_python_pcnt=None, hidden_always_pcnt=None, fields_data=None, detector_disabled_count=None, detector_disabled_pcnt=None, detector_use_regexps_only_count=None, detector_use_regexps_only_pcnt=None, detector_regexp_table_count=None, detector_regexp_table_pcnt=None, detector_use_formula_only_count=None, detector_use_formula_only_pcnt=None, detector_regexps_and_text_based_ml_count=None, detector_regexps_and_text_based_ml_pcnt=None, detector_text_based_ml_only_count=None, detector_text_based_ml_only_pcnt=None, detector_formula_and_fields_based_ml_count=None, detector_formula_and_fields_based_ml_pcnt=None, detector_fields_based_ml_only_count=None, detector_fields_based_ml_only_pcnt=None, detector_fields_based_prob_ml_only_count=None, detector_fields_based_prob_ml_only_pcnt=None, detector_python_coded_field_count=None, detector_python_coded_field_pcnt=None, detector_field_based_regexps_count=None, detector_field_based_regexps_pcnt=None, detector_mlflow_model_count=None, detector_mlflow_model_pcnt=None, local_vars_configuration=None):  # noqa: E501
        """DocumentTypeStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uid = None
        self._code = None
        self._title = None
        self._fields_count = None
        self._detectors_count = None
        self._hide_until_python_count = None
        self._hidden_always_count = None
        self._hide_until_python_pcnt = None
        self._hidden_always_pcnt = None
        self._fields_data = None
        self._detector_disabled_count = None
        self._detector_disabled_pcnt = None
        self._detector_use_regexps_only_count = None
        self._detector_use_regexps_only_pcnt = None
        self._detector_regexp_table_count = None
        self._detector_regexp_table_pcnt = None
        self._detector_use_formula_only_count = None
        self._detector_use_formula_only_pcnt = None
        self._detector_regexps_and_text_based_ml_count = None
        self._detector_regexps_and_text_based_ml_pcnt = None
        self._detector_text_based_ml_only_count = None
        self._detector_text_based_ml_only_pcnt = None
        self._detector_formula_and_fields_based_ml_count = None
        self._detector_formula_and_fields_based_ml_pcnt = None
        self._detector_fields_based_ml_only_count = None
        self._detector_fields_based_ml_only_pcnt = None
        self._detector_fields_based_prob_ml_only_count = None
        self._detector_fields_based_prob_ml_only_pcnt = None
        self._detector_python_coded_field_count = None
        self._detector_python_coded_field_pcnt = None
        self._detector_field_based_regexps_count = None
        self._detector_field_based_regexps_pcnt = None
        self._detector_mlflow_model_count = None
        self._detector_mlflow_model_pcnt = None
        self.discriminator = None

        self.uid = uid
        self.code = code
        self.title = title
        self.fields_count = fields_count
        self.detectors_count = detectors_count
        self.hide_until_python_count = hide_until_python_count
        self.hidden_always_count = hidden_always_count
        self.hide_until_python_pcnt = hide_until_python_pcnt
        self.hidden_always_pcnt = hidden_always_pcnt
        if fields_data is not None:
            self.fields_data = fields_data
        self.detector_disabled_count = detector_disabled_count
        self.detector_disabled_pcnt = detector_disabled_pcnt
        self.detector_use_regexps_only_count = detector_use_regexps_only_count
        self.detector_use_regexps_only_pcnt = detector_use_regexps_only_pcnt
        self.detector_regexp_table_count = detector_regexp_table_count
        self.detector_regexp_table_pcnt = detector_regexp_table_pcnt
        self.detector_use_formula_only_count = detector_use_formula_only_count
        self.detector_use_formula_only_pcnt = detector_use_formula_only_pcnt
        self.detector_regexps_and_text_based_ml_count = detector_regexps_and_text_based_ml_count
        self.detector_regexps_and_text_based_ml_pcnt = detector_regexps_and_text_based_ml_pcnt
        self.detector_text_based_ml_only_count = detector_text_based_ml_only_count
        self.detector_text_based_ml_only_pcnt = detector_text_based_ml_only_pcnt
        self.detector_formula_and_fields_based_ml_count = detector_formula_and_fields_based_ml_count
        self.detector_formula_and_fields_based_ml_pcnt = detector_formula_and_fields_based_ml_pcnt
        self.detector_fields_based_ml_only_count = detector_fields_based_ml_only_count
        self.detector_fields_based_ml_only_pcnt = detector_fields_based_ml_only_pcnt
        self.detector_fields_based_prob_ml_only_count = detector_fields_based_prob_ml_only_count
        self.detector_fields_based_prob_ml_only_pcnt = detector_fields_based_prob_ml_only_pcnt
        self.detector_python_coded_field_count = detector_python_coded_field_count
        self.detector_python_coded_field_pcnt = detector_python_coded_field_pcnt
        self.detector_field_based_regexps_count = detector_field_based_regexps_count
        self.detector_field_based_regexps_pcnt = detector_field_based_regexps_pcnt
        self.detector_mlflow_model_count = detector_mlflow_model_count
        self.detector_mlflow_model_pcnt = detector_mlflow_model_pcnt

    @property
    def uid(self):
        """Gets the uid of this DocumentTypeStats.  # noqa: E501


        :return: The uid of this DocumentTypeStats.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DocumentTypeStats.


        :param uid: The uid of this DocumentTypeStats.  # noqa: E501
        :type uid: str
        """
        if self.local_vars_configuration.client_side_validation and uid is None:  # noqa: E501
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def code(self):
        """Gets the code of this DocumentTypeStats.  # noqa: E501


        :return: The code of this DocumentTypeStats.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DocumentTypeStats.


        :param code: The code of this DocumentTypeStats.  # noqa: E501
        :type code: str
        """
        if self.local_vars_configuration.client_side_validation and code is None:  # noqa: E501
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def title(self):
        """Gets the title of this DocumentTypeStats.  # noqa: E501


        :return: The title of this DocumentTypeStats.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DocumentTypeStats.


        :param title: The title of this DocumentTypeStats.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def fields_count(self):
        """Gets the fields_count of this DocumentTypeStats.  # noqa: E501


        :return: The fields_count of this DocumentTypeStats.  # noqa: E501
        :rtype: int
        """
        return self._fields_count

    @fields_count.setter
    def fields_count(self, fields_count):
        """Sets the fields_count of this DocumentTypeStats.


        :param fields_count: The fields_count of this DocumentTypeStats.  # noqa: E501
        :type fields_count: int
        """
        if self.local_vars_configuration.client_side_validation and fields_count is None:  # noqa: E501
            raise ValueError("Invalid value for `fields_count`, must not be `None`")  # noqa: E501

        self._fields_count = fields_count

    @property
    def detectors_count(self):
        """Gets the detectors_count of this DocumentTypeStats.  # noqa: E501


        :return: The detectors_count of this DocumentTypeStats.  # noqa: E501
        :rtype: int
        """
        return self._detectors_count

    @detectors_count.setter
    def detectors_count(self, detectors_count):
        """Sets the detectors_count of this DocumentTypeStats.


        :param detectors_count: The detectors_count of this DocumentTypeStats.  # noqa: E501
        :type detectors_count: int
        """
        if self.local_vars_configuration.client_side_validation and detectors_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detectors_count`, must not be `None`")  # noqa: E501

        self._detectors_count = detectors_count

    @property
    def hide_until_python_count(self):
        """Gets the hide_until_python_count of this DocumentTypeStats.  # noqa: E501


        :return: The hide_until_python_count of this DocumentTypeStats.  # noqa: E501
        :rtype: int
        """
        return self._hide_until_python_count

    @hide_until_python_count.setter
    def hide_until_python_count(self, hide_until_python_count):
        """Sets the hide_until_python_count of this DocumentTypeStats.


        :param hide_until_python_count: The hide_until_python_count of this DocumentTypeStats.  # noqa: E501
        :type hide_until_python_count: int
        """
        if self.local_vars_configuration.client_side_validation and hide_until_python_count is None:  # noqa: E501
            raise ValueError("Invalid value for `hide_until_python_count`, must not be `None`")  # noqa: E501

        self._hide_until_python_count = hide_until_python_count

    @property
    def hidden_always_count(self):
        """Gets the hidden_always_count of this DocumentTypeStats.  # noqa: E501


        :return: The hidden_always_count of this DocumentTypeStats.  # noqa: E501
        :rtype: int
        """
        return self._hidden_always_count

    @hidden_always_count.setter
    def hidden_always_count(self, hidden_always_count):
        """Sets the hidden_always_count of this DocumentTypeStats.


        :param hidden_always_count: The hidden_always_count of this DocumentTypeStats.  # noqa: E501
        :type hidden_always_count: int
        """
        if self.local_vars_configuration.client_side_validation and hidden_always_count is None:  # noqa: E501
            raise ValueError("Invalid value for `hidden_always_count`, must not be `None`")  # noqa: E501

        self._hidden_always_count = hidden_always_count

    @property
    def hide_until_python_pcnt(self):
        """Gets the hide_until_python_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The hide_until_python_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._hide_until_python_pcnt

    @hide_until_python_pcnt.setter
    def hide_until_python_pcnt(self, hide_until_python_pcnt):
        """Sets the hide_until_python_pcnt of this DocumentTypeStats.


        :param hide_until_python_pcnt: The hide_until_python_pcnt of this DocumentTypeStats.  # noqa: E501
        :type hide_until_python_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and hide_until_python_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `hide_until_python_pcnt`, must not be `None`")  # noqa: E501

        self._hide_until_python_pcnt = hide_until_python_pcnt

    @property
    def hidden_always_pcnt(self):
        """Gets the hidden_always_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The hidden_always_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._hidden_always_pcnt

    @hidden_always_pcnt.setter
    def hidden_always_pcnt(self, hidden_always_pcnt):
        """Sets the hidden_always_pcnt of this DocumentTypeStats.


        :param hidden_always_pcnt: The hidden_always_pcnt of this DocumentTypeStats.  # noqa: E501
        :type hidden_always_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and hidden_always_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `hidden_always_pcnt`, must not be `None`")  # noqa: E501

        self._hidden_always_pcnt = hidden_always_pcnt

    @property
    def fields_data(self):
        """Gets the fields_data of this DocumentTypeStats.  # noqa: E501


        :return: The fields_data of this DocumentTypeStats.  # noqa: E501
        :rtype: str
        """
        return self._fields_data

    @fields_data.setter
    def fields_data(self, fields_data):
        """Sets the fields_data of this DocumentTypeStats.


        :param fields_data: The fields_data of this DocumentTypeStats.  # noqa: E501
        :type fields_data: str
        """

        self._fields_data = fields_data

    @property
    def detector_disabled_count(self):
        """Gets the detector_disabled_count of this DocumentTypeStats.  # noqa: E501


        :return: The detector_disabled_count of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_disabled_count

    @detector_disabled_count.setter
    def detector_disabled_count(self, detector_disabled_count):
        """Sets the detector_disabled_count of this DocumentTypeStats.


        :param detector_disabled_count: The detector_disabled_count of this DocumentTypeStats.  # noqa: E501
        :type detector_disabled_count: float
        """
        if self.local_vars_configuration.client_side_validation and detector_disabled_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_disabled_count`, must not be `None`")  # noqa: E501

        self._detector_disabled_count = detector_disabled_count

    @property
    def detector_disabled_pcnt(self):
        """Gets the detector_disabled_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The detector_disabled_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_disabled_pcnt

    @detector_disabled_pcnt.setter
    def detector_disabled_pcnt(self, detector_disabled_pcnt):
        """Sets the detector_disabled_pcnt of this DocumentTypeStats.


        :param detector_disabled_pcnt: The detector_disabled_pcnt of this DocumentTypeStats.  # noqa: E501
        :type detector_disabled_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and detector_disabled_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_disabled_pcnt`, must not be `None`")  # noqa: E501

        self._detector_disabled_pcnt = detector_disabled_pcnt

    @property
    def detector_use_regexps_only_count(self):
        """Gets the detector_use_regexps_only_count of this DocumentTypeStats.  # noqa: E501


        :return: The detector_use_regexps_only_count of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_use_regexps_only_count

    @detector_use_regexps_only_count.setter
    def detector_use_regexps_only_count(self, detector_use_regexps_only_count):
        """Sets the detector_use_regexps_only_count of this DocumentTypeStats.


        :param detector_use_regexps_only_count: The detector_use_regexps_only_count of this DocumentTypeStats.  # noqa: E501
        :type detector_use_regexps_only_count: float
        """
        if self.local_vars_configuration.client_side_validation and detector_use_regexps_only_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_use_regexps_only_count`, must not be `None`")  # noqa: E501

        self._detector_use_regexps_only_count = detector_use_regexps_only_count

    @property
    def detector_use_regexps_only_pcnt(self):
        """Gets the detector_use_regexps_only_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The detector_use_regexps_only_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_use_regexps_only_pcnt

    @detector_use_regexps_only_pcnt.setter
    def detector_use_regexps_only_pcnt(self, detector_use_regexps_only_pcnt):
        """Sets the detector_use_regexps_only_pcnt of this DocumentTypeStats.


        :param detector_use_regexps_only_pcnt: The detector_use_regexps_only_pcnt of this DocumentTypeStats.  # noqa: E501
        :type detector_use_regexps_only_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and detector_use_regexps_only_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_use_regexps_only_pcnt`, must not be `None`")  # noqa: E501

        self._detector_use_regexps_only_pcnt = detector_use_regexps_only_pcnt

    @property
    def detector_regexp_table_count(self):
        """Gets the detector_regexp_table_count of this DocumentTypeStats.  # noqa: E501


        :return: The detector_regexp_table_count of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_regexp_table_count

    @detector_regexp_table_count.setter
    def detector_regexp_table_count(self, detector_regexp_table_count):
        """Sets the detector_regexp_table_count of this DocumentTypeStats.


        :param detector_regexp_table_count: The detector_regexp_table_count of this DocumentTypeStats.  # noqa: E501
        :type detector_regexp_table_count: float
        """
        if self.local_vars_configuration.client_side_validation and detector_regexp_table_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_regexp_table_count`, must not be `None`")  # noqa: E501

        self._detector_regexp_table_count = detector_regexp_table_count

    @property
    def detector_regexp_table_pcnt(self):
        """Gets the detector_regexp_table_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The detector_regexp_table_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_regexp_table_pcnt

    @detector_regexp_table_pcnt.setter
    def detector_regexp_table_pcnt(self, detector_regexp_table_pcnt):
        """Sets the detector_regexp_table_pcnt of this DocumentTypeStats.


        :param detector_regexp_table_pcnt: The detector_regexp_table_pcnt of this DocumentTypeStats.  # noqa: E501
        :type detector_regexp_table_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and detector_regexp_table_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_regexp_table_pcnt`, must not be `None`")  # noqa: E501

        self._detector_regexp_table_pcnt = detector_regexp_table_pcnt

    @property
    def detector_use_formula_only_count(self):
        """Gets the detector_use_formula_only_count of this DocumentTypeStats.  # noqa: E501


        :return: The detector_use_formula_only_count of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_use_formula_only_count

    @detector_use_formula_only_count.setter
    def detector_use_formula_only_count(self, detector_use_formula_only_count):
        """Sets the detector_use_formula_only_count of this DocumentTypeStats.


        :param detector_use_formula_only_count: The detector_use_formula_only_count of this DocumentTypeStats.  # noqa: E501
        :type detector_use_formula_only_count: float
        """
        if self.local_vars_configuration.client_side_validation and detector_use_formula_only_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_use_formula_only_count`, must not be `None`")  # noqa: E501

        self._detector_use_formula_only_count = detector_use_formula_only_count

    @property
    def detector_use_formula_only_pcnt(self):
        """Gets the detector_use_formula_only_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The detector_use_formula_only_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_use_formula_only_pcnt

    @detector_use_formula_only_pcnt.setter
    def detector_use_formula_only_pcnt(self, detector_use_formula_only_pcnt):
        """Sets the detector_use_formula_only_pcnt of this DocumentTypeStats.


        :param detector_use_formula_only_pcnt: The detector_use_formula_only_pcnt of this DocumentTypeStats.  # noqa: E501
        :type detector_use_formula_only_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and detector_use_formula_only_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_use_formula_only_pcnt`, must not be `None`")  # noqa: E501

        self._detector_use_formula_only_pcnt = detector_use_formula_only_pcnt

    @property
    def detector_regexps_and_text_based_ml_count(self):
        """Gets the detector_regexps_and_text_based_ml_count of this DocumentTypeStats.  # noqa: E501


        :return: The detector_regexps_and_text_based_ml_count of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_regexps_and_text_based_ml_count

    @detector_regexps_and_text_based_ml_count.setter
    def detector_regexps_and_text_based_ml_count(self, detector_regexps_and_text_based_ml_count):
        """Sets the detector_regexps_and_text_based_ml_count of this DocumentTypeStats.


        :param detector_regexps_and_text_based_ml_count: The detector_regexps_and_text_based_ml_count of this DocumentTypeStats.  # noqa: E501
        :type detector_regexps_and_text_based_ml_count: float
        """
        if self.local_vars_configuration.client_side_validation and detector_regexps_and_text_based_ml_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_regexps_and_text_based_ml_count`, must not be `None`")  # noqa: E501

        self._detector_regexps_and_text_based_ml_count = detector_regexps_and_text_based_ml_count

    @property
    def detector_regexps_and_text_based_ml_pcnt(self):
        """Gets the detector_regexps_and_text_based_ml_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The detector_regexps_and_text_based_ml_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_regexps_and_text_based_ml_pcnt

    @detector_regexps_and_text_based_ml_pcnt.setter
    def detector_regexps_and_text_based_ml_pcnt(self, detector_regexps_and_text_based_ml_pcnt):
        """Sets the detector_regexps_and_text_based_ml_pcnt of this DocumentTypeStats.


        :param detector_regexps_and_text_based_ml_pcnt: The detector_regexps_and_text_based_ml_pcnt of this DocumentTypeStats.  # noqa: E501
        :type detector_regexps_and_text_based_ml_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and detector_regexps_and_text_based_ml_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_regexps_and_text_based_ml_pcnt`, must not be `None`")  # noqa: E501

        self._detector_regexps_and_text_based_ml_pcnt = detector_regexps_and_text_based_ml_pcnt

    @property
    def detector_text_based_ml_only_count(self):
        """Gets the detector_text_based_ml_only_count of this DocumentTypeStats.  # noqa: E501


        :return: The detector_text_based_ml_only_count of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_text_based_ml_only_count

    @detector_text_based_ml_only_count.setter
    def detector_text_based_ml_only_count(self, detector_text_based_ml_only_count):
        """Sets the detector_text_based_ml_only_count of this DocumentTypeStats.


        :param detector_text_based_ml_only_count: The detector_text_based_ml_only_count of this DocumentTypeStats.  # noqa: E501
        :type detector_text_based_ml_only_count: float
        """
        if self.local_vars_configuration.client_side_validation and detector_text_based_ml_only_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_text_based_ml_only_count`, must not be `None`")  # noqa: E501

        self._detector_text_based_ml_only_count = detector_text_based_ml_only_count

    @property
    def detector_text_based_ml_only_pcnt(self):
        """Gets the detector_text_based_ml_only_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The detector_text_based_ml_only_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_text_based_ml_only_pcnt

    @detector_text_based_ml_only_pcnt.setter
    def detector_text_based_ml_only_pcnt(self, detector_text_based_ml_only_pcnt):
        """Sets the detector_text_based_ml_only_pcnt of this DocumentTypeStats.


        :param detector_text_based_ml_only_pcnt: The detector_text_based_ml_only_pcnt of this DocumentTypeStats.  # noqa: E501
        :type detector_text_based_ml_only_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and detector_text_based_ml_only_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_text_based_ml_only_pcnt`, must not be `None`")  # noqa: E501

        self._detector_text_based_ml_only_pcnt = detector_text_based_ml_only_pcnt

    @property
    def detector_formula_and_fields_based_ml_count(self):
        """Gets the detector_formula_and_fields_based_ml_count of this DocumentTypeStats.  # noqa: E501


        :return: The detector_formula_and_fields_based_ml_count of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_formula_and_fields_based_ml_count

    @detector_formula_and_fields_based_ml_count.setter
    def detector_formula_and_fields_based_ml_count(self, detector_formula_and_fields_based_ml_count):
        """Sets the detector_formula_and_fields_based_ml_count of this DocumentTypeStats.


        :param detector_formula_and_fields_based_ml_count: The detector_formula_and_fields_based_ml_count of this DocumentTypeStats.  # noqa: E501
        :type detector_formula_and_fields_based_ml_count: float
        """
        if self.local_vars_configuration.client_side_validation and detector_formula_and_fields_based_ml_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_formula_and_fields_based_ml_count`, must not be `None`")  # noqa: E501

        self._detector_formula_and_fields_based_ml_count = detector_formula_and_fields_based_ml_count

    @property
    def detector_formula_and_fields_based_ml_pcnt(self):
        """Gets the detector_formula_and_fields_based_ml_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The detector_formula_and_fields_based_ml_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_formula_and_fields_based_ml_pcnt

    @detector_formula_and_fields_based_ml_pcnt.setter
    def detector_formula_and_fields_based_ml_pcnt(self, detector_formula_and_fields_based_ml_pcnt):
        """Sets the detector_formula_and_fields_based_ml_pcnt of this DocumentTypeStats.


        :param detector_formula_and_fields_based_ml_pcnt: The detector_formula_and_fields_based_ml_pcnt of this DocumentTypeStats.  # noqa: E501
        :type detector_formula_and_fields_based_ml_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and detector_formula_and_fields_based_ml_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_formula_and_fields_based_ml_pcnt`, must not be `None`")  # noqa: E501

        self._detector_formula_and_fields_based_ml_pcnt = detector_formula_and_fields_based_ml_pcnt

    @property
    def detector_fields_based_ml_only_count(self):
        """Gets the detector_fields_based_ml_only_count of this DocumentTypeStats.  # noqa: E501


        :return: The detector_fields_based_ml_only_count of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_fields_based_ml_only_count

    @detector_fields_based_ml_only_count.setter
    def detector_fields_based_ml_only_count(self, detector_fields_based_ml_only_count):
        """Sets the detector_fields_based_ml_only_count of this DocumentTypeStats.


        :param detector_fields_based_ml_only_count: The detector_fields_based_ml_only_count of this DocumentTypeStats.  # noqa: E501
        :type detector_fields_based_ml_only_count: float
        """
        if self.local_vars_configuration.client_side_validation and detector_fields_based_ml_only_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_fields_based_ml_only_count`, must not be `None`")  # noqa: E501

        self._detector_fields_based_ml_only_count = detector_fields_based_ml_only_count

    @property
    def detector_fields_based_ml_only_pcnt(self):
        """Gets the detector_fields_based_ml_only_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The detector_fields_based_ml_only_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_fields_based_ml_only_pcnt

    @detector_fields_based_ml_only_pcnt.setter
    def detector_fields_based_ml_only_pcnt(self, detector_fields_based_ml_only_pcnt):
        """Sets the detector_fields_based_ml_only_pcnt of this DocumentTypeStats.


        :param detector_fields_based_ml_only_pcnt: The detector_fields_based_ml_only_pcnt of this DocumentTypeStats.  # noqa: E501
        :type detector_fields_based_ml_only_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and detector_fields_based_ml_only_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_fields_based_ml_only_pcnt`, must not be `None`")  # noqa: E501

        self._detector_fields_based_ml_only_pcnt = detector_fields_based_ml_only_pcnt

    @property
    def detector_fields_based_prob_ml_only_count(self):
        """Gets the detector_fields_based_prob_ml_only_count of this DocumentTypeStats.  # noqa: E501


        :return: The detector_fields_based_prob_ml_only_count of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_fields_based_prob_ml_only_count

    @detector_fields_based_prob_ml_only_count.setter
    def detector_fields_based_prob_ml_only_count(self, detector_fields_based_prob_ml_only_count):
        """Sets the detector_fields_based_prob_ml_only_count of this DocumentTypeStats.


        :param detector_fields_based_prob_ml_only_count: The detector_fields_based_prob_ml_only_count of this DocumentTypeStats.  # noqa: E501
        :type detector_fields_based_prob_ml_only_count: float
        """
        if self.local_vars_configuration.client_side_validation and detector_fields_based_prob_ml_only_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_fields_based_prob_ml_only_count`, must not be `None`")  # noqa: E501

        self._detector_fields_based_prob_ml_only_count = detector_fields_based_prob_ml_only_count

    @property
    def detector_fields_based_prob_ml_only_pcnt(self):
        """Gets the detector_fields_based_prob_ml_only_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The detector_fields_based_prob_ml_only_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_fields_based_prob_ml_only_pcnt

    @detector_fields_based_prob_ml_only_pcnt.setter
    def detector_fields_based_prob_ml_only_pcnt(self, detector_fields_based_prob_ml_only_pcnt):
        """Sets the detector_fields_based_prob_ml_only_pcnt of this DocumentTypeStats.


        :param detector_fields_based_prob_ml_only_pcnt: The detector_fields_based_prob_ml_only_pcnt of this DocumentTypeStats.  # noqa: E501
        :type detector_fields_based_prob_ml_only_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and detector_fields_based_prob_ml_only_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_fields_based_prob_ml_only_pcnt`, must not be `None`")  # noqa: E501

        self._detector_fields_based_prob_ml_only_pcnt = detector_fields_based_prob_ml_only_pcnt

    @property
    def detector_python_coded_field_count(self):
        """Gets the detector_python_coded_field_count of this DocumentTypeStats.  # noqa: E501


        :return: The detector_python_coded_field_count of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_python_coded_field_count

    @detector_python_coded_field_count.setter
    def detector_python_coded_field_count(self, detector_python_coded_field_count):
        """Sets the detector_python_coded_field_count of this DocumentTypeStats.


        :param detector_python_coded_field_count: The detector_python_coded_field_count of this DocumentTypeStats.  # noqa: E501
        :type detector_python_coded_field_count: float
        """
        if self.local_vars_configuration.client_side_validation and detector_python_coded_field_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_python_coded_field_count`, must not be `None`")  # noqa: E501

        self._detector_python_coded_field_count = detector_python_coded_field_count

    @property
    def detector_python_coded_field_pcnt(self):
        """Gets the detector_python_coded_field_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The detector_python_coded_field_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_python_coded_field_pcnt

    @detector_python_coded_field_pcnt.setter
    def detector_python_coded_field_pcnt(self, detector_python_coded_field_pcnt):
        """Sets the detector_python_coded_field_pcnt of this DocumentTypeStats.


        :param detector_python_coded_field_pcnt: The detector_python_coded_field_pcnt of this DocumentTypeStats.  # noqa: E501
        :type detector_python_coded_field_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and detector_python_coded_field_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_python_coded_field_pcnt`, must not be `None`")  # noqa: E501

        self._detector_python_coded_field_pcnt = detector_python_coded_field_pcnt

    @property
    def detector_field_based_regexps_count(self):
        """Gets the detector_field_based_regexps_count of this DocumentTypeStats.  # noqa: E501


        :return: The detector_field_based_regexps_count of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_field_based_regexps_count

    @detector_field_based_regexps_count.setter
    def detector_field_based_regexps_count(self, detector_field_based_regexps_count):
        """Sets the detector_field_based_regexps_count of this DocumentTypeStats.


        :param detector_field_based_regexps_count: The detector_field_based_regexps_count of this DocumentTypeStats.  # noqa: E501
        :type detector_field_based_regexps_count: float
        """
        if self.local_vars_configuration.client_side_validation and detector_field_based_regexps_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_field_based_regexps_count`, must not be `None`")  # noqa: E501

        self._detector_field_based_regexps_count = detector_field_based_regexps_count

    @property
    def detector_field_based_regexps_pcnt(self):
        """Gets the detector_field_based_regexps_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The detector_field_based_regexps_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_field_based_regexps_pcnt

    @detector_field_based_regexps_pcnt.setter
    def detector_field_based_regexps_pcnt(self, detector_field_based_regexps_pcnt):
        """Sets the detector_field_based_regexps_pcnt of this DocumentTypeStats.


        :param detector_field_based_regexps_pcnt: The detector_field_based_regexps_pcnt of this DocumentTypeStats.  # noqa: E501
        :type detector_field_based_regexps_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and detector_field_based_regexps_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_field_based_regexps_pcnt`, must not be `None`")  # noqa: E501

        self._detector_field_based_regexps_pcnt = detector_field_based_regexps_pcnt

    @property
    def detector_mlflow_model_count(self):
        """Gets the detector_mlflow_model_count of this DocumentTypeStats.  # noqa: E501


        :return: The detector_mlflow_model_count of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_mlflow_model_count

    @detector_mlflow_model_count.setter
    def detector_mlflow_model_count(self, detector_mlflow_model_count):
        """Sets the detector_mlflow_model_count of this DocumentTypeStats.


        :param detector_mlflow_model_count: The detector_mlflow_model_count of this DocumentTypeStats.  # noqa: E501
        :type detector_mlflow_model_count: float
        """
        if self.local_vars_configuration.client_side_validation and detector_mlflow_model_count is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_mlflow_model_count`, must not be `None`")  # noqa: E501

        self._detector_mlflow_model_count = detector_mlflow_model_count

    @property
    def detector_mlflow_model_pcnt(self):
        """Gets the detector_mlflow_model_pcnt of this DocumentTypeStats.  # noqa: E501


        :return: The detector_mlflow_model_pcnt of this DocumentTypeStats.  # noqa: E501
        :rtype: float
        """
        return self._detector_mlflow_model_pcnt

    @detector_mlflow_model_pcnt.setter
    def detector_mlflow_model_pcnt(self, detector_mlflow_model_pcnt):
        """Sets the detector_mlflow_model_pcnt of this DocumentTypeStats.


        :param detector_mlflow_model_pcnt: The detector_mlflow_model_pcnt of this DocumentTypeStats.  # noqa: E501
        :type detector_mlflow_model_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and detector_mlflow_model_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `detector_mlflow_model_pcnt`, must not be `None`")  # noqa: E501

        self._detector_mlflow_model_pcnt = detector_mlflow_model_pcnt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentTypeStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentTypeStats):
            return True

        return self.to_dict() != other.to_dict()
