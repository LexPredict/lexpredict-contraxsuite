# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProjectDocumentsAssigneesResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'assignee_id': 'int',
        'assignee_name': 'str',
        'documents_count': 'int',
        'document_ids': 'list[int]'
    }

    attribute_map = {
        'assignee_id': 'assignee_id',
        'assignee_name': 'assignee_name',
        'documents_count': 'documents_count',
        'document_ids': 'document_ids'
    }

    def __init__(self, assignee_id=None, assignee_name=None, documents_count=None, document_ids=None, local_vars_configuration=None):  # noqa: E501
        """ProjectDocumentsAssigneesResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._assignee_id = None
        self._assignee_name = None
        self._documents_count = None
        self._document_ids = None
        self.discriminator = None

        self.assignee_id = assignee_id
        self.assignee_name = assignee_name
        self.documents_count = documents_count
        self.document_ids = document_ids

    @property
    def assignee_id(self):
        """Gets the assignee_id of this ProjectDocumentsAssigneesResponse.  # noqa: E501


        :return: The assignee_id of this ProjectDocumentsAssigneesResponse.  # noqa: E501
        :rtype: int
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this ProjectDocumentsAssigneesResponse.


        :param assignee_id: The assignee_id of this ProjectDocumentsAssigneesResponse.  # noqa: E501
        :type assignee_id: int
        """
        if self.local_vars_configuration.client_side_validation and assignee_id is None:  # noqa: E501
            raise ValueError("Invalid value for `assignee_id`, must not be `None`")  # noqa: E501

        self._assignee_id = assignee_id

    @property
    def assignee_name(self):
        """Gets the assignee_name of this ProjectDocumentsAssigneesResponse.  # noqa: E501


        :return: The assignee_name of this ProjectDocumentsAssigneesResponse.  # noqa: E501
        :rtype: str
        """
        return self._assignee_name

    @assignee_name.setter
    def assignee_name(self, assignee_name):
        """Sets the assignee_name of this ProjectDocumentsAssigneesResponse.


        :param assignee_name: The assignee_name of this ProjectDocumentsAssigneesResponse.  # noqa: E501
        :type assignee_name: str
        """
        if self.local_vars_configuration.client_side_validation and assignee_name is None:  # noqa: E501
            raise ValueError("Invalid value for `assignee_name`, must not be `None`")  # noqa: E501

        self._assignee_name = assignee_name

    @property
    def documents_count(self):
        """Gets the documents_count of this ProjectDocumentsAssigneesResponse.  # noqa: E501


        :return: The documents_count of this ProjectDocumentsAssigneesResponse.  # noqa: E501
        :rtype: int
        """
        return self._documents_count

    @documents_count.setter
    def documents_count(self, documents_count):
        """Sets the documents_count of this ProjectDocumentsAssigneesResponse.


        :param documents_count: The documents_count of this ProjectDocumentsAssigneesResponse.  # noqa: E501
        :type documents_count: int
        """
        if self.local_vars_configuration.client_side_validation and documents_count is None:  # noqa: E501
            raise ValueError("Invalid value for `documents_count`, must not be `None`")  # noqa: E501

        self._documents_count = documents_count

    @property
    def document_ids(self):
        """Gets the document_ids of this ProjectDocumentsAssigneesResponse.  # noqa: E501


        :return: The document_ids of this ProjectDocumentsAssigneesResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._document_ids

    @document_ids.setter
    def document_ids(self, document_ids):
        """Sets the document_ids of this ProjectDocumentsAssigneesResponse.


        :param document_ids: The document_ids of this ProjectDocumentsAssigneesResponse.  # noqa: E501
        :type document_ids: list[int]
        """
        if self.local_vars_configuration.client_side_validation and document_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `document_ids`, must not be `None`")  # noqa: E501

        self._document_ids = document_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectDocumentsAssigneesResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectDocumentsAssigneesResponse):
            return True

        return self.to_dict() != other.to_dict()
