# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DumpFixture(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_name': 'str',
        'model_name': 'str',
        'file_name': 'str',
        'filter_options': 'object',
        'indent': 'int'
    }

    attribute_map = {
        'app_name': 'app_name',
        'model_name': 'model_name',
        'file_name': 'file_name',
        'filter_options': 'filter_options',
        'indent': 'indent'
    }

    def __init__(self, app_name=None, model_name=None, file_name=None, filter_options=None, indent=4, local_vars_configuration=None):  # noqa: E501
        """DumpFixture - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app_name = None
        self._model_name = None
        self._file_name = None
        self._filter_options = None
        self._indent = None
        self.discriminator = None

        self.app_name = app_name
        self.model_name = model_name
        self.file_name = file_name
        if filter_options is not None:
            self.filter_options = filter_options
        if indent is not None:
            self.indent = indent

    @property
    def app_name(self):
        """Gets the app_name of this DumpFixture.  # noqa: E501


        :return: The app_name of this DumpFixture.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this DumpFixture.


        :param app_name: The app_name of this DumpFixture.  # noqa: E501
        :type app_name: str
        """
        if self.local_vars_configuration.client_side_validation and app_name is None:  # noqa: E501
            raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

        self._app_name = app_name

    @property
    def model_name(self):
        """Gets the model_name of this DumpFixture.  # noqa: E501


        :return: The model_name of this DumpFixture.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this DumpFixture.


        :param model_name: The model_name of this DumpFixture.  # noqa: E501
        :type model_name: str
        """
        if self.local_vars_configuration.client_side_validation and model_name is None:  # noqa: E501
            raise ValueError("Invalid value for `model_name`, must not be `None`")  # noqa: E501

        self._model_name = model_name

    @property
    def file_name(self):
        """Gets the file_name of this DumpFixture.  # noqa: E501


        :return: The file_name of this DumpFixture.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this DumpFixture.


        :param file_name: The file_name of this DumpFixture.  # noqa: E501
        :type file_name: str
        """
        if self.local_vars_configuration.client_side_validation and file_name is None:  # noqa: E501
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def filter_options(self):
        """Gets the filter_options of this DumpFixture.  # noqa: E501


        :return: The filter_options of this DumpFixture.  # noqa: E501
        :rtype: object
        """
        return self._filter_options

    @filter_options.setter
    def filter_options(self, filter_options):
        """Sets the filter_options of this DumpFixture.


        :param filter_options: The filter_options of this DumpFixture.  # noqa: E501
        :type filter_options: object
        """

        self._filter_options = filter_options

    @property
    def indent(self):
        """Gets the indent of this DumpFixture.  # noqa: E501


        :return: The indent of this DumpFixture.  # noqa: E501
        :rtype: int
        """
        return self._indent

    @indent.setter
    def indent(self, indent):
        """Sets the indent of this DumpFixture.


        :param indent: The indent of this DumpFixture.  # noqa: E501
        :type indent: int
        """

        self._indent = indent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DumpFixture):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DumpFixture):
            return True

        return self.to_dict() != other.to_dict()
