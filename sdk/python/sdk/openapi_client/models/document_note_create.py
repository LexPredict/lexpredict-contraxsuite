# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocumentNoteCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pk': 'int',
        'note': 'str',
        'timestamp': 'datetime',
        'location_start': 'int',
        'location_end': 'int',
        'document_id': 'int',
        'field_value_id': 'int',
        'field_id': 'str',
        'user_id': 'str',
        'username': 'str',
        'user': 'DocumentDetailUser'
    }

    attribute_map = {
        'pk': 'pk',
        'note': 'note',
        'timestamp': 'timestamp',
        'location_start': 'location_start',
        'location_end': 'location_end',
        'document_id': 'document_id',
        'field_value_id': 'field_value_id',
        'field_id': 'field_id',
        'user_id': 'user_id',
        'username': 'username',
        'user': 'user'
    }

    def __init__(self, pk=None, note=None, timestamp=None, location_start=None, location_end=None, document_id=None, field_value_id=None, field_id=None, user_id=None, username=None, user=None, local_vars_configuration=None):  # noqa: E501
        """DocumentNoteCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pk = None
        self._note = None
        self._timestamp = None
        self._location_start = None
        self._location_end = None
        self._document_id = None
        self._field_value_id = None
        self._field_id = None
        self._user_id = None
        self._username = None
        self._user = None
        self.discriminator = None

        if pk is not None:
            self.pk = pk
        self.note = note
        if timestamp is not None:
            self.timestamp = timestamp
        self.location_start = location_start
        self.location_end = location_end
        self.document_id = document_id
        if field_value_id is not None:
            self.field_value_id = field_value_id
        if field_id is not None:
            self.field_id = field_id
        if user_id is not None:
            self.user_id = user_id
        self.username = username
        if user is not None:
            self.user = user

    @property
    def pk(self):
        """Gets the pk of this DocumentNoteCreate.  # noqa: E501


        :return: The pk of this DocumentNoteCreate.  # noqa: E501
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this DocumentNoteCreate.


        :param pk: The pk of this DocumentNoteCreate.  # noqa: E501
        :type pk: int
        """

        self._pk = pk

    @property
    def note(self):
        """Gets the note of this DocumentNoteCreate.  # noqa: E501


        :return: The note of this DocumentNoteCreate.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this DocumentNoteCreate.


        :param note: The note of this DocumentNoteCreate.  # noqa: E501
        :type note: str
        """
        if self.local_vars_configuration.client_side_validation and note is None:  # noqa: E501
            raise ValueError("Invalid value for `note`, must not be `None`")  # noqa: E501

        self._note = note

    @property
    def timestamp(self):
        """Gets the timestamp of this DocumentNoteCreate.  # noqa: E501


        :return: The timestamp of this DocumentNoteCreate.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DocumentNoteCreate.


        :param timestamp: The timestamp of this DocumentNoteCreate.  # noqa: E501
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def location_start(self):
        """Gets the location_start of this DocumentNoteCreate.  # noqa: E501


        :return: The location_start of this DocumentNoteCreate.  # noqa: E501
        :rtype: int
        """
        return self._location_start

    @location_start.setter
    def location_start(self, location_start):
        """Sets the location_start of this DocumentNoteCreate.


        :param location_start: The location_start of this DocumentNoteCreate.  # noqa: E501
        :type location_start: int
        """
        if (self.local_vars_configuration.client_side_validation and
                location_start is not None and location_start > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `location_start`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                location_start is not None and location_start < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `location_start`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._location_start = location_start

    @property
    def location_end(self):
        """Gets the location_end of this DocumentNoteCreate.  # noqa: E501


        :return: The location_end of this DocumentNoteCreate.  # noqa: E501
        :rtype: int
        """
        return self._location_end

    @location_end.setter
    def location_end(self, location_end):
        """Sets the location_end of this DocumentNoteCreate.


        :param location_end: The location_end of this DocumentNoteCreate.  # noqa: E501
        :type location_end: int
        """
        if (self.local_vars_configuration.client_side_validation and
                location_end is not None and location_end > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `location_end`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                location_end is not None and location_end < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `location_end`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._location_end = location_end

    @property
    def document_id(self):
        """Gets the document_id of this DocumentNoteCreate.  # noqa: E501


        :return: The document_id of this DocumentNoteCreate.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this DocumentNoteCreate.


        :param document_id: The document_id of this DocumentNoteCreate.  # noqa: E501
        :type document_id: int
        """
        if self.local_vars_configuration.client_side_validation and document_id is None:  # noqa: E501
            raise ValueError("Invalid value for `document_id`, must not be `None`")  # noqa: E501

        self._document_id = document_id

    @property
    def field_value_id(self):
        """Gets the field_value_id of this DocumentNoteCreate.  # noqa: E501


        :return: The field_value_id of this DocumentNoteCreate.  # noqa: E501
        :rtype: int
        """
        return self._field_value_id

    @field_value_id.setter
    def field_value_id(self, field_value_id):
        """Sets the field_value_id of this DocumentNoteCreate.


        :param field_value_id: The field_value_id of this DocumentNoteCreate.  # noqa: E501
        :type field_value_id: int
        """

        self._field_value_id = field_value_id

    @property
    def field_id(self):
        """Gets the field_id of this DocumentNoteCreate.  # noqa: E501


        :return: The field_id of this DocumentNoteCreate.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this DocumentNoteCreate.


        :param field_id: The field_id of this DocumentNoteCreate.  # noqa: E501
        :type field_id: str
        """

        self._field_id = field_id

    @property
    def user_id(self):
        """Gets the user_id of this DocumentNoteCreate.  # noqa: E501


        :return: The user_id of this DocumentNoteCreate.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DocumentNoteCreate.


        :param user_id: The user_id of this DocumentNoteCreate.  # noqa: E501
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this DocumentNoteCreate.  # noqa: E501


        :return: The username of this DocumentNoteCreate.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DocumentNoteCreate.


        :param username: The username of this DocumentNoteCreate.  # noqa: E501
        :type username: str
        """
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) > 200):
            raise ValueError("Invalid value for `username`, length must be less than or equal to `200`")  # noqa: E501

        self._username = username

    @property
    def user(self):
        """Gets the user of this DocumentNoteCreate.  # noqa: E501


        :return: The user of this DocumentNoteCreate.  # noqa: E501
        :rtype: DocumentDetailUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DocumentNoteCreate.


        :param user: The user of this DocumentNoteCreate.  # noqa: E501
        :type user: DocumentDetailUser
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentNoteCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentNoteCreate):
            return True

        return self.to_dict() != other.to_dict()
