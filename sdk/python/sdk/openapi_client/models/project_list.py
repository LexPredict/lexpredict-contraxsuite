# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProjectList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pk': 'int',
        'name': 'str',
        'status': 'int',
        'status_data': 'ProjectListStatusData',
        'type': 'str',
        'type_data': 'ProjectListTypeData',
        'count_of_documents': 'int'
    }

    attribute_map = {
        'pk': 'pk',
        'name': 'name',
        'status': 'status',
        'status_data': 'status_data',
        'type': 'type',
        'type_data': 'type_data',
        'count_of_documents': 'count_of_documents'
    }

    def __init__(self, pk=None, name=None, status=None, status_data=None, type=None, type_data=None, count_of_documents=None, local_vars_configuration=None):  # noqa: E501
        """ProjectList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pk = None
        self._name = None
        self._status = None
        self._status_data = None
        self._type = None
        self._type_data = None
        self._count_of_documents = None
        self.discriminator = None

        if pk is not None:
            self.pk = pk
        self.name = name
        if status is not None:
            self.status = status
        if status_data is not None:
            self.status_data = status_data
        if type is not None:
            self.type = type
        self.type_data = type_data
        if count_of_documents is not None:
            self.count_of_documents = count_of_documents

    @property
    def pk(self):
        """Gets the pk of this ProjectList.  # noqa: E501


        :return: The pk of this ProjectList.  # noqa: E501
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this ProjectList.


        :param pk: The pk of this ProjectList.  # noqa: E501
        :type pk: int
        """

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this ProjectList.  # noqa: E501


        :return: The name of this ProjectList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectList.


        :param name: The name of this ProjectList.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this ProjectList.  # noqa: E501


        :return: The status of this ProjectList.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProjectList.


        :param status: The status of this ProjectList.  # noqa: E501
        :type status: int
        """

        self._status = status

    @property
    def status_data(self):
        """Gets the status_data of this ProjectList.  # noqa: E501


        :return: The status_data of this ProjectList.  # noqa: E501
        :rtype: ProjectListStatusData
        """
        return self._status_data

    @status_data.setter
    def status_data(self, status_data):
        """Sets the status_data of this ProjectList.


        :param status_data: The status_data of this ProjectList.  # noqa: E501
        :type status_data: ProjectListStatusData
        """

        self._status_data = status_data

    @property
    def type(self):
        """Gets the type of this ProjectList.  # noqa: E501


        :return: The type of this ProjectList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProjectList.


        :param type: The type of this ProjectList.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def type_data(self):
        """Gets the type_data of this ProjectList.  # noqa: E501


        :return: The type_data of this ProjectList.  # noqa: E501
        :rtype: ProjectListTypeData
        """
        return self._type_data

    @type_data.setter
    def type_data(self, type_data):
        """Sets the type_data of this ProjectList.


        :param type_data: The type_data of this ProjectList.  # noqa: E501
        :type type_data: ProjectListTypeData
        """
        if self.local_vars_configuration.client_side_validation and type_data is None:  # noqa: E501
            raise ValueError("Invalid value for `type_data`, must not be `None`")  # noqa: E501

        self._type_data = type_data

    @property
    def count_of_documents(self):
        """Gets the count_of_documents of this ProjectList.  # noqa: E501


        :return: The count_of_documents of this ProjectList.  # noqa: E501
        :rtype: int
        """
        return self._count_of_documents

    @count_of_documents.setter
    def count_of_documents(self, count_of_documents):
        """Sets the count_of_documents of this ProjectList.


        :param count_of_documents: The count_of_documents of this ProjectList.  # noqa: E501
        :type count_of_documents: int
        """

        self._count_of_documents = count_of_documents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectList):
            return True

        return self.to_dict() != other.to_dict()
