# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TextUnitDjangoQL(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'unit_type': 'str',
        'text': 'str',
        'project_id': 'str',
        'project_name': 'str',
        'document_id': 'str',
        'document_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'unit_type': 'unit_type',
        'text': 'text',
        'project_id': 'project_id',
        'project_name': 'project_name',
        'document_id': 'document_id',
        'document_name': 'document_name'
    }

    def __init__(self, id=None, unit_type=None, text=None, project_id=None, project_name=None, document_id=None, document_name=None, local_vars_configuration=None):  # noqa: E501
        """TextUnitDjangoQL - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._unit_type = None
        self._text = None
        self._project_id = None
        self._project_name = None
        self._document_id = None
        self._document_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.unit_type = unit_type
        if text is not None:
            self.text = text
        if project_id is not None:
            self.project_id = project_id
        self.project_name = project_name
        if document_id is not None:
            self.document_id = document_id
        self.document_name = document_name

    @property
    def id(self):
        """Gets the id of this TextUnitDjangoQL.  # noqa: E501


        :return: The id of this TextUnitDjangoQL.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TextUnitDjangoQL.


        :param id: The id of this TextUnitDjangoQL.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def unit_type(self):
        """Gets the unit_type of this TextUnitDjangoQL.  # noqa: E501


        :return: The unit_type of this TextUnitDjangoQL.  # noqa: E501
        :rtype: str
        """
        return self._unit_type

    @unit_type.setter
    def unit_type(self, unit_type):
        """Sets the unit_type of this TextUnitDjangoQL.


        :param unit_type: The unit_type of this TextUnitDjangoQL.  # noqa: E501
        :type unit_type: str
        """
        if self.local_vars_configuration.client_side_validation and unit_type is None:  # noqa: E501
            raise ValueError("Invalid value for `unit_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                unit_type is not None and len(unit_type) > 128):
            raise ValueError("Invalid value for `unit_type`, length must be less than or equal to `128`")  # noqa: E501

        self._unit_type = unit_type

    @property
    def text(self):
        """Gets the text of this TextUnitDjangoQL.  # noqa: E501


        :return: The text of this TextUnitDjangoQL.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TextUnitDjangoQL.


        :param text: The text of this TextUnitDjangoQL.  # noqa: E501
        :type text: str
        """

        self._text = text

    @property
    def project_id(self):
        """Gets the project_id of this TextUnitDjangoQL.  # noqa: E501


        :return: The project_id of this TextUnitDjangoQL.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TextUnitDjangoQL.


        :param project_id: The project_id of this TextUnitDjangoQL.  # noqa: E501
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this TextUnitDjangoQL.  # noqa: E501


        :return: The project_name of this TextUnitDjangoQL.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this TextUnitDjangoQL.


        :param project_name: The project_name of this TextUnitDjangoQL.  # noqa: E501
        :type project_name: str
        """
        if self.local_vars_configuration.client_side_validation and project_name is None:  # noqa: E501
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    @property
    def document_id(self):
        """Gets the document_id of this TextUnitDjangoQL.  # noqa: E501


        :return: The document_id of this TextUnitDjangoQL.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this TextUnitDjangoQL.


        :param document_id: The document_id of this TextUnitDjangoQL.  # noqa: E501
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def document_name(self):
        """Gets the document_name of this TextUnitDjangoQL.  # noqa: E501


        :return: The document_name of this TextUnitDjangoQL.  # noqa: E501
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this TextUnitDjangoQL.


        :param document_name: The document_name of this TextUnitDjangoQL.  # noqa: E501
        :type document_name: str
        """
        if self.local_vars_configuration.client_side_validation and document_name is None:  # noqa: E501
            raise ValueError("Invalid value for `document_name`, must not be `None`")  # noqa: E501

        self._document_name = document_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextUnitDjangoQL):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TextUnitDjangoQL):
            return True

        return self.to_dict() != other.to_dict()
