# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SelectProjectsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'saved_filter_id': 'int',
        'user_id': 'int',
        'project_ids': 'list[int]',
        'show_warning': 'bool'
    }

    attribute_map = {
        'saved_filter_id': 'saved_filter_id',
        'user_id': 'user_id',
        'project_ids': 'project_ids',
        'show_warning': 'show_warning'
    }

    def __init__(self, saved_filter_id=None, user_id=None, project_ids=None, show_warning=None, local_vars_configuration=None):  # noqa: E501
        """SelectProjectsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._saved_filter_id = None
        self._user_id = None
        self._project_ids = None
        self._show_warning = None
        self.discriminator = None

        self.saved_filter_id = saved_filter_id
        self.user_id = user_id
        self.project_ids = project_ids
        self.show_warning = show_warning

    @property
    def saved_filter_id(self):
        """Gets the saved_filter_id of this SelectProjectsResponse.  # noqa: E501


        :return: The saved_filter_id of this SelectProjectsResponse.  # noqa: E501
        :rtype: int
        """
        return self._saved_filter_id

    @saved_filter_id.setter
    def saved_filter_id(self, saved_filter_id):
        """Sets the saved_filter_id of this SelectProjectsResponse.


        :param saved_filter_id: The saved_filter_id of this SelectProjectsResponse.  # noqa: E501
        :type saved_filter_id: int
        """
        if self.local_vars_configuration.client_side_validation and saved_filter_id is None:  # noqa: E501
            raise ValueError("Invalid value for `saved_filter_id`, must not be `None`")  # noqa: E501

        self._saved_filter_id = saved_filter_id

    @property
    def user_id(self):
        """Gets the user_id of this SelectProjectsResponse.  # noqa: E501


        :return: The user_id of this SelectProjectsResponse.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SelectProjectsResponse.


        :param user_id: The user_id of this SelectProjectsResponse.  # noqa: E501
        :type user_id: int
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def project_ids(self):
        """Gets the project_ids of this SelectProjectsResponse.  # noqa: E501


        :return: The project_ids of this SelectProjectsResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this SelectProjectsResponse.


        :param project_ids: The project_ids of this SelectProjectsResponse.  # noqa: E501
        :type project_ids: list[int]
        """
        if self.local_vars_configuration.client_side_validation and project_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `project_ids`, must not be `None`")  # noqa: E501

        self._project_ids = project_ids

    @property
    def show_warning(self):
        """Gets the show_warning of this SelectProjectsResponse.  # noqa: E501


        :return: The show_warning of this SelectProjectsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._show_warning

    @show_warning.setter
    def show_warning(self, show_warning):
        """Sets the show_warning of this SelectProjectsResponse.


        :param show_warning: The show_warning of this SelectProjectsResponse.  # noqa: E501
        :type show_warning: bool
        """
        if self.local_vars_configuration.client_side_validation and show_warning is None:  # noqa: E501
            raise ValueError("Invalid value for `show_warning`, must not be `None`")  # noqa: E501

        self._show_warning = show_warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelectProjectsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SelectProjectsResponse):
            return True

        return self.to_dict() != other.to_dict()
