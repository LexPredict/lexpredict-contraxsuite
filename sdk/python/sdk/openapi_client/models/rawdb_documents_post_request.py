# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RawdbDocumentsPOSTRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project_ids': 'str',
        'columns': 'str',
        'associated_text': 'bool',
        'as_zip': 'bool',
        'fmt': 'str',
        'limit': 'int',
        'order_by': 'str',
        'saved_filters': 'str',
        'save_filter': 'bool',
        'return_reviewed': 'bool',
        'return_total': 'bool',
        'return_data': 'bool',
        'ignore_errors': 'bool',
        'filters': 'dict(str, str)'
    }

    attribute_map = {
        'project_ids': 'project_ids',
        'columns': 'columns',
        'associated_text': 'associated_text',
        'as_zip': 'as_zip',
        'fmt': 'fmt',
        'limit': 'limit',
        'order_by': 'order_by',
        'saved_filters': 'saved_filters',
        'save_filter': 'save_filter',
        'return_reviewed': 'return_reviewed',
        'return_total': 'return_total',
        'return_data': 'return_data',
        'ignore_errors': 'ignore_errors',
        'filters': 'filters'
    }

    def __init__(self, project_ids=None, columns=None, associated_text=None, as_zip=None, fmt=None, limit=None, order_by=None, saved_filters=None, save_filter=None, return_reviewed=None, return_total=None, return_data=None, ignore_errors=None, filters=None, local_vars_configuration=None):  # noqa: E501
        """RawdbDocumentsPOSTRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project_ids = None
        self._columns = None
        self._associated_text = None
        self._as_zip = None
        self._fmt = None
        self._limit = None
        self._order_by = None
        self._saved_filters = None
        self._save_filter = None
        self._return_reviewed = None
        self._return_total = None
        self._return_data = None
        self._ignore_errors = None
        self._filters = None
        self.discriminator = None

        if project_ids is not None:
            self.project_ids = project_ids
        if columns is not None:
            self.columns = columns
        if associated_text is not None:
            self.associated_text = associated_text
        if as_zip is not None:
            self.as_zip = as_zip
        if fmt is not None:
            self.fmt = fmt
        if limit is not None:
            self.limit = limit
        if order_by is not None:
            self.order_by = order_by
        if saved_filters is not None:
            self.saved_filters = saved_filters
        if save_filter is not None:
            self.save_filter = save_filter
        if return_reviewed is not None:
            self.return_reviewed = return_reviewed
        if return_total is not None:
            self.return_total = return_total
        if return_data is not None:
            self.return_data = return_data
        if ignore_errors is not None:
            self.ignore_errors = ignore_errors
        if filters is not None:
            self.filters = filters

    @property
    def project_ids(self):
        """Gets the project_ids of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The project_ids of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this RawdbDocumentsPOSTRequest.


        :param project_ids: The project_ids of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type project_ids: str
        """

        self._project_ids = project_ids

    @property
    def columns(self):
        """Gets the columns of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The columns of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: str
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this RawdbDocumentsPOSTRequest.


        :param columns: The columns of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type columns: str
        """

        self._columns = columns

    @property
    def associated_text(self):
        """Gets the associated_text of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The associated_text of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: bool
        """
        return self._associated_text

    @associated_text.setter
    def associated_text(self, associated_text):
        """Sets the associated_text of this RawdbDocumentsPOSTRequest.


        :param associated_text: The associated_text of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type associated_text: bool
        """

        self._associated_text = associated_text

    @property
    def as_zip(self):
        """Gets the as_zip of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The as_zip of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: bool
        """
        return self._as_zip

    @as_zip.setter
    def as_zip(self, as_zip):
        """Sets the as_zip of this RawdbDocumentsPOSTRequest.


        :param as_zip: The as_zip of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type as_zip: bool
        """

        self._as_zip = as_zip

    @property
    def fmt(self):
        """Gets the fmt of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The fmt of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: str
        """
        return self._fmt

    @fmt.setter
    def fmt(self, fmt):
        """Sets the fmt of this RawdbDocumentsPOSTRequest.


        :param fmt: The fmt of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type fmt: str
        """

        self._fmt = fmt

    @property
    def limit(self):
        """Gets the limit of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The limit of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this RawdbDocumentsPOSTRequest.


        :param limit: The limit of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type limit: int
        """

        self._limit = limit

    @property
    def order_by(self):
        """Gets the order_by of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The order_by of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this RawdbDocumentsPOSTRequest.


        :param order_by: The order_by of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type order_by: str
        """

        self._order_by = order_by

    @property
    def saved_filters(self):
        """Gets the saved_filters of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The saved_filters of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: str
        """
        return self._saved_filters

    @saved_filters.setter
    def saved_filters(self, saved_filters):
        """Sets the saved_filters of this RawdbDocumentsPOSTRequest.


        :param saved_filters: The saved_filters of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type saved_filters: str
        """

        self._saved_filters = saved_filters

    @property
    def save_filter(self):
        """Gets the save_filter of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The save_filter of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: bool
        """
        return self._save_filter

    @save_filter.setter
    def save_filter(self, save_filter):
        """Sets the save_filter of this RawdbDocumentsPOSTRequest.


        :param save_filter: The save_filter of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type save_filter: bool
        """

        self._save_filter = save_filter

    @property
    def return_reviewed(self):
        """Gets the return_reviewed of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The return_reviewed of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: bool
        """
        return self._return_reviewed

    @return_reviewed.setter
    def return_reviewed(self, return_reviewed):
        """Sets the return_reviewed of this RawdbDocumentsPOSTRequest.


        :param return_reviewed: The return_reviewed of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type return_reviewed: bool
        """

        self._return_reviewed = return_reviewed

    @property
    def return_total(self):
        """Gets the return_total of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The return_total of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: bool
        """
        return self._return_total

    @return_total.setter
    def return_total(self, return_total):
        """Sets the return_total of this RawdbDocumentsPOSTRequest.


        :param return_total: The return_total of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type return_total: bool
        """

        self._return_total = return_total

    @property
    def return_data(self):
        """Gets the return_data of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The return_data of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: bool
        """
        return self._return_data

    @return_data.setter
    def return_data(self, return_data):
        """Sets the return_data of this RawdbDocumentsPOSTRequest.


        :param return_data: The return_data of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type return_data: bool
        """

        self._return_data = return_data

    @property
    def ignore_errors(self):
        """Gets the ignore_errors of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The ignore_errors of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_errors

    @ignore_errors.setter
    def ignore_errors(self, ignore_errors):
        """Sets the ignore_errors of this RawdbDocumentsPOSTRequest.


        :param ignore_errors: The ignore_errors of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type ignore_errors: bool
        """

        self._ignore_errors = ignore_errors

    @property
    def filters(self):
        """Gets the filters of this RawdbDocumentsPOSTRequest.  # noqa: E501


        :return: The filters of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this RawdbDocumentsPOSTRequest.


        :param filters: The filters of this RawdbDocumentsPOSTRequest.  # noqa: E501
        :type filters: dict(str, str)
        """

        self._filters = filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawdbDocumentsPOSTRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RawdbDocumentsPOSTRequest):
            return True

        return self.to_dict() != other.to_dict()
