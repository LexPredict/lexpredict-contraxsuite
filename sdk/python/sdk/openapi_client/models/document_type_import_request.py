# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocumentTypeImportRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file': 'file',
        'update_cache': 'bool',
        'action': 'str',
        'source_version': 'str'
    }

    attribute_map = {
        'file': 'file',
        'update_cache': 'update_cache',
        'action': 'action',
        'source_version': 'source_version'
    }

    def __init__(self, file=None, update_cache=None, action=None, source_version=None, local_vars_configuration=None):  # noqa: E501
        """DocumentTypeImportRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file = None
        self._update_cache = None
        self._action = None
        self._source_version = None
        self.discriminator = None

        self.file = file
        if update_cache is not None:
            self.update_cache = update_cache
        if action is not None:
            self.action = action
        if source_version is not None:
            self.source_version = source_version

    @property
    def file(self):
        """Gets the file of this DocumentTypeImportRequest.  # noqa: E501


        :return: The file of this DocumentTypeImportRequest.  # noqa: E501
        :rtype: file
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this DocumentTypeImportRequest.


        :param file: The file of this DocumentTypeImportRequest.  # noqa: E501
        :type file: file
        """
        if self.local_vars_configuration.client_side_validation and file is None:  # noqa: E501
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def update_cache(self):
        """Gets the update_cache of this DocumentTypeImportRequest.  # noqa: E501


        :return: The update_cache of this DocumentTypeImportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._update_cache

    @update_cache.setter
    def update_cache(self, update_cache):
        """Sets the update_cache of this DocumentTypeImportRequest.


        :param update_cache: The update_cache of this DocumentTypeImportRequest.  # noqa: E501
        :type update_cache: bool
        """

        self._update_cache = update_cache

    @property
    def action(self):
        """Gets the action of this DocumentTypeImportRequest.  # noqa: E501


        :return: The action of this DocumentTypeImportRequest.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DocumentTypeImportRequest.


        :param action: The action of this DocumentTypeImportRequest.  # noqa: E501
        :type action: str
        """
        allowed_values = ["validate", "validate|import", "import|auto_fix|retain_missing_objects", "import|auto_fix|remove_missing_objects"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and action not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def source_version(self):
        """Gets the source_version of this DocumentTypeImportRequest.  # noqa: E501


        :return: The source_version of this DocumentTypeImportRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_version

    @source_version.setter
    def source_version(self, source_version):
        """Sets the source_version of this DocumentTypeImportRequest.


        :param source_version: The source_version of this DocumentTypeImportRequest.  # noqa: E501
        :type source_version: str
        """

        self._source_version = source_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentTypeImportRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentTypeImportRequest):
            return True

        return self.to_dict() != other.to_dict()
