# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class UploadSessionDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'project': 'UploadSessionDetailProject',
        'created_by': 'TaskQueueReviewersData',
        'created_date': 'datetime',
        'document_type': 'str',
        'progress': 'str'
    }

    attribute_map = {
        'uid': 'uid',
        'project': 'project',
        'created_by': 'created_by',
        'created_date': 'created_date',
        'document_type': 'document_type',
        'progress': 'progress'
    }

    def __init__(self, uid=None, project=None, created_by=None, created_date=None, document_type=None, progress=None, local_vars_configuration=None):  # noqa: E501
        """UploadSessionDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uid = None
        self._project = None
        self._created_by = None
        self._created_date = None
        self._document_type = None
        self._progress = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if project is not None:
            self.project = project
        self.created_by = created_by
        if created_date is not None:
            self.created_date = created_date
        if document_type is not None:
            self.document_type = document_type
        if progress is not None:
            self.progress = progress

    @property
    def uid(self):
        """Gets the uid of this UploadSessionDetail.  # noqa: E501


        :return: The uid of this UploadSessionDetail.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this UploadSessionDetail.


        :param uid: The uid of this UploadSessionDetail.  # noqa: E501
        :type uid: str
        """

        self._uid = uid

    @property
    def project(self):
        """Gets the project of this UploadSessionDetail.  # noqa: E501


        :return: The project of this UploadSessionDetail.  # noqa: E501
        :rtype: UploadSessionDetailProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this UploadSessionDetail.


        :param project: The project of this UploadSessionDetail.  # noqa: E501
        :type project: UploadSessionDetailProject
        """

        self._project = project

    @property
    def created_by(self):
        """Gets the created_by of this UploadSessionDetail.  # noqa: E501


        :return: The created_by of this UploadSessionDetail.  # noqa: E501
        :rtype: TaskQueueReviewersData
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this UploadSessionDetail.


        :param created_by: The created_by of this UploadSessionDetail.  # noqa: E501
        :type created_by: TaskQueueReviewersData
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this UploadSessionDetail.  # noqa: E501


        :return: The created_date of this UploadSessionDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this UploadSessionDetail.


        :param created_date: The created_date of this UploadSessionDetail.  # noqa: E501
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def document_type(self):
        """Gets the document_type of this UploadSessionDetail.  # noqa: E501


        :return: The document_type of this UploadSessionDetail.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this UploadSessionDetail.


        :param document_type: The document_type of this UploadSessionDetail.  # noqa: E501
        :type document_type: str
        """

        self._document_type = document_type

    @property
    def progress(self):
        """Gets the progress of this UploadSessionDetail.  # noqa: E501


        :return: The progress of this UploadSessionDetail.  # noqa: E501
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this UploadSessionDetail.


        :param progress: The progress of this UploadSessionDetail.  # noqa: E501
        :type progress: str
        """

        self._progress = progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadSessionDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UploadSessionDetail):
            return True

        return self.to_dict() != other.to_dict()
