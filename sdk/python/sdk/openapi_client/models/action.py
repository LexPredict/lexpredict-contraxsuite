# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Action(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pk': 'int',
        'name': 'str',
        'user': 'ProjectDetailOwnersData',
        'content_type': 'int',
        'object_pk': 'str',
        'date': 'datetime',
        'app_label': 'str',
        'model_name': 'str',
        'object_str': 'str'
    }

    attribute_map = {
        'pk': 'pk',
        'name': 'name',
        'user': 'user',
        'content_type': 'content_type',
        'object_pk': 'object_pk',
        'date': 'date',
        'app_label': 'app_label',
        'model_name': 'model_name',
        'object_str': 'object_str'
    }

    def __init__(self, pk=None, name=None, user=None, content_type=None, object_pk=None, date=None, app_label=None, model_name=None, object_str=None, local_vars_configuration=None):  # noqa: E501
        """Action - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pk = None
        self._name = None
        self._user = None
        self._content_type = None
        self._object_pk = None
        self._date = None
        self._app_label = None
        self._model_name = None
        self._object_str = None
        self.discriminator = None

        if pk is not None:
            self.pk = pk
        if name is not None:
            self.name = name
        self.user = user
        self.content_type = content_type
        self.object_pk = object_pk
        if date is not None:
            self.date = date
        self.app_label = app_label
        self.model_name = model_name
        self.object_str = object_str

    @property
    def pk(self):
        """Gets the pk of this Action.  # noqa: E501


        :return: The pk of this Action.  # noqa: E501
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this Action.


        :param pk: The pk of this Action.  # noqa: E501
        :type pk: int
        """

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this Action.  # noqa: E501


        :return: The name of this Action.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Action.


        :param name: The name of this Action.  # noqa: E501
        :type name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 50):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501

        self._name = name

    @property
    def user(self):
        """Gets the user of this Action.  # noqa: E501


        :return: The user of this Action.  # noqa: E501
        :rtype: ProjectDetailOwnersData
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Action.


        :param user: The user of this Action.  # noqa: E501
        :type user: ProjectDetailOwnersData
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def content_type(self):
        """Gets the content_type of this Action.  # noqa: E501


        :return: The content_type of this Action.  # noqa: E501
        :rtype: int
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Action.


        :param content_type: The content_type of this Action.  # noqa: E501
        :type content_type: int
        """
        if self.local_vars_configuration.client_side_validation and content_type is None:  # noqa: E501
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501

        self._content_type = content_type

    @property
    def object_pk(self):
        """Gets the object_pk of this Action.  # noqa: E501


        :return: The object_pk of this Action.  # noqa: E501
        :rtype: str
        """
        return self._object_pk

    @object_pk.setter
    def object_pk(self, object_pk):
        """Sets the object_pk of this Action.


        :param object_pk: The object_pk of this Action.  # noqa: E501
        :type object_pk: str
        """
        if (self.local_vars_configuration.client_side_validation and
                object_pk is not None and len(object_pk) > 36):
            raise ValueError("Invalid value for `object_pk`, length must be less than or equal to `36`")  # noqa: E501

        self._object_pk = object_pk

    @property
    def date(self):
        """Gets the date of this Action.  # noqa: E501


        :return: The date of this Action.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Action.


        :param date: The date of this Action.  # noqa: E501
        :type date: datetime
        """

        self._date = date

    @property
    def app_label(self):
        """Gets the app_label of this Action.  # noqa: E501


        :return: The app_label of this Action.  # noqa: E501
        :rtype: str
        """
        return self._app_label

    @app_label.setter
    def app_label(self, app_label):
        """Sets the app_label of this Action.


        :param app_label: The app_label of this Action.  # noqa: E501
        :type app_label: str
        """
        if (self.local_vars_configuration.client_side_validation and
                app_label is not None and len(app_label) > 20):
            raise ValueError("Invalid value for `app_label`, length must be less than or equal to `20`")  # noqa: E501

        self._app_label = app_label

    @property
    def model_name(self):
        """Gets the model_name of this Action.  # noqa: E501


        :return: The model_name of this Action.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this Action.


        :param model_name: The model_name of this Action.  # noqa: E501
        :type model_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                model_name is not None and len(model_name) > 50):
            raise ValueError("Invalid value for `model_name`, length must be less than or equal to `50`")  # noqa: E501

        self._model_name = model_name

    @property
    def object_str(self):
        """Gets the object_str of this Action.  # noqa: E501


        :return: The object_str of this Action.  # noqa: E501
        :rtype: str
        """
        return self._object_str

    @object_str.setter
    def object_str(self, object_str):
        """Sets the object_str of this Action.


        :param object_str: The object_str of this Action.  # noqa: E501
        :type object_str: str
        """
        if (self.local_vars_configuration.client_side_validation and
                object_str is not None and len(object_str) > 200):
            raise ValueError("Invalid value for `object_str`, length must be less than or equal to `200`")  # noqa: E501

        self._object_str = object_str

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Action):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Action):
            return True

        return self.to_dict() != other.to_dict()
