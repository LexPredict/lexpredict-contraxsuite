# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TextUnitClassifier(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pk': 'int',
        'name': 'str',
        'version': 'str',
        'class_name': 'str',
        'is_active': 'bool',
        'suggestions': 'str'
    }

    attribute_map = {
        'pk': 'pk',
        'name': 'name',
        'version': 'version',
        'class_name': 'class_name',
        'is_active': 'is_active',
        'suggestions': 'suggestions'
    }

    def __init__(self, pk=None, name=None, version=None, class_name=None, is_active=None, suggestions=None, local_vars_configuration=None):  # noqa: E501
        """TextUnitClassifier - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pk = None
        self._name = None
        self._version = None
        self._class_name = None
        self._is_active = None
        self._suggestions = None
        self.discriminator = None

        if pk is not None:
            self.pk = pk
        self.name = name
        self.version = version
        self.class_name = class_name
        if is_active is not None:
            self.is_active = is_active
        if suggestions is not None:
            self.suggestions = suggestions

    @property
    def pk(self):
        """Gets the pk of this TextUnitClassifier.  # noqa: E501


        :return: The pk of this TextUnitClassifier.  # noqa: E501
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this TextUnitClassifier.


        :param pk: The pk of this TextUnitClassifier.  # noqa: E501
        :type pk: int
        """

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this TextUnitClassifier.  # noqa: E501


        :return: The name of this TextUnitClassifier.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TextUnitClassifier.


        :param name: The name of this TextUnitClassifier.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 1024):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1024`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this TextUnitClassifier.  # noqa: E501


        :return: The version of this TextUnitClassifier.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TextUnitClassifier.


        :param version: The version of this TextUnitClassifier.  # noqa: E501
        :type version: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                version is not None and len(version) > 1024):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `1024`")  # noqa: E501

        self._version = version

    @property
    def class_name(self):
        """Gets the class_name of this TextUnitClassifier.  # noqa: E501


        :return: The class_name of this TextUnitClassifier.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this TextUnitClassifier.


        :param class_name: The class_name of this TextUnitClassifier.  # noqa: E501
        :type class_name: str
        """
        if self.local_vars_configuration.client_side_validation and class_name is None:  # noqa: E501
            raise ValueError("Invalid value for `class_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                class_name is not None and len(class_name) > 1024):
            raise ValueError("Invalid value for `class_name`, length must be less than or equal to `1024`")  # noqa: E501

        self._class_name = class_name

    @property
    def is_active(self):
        """Gets the is_active of this TextUnitClassifier.  # noqa: E501


        :return: The is_active of this TextUnitClassifier.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this TextUnitClassifier.


        :param is_active: The is_active of this TextUnitClassifier.  # noqa: E501
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def suggestions(self):
        """Gets the suggestions of this TextUnitClassifier.  # noqa: E501


        :return: The suggestions of this TextUnitClassifier.  # noqa: E501
        :rtype: str
        """
        return self._suggestions

    @suggestions.setter
    def suggestions(self, suggestions):
        """Sets the suggestions of this TextUnitClassifier.


        :param suggestions: The suggestions of this TextUnitClassifier.  # noqa: E501
        :type suggestions: str
        """

        self._suggestions = suggestions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextUnitClassifier):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TextUnitClassifier):
            return True

        return self.to_dict() != other.to_dict()
