# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProjectStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project_id': 'int',
        'name': 'str',
        'type_title': 'str',
        'documents_total': 'int',
        'clauses_total': 'int',
        'avg_ocr_grade': 'int',
        'document_status_loaded': 'int',
        'document_status_loaded_pcnt': 'float',
        'document_status_not_started': 'int',
        'document_status_not_started_pcnt': 'float',
        'document_status_in_review': 'int',
        'document_status_in_review_pcnt': 'float',
        'document_status_awaiting_qa': 'int',
        'document_status_awaiting_qa_pcnt': 'float',
        'document_status_completed': 'int',
        'document_status_completed_pcnt': 'float',
        'document_status_excluded': 'int',
        'document_status_excluded_pcnt': 'float',
        'clause_status_unreviewed': 'int',
        'clause_status_unreviewed_pcnt': 'float',
        'clause_status_accepted': 'int',
        'clause_status_accepted_pcnt': 'float',
        'clause_status_rejected': 'int',
        'clause_status_rejected_pcnt': 'float'
    }

    attribute_map = {
        'project_id': 'project_id',
        'name': 'name',
        'type_title': 'type_title',
        'documents_total': 'documents_total',
        'clauses_total': 'clauses_total',
        'avg_ocr_grade': 'avg_ocr_grade',
        'document_status_loaded': 'document_status_loaded',
        'document_status_loaded_pcnt': 'document_status_loaded_pcnt',
        'document_status_not_started': 'document_status_not_started',
        'document_status_not_started_pcnt': 'document_status_not_started_pcnt',
        'document_status_in_review': 'document_status_in_review',
        'document_status_in_review_pcnt': 'document_status_in_review_pcnt',
        'document_status_awaiting_qa': 'document_status_awaiting_qa',
        'document_status_awaiting_qa_pcnt': 'document_status_awaiting_qa_pcnt',
        'document_status_completed': 'document_status_completed',
        'document_status_completed_pcnt': 'document_status_completed_pcnt',
        'document_status_excluded': 'document_status_excluded',
        'document_status_excluded_pcnt': 'document_status_excluded_pcnt',
        'clause_status_unreviewed': 'clause_status_unreviewed',
        'clause_status_unreviewed_pcnt': 'clause_status_unreviewed_pcnt',
        'clause_status_accepted': 'clause_status_accepted',
        'clause_status_accepted_pcnt': 'clause_status_accepted_pcnt',
        'clause_status_rejected': 'clause_status_rejected',
        'clause_status_rejected_pcnt': 'clause_status_rejected_pcnt'
    }

    def __init__(self, project_id=None, name=None, type_title=None, documents_total=None, clauses_total=None, avg_ocr_grade=None, document_status_loaded=None, document_status_loaded_pcnt=None, document_status_not_started=None, document_status_not_started_pcnt=None, document_status_in_review=None, document_status_in_review_pcnt=None, document_status_awaiting_qa=None, document_status_awaiting_qa_pcnt=None, document_status_completed=None, document_status_completed_pcnt=None, document_status_excluded=None, document_status_excluded_pcnt=None, clause_status_unreviewed=None, clause_status_unreviewed_pcnt=None, clause_status_accepted=None, clause_status_accepted_pcnt=None, clause_status_rejected=None, clause_status_rejected_pcnt=None, local_vars_configuration=None):  # noqa: E501
        """ProjectStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project_id = None
        self._name = None
        self._type_title = None
        self._documents_total = None
        self._clauses_total = None
        self._avg_ocr_grade = None
        self._document_status_loaded = None
        self._document_status_loaded_pcnt = None
        self._document_status_not_started = None
        self._document_status_not_started_pcnt = None
        self._document_status_in_review = None
        self._document_status_in_review_pcnt = None
        self._document_status_awaiting_qa = None
        self._document_status_awaiting_qa_pcnt = None
        self._document_status_completed = None
        self._document_status_completed_pcnt = None
        self._document_status_excluded = None
        self._document_status_excluded_pcnt = None
        self._clause_status_unreviewed = None
        self._clause_status_unreviewed_pcnt = None
        self._clause_status_accepted = None
        self._clause_status_accepted_pcnt = None
        self._clause_status_rejected = None
        self._clause_status_rejected_pcnt = None
        self.discriminator = None

        self.project_id = project_id
        self.name = name
        self.type_title = type_title
        self.documents_total = documents_total
        self.clauses_total = clauses_total
        self.avg_ocr_grade = avg_ocr_grade
        self.document_status_loaded = document_status_loaded
        self.document_status_loaded_pcnt = document_status_loaded_pcnt
        self.document_status_not_started = document_status_not_started
        self.document_status_not_started_pcnt = document_status_not_started_pcnt
        self.document_status_in_review = document_status_in_review
        self.document_status_in_review_pcnt = document_status_in_review_pcnt
        self.document_status_awaiting_qa = document_status_awaiting_qa
        self.document_status_awaiting_qa_pcnt = document_status_awaiting_qa_pcnt
        self.document_status_completed = document_status_completed
        self.document_status_completed_pcnt = document_status_completed_pcnt
        self.document_status_excluded = document_status_excluded
        self.document_status_excluded_pcnt = document_status_excluded_pcnt
        self.clause_status_unreviewed = clause_status_unreviewed
        self.clause_status_unreviewed_pcnt = clause_status_unreviewed_pcnt
        self.clause_status_accepted = clause_status_accepted
        self.clause_status_accepted_pcnt = clause_status_accepted_pcnt
        self.clause_status_rejected = clause_status_rejected
        self.clause_status_rejected_pcnt = clause_status_rejected_pcnt

    @property
    def project_id(self):
        """Gets the project_id of this ProjectStats.  # noqa: E501


        :return: The project_id of this ProjectStats.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectStats.


        :param project_id: The project_id of this ProjectStats.  # noqa: E501
        :type project_id: int
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def name(self):
        """Gets the name of this ProjectStats.  # noqa: E501


        :return: The name of this ProjectStats.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectStats.


        :param name: The name of this ProjectStats.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type_title(self):
        """Gets the type_title of this ProjectStats.  # noqa: E501


        :return: The type_title of this ProjectStats.  # noqa: E501
        :rtype: str
        """
        return self._type_title

    @type_title.setter
    def type_title(self, type_title):
        """Sets the type_title of this ProjectStats.


        :param type_title: The type_title of this ProjectStats.  # noqa: E501
        :type type_title: str
        """
        if self.local_vars_configuration.client_side_validation and type_title is None:  # noqa: E501
            raise ValueError("Invalid value for `type_title`, must not be `None`")  # noqa: E501

        self._type_title = type_title

    @property
    def documents_total(self):
        """Gets the documents_total of this ProjectStats.  # noqa: E501


        :return: The documents_total of this ProjectStats.  # noqa: E501
        :rtype: int
        """
        return self._documents_total

    @documents_total.setter
    def documents_total(self, documents_total):
        """Sets the documents_total of this ProjectStats.


        :param documents_total: The documents_total of this ProjectStats.  # noqa: E501
        :type documents_total: int
        """
        if self.local_vars_configuration.client_side_validation and documents_total is None:  # noqa: E501
            raise ValueError("Invalid value for `documents_total`, must not be `None`")  # noqa: E501

        self._documents_total = documents_total

    @property
    def clauses_total(self):
        """Gets the clauses_total of this ProjectStats.  # noqa: E501


        :return: The clauses_total of this ProjectStats.  # noqa: E501
        :rtype: int
        """
        return self._clauses_total

    @clauses_total.setter
    def clauses_total(self, clauses_total):
        """Sets the clauses_total of this ProjectStats.


        :param clauses_total: The clauses_total of this ProjectStats.  # noqa: E501
        :type clauses_total: int
        """
        if self.local_vars_configuration.client_side_validation and clauses_total is None:  # noqa: E501
            raise ValueError("Invalid value for `clauses_total`, must not be `None`")  # noqa: E501

        self._clauses_total = clauses_total

    @property
    def avg_ocr_grade(self):
        """Gets the avg_ocr_grade of this ProjectStats.  # noqa: E501


        :return: The avg_ocr_grade of this ProjectStats.  # noqa: E501
        :rtype: int
        """
        return self._avg_ocr_grade

    @avg_ocr_grade.setter
    def avg_ocr_grade(self, avg_ocr_grade):
        """Sets the avg_ocr_grade of this ProjectStats.


        :param avg_ocr_grade: The avg_ocr_grade of this ProjectStats.  # noqa: E501
        :type avg_ocr_grade: int
        """

        self._avg_ocr_grade = avg_ocr_grade

    @property
    def document_status_loaded(self):
        """Gets the document_status_loaded of this ProjectStats.  # noqa: E501


        :return: The document_status_loaded of this ProjectStats.  # noqa: E501
        :rtype: int
        """
        return self._document_status_loaded

    @document_status_loaded.setter
    def document_status_loaded(self, document_status_loaded):
        """Sets the document_status_loaded of this ProjectStats.


        :param document_status_loaded: The document_status_loaded of this ProjectStats.  # noqa: E501
        :type document_status_loaded: int
        """
        if self.local_vars_configuration.client_side_validation and document_status_loaded is None:  # noqa: E501
            raise ValueError("Invalid value for `document_status_loaded`, must not be `None`")  # noqa: E501

        self._document_status_loaded = document_status_loaded

    @property
    def document_status_loaded_pcnt(self):
        """Gets the document_status_loaded_pcnt of this ProjectStats.  # noqa: E501


        :return: The document_status_loaded_pcnt of this ProjectStats.  # noqa: E501
        :rtype: float
        """
        return self._document_status_loaded_pcnt

    @document_status_loaded_pcnt.setter
    def document_status_loaded_pcnt(self, document_status_loaded_pcnt):
        """Sets the document_status_loaded_pcnt of this ProjectStats.


        :param document_status_loaded_pcnt: The document_status_loaded_pcnt of this ProjectStats.  # noqa: E501
        :type document_status_loaded_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and document_status_loaded_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `document_status_loaded_pcnt`, must not be `None`")  # noqa: E501

        self._document_status_loaded_pcnt = document_status_loaded_pcnt

    @property
    def document_status_not_started(self):
        """Gets the document_status_not_started of this ProjectStats.  # noqa: E501


        :return: The document_status_not_started of this ProjectStats.  # noqa: E501
        :rtype: int
        """
        return self._document_status_not_started

    @document_status_not_started.setter
    def document_status_not_started(self, document_status_not_started):
        """Sets the document_status_not_started of this ProjectStats.


        :param document_status_not_started: The document_status_not_started of this ProjectStats.  # noqa: E501
        :type document_status_not_started: int
        """
        if self.local_vars_configuration.client_side_validation and document_status_not_started is None:  # noqa: E501
            raise ValueError("Invalid value for `document_status_not_started`, must not be `None`")  # noqa: E501

        self._document_status_not_started = document_status_not_started

    @property
    def document_status_not_started_pcnt(self):
        """Gets the document_status_not_started_pcnt of this ProjectStats.  # noqa: E501


        :return: The document_status_not_started_pcnt of this ProjectStats.  # noqa: E501
        :rtype: float
        """
        return self._document_status_not_started_pcnt

    @document_status_not_started_pcnt.setter
    def document_status_not_started_pcnt(self, document_status_not_started_pcnt):
        """Sets the document_status_not_started_pcnt of this ProjectStats.


        :param document_status_not_started_pcnt: The document_status_not_started_pcnt of this ProjectStats.  # noqa: E501
        :type document_status_not_started_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and document_status_not_started_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `document_status_not_started_pcnt`, must not be `None`")  # noqa: E501

        self._document_status_not_started_pcnt = document_status_not_started_pcnt

    @property
    def document_status_in_review(self):
        """Gets the document_status_in_review of this ProjectStats.  # noqa: E501


        :return: The document_status_in_review of this ProjectStats.  # noqa: E501
        :rtype: int
        """
        return self._document_status_in_review

    @document_status_in_review.setter
    def document_status_in_review(self, document_status_in_review):
        """Sets the document_status_in_review of this ProjectStats.


        :param document_status_in_review: The document_status_in_review of this ProjectStats.  # noqa: E501
        :type document_status_in_review: int
        """
        if self.local_vars_configuration.client_side_validation and document_status_in_review is None:  # noqa: E501
            raise ValueError("Invalid value for `document_status_in_review`, must not be `None`")  # noqa: E501

        self._document_status_in_review = document_status_in_review

    @property
    def document_status_in_review_pcnt(self):
        """Gets the document_status_in_review_pcnt of this ProjectStats.  # noqa: E501


        :return: The document_status_in_review_pcnt of this ProjectStats.  # noqa: E501
        :rtype: float
        """
        return self._document_status_in_review_pcnt

    @document_status_in_review_pcnt.setter
    def document_status_in_review_pcnt(self, document_status_in_review_pcnt):
        """Sets the document_status_in_review_pcnt of this ProjectStats.


        :param document_status_in_review_pcnt: The document_status_in_review_pcnt of this ProjectStats.  # noqa: E501
        :type document_status_in_review_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and document_status_in_review_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `document_status_in_review_pcnt`, must not be `None`")  # noqa: E501

        self._document_status_in_review_pcnt = document_status_in_review_pcnt

    @property
    def document_status_awaiting_qa(self):
        """Gets the document_status_awaiting_qa of this ProjectStats.  # noqa: E501


        :return: The document_status_awaiting_qa of this ProjectStats.  # noqa: E501
        :rtype: int
        """
        return self._document_status_awaiting_qa

    @document_status_awaiting_qa.setter
    def document_status_awaiting_qa(self, document_status_awaiting_qa):
        """Sets the document_status_awaiting_qa of this ProjectStats.


        :param document_status_awaiting_qa: The document_status_awaiting_qa of this ProjectStats.  # noqa: E501
        :type document_status_awaiting_qa: int
        """
        if self.local_vars_configuration.client_side_validation and document_status_awaiting_qa is None:  # noqa: E501
            raise ValueError("Invalid value for `document_status_awaiting_qa`, must not be `None`")  # noqa: E501

        self._document_status_awaiting_qa = document_status_awaiting_qa

    @property
    def document_status_awaiting_qa_pcnt(self):
        """Gets the document_status_awaiting_qa_pcnt of this ProjectStats.  # noqa: E501


        :return: The document_status_awaiting_qa_pcnt of this ProjectStats.  # noqa: E501
        :rtype: float
        """
        return self._document_status_awaiting_qa_pcnt

    @document_status_awaiting_qa_pcnt.setter
    def document_status_awaiting_qa_pcnt(self, document_status_awaiting_qa_pcnt):
        """Sets the document_status_awaiting_qa_pcnt of this ProjectStats.


        :param document_status_awaiting_qa_pcnt: The document_status_awaiting_qa_pcnt of this ProjectStats.  # noqa: E501
        :type document_status_awaiting_qa_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and document_status_awaiting_qa_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `document_status_awaiting_qa_pcnt`, must not be `None`")  # noqa: E501

        self._document_status_awaiting_qa_pcnt = document_status_awaiting_qa_pcnt

    @property
    def document_status_completed(self):
        """Gets the document_status_completed of this ProjectStats.  # noqa: E501


        :return: The document_status_completed of this ProjectStats.  # noqa: E501
        :rtype: int
        """
        return self._document_status_completed

    @document_status_completed.setter
    def document_status_completed(self, document_status_completed):
        """Sets the document_status_completed of this ProjectStats.


        :param document_status_completed: The document_status_completed of this ProjectStats.  # noqa: E501
        :type document_status_completed: int
        """
        if self.local_vars_configuration.client_side_validation and document_status_completed is None:  # noqa: E501
            raise ValueError("Invalid value for `document_status_completed`, must not be `None`")  # noqa: E501

        self._document_status_completed = document_status_completed

    @property
    def document_status_completed_pcnt(self):
        """Gets the document_status_completed_pcnt of this ProjectStats.  # noqa: E501


        :return: The document_status_completed_pcnt of this ProjectStats.  # noqa: E501
        :rtype: float
        """
        return self._document_status_completed_pcnt

    @document_status_completed_pcnt.setter
    def document_status_completed_pcnt(self, document_status_completed_pcnt):
        """Sets the document_status_completed_pcnt of this ProjectStats.


        :param document_status_completed_pcnt: The document_status_completed_pcnt of this ProjectStats.  # noqa: E501
        :type document_status_completed_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and document_status_completed_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `document_status_completed_pcnt`, must not be `None`")  # noqa: E501

        self._document_status_completed_pcnt = document_status_completed_pcnt

    @property
    def document_status_excluded(self):
        """Gets the document_status_excluded of this ProjectStats.  # noqa: E501


        :return: The document_status_excluded of this ProjectStats.  # noqa: E501
        :rtype: int
        """
        return self._document_status_excluded

    @document_status_excluded.setter
    def document_status_excluded(self, document_status_excluded):
        """Sets the document_status_excluded of this ProjectStats.


        :param document_status_excluded: The document_status_excluded of this ProjectStats.  # noqa: E501
        :type document_status_excluded: int
        """
        if self.local_vars_configuration.client_side_validation and document_status_excluded is None:  # noqa: E501
            raise ValueError("Invalid value for `document_status_excluded`, must not be `None`")  # noqa: E501

        self._document_status_excluded = document_status_excluded

    @property
    def document_status_excluded_pcnt(self):
        """Gets the document_status_excluded_pcnt of this ProjectStats.  # noqa: E501


        :return: The document_status_excluded_pcnt of this ProjectStats.  # noqa: E501
        :rtype: float
        """
        return self._document_status_excluded_pcnt

    @document_status_excluded_pcnt.setter
    def document_status_excluded_pcnt(self, document_status_excluded_pcnt):
        """Sets the document_status_excluded_pcnt of this ProjectStats.


        :param document_status_excluded_pcnt: The document_status_excluded_pcnt of this ProjectStats.  # noqa: E501
        :type document_status_excluded_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and document_status_excluded_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `document_status_excluded_pcnt`, must not be `None`")  # noqa: E501

        self._document_status_excluded_pcnt = document_status_excluded_pcnt

    @property
    def clause_status_unreviewed(self):
        """Gets the clause_status_unreviewed of this ProjectStats.  # noqa: E501


        :return: The clause_status_unreviewed of this ProjectStats.  # noqa: E501
        :rtype: int
        """
        return self._clause_status_unreviewed

    @clause_status_unreviewed.setter
    def clause_status_unreviewed(self, clause_status_unreviewed):
        """Sets the clause_status_unreviewed of this ProjectStats.


        :param clause_status_unreviewed: The clause_status_unreviewed of this ProjectStats.  # noqa: E501
        :type clause_status_unreviewed: int
        """
        if self.local_vars_configuration.client_side_validation and clause_status_unreviewed is None:  # noqa: E501
            raise ValueError("Invalid value for `clause_status_unreviewed`, must not be `None`")  # noqa: E501

        self._clause_status_unreviewed = clause_status_unreviewed

    @property
    def clause_status_unreviewed_pcnt(self):
        """Gets the clause_status_unreviewed_pcnt of this ProjectStats.  # noqa: E501


        :return: The clause_status_unreviewed_pcnt of this ProjectStats.  # noqa: E501
        :rtype: float
        """
        return self._clause_status_unreviewed_pcnt

    @clause_status_unreviewed_pcnt.setter
    def clause_status_unreviewed_pcnt(self, clause_status_unreviewed_pcnt):
        """Sets the clause_status_unreviewed_pcnt of this ProjectStats.


        :param clause_status_unreviewed_pcnt: The clause_status_unreviewed_pcnt of this ProjectStats.  # noqa: E501
        :type clause_status_unreviewed_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and clause_status_unreviewed_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `clause_status_unreviewed_pcnt`, must not be `None`")  # noqa: E501

        self._clause_status_unreviewed_pcnt = clause_status_unreviewed_pcnt

    @property
    def clause_status_accepted(self):
        """Gets the clause_status_accepted of this ProjectStats.  # noqa: E501


        :return: The clause_status_accepted of this ProjectStats.  # noqa: E501
        :rtype: int
        """
        return self._clause_status_accepted

    @clause_status_accepted.setter
    def clause_status_accepted(self, clause_status_accepted):
        """Sets the clause_status_accepted of this ProjectStats.


        :param clause_status_accepted: The clause_status_accepted of this ProjectStats.  # noqa: E501
        :type clause_status_accepted: int
        """
        if self.local_vars_configuration.client_side_validation and clause_status_accepted is None:  # noqa: E501
            raise ValueError("Invalid value for `clause_status_accepted`, must not be `None`")  # noqa: E501

        self._clause_status_accepted = clause_status_accepted

    @property
    def clause_status_accepted_pcnt(self):
        """Gets the clause_status_accepted_pcnt of this ProjectStats.  # noqa: E501


        :return: The clause_status_accepted_pcnt of this ProjectStats.  # noqa: E501
        :rtype: float
        """
        return self._clause_status_accepted_pcnt

    @clause_status_accepted_pcnt.setter
    def clause_status_accepted_pcnt(self, clause_status_accepted_pcnt):
        """Sets the clause_status_accepted_pcnt of this ProjectStats.


        :param clause_status_accepted_pcnt: The clause_status_accepted_pcnt of this ProjectStats.  # noqa: E501
        :type clause_status_accepted_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and clause_status_accepted_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `clause_status_accepted_pcnt`, must not be `None`")  # noqa: E501

        self._clause_status_accepted_pcnt = clause_status_accepted_pcnt

    @property
    def clause_status_rejected(self):
        """Gets the clause_status_rejected of this ProjectStats.  # noqa: E501


        :return: The clause_status_rejected of this ProjectStats.  # noqa: E501
        :rtype: int
        """
        return self._clause_status_rejected

    @clause_status_rejected.setter
    def clause_status_rejected(self, clause_status_rejected):
        """Sets the clause_status_rejected of this ProjectStats.


        :param clause_status_rejected: The clause_status_rejected of this ProjectStats.  # noqa: E501
        :type clause_status_rejected: int
        """
        if self.local_vars_configuration.client_side_validation and clause_status_rejected is None:  # noqa: E501
            raise ValueError("Invalid value for `clause_status_rejected`, must not be `None`")  # noqa: E501

        self._clause_status_rejected = clause_status_rejected

    @property
    def clause_status_rejected_pcnt(self):
        """Gets the clause_status_rejected_pcnt of this ProjectStats.  # noqa: E501


        :return: The clause_status_rejected_pcnt of this ProjectStats.  # noqa: E501
        :rtype: float
        """
        return self._clause_status_rejected_pcnt

    @clause_status_rejected_pcnt.setter
    def clause_status_rejected_pcnt(self, clause_status_rejected_pcnt):
        """Sets the clause_status_rejected_pcnt of this ProjectStats.


        :param clause_status_rejected_pcnt: The clause_status_rejected_pcnt of this ProjectStats.  # noqa: E501
        :type clause_status_rejected_pcnt: float
        """
        if self.local_vars_configuration.client_side_validation and clause_status_rejected_pcnt is None:  # noqa: E501
            raise ValueError("Invalid value for `clause_status_rejected_pcnt`, must not be `None`")  # noqa: E501

        self._clause_status_rejected_pcnt = clause_status_rejected_pcnt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectStats):
            return True

        return self.to_dict() != other.to_dict()
