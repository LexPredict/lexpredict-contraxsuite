# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocumentFieldDetectorDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'category': 'str',
        'field': 'str',
        'field__code': 'str',
        'field__title': 'str',
        'field__uid': 'str',
        'field__type': 'str',
        'field__document_type__title': 'str',
        'exclude_regexps': 'str',
        'definition_words': 'str',
        'include_regexps': 'str',
        'regexps_pre_process_lower': 'bool',
        'detected_value': 'str',
        'extraction_hint': 'str',
        'text_part': 'str'
    }

    attribute_map = {
        'uid': 'uid',
        'category': 'category',
        'field': 'field',
        'field__code': 'field__code',
        'field__title': 'field__title',
        'field__uid': 'field__uid',
        'field__type': 'field__type',
        'field__document_type__title': 'field__document_type__title',
        'exclude_regexps': 'exclude_regexps',
        'definition_words': 'definition_words',
        'include_regexps': 'include_regexps',
        'regexps_pre_process_lower': 'regexps_pre_process_lower',
        'detected_value': 'detected_value',
        'extraction_hint': 'extraction_hint',
        'text_part': 'text_part'
    }

    def __init__(self, uid=None, category=None, field=None, field__code=None, field__title=None, field__uid=None, field__type=None, field__document_type__title=None, exclude_regexps=None, definition_words=None, include_regexps=None, regexps_pre_process_lower=None, detected_value=None, extraction_hint=None, text_part=None, local_vars_configuration=None):  # noqa: E501
        """DocumentFieldDetectorDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uid = None
        self._category = None
        self._field = None
        self._field__code = None
        self._field__title = None
        self._field__uid = None
        self._field__type = None
        self._field__document_type__title = None
        self._exclude_regexps = None
        self._definition_words = None
        self._include_regexps = None
        self._regexps_pre_process_lower = None
        self._detected_value = None
        self._extraction_hint = None
        self._text_part = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        self.category = category
        self.field = field
        if field__code is not None:
            self.field__code = field__code
        if field__title is not None:
            self.field__title = field__title
        if field__uid is not None:
            self.field__uid = field__uid
        if field__type is not None:
            self.field__type = field__type
        if field__document_type__title is not None:
            self.field__document_type__title = field__document_type__title
        self.exclude_regexps = exclude_regexps
        self.definition_words = definition_words
        if include_regexps is not None:
            self.include_regexps = include_regexps
        if regexps_pre_process_lower is not None:
            self.regexps_pre_process_lower = regexps_pre_process_lower
        self.detected_value = detected_value
        self.extraction_hint = extraction_hint
        if text_part is not None:
            self.text_part = text_part

    @property
    def uid(self):
        """Gets the uid of this DocumentFieldDetectorDetail.  # noqa: E501


        :return: The uid of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DocumentFieldDetectorDetail.


        :param uid: The uid of this DocumentFieldDetectorDetail.  # noqa: E501
        :type uid: str
        """

        self._uid = uid

    @property
    def category(self):
        """Gets the category of this DocumentFieldDetectorDetail.  # noqa: E501

        Field detector category used for technical needs e.g. for determining  which field detectors were created automatically during import process.  # noqa: E501

        :return: The category of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DocumentFieldDetectorDetail.

        Field detector category used for technical needs e.g. for determining  which field detectors were created automatically during import process.  # noqa: E501

        :param category: The category of this DocumentFieldDetectorDetail.  # noqa: E501
        :type category: str
        """
        allowed_values = [None,"simple_config"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def field(self):
        """Gets the field of this DocumentFieldDetectorDetail.  # noqa: E501


        :return: The field of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this DocumentFieldDetectorDetail.


        :param field: The field of this DocumentFieldDetectorDetail.  # noqa: E501
        :type field: str
        """
        if self.local_vars_configuration.client_side_validation and field is None:  # noqa: E501
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501

        self._field = field

    @property
    def field__code(self):
        """Gets the field__code of this DocumentFieldDetectorDetail.  # noqa: E501


        :return: The field__code of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._field__code

    @field__code.setter
    def field__code(self, field__code):
        """Sets the field__code of this DocumentFieldDetectorDetail.


        :param field__code: The field__code of this DocumentFieldDetectorDetail.  # noqa: E501
        :type field__code: str
        """

        self._field__code = field__code

    @property
    def field__title(self):
        """Gets the field__title of this DocumentFieldDetectorDetail.  # noqa: E501


        :return: The field__title of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._field__title

    @field__title.setter
    def field__title(self, field__title):
        """Sets the field__title of this DocumentFieldDetectorDetail.


        :param field__title: The field__title of this DocumentFieldDetectorDetail.  # noqa: E501
        :type field__title: str
        """

        self._field__title = field__title

    @property
    def field__uid(self):
        """Gets the field__uid of this DocumentFieldDetectorDetail.  # noqa: E501


        :return: The field__uid of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._field__uid

    @field__uid.setter
    def field__uid(self, field__uid):
        """Sets the field__uid of this DocumentFieldDetectorDetail.


        :param field__uid: The field__uid of this DocumentFieldDetectorDetail.  # noqa: E501
        :type field__uid: str
        """

        self._field__uid = field__uid

    @property
    def field__type(self):
        """Gets the field__type of this DocumentFieldDetectorDetail.  # noqa: E501


        :return: The field__type of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._field__type

    @field__type.setter
    def field__type(self, field__type):
        """Sets the field__type of this DocumentFieldDetectorDetail.


        :param field__type: The field__type of this DocumentFieldDetectorDetail.  # noqa: E501
        :type field__type: str
        """

        self._field__type = field__type

    @property
    def field__document_type__title(self):
        """Gets the field__document_type__title of this DocumentFieldDetectorDetail.  # noqa: E501


        :return: The field__document_type__title of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._field__document_type__title

    @field__document_type__title.setter
    def field__document_type__title(self, field__document_type__title):
        """Sets the field__document_type__title of this DocumentFieldDetectorDetail.


        :param field__document_type__title: The field__document_type__title of this DocumentFieldDetectorDetail.  # noqa: E501
        :type field__document_type__title: str
        """

        self._field__document_type__title = field__document_type__title

    @property
    def exclude_regexps(self):
        """Gets the exclude_regexps of this DocumentFieldDetectorDetail.  # noqa: E501

        Enter regular expressions, each on a new line, for text patterns  you want EXCLUDED. The Field Detector will attempt to skip any Text Unit that contains any of the patterns written  here, and will move on to the next Text Unit. Avoid using “.*” and similar unlimited multipliers, as they can crash  or slow ContraxSuite. Use bounded multipliers for variable length matching, like “.{0,100}” or similar. Note that  Exclude regexps are checked before Definition words and Include regexps. If a Field Detector has Exclude regexps, but  no Definition words or Include regexps, it will not extract any data.  # noqa: E501

        :return: The exclude_regexps of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._exclude_regexps

    @exclude_regexps.setter
    def exclude_regexps(self, exclude_regexps):
        """Sets the exclude_regexps of this DocumentFieldDetectorDetail.

        Enter regular expressions, each on a new line, for text patterns  you want EXCLUDED. The Field Detector will attempt to skip any Text Unit that contains any of the patterns written  here, and will move on to the next Text Unit. Avoid using “.*” and similar unlimited multipliers, as they can crash  or slow ContraxSuite. Use bounded multipliers for variable length matching, like “.{0,100}” or similar. Note that  Exclude regexps are checked before Definition words and Include regexps. If a Field Detector has Exclude regexps, but  no Definition words or Include regexps, it will not extract any data.  # noqa: E501

        :param exclude_regexps: The exclude_regexps of this DocumentFieldDetectorDetail.  # noqa: E501
        :type exclude_regexps: str
        """

        self._exclude_regexps = exclude_regexps

    @property
    def definition_words(self):
        """Gets the definition_words of this DocumentFieldDetectorDetail.  # noqa: E501

        Enter words or phrases, each on a new line, that must be present  in the Text Unit. These words must be in the Definitions List. If ContraxSuite fails to recognize these words as  definitions, then the Field Detector skips and moves to the next Text Unit. If there are Include regexps, then the  Field Detector checks against those requirements. The Field Detector marks the entire Text Unit as a match. Note that  the Field Detector checks for definition words after filtering using the Exclude regexps.  # noqa: E501

        :return: The definition_words of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._definition_words

    @definition_words.setter
    def definition_words(self, definition_words):
        """Sets the definition_words of this DocumentFieldDetectorDetail.

        Enter words or phrases, each on a new line, that must be present  in the Text Unit. These words must be in the Definitions List. If ContraxSuite fails to recognize these words as  definitions, then the Field Detector skips and moves to the next Text Unit. If there are Include regexps, then the  Field Detector checks against those requirements. The Field Detector marks the entire Text Unit as a match. Note that  the Field Detector checks for definition words after filtering using the Exclude regexps.  # noqa: E501

        :param definition_words: The definition_words of this DocumentFieldDetectorDetail.  # noqa: E501
        :type definition_words: str
        """

        self._definition_words = definition_words

    @property
    def include_regexps(self):
        """Gets the include_regexps of this DocumentFieldDetectorDetail.  # noqa: E501


        :return: The include_regexps of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._include_regexps

    @include_regexps.setter
    def include_regexps(self, include_regexps):
        """Sets the include_regexps of this DocumentFieldDetectorDetail.


        :param include_regexps: The include_regexps of this DocumentFieldDetectorDetail.  # noqa: E501
        :type include_regexps: str
        """

        self._include_regexps = include_regexps

    @property
    def regexps_pre_process_lower(self):
        """Gets the regexps_pre_process_lower of this DocumentFieldDetectorDetail.  # noqa: E501

        Set 'ignore case' flag for both 'Include regexps' and 'Exclude regexps' options.  # noqa: E501

        :return: The regexps_pre_process_lower of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: bool
        """
        return self._regexps_pre_process_lower

    @regexps_pre_process_lower.setter
    def regexps_pre_process_lower(self, regexps_pre_process_lower):
        """Sets the regexps_pre_process_lower of this DocumentFieldDetectorDetail.

        Set 'ignore case' flag for both 'Include regexps' and 'Exclude regexps' options.  # noqa: E501

        :param regexps_pre_process_lower: The regexps_pre_process_lower of this DocumentFieldDetectorDetail.  # noqa: E501
        :type regexps_pre_process_lower: bool
        """

        self._regexps_pre_process_lower = regexps_pre_process_lower

    @property
    def detected_value(self):
        """Gets the detected_value of this DocumentFieldDetectorDetail.  # noqa: E501

        The string value written here  will be assigned to the field if the Field Detector positively matches a Text Unit. This is only applicable to Choice,  Multichoice, and String fields, as their respective Field Detectors do not extract and display values from the source  text.  # noqa: E501

        :return: The detected_value of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._detected_value

    @detected_value.setter
    def detected_value(self, detected_value):
        """Sets the detected_value of this DocumentFieldDetectorDetail.

        The string value written here  will be assigned to the field if the Field Detector positively matches a Text Unit. This is only applicable to Choice,  Multichoice, and String fields, as their respective Field Detectors do not extract and display values from the source  text.  # noqa: E501

        :param detected_value: The detected_value of this DocumentFieldDetectorDetail.  # noqa: E501
        :type detected_value: str
        """
        if (self.local_vars_configuration.client_side_validation and
                detected_value is not None and len(detected_value) > 256):
            raise ValueError("Invalid value for `detected_value`, length must be less than or equal to `256`")  # noqa: E501

        self._detected_value = detected_value

    @property
    def extraction_hint(self):
        """Gets the extraction_hint of this DocumentFieldDetectorDetail.  # noqa: E501

        Provide additional instruction on which  specific values should be prioritized for extraction, when multiple values of the same type  (e.g., Company, Person, Geography) are found within the relevant detected Text Unit.  # noqa: E501

        :return: The extraction_hint of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._extraction_hint

    @extraction_hint.setter
    def extraction_hint(self, extraction_hint):
        """Sets the extraction_hint of this DocumentFieldDetectorDetail.

        Provide additional instruction on which  specific values should be prioritized for extraction, when multiple values of the same type  (e.g., Company, Person, Geography) are found within the relevant detected Text Unit.  # noqa: E501

        :param extraction_hint: The extraction_hint of this DocumentFieldDetectorDetail.  # noqa: E501
        :type extraction_hint: str
        """
        allowed_values = [None,"TAKE_FIRST", "TAKE_SECOND", "TAKE_LAST", "TAKE_MIN", "TAKE_MAX"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and extraction_hint not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `extraction_hint` ({0}), must be one of {1}"  # noqa: E501
                .format(extraction_hint, allowed_values)
            )

        self._extraction_hint = extraction_hint

    @property
    def text_part(self):
        """Gets the text_part of this DocumentFieldDetectorDetail.  # noqa: E501

        Defines which part of the matched Text Unit  should be passed to the extraction function. Example: In the string \"2019-01-23 is the start date and 2019-01-24 is the  end date,\" if text part = \"Before matching substring\" and Include regexp is \"is.{0,100}start\" then \"2019-01-23\" will be  parsed correctly as the start date.  # noqa: E501

        :return: The text_part of this DocumentFieldDetectorDetail.  # noqa: E501
        :rtype: str
        """
        return self._text_part

    @text_part.setter
    def text_part(self, text_part):
        """Sets the text_part of this DocumentFieldDetectorDetail.

        Defines which part of the matched Text Unit  should be passed to the extraction function. Example: In the string \"2019-01-23 is the start date and 2019-01-24 is the  end date,\" if text part = \"Before matching substring\" and Include regexp is \"is.{0,100}start\" then \"2019-01-23\" will be  parsed correctly as the start date.  # noqa: E501

        :param text_part: The text_part of this DocumentFieldDetectorDetail.  # noqa: E501
        :type text_part: str
        """
        allowed_values = ["FULL", "BEFORE_REGEXP", "AFTER_REGEXP", "INSIDE_REGEXP"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and text_part not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `text_part` ({0}), must be one of {1}"  # noqa: E501
                .format(text_part, allowed_values)
            )

        self._text_part = text_part

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentFieldDetectorDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentFieldDetectorDetail):
            return True

        return self.to_dict() != other.to_dict()
