# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class UploadSession(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'project': 'int',
        'created_by': 'int',
        'upload_files': 'object',
        'review_files': 'bool',
        'force': 'bool'
    }

    attribute_map = {
        'uid': 'uid',
        'project': 'project',
        'created_by': 'created_by',
        'upload_files': 'upload_files',
        'review_files': 'review_files',
        'force': 'force'
    }

    def __init__(self, uid=None, project=None, created_by=None, upload_files=None, review_files=None, force=None, local_vars_configuration=None):  # noqa: E501
        """UploadSession - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uid = None
        self._project = None
        self._created_by = None
        self._upload_files = None
        self._review_files = None
        self._force = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if project is not None:
            self.project = project
        if created_by is not None:
            self.created_by = created_by
        if upload_files is not None:
            self.upload_files = upload_files
        if review_files is not None:
            self.review_files = review_files
        if force is not None:
            self.force = force

    @property
    def uid(self):
        """Gets the uid of this UploadSession.  # noqa: E501


        :return: The uid of this UploadSession.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this UploadSession.


        :param uid: The uid of this UploadSession.  # noqa: E501
        :type uid: str
        """

        self._uid = uid

    @property
    def project(self):
        """Gets the project of this UploadSession.  # noqa: E501


        :return: The project of this UploadSession.  # noqa: E501
        :rtype: int
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this UploadSession.


        :param project: The project of this UploadSession.  # noqa: E501
        :type project: int
        """

        self._project = project

    @property
    def created_by(self):
        """Gets the created_by of this UploadSession.  # noqa: E501


        :return: The created_by of this UploadSession.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this UploadSession.


        :param created_by: The created_by of this UploadSession.  # noqa: E501
        :type created_by: int
        """

        self._created_by = created_by

    @property
    def upload_files(self):
        """Gets the upload_files of this UploadSession.  # noqa: E501


        :return: The upload_files of this UploadSession.  # noqa: E501
        :rtype: object
        """
        return self._upload_files

    @upload_files.setter
    def upload_files(self, upload_files):
        """Sets the upload_files of this UploadSession.


        :param upload_files: The upload_files of this UploadSession.  # noqa: E501
        :type upload_files: object
        """

        self._upload_files = upload_files

    @property
    def review_files(self):
        """Gets the review_files of this UploadSession.  # noqa: E501


        :return: The review_files of this UploadSession.  # noqa: E501
        :rtype: bool
        """
        return self._review_files

    @review_files.setter
    def review_files(self, review_files):
        """Sets the review_files of this UploadSession.


        :param review_files: The review_files of this UploadSession.  # noqa: E501
        :type review_files: bool
        """

        self._review_files = review_files

    @property
    def force(self):
        """Gets the force of this UploadSession.  # noqa: E501


        :return: The force of this UploadSession.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this UploadSession.


        :param force: The force of this UploadSession.  # noqa: E501
        :type force: bool
        """

        self._force = force

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadSession):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UploadSession):
            return True

        return self.to_dict() != other.to_dict()
