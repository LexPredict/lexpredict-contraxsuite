# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocumentFieldCategoryListFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'category': 'int',
        'code': 'str',
        'title': 'str',
        'order': 'int'
    }

    attribute_map = {
        'id': 'id',
        'category': 'category',
        'code': 'code',
        'title': 'title',
        'order': 'order'
    }

    def __init__(self, id=None, category=None, code=None, title=None, order=None, local_vars_configuration=None):  # noqa: E501
        """DocumentFieldCategoryListFields - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._category = None
        self._code = None
        self._title = None
        self._order = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.category = category
        self.code = code
        self.title = title
        if order is not None:
            self.order = order

    @property
    def id(self):
        """Gets the id of this DocumentFieldCategoryListFields.  # noqa: E501


        :return: The id of this DocumentFieldCategoryListFields.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentFieldCategoryListFields.


        :param id: The id of this DocumentFieldCategoryListFields.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def category(self):
        """Gets the category of this DocumentFieldCategoryListFields.  # noqa: E501


        :return: The category of this DocumentFieldCategoryListFields.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DocumentFieldCategoryListFields.


        :param category: The category of this DocumentFieldCategoryListFields.  # noqa: E501
        :type category: int
        """

        self._category = category

    @property
    def code(self):
        """Gets the code of this DocumentFieldCategoryListFields.  # noqa: E501

        Field codes must be lowercase, should start with  a Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.  # noqa: E501

        :return: The code of this DocumentFieldCategoryListFields.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DocumentFieldCategoryListFields.

        Field codes must be lowercase, should start with  a Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.  # noqa: E501

        :param code: The code of this DocumentFieldCategoryListFields.  # noqa: E501
        :type code: str
        """
        if self.local_vars_configuration.client_side_validation and code is None:  # noqa: E501
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                code is not None and len(code) > 50):
            raise ValueError("Invalid value for `code`, length must be less than or equal to `50`")  # noqa: E501

        self._code = code

    @property
    def title(self):
        """Gets the title of this DocumentFieldCategoryListFields.  # noqa: E501


        :return: The title of this DocumentFieldCategoryListFields.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DocumentFieldCategoryListFields.


        :param title: The title of this DocumentFieldCategoryListFields.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) > 100):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `100`")  # noqa: E501

        self._title = title

    @property
    def order(self):
        """Gets the order of this DocumentFieldCategoryListFields.  # noqa: E501


        :return: The order of this DocumentFieldCategoryListFields.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DocumentFieldCategoryListFields.


        :param order: The order of this DocumentFieldCategoryListFields.  # noqa: E501
        :type order: int
        """
        if (self.local_vars_configuration.client_side_validation and
                order is not None and order > 32767):  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                order is not None and order < 0):  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `0`")  # noqa: E501

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentFieldCategoryListFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentFieldCategoryListFields):
            return True

        return self.to_dict() != other.to_dict()
