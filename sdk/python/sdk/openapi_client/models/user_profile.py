# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class UserProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'last_name': 'str',
        'first_name': 'str',
        'name': 'str',
        'email': 'str',
        'organization': 'str',
        'groups': 'list[int]'
    }

    attribute_map = {
        'username': 'username',
        'last_name': 'last_name',
        'first_name': 'first_name',
        'name': 'name',
        'email': 'email',
        'organization': 'organization',
        'groups': 'groups'
    }

    def __init__(self, username=None, last_name=None, first_name=None, name=None, email=None, organization=None, groups=None, local_vars_configuration=None):  # noqa: E501
        """UserProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._username = None
        self._last_name = None
        self._first_name = None
        self._name = None
        self._email = None
        self._organization = None
        self._groups = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if last_name is not None:
            self.last_name = last_name
        if first_name is not None:
            self.first_name = first_name
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        self.organization = organization
        if groups is not None:
            self.groups = groups

    @property
    def username(self):
        """Gets the username of this UserProfile.  # noqa: E501

        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.  # noqa: E501

        :return: The username of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserProfile.

        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.  # noqa: E501

        :param username: The username of this UserProfile.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def last_name(self):
        """Gets the last_name of this UserProfile.  # noqa: E501


        :return: The last_name of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserProfile.


        :param last_name: The last_name of this UserProfile.  # noqa: E501
        :type last_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                last_name is not None and len(last_name) > 150):
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `150`")  # noqa: E501

        self._last_name = last_name

    @property
    def first_name(self):
        """Gets the first_name of this UserProfile.  # noqa: E501


        :return: The first_name of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserProfile.


        :param first_name: The first_name of this UserProfile.  # noqa: E501
        :type first_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                first_name is not None and len(first_name) > 30):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `30`")  # noqa: E501

        self._first_name = first_name

    @property
    def name(self):
        """Gets the name of this UserProfile.  # noqa: E501


        :return: The name of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserProfile.


        :param name: The name of this UserProfile.  # noqa: E501
        :type name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this UserProfile.  # noqa: E501


        :return: The email of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserProfile.


        :param email: The email of this UserProfile.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def organization(self):
        """Gets the organization of this UserProfile.  # noqa: E501


        :return: The organization of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this UserProfile.


        :param organization: The organization of this UserProfile.  # noqa: E501
        :type organization: str
        """
        if (self.local_vars_configuration.client_side_validation and
                organization is not None and len(organization) > 100):
            raise ValueError("Invalid value for `organization`, length must be less than or equal to `100`")  # noqa: E501

        self._organization = organization

    @property
    def groups(self):
        """Gets the groups of this UserProfile.  # noqa: E501

        The groups this user belongs to. A user will get all permissions granted to each of their groups.  # noqa: E501

        :return: The groups of this UserProfile.  # noqa: E501
        :rtype: list[int]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserProfile.

        The groups this user belongs to. A user will get all permissions granted to each of their groups.  # noqa: E501

        :param groups: The groups of this UserProfile.  # noqa: E501
        :type groups: list[int]
        """

        self._groups = groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserProfile):
            return True

        return self.to_dict() != other.to_dict()
