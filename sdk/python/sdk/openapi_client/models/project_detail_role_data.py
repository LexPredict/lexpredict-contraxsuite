# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProjectDetailRoleData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'code': 'str',
        'abbr': 'str',
        'order': 'int',
        'is_admin': 'bool',
        'is_top_manager': 'bool',
        'is_manager': 'bool',
        'is_reviewer': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'code': 'code',
        'abbr': 'abbr',
        'order': 'order',
        'is_admin': 'is_admin',
        'is_top_manager': 'is_top_manager',
        'is_manager': 'is_manager',
        'is_reviewer': 'is_reviewer'
    }

    def __init__(self, id=None, name=None, code=None, abbr=None, order=None, is_admin=None, is_top_manager=None, is_manager=None, is_reviewer=None, local_vars_configuration=None):  # noqa: E501
        """ProjectDetailRoleData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._code = None
        self._abbr = None
        self._order = None
        self._is_admin = None
        self._is_top_manager = None
        self._is_manager = None
        self._is_reviewer = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.code = code
        if abbr is not None:
            self.abbr = abbr
        self.order = order
        if is_admin is not None:
            self.is_admin = is_admin
        if is_top_manager is not None:
            self.is_top_manager = is_top_manager
        if is_manager is not None:
            self.is_manager = is_manager
        if is_reviewer is not None:
            self.is_reviewer = is_reviewer

    @property
    def id(self):
        """Gets the id of this ProjectDetailRoleData.  # noqa: E501


        :return: The id of this ProjectDetailRoleData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectDetailRoleData.


        :param id: The id of this ProjectDetailRoleData.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProjectDetailRoleData.  # noqa: E501


        :return: The name of this ProjectDetailRoleData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectDetailRoleData.


        :param name: The name of this ProjectDetailRoleData.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 50):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501

        self._name = name

    @property
    def code(self):
        """Gets the code of this ProjectDetailRoleData.  # noqa: E501


        :return: The code of this ProjectDetailRoleData.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProjectDetailRoleData.


        :param code: The code of this ProjectDetailRoleData.  # noqa: E501
        :type code: str
        """
        if self.local_vars_configuration.client_side_validation and code is None:  # noqa: E501
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                code is not None and len(code) > 50):
            raise ValueError("Invalid value for `code`, length must be less than or equal to `50`")  # noqa: E501

        self._code = code

    @property
    def abbr(self):
        """Gets the abbr of this ProjectDetailRoleData.  # noqa: E501


        :return: The abbr of this ProjectDetailRoleData.  # noqa: E501
        :rtype: str
        """
        return self._abbr

    @abbr.setter
    def abbr(self, abbr):
        """Sets the abbr of this ProjectDetailRoleData.


        :param abbr: The abbr of this ProjectDetailRoleData.  # noqa: E501
        :type abbr: str
        """

        self._abbr = abbr

    @property
    def order(self):
        """Gets the order of this ProjectDetailRoleData.  # noqa: E501


        :return: The order of this ProjectDetailRoleData.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ProjectDetailRoleData.


        :param order: The order of this ProjectDetailRoleData.  # noqa: E501
        :type order: int
        """
        if self.local_vars_configuration.client_side_validation and order is None:  # noqa: E501
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                order is not None and order > 32767):  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                order is not None and order < 0):  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `0`")  # noqa: E501

        self._order = order

    @property
    def is_admin(self):
        """Gets the is_admin of this ProjectDetailRoleData.  # noqa: E501


        :return: The is_admin of this ProjectDetailRoleData.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this ProjectDetailRoleData.


        :param is_admin: The is_admin of this ProjectDetailRoleData.  # noqa: E501
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def is_top_manager(self):
        """Gets the is_top_manager of this ProjectDetailRoleData.  # noqa: E501


        :return: The is_top_manager of this ProjectDetailRoleData.  # noqa: E501
        :rtype: bool
        """
        return self._is_top_manager

    @is_top_manager.setter
    def is_top_manager(self, is_top_manager):
        """Sets the is_top_manager of this ProjectDetailRoleData.


        :param is_top_manager: The is_top_manager of this ProjectDetailRoleData.  # noqa: E501
        :type is_top_manager: bool
        """

        self._is_top_manager = is_top_manager

    @property
    def is_manager(self):
        """Gets the is_manager of this ProjectDetailRoleData.  # noqa: E501


        :return: The is_manager of this ProjectDetailRoleData.  # noqa: E501
        :rtype: bool
        """
        return self._is_manager

    @is_manager.setter
    def is_manager(self, is_manager):
        """Sets the is_manager of this ProjectDetailRoleData.


        :param is_manager: The is_manager of this ProjectDetailRoleData.  # noqa: E501
        :type is_manager: bool
        """

        self._is_manager = is_manager

    @property
    def is_reviewer(self):
        """Gets the is_reviewer of this ProjectDetailRoleData.  # noqa: E501


        :return: The is_reviewer of this ProjectDetailRoleData.  # noqa: E501
        :rtype: str
        """
        return self._is_reviewer

    @is_reviewer.setter
    def is_reviewer(self, is_reviewer):
        """Sets the is_reviewer of this ProjectDetailRoleData.


        :param is_reviewer: The is_reviewer of this ProjectDetailRoleData.  # noqa: E501
        :type is_reviewer: str
        """

        self._is_reviewer = is_reviewer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectDetailRoleData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectDetailRoleData):
            return True

        return self.to_dict() != other.to_dict()
