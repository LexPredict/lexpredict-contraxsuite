# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Upload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'guid': 'str',
        'state': 'str',
        'upload_offset': 'int',
        'upload_length': 'int',
        'upload_metadata': 'str',
        'filename': 'str',
        'temporary_file_path': 'str',
        'expires': 'datetime',
        'uploaded_file': 'file'
    }

    attribute_map = {
        'id': 'id',
        'guid': 'guid',
        'state': 'state',
        'upload_offset': 'upload_offset',
        'upload_length': 'upload_length',
        'upload_metadata': 'upload_metadata',
        'filename': 'filename',
        'temporary_file_path': 'temporary_file_path',
        'expires': 'expires',
        'uploaded_file': 'uploaded_file'
    }

    def __init__(self, id=None, guid=None, state=None, upload_offset=None, upload_length=None, upload_metadata=None, filename=None, temporary_file_path=None, expires=None, uploaded_file=None, local_vars_configuration=None):  # noqa: E501
        """Upload - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._guid = None
        self._state = None
        self._upload_offset = None
        self._upload_length = None
        self._upload_metadata = None
        self._filename = None
        self._temporary_file_path = None
        self._expires = None
        self._uploaded_file = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if guid is not None:
            self.guid = guid
        if state is not None:
            self.state = state
        if upload_offset is not None:
            self.upload_offset = upload_offset
        if upload_length is not None:
            self.upload_length = upload_length
        self.upload_metadata = upload_metadata
        if filename is not None:
            self.filename = filename
        self.temporary_file_path = temporary_file_path
        self.expires = expires
        self.uploaded_file = uploaded_file

    @property
    def id(self):
        """Gets the id of this Upload.  # noqa: E501


        :return: The id of this Upload.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Upload.


        :param id: The id of this Upload.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def guid(self):
        """Gets the guid of this Upload.  # noqa: E501


        :return: The guid of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this Upload.


        :param guid: The guid of this Upload.  # noqa: E501
        :type guid: str
        """

        self._guid = guid

    @property
    def state(self):
        """Gets the state of this Upload.  # noqa: E501


        :return: The state of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Upload.


        :param state: The state of this Upload.  # noqa: E501
        :type state: str
        """
        if (self.local_vars_configuration.client_side_validation and
                state is not None and len(state) > 50):
            raise ValueError("Invalid value for `state`, length must be less than or equal to `50`")  # noqa: E501

        self._state = state

    @property
    def upload_offset(self):
        """Gets the upload_offset of this Upload.  # noqa: E501


        :return: The upload_offset of this Upload.  # noqa: E501
        :rtype: int
        """
        return self._upload_offset

    @upload_offset.setter
    def upload_offset(self, upload_offset):
        """Sets the upload_offset of this Upload.


        :param upload_offset: The upload_offset of this Upload.  # noqa: E501
        :type upload_offset: int
        """
        if (self.local_vars_configuration.client_side_validation and
                upload_offset is not None and upload_offset > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `upload_offset`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                upload_offset is not None and upload_offset < -9223372036854775808):  # noqa: E501
            raise ValueError("Invalid value for `upload_offset`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._upload_offset = upload_offset

    @property
    def upload_length(self):
        """Gets the upload_length of this Upload.  # noqa: E501


        :return: The upload_length of this Upload.  # noqa: E501
        :rtype: int
        """
        return self._upload_length

    @upload_length.setter
    def upload_length(self, upload_length):
        """Sets the upload_length of this Upload.


        :param upload_length: The upload_length of this Upload.  # noqa: E501
        :type upload_length: int
        """
        if (self.local_vars_configuration.client_side_validation and
                upload_length is not None and upload_length > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `upload_length`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                upload_length is not None and upload_length < -9223372036854775808):  # noqa: E501
            raise ValueError("Invalid value for `upload_length`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._upload_length = upload_length

    @property
    def upload_metadata(self):
        """Gets the upload_metadata of this Upload.  # noqa: E501


        :return: The upload_metadata of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._upload_metadata

    @upload_metadata.setter
    def upload_metadata(self, upload_metadata):
        """Sets the upload_metadata of this Upload.


        :param upload_metadata: The upload_metadata of this Upload.  # noqa: E501
        :type upload_metadata: str
        """
        if self.local_vars_configuration.client_side_validation and upload_metadata is None:  # noqa: E501
            raise ValueError("Invalid value for `upload_metadata`, must not be `None`")  # noqa: E501

        self._upload_metadata = upload_metadata

    @property
    def filename(self):
        """Gets the filename of this Upload.  # noqa: E501


        :return: The filename of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Upload.


        :param filename: The filename of this Upload.  # noqa: E501
        :type filename: str
        """
        if (self.local_vars_configuration.client_side_validation and
                filename is not None and len(filename) > 255):
            raise ValueError("Invalid value for `filename`, length must be less than or equal to `255`")  # noqa: E501

        self._filename = filename

    @property
    def temporary_file_path(self):
        """Gets the temporary_file_path of this Upload.  # noqa: E501


        :return: The temporary_file_path of this Upload.  # noqa: E501
        :rtype: str
        """
        return self._temporary_file_path

    @temporary_file_path.setter
    def temporary_file_path(self, temporary_file_path):
        """Sets the temporary_file_path of this Upload.


        :param temporary_file_path: The temporary_file_path of this Upload.  # noqa: E501
        :type temporary_file_path: str
        """
        if (self.local_vars_configuration.client_side_validation and
                temporary_file_path is not None and len(temporary_file_path) > 4096):
            raise ValueError("Invalid value for `temporary_file_path`, length must be less than or equal to `4096`")  # noqa: E501

        self._temporary_file_path = temporary_file_path

    @property
    def expires(self):
        """Gets the expires of this Upload.  # noqa: E501


        :return: The expires of this Upload.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this Upload.


        :param expires: The expires of this Upload.  # noqa: E501
        :type expires: datetime
        """

        self._expires = expires

    @property
    def uploaded_file(self):
        """Gets the uploaded_file of this Upload.  # noqa: E501


        :return: The uploaded_file of this Upload.  # noqa: E501
        :rtype: file
        """
        return self._uploaded_file

    @uploaded_file.setter
    def uploaded_file(self, uploaded_file):
        """Sets the uploaded_file of this Upload.


        :param uploaded_file: The uploaded_file of this Upload.  # noqa: E501
        :type uploaded_file: file
        """

        self._uploaded_file = uploaded_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Upload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Upload):
            return True

        return self.to_dict() != other.to_dict()
