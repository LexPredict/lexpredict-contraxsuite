# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TusApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def tus_upload_session_upload_session_id_upload_guid_patch(self, upload_session_id, guid, upload_offset, tus_resumable, **kwargs):  # noqa: E501
        """tus_upload_session_upload_session_id_upload_guid_patch  # noqa: E501

        Transfer file data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tus_upload_session_upload_session_id_upload_guid_patch(upload_session_id, guid, upload_offset, tus_resumable, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param guid: (required)
        :type guid: str
        :param upload_offset: Upload offset, bytes. (required)
        :type upload_offset: int
        :param tus_resumable: 1.0.0 (required)
        :type tus_resumable: str
        :param force: Upload a file even if it exists.
        :type force: bool
        :param body:
        :type body: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse400
        """
        kwargs['_return_http_data_only'] = True
        return self.tus_upload_session_upload_session_id_upload_guid_patch_with_http_info(upload_session_id, guid, upload_offset, tus_resumable, **kwargs)  # noqa: E501

    def tus_upload_session_upload_session_id_upload_guid_patch_with_http_info(self, upload_session_id, guid, upload_offset, tus_resumable, **kwargs):  # noqa: E501
        """tus_upload_session_upload_session_id_upload_guid_patch  # noqa: E501

        Transfer file data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tus_upload_session_upload_session_id_upload_guid_patch_with_http_info(upload_session_id, guid, upload_offset, tus_resumable, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param guid: (required)
        :type guid: str
        :param upload_offset: Upload offset, bytes. (required)
        :type upload_offset: int
        :param tus_resumable: 1.0.0 (required)
        :type tus_resumable: str
        :param force: Upload a file even if it exists.
        :type force: bool
        :param body:
        :type body: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InlineResponse400, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'upload_session_id',
            'guid',
            'upload_offset',
            'tus_resumable',
            'force',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tus_upload_session_upload_session_id_upload_guid_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upload_session_id' is set
        if self.api_client.client_side_validation and ('upload_session_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['upload_session_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upload_session_id` when calling `tus_upload_session_upload_session_id_upload_guid_patch`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in local_var_params or  # noqa: E501
                                                        local_var_params['guid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `guid` when calling `tus_upload_session_upload_session_id_upload_guid_patch`")  # noqa: E501
        # verify the required parameter 'upload_offset' is set
        if self.api_client.client_side_validation and ('upload_offset' not in local_var_params or  # noqa: E501
                                                        local_var_params['upload_offset'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upload_offset` when calling `tus_upload_session_upload_session_id_upload_guid_patch`")  # noqa: E501
        # verify the required parameter 'tus_resumable' is set
        if self.api_client.client_side_validation and ('tus_resumable' not in local_var_params or  # noqa: E501
                                                        local_var_params['tus_resumable'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `tus_resumable` when calling `tus_upload_session_upload_session_id_upload_guid_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upload_session_id' in local_var_params:
            path_params['upload_session_id'] = local_var_params['upload_session_id']  # noqa: E501
        if 'guid' in local_var_params:
            path_params['guid'] = local_var_params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'force' in local_var_params:
            header_params['force'] = local_var_params['force']  # noqa: E501
        if 'upload_offset' in local_var_params:
            header_params['Upload-Offset'] = local_var_params['upload_offset']  # noqa: E501
        if 'tus_resumable' in local_var_params:
            header_params['Tus-Resumable'] = local_var_params['tus_resumable']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/offset+octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tus/upload-session/{upload_session_id}/upload/{guid}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse400',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def tus_upload_session_upload_session_id_upload_post(self, upload_session_id, upload_length, upload_metadata, tus_resumable, **kwargs):  # noqa: E501
        """tus_upload_session_upload_session_id_upload_post  # noqa: E501

        Create an Upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tus_upload_session_upload_session_id_upload_post(upload_session_id, upload_length, upload_metadata, tus_resumable, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param upload_length: File length. (required)
        :type upload_length: int
        :param upload_metadata: Upload metadata include file name, relative path, etc. (required)
        :type upload_metadata: str
        :param tus_resumable: 1.0.0 (required)
        :type tus_resumable: str
        :param force: Upload a file even if it exists.
        :type force: bool
        :param body:
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.tus_upload_session_upload_session_id_upload_post_with_http_info(upload_session_id, upload_length, upload_metadata, tus_resumable, **kwargs)  # noqa: E501

    def tus_upload_session_upload_session_id_upload_post_with_http_info(self, upload_session_id, upload_length, upload_metadata, tus_resumable, **kwargs):  # noqa: E501
        """tus_upload_session_upload_session_id_upload_post  # noqa: E501

        Create an Upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tus_upload_session_upload_session_id_upload_post_with_http_info(upload_session_id, upload_length, upload_metadata, tus_resumable, async_req=True)
        >>> result = thread.get()

        :param upload_session_id: (required)
        :type upload_session_id: str
        :param upload_length: File length. (required)
        :type upload_length: int
        :param upload_metadata: Upload metadata include file name, relative path, etc. (required)
        :type upload_metadata: str
        :param tus_resumable: 1.0.0 (required)
        :type tus_resumable: str
        :param force: Upload a file even if it exists.
        :type force: bool
        :param body:
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'upload_session_id',
            'upload_length',
            'upload_metadata',
            'tus_resumable',
            'force',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tus_upload_session_upload_session_id_upload_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upload_session_id' is set
        if self.api_client.client_side_validation and ('upload_session_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['upload_session_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upload_session_id` when calling `tus_upload_session_upload_session_id_upload_post`")  # noqa: E501
        # verify the required parameter 'upload_length' is set
        if self.api_client.client_side_validation and ('upload_length' not in local_var_params or  # noqa: E501
                                                        local_var_params['upload_length'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upload_length` when calling `tus_upload_session_upload_session_id_upload_post`")  # noqa: E501
        # verify the required parameter 'upload_metadata' is set
        if self.api_client.client_side_validation and ('upload_metadata' not in local_var_params or  # noqa: E501
                                                        local_var_params['upload_metadata'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upload_metadata` when calling `tus_upload_session_upload_session_id_upload_post`")  # noqa: E501
        # verify the required parameter 'tus_resumable' is set
        if self.api_client.client_side_validation and ('tus_resumable' not in local_var_params or  # noqa: E501
                                                        local_var_params['tus_resumable'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `tus_resumable` when calling `tus_upload_session_upload_session_id_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upload_session_id' in local_var_params:
            path_params['upload_session_id'] = local_var_params['upload_session_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'force' in local_var_params:
            header_params['force'] = local_var_params['force']  # noqa: E501
        if 'upload_length' in local_var_params:
            header_params['Upload-Length'] = local_var_params['upload_length']  # noqa: E501
        if 'upload_metadata' in local_var_params:
            header_params['Upload-Metadata'] = local_var_params['upload_metadata']  # noqa: E501
        if 'tus_resumable' in local_var_params:
            header_params['Tus-Resumable'] = local_var_params['tus_resumable']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tus/upload-session/{upload_session_id}/upload/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
