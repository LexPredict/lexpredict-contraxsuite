"""
    Contraxsuite API

    Contraxsuite API  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.document_cluster import DocumentCluster
from openapi_client.model.document_cluster_update import DocumentClusterUpdate
from openapi_client.model.document_similarity import DocumentSimilarity
from openapi_client.model.ml_model import MLModel
from openapi_client.model.party_similarity import PartySimilarity
from openapi_client.model.project_document_similarity_response import ProjectDocumentSimilarityResponse
from openapi_client.model.project_text_unit_similarity import ProjectTextUnitSimilarity
from openapi_client.model.similar_project_text_units_request import SimilarProjectTextUnitsRequest
from openapi_client.model.similarity_run import SimilarityRun
from openapi_client.model.text_unit_classification import TextUnitClassification
from openapi_client.model.text_unit_classification_create import TextUnitClassificationCreate
from openapi_client.model.text_unit_classifier import TextUnitClassifier
from openapi_client.model.text_unit_classifier_suggestion import TextUnitClassifierSuggestion
from openapi_client.model.text_unit_cluster import TextUnitCluster
from openapi_client.model.text_unit_similarity import TextUnitSimilarity
from openapi_client.model.transformer import Transformer
from openapi_client.model.typeahead import Typeahead


class AnalyzeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __analyze_document_cluster_get(
            self,
            **kwargs
        ):
            """analyze_document_cluster_get  # noqa: E501

            Document Cluster List  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_document_cluster_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [DocumentCluster]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_document_cluster_get = _Endpoint(
            settings={
                'response_type': ([DocumentCluster],),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/document-cluster/',
                'operation_id': 'analyze_document_cluster_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jq_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_document_cluster_get
        )

        def __analyze_document_cluster_id_get(
            self,
            id,
            **kwargs
        ):
            """analyze_document_cluster_id_get  # noqa: E501

            Retrieve Document Cluster  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_document_cluster_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): A unique integer value identifying this document cluster.

            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentCluster
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.analyze_document_cluster_id_get = _Endpoint(
            settings={
                'response_type': (DocumentCluster,),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/document-cluster/{id}/',
                'operation_id': 'analyze_document_cluster_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'jq_filters',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'id': 'id',
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'id': 'path',
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_document_cluster_id_get
        )

        def __analyze_document_cluster_id_patch(
            self,
            id,
            **kwargs
        ):
            """analyze_document_cluster_id_patch  # noqa: E501

            Partial Update Document Cluster (name)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_document_cluster_id_patch(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): A unique integer value identifying this document cluster.

            Keyword Args:
                document_cluster_update (DocumentClusterUpdate): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentClusterUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.analyze_document_cluster_id_patch = _Endpoint(
            settings={
                'response_type': (DocumentClusterUpdate,),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/document-cluster/{id}/',
                'operation_id': 'analyze_document_cluster_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'document_cluster_update',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'document_cluster_update':
                        (DocumentClusterUpdate,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'document_cluster_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__analyze_document_cluster_id_patch
        )

        def __analyze_document_cluster_id_put(
            self,
            id,
            **kwargs
        ):
            """analyze_document_cluster_id_put  # noqa: E501

            Update Document Cluster (name)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_document_cluster_id_put(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): A unique integer value identifying this document cluster.

            Keyword Args:
                document_cluster_update (DocumentClusterUpdate): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DocumentClusterUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.analyze_document_cluster_id_put = _Endpoint(
            settings={
                'response_type': (DocumentClusterUpdate,),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/document-cluster/{id}/',
                'operation_id': 'analyze_document_cluster_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'document_cluster_update',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'document_cluster_update':
                        (DocumentClusterUpdate,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'document_cluster_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__analyze_document_cluster_id_put
        )

        def __analyze_document_similarity_list_get(
            self,
            **kwargs
        ):
            """analyze_document_similarity_list_get  # noqa: E501

            Base Document Similarity List  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_document_similarity_list_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [DocumentSimilarity]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_document_similarity_list_get = _Endpoint(
            settings={
                'response_type': ([DocumentSimilarity],),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/document-similarity/list/',
                'operation_id': 'analyze_document_similarity_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jq_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_document_similarity_list_get
        )

        def __analyze_document_transformer_list_get(
            self,
            **kwargs
        ):
            """analyze_document_transformer_list_get  # noqa: E501

            MLModel List - document transformers only  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_document_transformer_list_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Transformer]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_document_transformer_list_get = _Endpoint(
            settings={
                'response_type': ([Transformer],),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/document-transformer/list/',
                'operation_id': 'analyze_document_transformer_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jq_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_document_transformer_list_get
        )

        def __analyze_ml_model_list_get(
            self,
            **kwargs
        ):
            """analyze_ml_model_list_get  # noqa: E501

            MLModel List  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_ml_model_list_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [MLModel]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_ml_model_list_get = _Endpoint(
            settings={
                'response_type': ([MLModel],),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/ml-model/list/',
                'operation_id': 'analyze_ml_model_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jq_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_ml_model_list_get
        )

        def __analyze_party_similarity_list_get(
            self,
            **kwargs
        ):
            """analyze_party_similarity_list_get  # noqa: E501

            Party Similarity List  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_party_similarity_list_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [PartySimilarity]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_party_similarity_list_get = _Endpoint(
            settings={
                'response_type': ([PartySimilarity],),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/party-similarity/list/',
                'operation_id': 'analyze_party_similarity_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jq_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_party_similarity_list_get
        )

        def __analyze_project_document_similarity_list_get(
            self,
            **kwargs
        ):
            """analyze_project_document_similarity_list_get  # noqa: E501

            Project Document Similarity List for ONE document  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_project_document_similarity_list_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                text_max_length (int): document b text max length, 0 to get all text. [optional]
                run_id (int): run id or document id required. [optional]
                document_id (int): run id or document id required. [optional]
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProjectDocumentSimilarityResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_project_document_similarity_list_get = _Endpoint(
            settings={
                'response_type': (ProjectDocumentSimilarityResponse,),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/project-document-similarity/list/',
                'operation_id': 'analyze_project_document_similarity_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'text_max_length',
                    'run_id',
                    'document_id',
                    'jq_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'text_max_length':
                        (int,),
                    'run_id':
                        (int,),
                    'document_id':
                        (int,),
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'text_max_length': 'text_max_length',
                    'run_id': 'run_id',
                    'document_id': 'document_id',
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'text_max_length': 'query',
                    'run_id': 'query',
                    'document_id': 'query',
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_project_document_similarity_list_get
        )

        def __analyze_project_text_unit_similarity_list_get(
            self,
            **kwargs
        ):
            """analyze_project_text_unit_similarity_list_get  # noqa: E501

            Project Text Unit Similarity List for ONE text unit  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_project_text_unit_similarity_list_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                text_max_length (int): text unit b text max length, 0 to get all text. [optional]
                run_id (int): run id or text unit id required. [optional]
                last_run (bool): run id or last_run or text unit id required. [optional]
                text_unit_id (int): run id or text unit id required. [optional]
                document_id (int): document ID. [optional]
                location_start (int): start of chosen text block in a Document. [optional]
                location_end (int): end of chosen text block in a Document. [optional]
                selection ([{str: (bool, date, datetime, dict, float, int, list, str, none_type)}]): selection coordinates. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProjectTextUnitSimilarity]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_project_text_unit_similarity_list_get = _Endpoint(
            settings={
                'response_type': ([ProjectTextUnitSimilarity],),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/project-text-unit-similarity/list/',
                'operation_id': 'analyze_project_text_unit_similarity_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jq_filters',
                    'text_max_length',
                    'run_id',
                    'last_run',
                    'text_unit_id',
                    'document_id',
                    'location_start',
                    'location_end',
                    'selection',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jq_filters':
                        ({str: (str,)},),
                    'text_max_length':
                        (int,),
                    'run_id':
                        (int,),
                    'last_run':
                        (bool,),
                    'text_unit_id':
                        (int,),
                    'document_id':
                        (int,),
                    'location_start':
                        (int,),
                    'location_end':
                        (int,),
                    'selection':
                        ([{str: (bool, date, datetime, dict, float, int, list, str, none_type)}],),
                },
                'attribute_map': {
                    'jq_filters': 'jq_filters',
                    'text_max_length': 'text_max_length',
                    'run_id': 'run_id',
                    'last_run': 'last_run',
                    'text_unit_id': 'text_unit_id',
                    'document_id': 'document_id',
                    'location_start': 'location_start',
                    'location_end': 'location_end',
                    'selection': 'selection',
                },
                'location_map': {
                    'jq_filters': 'query',
                    'text_max_length': 'query',
                    'run_id': 'query',
                    'last_run': 'query',
                    'text_unit_id': 'query',
                    'document_id': 'query',
                    'location_start': 'query',
                    'location_end': 'query',
                    'selection': 'query',
                },
                'collection_format_map': {
                    'selection': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_project_text_unit_similarity_list_get
        )

        def __analyze_project_text_unit_similarity_list_post(
            self,
            **kwargs
        ):
            """analyze_project_text_unit_similarity_list_post  # noqa: E501

            Project Text Unit Similarity List for ONE text unit  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_project_text_unit_similarity_list_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                similar_project_text_units_request (SimilarProjectTextUnitsRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProjectTextUnitSimilarity
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_project_text_unit_similarity_list_post = _Endpoint(
            settings={
                'response_type': (ProjectTextUnitSimilarity,),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/project-text-unit-similarity/list/',
                'operation_id': 'analyze_project_text_unit_similarity_list_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'similar_project_text_units_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'similar_project_text_units_request':
                        (SimilarProjectTextUnitsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'similar_project_text_units_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__analyze_project_text_unit_similarity_list_post
        )

        def __analyze_similarity_runs_get(
            self,
            **kwargs
        ):
            """analyze_similarity_runs_get  # noqa: E501

            list Similarity Run objects  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_similarity_runs_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                unit_source (str): document / text_unit. [optional]
                project_id (int): Project ID. [optional]
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SimilarityRun]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_similarity_runs_get = _Endpoint(
            settings={
                'response_type': ([SimilarityRun],),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/similarity-runs/',
                'operation_id': 'analyze_similarity_runs_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'unit_source',
                    'project_id',
                    'jq_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'unit_source':
                        (str,),
                    'project_id':
                        (int,),
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'unit_source': 'unit_source',
                    'project_id': 'project_id',
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'unit_source': 'query',
                    'project_id': 'query',
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_similarity_runs_get
        )

        def __analyze_similarity_runs_id_delete(
            self,
            id,
            **kwargs
        ):
            """analyze_similarity_runs_id_delete  # noqa: E501

            delete Similarity Run object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_similarity_runs_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): A unique integer value identifying this similarity run.

            Keyword Args:
                unit_source (str): document / text_unit. [optional]
                project_id (int): Project ID. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.analyze_similarity_runs_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/similarity-runs/{id}/',
                'operation_id': 'analyze_similarity_runs_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'unit_source',
                    'project_id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'unit_source':
                        (str,),
                    'project_id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'unit_source': 'unit_source',
                    'project_id': 'project_id',
                },
                'location_map': {
                    'id': 'path',
                    'unit_source': 'query',
                    'project_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_similarity_runs_id_delete
        )

        def __analyze_similarity_runs_id_get(
            self,
            id,
            **kwargs
        ):
            """analyze_similarity_runs_id_get  # noqa: E501

            get Similarity Run object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_similarity_runs_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): A unique integer value identifying this similarity run.

            Keyword Args:
                unit_source (str): document / text_unit. [optional]
                project_id (int): Project ID. [optional]
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SimilarityRun
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.analyze_similarity_runs_id_get = _Endpoint(
            settings={
                'response_type': (SimilarityRun,),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/similarity-runs/{id}/',
                'operation_id': 'analyze_similarity_runs_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'unit_source',
                    'project_id',
                    'jq_filters',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'unit_source':
                        (str,),
                    'project_id':
                        (int,),
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'id': 'id',
                    'unit_source': 'unit_source',
                    'project_id': 'project_id',
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'id': 'path',
                    'unit_source': 'query',
                    'project_id': 'query',
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_similarity_runs_id_get
        )

        def __analyze_text_unit_classifications_get(
            self,
            **kwargs
        ):
            """analyze_text_unit_classifications_get  # noqa: E501

            Text Unit Classification List  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_text_unit_classifications_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [TextUnitClassification]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_text_unit_classifications_get = _Endpoint(
            settings={
                'response_type': ([TextUnitClassification],),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/text-unit-classifications/',
                'operation_id': 'analyze_text_unit_classifications_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jq_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_text_unit_classifications_get
        )

        def __analyze_text_unit_classifications_id_delete(
            self,
            id,
            **kwargs
        ):
            """analyze_text_unit_classifications_id_delete  # noqa: E501

            Delete Text Unit Classification  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_text_unit_classifications_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): A unique integer value identifying this text unit classification.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.analyze_text_unit_classifications_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/text-unit-classifications/{id}/',
                'operation_id': 'analyze_text_unit_classifications_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_text_unit_classifications_id_delete
        )

        def __analyze_text_unit_classifications_id_get(
            self,
            id,
            **kwargs
        ):
            """analyze_text_unit_classifications_id_get  # noqa: E501

            Retrieve Text Unit Classification  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_text_unit_classifications_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): A unique integer value identifying this text unit classification.

            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TextUnitClassification
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.analyze_text_unit_classifications_id_get = _Endpoint(
            settings={
                'response_type': (TextUnitClassification,),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/text-unit-classifications/{id}/',
                'operation_id': 'analyze_text_unit_classifications_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'jq_filters',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'id': 'id',
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'id': 'path',
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_text_unit_classifications_id_get
        )

        def __analyze_text_unit_classifications_post(
            self,
            **kwargs
        ):
            """analyze_text_unit_classifications_post  # noqa: E501

            Create Text Unit Classification  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_text_unit_classifications_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                text_unit_classification_create (TextUnitClassificationCreate): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TextUnitClassificationCreate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_text_unit_classifications_post = _Endpoint(
            settings={
                'response_type': (TextUnitClassificationCreate,),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/text-unit-classifications/',
                'operation_id': 'analyze_text_unit_classifications_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'text_unit_classification_create',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'text_unit_classification_create':
                        (TextUnitClassificationCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'text_unit_classification_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__analyze_text_unit_classifications_post
        )

        def __analyze_text_unit_classifier_suggestions_get(
            self,
            **kwargs
        ):
            """analyze_text_unit_classifier_suggestions_get  # noqa: E501

            Text Unit Classifier Suggestion List  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_text_unit_classifier_suggestions_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [TextUnitClassifierSuggestion]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_text_unit_classifier_suggestions_get = _Endpoint(
            settings={
                'response_type': ([TextUnitClassifierSuggestion],),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/text-unit-classifier-suggestions/',
                'operation_id': 'analyze_text_unit_classifier_suggestions_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jq_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_text_unit_classifier_suggestions_get
        )

        def __analyze_text_unit_classifier_suggestions_id_delete(
            self,
            id,
            **kwargs
        ):
            """analyze_text_unit_classifier_suggestions_id_delete  # noqa: E501

            Delete Text Unit Classifier Suggestion  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_text_unit_classifier_suggestions_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): A unique integer value identifying this text unit classifier suggestion.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.analyze_text_unit_classifier_suggestions_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/text-unit-classifier-suggestions/{id}/',
                'operation_id': 'analyze_text_unit_classifier_suggestions_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_text_unit_classifier_suggestions_id_delete
        )

        def __analyze_text_unit_classifier_suggestions_id_get(
            self,
            id,
            **kwargs
        ):
            """analyze_text_unit_classifier_suggestions_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_text_unit_classifier_suggestions_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): A unique integer value identifying this text unit classifier suggestion.

            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TextUnitClassifierSuggestion
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.analyze_text_unit_classifier_suggestions_id_get = _Endpoint(
            settings={
                'response_type': (TextUnitClassifierSuggestion,),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/text-unit-classifier-suggestions/{id}/',
                'operation_id': 'analyze_text_unit_classifier_suggestions_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'jq_filters',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'id': 'id',
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'id': 'path',
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_text_unit_classifier_suggestions_id_get
        )

        def __analyze_text_unit_classifiers_get(
            self,
            **kwargs
        ):
            """analyze_text_unit_classifiers_get  # noqa: E501

            Text Unit Classifier List  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_text_unit_classifiers_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [TextUnitClassifier]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_text_unit_classifiers_get = _Endpoint(
            settings={
                'response_type': ([TextUnitClassifier],),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/text-unit-classifiers/',
                'operation_id': 'analyze_text_unit_classifiers_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jq_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_text_unit_classifiers_get
        )

        def __analyze_text_unit_classifiers_id_delete(
            self,
            id,
            **kwargs
        ):
            """analyze_text_unit_classifiers_id_delete  # noqa: E501

            Delete Text Unit Classifier  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_text_unit_classifiers_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): A unique integer value identifying this text unit classifier.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.analyze_text_unit_classifiers_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/text-unit-classifiers/{id}/',
                'operation_id': 'analyze_text_unit_classifiers_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_text_unit_classifiers_id_delete
        )

        def __analyze_text_unit_classifiers_id_get(
            self,
            id,
            **kwargs
        ):
            """analyze_text_unit_classifiers_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_text_unit_classifiers_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): A unique integer value identifying this text unit classifier.

            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TextUnitClassifier
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.analyze_text_unit_classifiers_id_get = _Endpoint(
            settings={
                'response_type': (TextUnitClassifier,),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/text-unit-classifiers/{id}/',
                'operation_id': 'analyze_text_unit_classifiers_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'jq_filters',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'id': 'id',
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'id': 'path',
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_text_unit_classifiers_id_get
        )

        def __analyze_text_unit_cluster_list_get(
            self,
            **kwargs
        ):
            """analyze_text_unit_cluster_list_get  # noqa: E501

            Text Unit Cluster List  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_text_unit_cluster_list_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [TextUnitCluster]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_text_unit_cluster_list_get = _Endpoint(
            settings={
                'response_type': ([TextUnitCluster],),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/text-unit-cluster/list/',
                'operation_id': 'analyze_text_unit_cluster_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jq_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_text_unit_cluster_list_get
        )

        def __analyze_text_unit_similarity_list_get(
            self,
            **kwargs
        ):
            """analyze_text_unit_similarity_list_get  # noqa: E501

            Base Text Unit Similarity List  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_text_unit_similarity_list_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [TextUnitSimilarity]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_text_unit_similarity_list_get = _Endpoint(
            settings={
                'response_type': ([TextUnitSimilarity],),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/text-unit-similarity/list/',
                'operation_id': 'analyze_text_unit_similarity_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jq_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_text_unit_similarity_list_get
        )

        def __analyze_text_unit_transformer_list_get(
            self,
            **kwargs
        ):
            """analyze_text_unit_transformer_list_get  # noqa: E501

            MLModel List - text unit transformers only  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_text_unit_transformer_list_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                jq_filters ({str: (str,)}): Filter params similar to JQWidgets grid filter params:                             filterscount=1,                             filterdatafield0=\"a\",                             filtervalue0=\"b\",                             filtercondition0=\"CONTAINS\",                             filteroperator0=1,                             sortdatafied=\"c\",                            sortorder=\"asc\"                            . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Transformer]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.analyze_text_unit_transformer_list_get = _Endpoint(
            settings={
                'response_type': ([Transformer],),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/text-unit-transformer/list/',
                'operation_id': 'analyze_text_unit_transformer_list_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'jq_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'jq_filters':
                        ({str: (str,)},),
                },
                'attribute_map': {
                    'jq_filters': 'jq_filters',
                },
                'location_map': {
                    'jq_filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_text_unit_transformer_list_get
        )

        def __analyze_typeahead_text_unit_classification_field_name_get(
            self,
            field_name,
            q,
            **kwargs
        ):
            """analyze_typeahead_text_unit_classification_field_name_get  # noqa: E501

            Typeahead TextUnitClassification      Kwargs: field_name: [class_name, class_value]     GET params:       - q: str  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.analyze_typeahead_text_unit_classification_field_name_get(field_name, q, async_req=True)
            >>> result = thread.get()

            Args:
                field_name (str):
                q (str): Typeahead string

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Typeahead
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['field_name'] = \
                field_name
            kwargs['q'] = \
                q
            return self.call_with_http_info(**kwargs)

        self.analyze_typeahead_text_unit_classification_field_name_get = _Endpoint(
            settings={
                'response_type': (Typeahead,),
                'auth': [
                    'AuthToken'
                ],
                'endpoint_path': '/api/v1/analyze/typeahead/text-unit-classification/{field_name}/',
                'operation_id': 'analyze_typeahead_text_unit_classification_field_name_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'field_name',
                    'q',
                ],
                'required': [
                    'field_name',
                    'q',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'field_name':
                        (str,),
                    'q':
                        (str,),
                },
                'attribute_map': {
                    'field_name': 'field_name',
                    'q': 'q',
                },
                'location_map': {
                    'field_name': 'path',
                    'q': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__analyze_typeahead_text_unit_classification_field_name_get
        )
