{
  "openapi": "3.0.2",
  "info": {
    "title": "",
    "version": ""
  },
  "paths": {
    "/rest-auth/logout/": {
      "get": {
        "operationId": "rest-auth-logout:GET",
        "description": "Calls Django logout method and delete the Token object\nassigned to the current User object.\n\nAccepts/Returns nothing.",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RestAuthCommonResponse"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "rest_auth",
          "v1"
        ]
      },
      "post": {
        "operationId": "rest-auth-logout:POST",
        "description": "Calls Django logout method and delete the Token object\nassigned to the current User object.\n\nAccepts/Returns nothing.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAuthCommonResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "rest_auth",
          "v1"
        ]
      }
    },
    "/api/v1/similarity/similarity/": {
      "get": {
        "operationId": "similarity-similarity:GET",
        "description": "\"Similarity\" admin task\n\nPOST params:\n    - search_similar_documents: bool\n    - search_similar_text_units: bool\n    - similarity_threshold: int\n    - use_idf: bool\n    - delete: bool\n    - project: bool",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "similarity",
          "v1"
        ]
      },
      "post": {
        "operationId": "similarity-similarity:POST",
        "description": "\"Similarity\" admin task\n\nPOST params:\n    - search_similar_documents: bool\n    - search_similar_text_units: bool\n    - similarity_threshold: int\n    - use_idf: bool\n    - delete: bool\n    - project: bool",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "SimilarityPOSTObjectResponse"
                }
              }
            }
          }
        },
        "tags": [
          "similarity",
          "v1"
        ]
      }
    },
    "/api/v1/similarity/similarity-by-features/": {
      "get": {
        "operationId": "similarity-similarity-by-features:GET",
        "description": "\"Similarity\" admin task\n\nPOST params:\n    - search_similar_documents: bool\n    - search_similar_text_units: bool\n    - similarity_threshold: int\n    - use_idf: bool\n    - delete: bool\n    - project: int\n    - feature_source: list - list[date, definition, duration, court,\n      currency_name, currency_value, term, party, geoentity]\n    - unit_type: str sentence|paragraph\n    - distance_type: str - see scipy.spatial.distance._METRICS",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "similarity",
          "v1"
        ]
      },
      "post": {
        "operationId": "similarity-similarity-by-features:POST",
        "description": "\"Similarity\" admin task\n\nPOST params:\n    - search_similar_documents: bool\n    - search_similar_text_units: bool\n    - similarity_threshold: int\n    - use_idf: bool\n    - delete: bool\n    - project: int\n    - feature_source: list - list[date, definition, duration, court,\n      currency_name, currency_value, term, party, geoentity]\n    - unit_type: str sentence|paragraph\n    - distance_type: str - see scipy.spatial.distance._METRICS",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "SimilarityPOSTObjectResponse"
                }
              }
            }
          }
        },
        "tags": [
          "similarity",
          "v1"
        ]
      }
    },
    "/api/v1/similarity/party-similarity/": {
      "get": {
        "operationId": "similarity-party-similarity:GET",
        "description": "\"Party Similarity\" admin task\n\nPOST params:\n    - case_sensitive: bool\n    - similarity_type: str[]\n    - similarity_threshold: int\n    - delete: bool",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "similarity",
          "v1"
        ]
      },
      "post": {
        "operationId": "similarity-party-similarity:POST",
        "description": "\"Party Similarity\" admin task\n\nPOST params:\n    - case_sensitive: bool\n    - similarity_type: str[]\n    - similarity_threshold: int\n    - delete: bool",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "SimilarityPOSTObjectResponse"
                }
              }
            }
          }
        },
        "tags": [
          "similarity",
          "v1"
        ]
      }
    },
    "/api/v1/project/task-queues/": {
      "get": {
        "operationId": "project-task-queues:GET",
        "description": "Task Queue List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskQueue"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      },
      "post": {
        "operationId": "project-task-queues:POST",
        "description": "Create Task Queue",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskQueue"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TaskQueue"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TaskQueue"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskQueue"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/task-queues/{id}/": {
      "get": {
        "operationId": "project-task-queues-id:GET",
        "description": "Retrieve Task Queue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this task queue.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskQueue"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      },
      "put": {
        "operationId": "project-task-queues-id:PUT",
        "description": "Update Task Queue\n\n    PUT params:\n        - pk: int\n        - description: str\n        - documents: list[int]\n        - completed_documents: list[int]\n        - reviewers: list[int]\n    Optional params for add/remove document from/to a TaskQueue:\n        - add_document: int\n        - remove_document: int\n    Optional params for complete/reopen document in a TaskQueue:\n        - complete_document: int\n        - open_document: int\n    Optional param to add documents from DocumentCluster:\n        - add_documents_from_cluster: int (cluster id)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this task queue.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskQueue"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TaskQueue"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TaskQueue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskQueue"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      },
      "patch": {
        "operationId": "project-task-queues-id:PATCH",
        "description": "Partial Update Task Queue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this task queue.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskQueue"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TaskQueue"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TaskQueue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskQueue"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      },
      "delete": {
        "operationId": "project-task-queues-id:DELETE",
        "description": "Delete Task Queue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this task queue.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/": {
      "get": {
        "operationId": "project-projects:GET",
        "description": "Project List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectList"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      },
      "post": {
        "operationId": "project-projects:POST",
        "description": "Create Project",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/project_stats/": {
      "get": {
        "operationId": "project-projects-project_stats:GET",
        "description": "Get project stats across all projects\nsee related code in get_queryset() and serializer",
        "parameters": [
          {
            "name": "project_ids",
            "in": "query",
            "required": false,
            "description": "Project ids separated by commas",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectStats"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/recent/": {
      "get": {
        "operationId": "project-projects-recent:GET",
        "description": "Get recent N projects\n\n    Params:\n        n: int - default is 5",
        "parameters": [
          {
            "name": "n",
            "in": "query",
            "required": false,
            "description": "Max rows number",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/": {
      "get": {
        "operationId": "project-projects-id:GET",
        "description": "Retrieve Project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      },
      "put": {
        "operationId": "project-projects-id:PUT",
        "description": "Update Project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUpdate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      },
      "patch": {
        "operationId": "project-projects-id:PATCH",
        "description": "Partial Update Project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUpdate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      },
      "delete": {
        "operationId": "project-projects-id:DELETE",
        "description": "Delete Project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/annotations_assignees/": {
      "get": {
        "operationId": "project-projects-id-annotations_assignees:GET",
        "description": "Get assignees data for FieldAnnotations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectAnnotationsAssigneesResponse"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/assignees/": {
      "get": {
        "operationId": "project-projects-id-assignees:GET",
        "description": "Get assignees data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectDocumentsAssigneesResponse"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/progress/": {
      "get": {
        "operationId": "project-projects-id-progress:GET",
        "description": "Get current progress of all project sessions / clusterings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectProgressResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/project-clustering/": {
      "get": {
        "operationId": "project-project-clustering:GET",
        "description": "ProjectCluster List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectClustering"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/project-clustering/{id}/": {
      "get": {
        "operationId": "project-project-clustering-id:GET",
        "description": "ProjectCluster Details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project clustering.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectClustering"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/upload-session/": {
      "get": {
        "operationId": "project-upload-session:GET",
        "description": "Session Upload List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UploadSessionDetail"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      },
      "post": {
        "operationId": "project-upload-session:POST",
        "description": "Create Session Upload",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadSession"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UploadSession"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadSession"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadSession"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/upload-session/status/": {
      "get": {
        "operationId": "project-upload-session-status:GET",
        "description": "Get status of Upload Sessions\n    Params:\n        - project_id: int",
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "description": "Project id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/upload-session/{uid}/": {
      "get": {
        "operationId": "project-upload-session-uid:GET",
        "description": "Retrieve Session Upload",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this upload session.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadSessionDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      },
      "delete": {
        "operationId": "project-upload-session-uid:DELETE",
        "description": "Delete Session Upload",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this upload session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/upload-session/{uid}/progress/": {
      "get": {
        "operationId": "project-upload-session-uid-progress:GET",
        "description": "Get Progress for a session per files (short form)",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this upload session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUploadSessionProgressResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/clustering-status/": {
      "get": {
        "operationId": "project-projects-id-clustering-status:GET",
        "description": "Last Clustering task status/data\n\n    Params:\n        - project_clustering_id: int (optional) - return last if not provided",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_clustering_id",
            "in": "query",
            "required": false,
            "description": "Get by project_clustering_id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectClusteringStatusResponse"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "details"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/extract/geo-entities/": {
      "get": {
        "operationId": "extract-geo-entities:GET",
        "description": "Geo Entity List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeoEntityList"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/geo-entities/{id}/": {
      "get": {
        "operationId": "extract-geo-entities-id:GET",
        "description": "Retrieve Geo Entity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this geo entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoEntityList"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      },
      "put": {
        "operationId": "extract-geo-entities-id:PUT",
        "description": "Update Geo Entity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this geo entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeoEntityUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GeoEntityUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GeoEntityUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoEntityUpdate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/parties/": {
      "get": {
        "operationId": "extract-parties:GET",
        "description": "Party List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Party"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/parties/{id}/": {
      "get": {
        "operationId": "extract-parties-id:GET",
        "description": "Retrieve Party",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this party.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Party"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/term-usage/": {
      "get": {
        "operationId": "extract-term-usage:GET",
        "description": "Term Usage List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TermUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/term-usage/top/": {
      "get": {
        "operationId": "extract-term-usage-top:GET",
        "description": "Top Term Usage List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/geo-entity-usage/": {
      "get": {
        "operationId": "extract-geo-entity-usage:GET",
        "description": "Geo Entity Usage List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeoEntityUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/geo-entity-usage/top/": {
      "get": {
        "operationId": "extract-geo-entity-usage-top:GET",
        "description": "Top Geo Entity Usage List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/geo-alias-usage/": {
      "get": {
        "operationId": "extract-geo-alias-usage:GET",
        "description": "Geo Alias Usage List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeoAliasUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/geo-alias-usage/top/": {
      "get": {
        "operationId": "extract-geo-alias-usage-top:GET",
        "description": "Top Geo Alias Usage List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/typeahead/term-usage/{field_name}/": {
      "get": {
        "operationId": "extract-typeahead-term-usage-field_name:GET",
        "description": "Typeahead Term Usage\n\n    Kwargs: field_name: [term__term]\n    GET params:\n      - q: str",
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Typeahead"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/typeahead/geo-entity-usage/{field_name}/": {
      "get": {
        "operationId": "extract-typeahead-geo-entity-usage-field_name:GET",
        "description": "Typeahead Geo Entity Usage\n\n    Kwargs: field_name: [entity__name]\n    GET params:\n      - q: str",
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Typeahead"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/typeahead/party-usage/{field_name}/": {
      "get": {
        "operationId": "extract-typeahead-party-usage-field_name:GET",
        "description": "Typeahead Party Usage\n\n    Kwargs: field_name: [party__name]\n    GET params:\n      - q: str",
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Typeahead"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/party-usage/": {
      "get": {
        "operationId": "extract-party-usage:GET",
        "description": "Party Usage List\n\nGET params:\n  - document_id: int\n  - text_unit_id: int\n  - party_search: str\n  - party_search_iexact: str\n  - role: str\n  - role_contains: str",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PartyUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/party-usage/top/": {
      "get": {
        "operationId": "extract-party-usage-top:GET",
        "description": "Top Party Usage List\n\nGET params:\n  - document_id: int\n  - party_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/party/network-chart/": {
      "get": {
        "operationId": "extract-party-network-chart:GET",
        "description": "Party Network Chart\n\nGET params:\n    - party_name_iexact: str",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PartyUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/date-usage/": {
      "get": {
        "operationId": "extract-date-usage:GET",
        "description": "Date Usage List\n\nGET params:\n  - document_id: int\n  - date_search: str\n  - month_search: str ('%Y-%m-%d')",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DateUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/date-usage/top/": {
      "get": {
        "operationId": "extract-date-usage-top:GET",
        "description": "Top Date Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/date-usage/timeline-chart/": {
      "get": {
        "operationId": "extract-date-usage-timeline-chart:GET",
        "description": "Date Usage Timeline Chart\n\nGET params:\n    - document_id: int\n    - per_month: bool",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DateUsageTimeline"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/date-usage/calendar-chart/": {
      "get": {
        "operationId": "extract-date-usage-calendar-chart:GET",
        "description": "Date Usage Calendar Chart\n\nGET params:\n    - document_id: int",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DateUsageCalendar"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/date-usage/to-ical/": {
      "get": {
        "operationId": "extract-date-usage-to-ical:GET",
        "description": "Load Date Usage as iCal\n\nGET params:\n    - document_id: int (required)",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DateUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/date-duration-usage/": {
      "get": {
        "operationId": "extract-date-duration-usage:GET",
        "description": "Date Duration Usage List\n\nGET params:\n  - document_id: int\n  - text_unit_id: int\n  - duration_days_str: str/float",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DateDurationUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/date-duration-usage/top/": {
      "get": {
        "operationId": "extract-date-duration-usage-top:GET",
        "description": "Top Date Duration Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/definition-usage/": {
      "get": {
        "operationId": "extract-definition-usage:GET",
        "description": "Definition Usage List\n\nGET params:\n  - document_id: int\n  - definition: str",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefinitionUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/definition-usage/top/": {
      "get": {
        "operationId": "extract-definition-usage-top:GET",
        "description": "Top Definition Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/court-usage/": {
      "get": {
        "operationId": "extract-court-usage:GET",
        "description": "Court Usage List\n\nGET params:\n  - document_id: int\n  - text_unit_id: int\n  - court_name: str\n  - court_alias: str",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourtUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/court-usage/top/": {
      "get": {
        "operationId": "extract-court-usage-top:GET",
        "description": "Top Court Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/currency-usage/": {
      "get": {
        "operationId": "extract-currency-usage:GET",
        "description": "Currency Usage List\n\nGET params:\n  - document_id: int\n  - amount_search: str\n  - currency: str",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurrencyUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/currency-usage/top/": {
      "get": {
        "operationId": "extract-currency-usage-top:GET",
        "description": "Top Currency Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/regulation-usage/": {
      "get": {
        "operationId": "extract-regulation-usage:GET",
        "description": "Regulation Usage List\n\nGET params:\n  - document_id: int\n  - text_unit_id: int\n  - regulation_type: str\n  - regulation_name: str",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegulationUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/regulation-usage/top/": {
      "get": {
        "operationId": "extract-regulation-usage-top:GET",
        "description": "Top Regulation Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/amount-usage/": {
      "get": {
        "operationId": "extract-amount-usage:GET",
        "description": "Amount Usage List\n\nGET params:\n  - document_id: int\n  - text_unit_id: int\n  - amount_search: float\n  - amount_str: str",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AmountUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/amount-usage/top/": {
      "get": {
        "operationId": "extract-amount-usage-top:GET",
        "description": "Top Amount Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/distance-usage/": {
      "get": {
        "operationId": "extract-distance-usage:GET",
        "description": "Distance Usage List\n\nGET params:\n  - document_id: int\n  - distance_type: str\n  - amount_search: float",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DistanceUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/distance-usage/top/": {
      "get": {
        "operationId": "extract-distance-usage-top:GET",
        "description": "Top Distance Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/percent-usage/": {
      "get": {
        "operationId": "extract-percent-usage:GET",
        "description": "Percent Usage List\n\nGET params:\n  - document_id: int\n  - unit_type: str\n  - amount_search: float",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PercentUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/percent-usage/top/": {
      "get": {
        "operationId": "extract-percent-usage-top:GET",
        "description": "Top Percent Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/ratio-usage/": {
      "get": {
        "operationId": "extract-ratio-usage:GET",
        "description": "Ratio Usage List\n\nGET params:\n  - document_id: int\n  - text_unit_id: int\n  - amount_search: float\n  - amount_search2: float",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RatioUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/ratio-usage/top/": {
      "get": {
        "operationId": "extract-ratio-usage-top:GET",
        "description": "Top Ratio Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/citation-usage/": {
      "get": {
        "operationId": "extract-citation-usage:GET",
        "description": "Citation Usage List\n\nGET params:\n  - document_id: int\n  - text_unit_id: int\n  - citation_str: str\n  - citation_str_contains: str\n  - year_str: str\n  - reporter: str\n  - court: str",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CitationUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/citation-usage/top/": {
      "get": {
        "operationId": "extract-citation-usage-top:GET",
        "description": "Top Citation Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/copyright-usage/": {
      "get": {
        "operationId": "extract-copyright-usage:GET",
        "description": "Copyright Usage List\n\nGET params:\n  - document_id: int\n  - text_unit_id: int\n  - copyright: str\n  - copyright_contains: str",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CopyrightUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/copyright-usage/top/": {
      "get": {
        "operationId": "extract-copyright-usage-top:GET",
        "description": "Top Copyright Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/trademark-usage/": {
      "get": {
        "operationId": "extract-trademark-usage:GET",
        "description": "Trademark Usage List\n\nGET params:\n  - document_id: int\n  - text_unit_id: int\n  - trademark: str",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrademarkUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/trademark-usage/top/": {
      "get": {
        "operationId": "extract-trademark-usage-top:GET",
        "description": "Top Trademark Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/url-usage/": {
      "get": {
        "operationId": "extract-url-usage:GET",
        "description": "Url Usage List\n\nGET params:\n  - document_id: int\n  - text_unit_id: int\n  - source_url: str",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UrlUsage"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/extract/url-usage/top/": {
      "get": {
        "operationId": "extract-url-usage-top:GET",
        "description": "Top Url Usage List\n\nGET params:\n  - document_id: int",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "extract",
          "v1"
        ]
      }
    },
    "/api/v1/analyze/text-unit-classifications/": {
      "get": {
        "operationId": "analyze-text-unit-classifications:GET",
        "description": "Text Unit Classification List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextUnitClassification"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      },
      "post": {
        "operationId": "analyze-text-unit-classifications:POST",
        "description": "Create Text Unit Classification",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextUnitClassificationCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TextUnitClassificationCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TextUnitClassificationCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextUnitClassificationCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      }
    },
    "/api/v1/analyze/text-unit-classifications/{id}/": {
      "get": {
        "operationId": "analyze-text-unit-classifications-id:GET",
        "description": "Retrieve Text Unit Classification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this text unit classification.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextUnitClassification"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      },
      "delete": {
        "operationId": "analyze-text-unit-classifications-id:DELETE",
        "description": "Delete Text Unit Classification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this text unit classification.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      }
    },
    "/api/v1/analyze/text-unit-classifiers/": {
      "get": {
        "operationId": "analyze-text-unit-classifiers:GET",
        "description": "Text Unit Classifier List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextUnitClassifier"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      }
    },
    "/api/v1/analyze/text-unit-classifiers/{id}/": {
      "get": {
        "operationId": "analyze-text-unit-classifiers-id:GET",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this text unit classifier.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextUnitClassifier"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      },
      "delete": {
        "operationId": "analyze-text-unit-classifiers-id:DELETE",
        "description": "Delete Text Unit Classifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this text unit classifier.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      }
    },
    "/api/v1/analyze/text-unit-classifier-suggestions/": {
      "get": {
        "operationId": "analyze-text-unit-classifier-suggestions:GET",
        "description": "Text Unit Classifier Suggestion List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextUnitClassifierSuggestion"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      }
    },
    "/api/v1/analyze/text-unit-classifier-suggestions/{id}/": {
      "get": {
        "operationId": "analyze-text-unit-classifier-suggestions-id:GET",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this text unit classifier suggestion.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextUnitClassifierSuggestion"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      },
      "delete": {
        "operationId": "analyze-text-unit-classifier-suggestions-id:DELETE",
        "description": "Delete Text Unit Classifier Suggestion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this text unit classifier suggestion.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      }
    },
    "/api/v1/analyze/document-cluster/": {
      "get": {
        "operationId": "analyze-document-cluster:GET",
        "description": "Document Cluster List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentCluster"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      }
    },
    "/api/v1/analyze/document-cluster/{id}/": {
      "get": {
        "operationId": "analyze-document-cluster-id:GET",
        "description": "Retrieve Document Cluster",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document cluster.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCluster"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      },
      "put": {
        "operationId": "analyze-document-cluster-id:PUT",
        "description": "Update Document Cluster (name)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document cluster.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentClusterUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentClusterUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentClusterUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentClusterUpdate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      },
      "patch": {
        "operationId": "analyze-document-cluster-id:PATCH",
        "description": "Partial Update Document Cluster (name)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document cluster.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentClusterUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentClusterUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentClusterUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentClusterUpdate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      }
    },
    "/api/v1/analyze/text-unit-cluster/list/": {
      "get": {
        "operationId": "analyze-text-unit-cluster-list:GET",
        "description": "Text Unit Cluster List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextUnitCluster"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      }
    },
    "/api/v1/analyze/document-similarity/list/": {
      "get": {
        "operationId": "analyze-document-similarity-list:GET",
        "description": "Document Similarity List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentSimilarity"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      }
    },
    "/api/v1/analyze/text-unit-similarity/list/": {
      "get": {
        "operationId": "analyze-text-unit-similarity-list:GET",
        "description": "Text Unit Similarity List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextUnitSimilarity"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      }
    },
    "/api/v1/analyze/party-similarity/list/": {
      "get": {
        "operationId": "analyze-party-similarity-list:GET",
        "description": "Party Similarity List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PartySimilarity"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      }
    },
    "/api/v1/analyze/typeahead/text-unit-classification/{field_name}/": {
      "get": {
        "operationId": "analyze-typeahead-text-unit-classification-field_name:GET",
        "description": "Typeahead TextUnitClassification\n\n    Kwargs: field_name: [class_name, class_value]\n    GET params:\n      - q: str",
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Typeahead string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Typeahead"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "analyze",
          "v1"
        ]
      }
    },
    "/api/v1/rawdb/documents/{document_type_code}/": {
      "get": {
        "operationId": "rawdb-documents-document_type_code:GET",
        "description": "",
        "parameters": [
          {
            "name": "document_type_code",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "required": false,
            "description": "Project ids separated by commas",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columns",
            "in": "query",
            "required": false,
            "description": "Column names separated by commas",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "associated_text",
            "in": "query",
            "required": false,
            "description": "Boolean - show associated text",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "as_zip",
            "in": "query",
            "required": false,
            "description": "Boolean - export as zip",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fmt",
            "in": "query",
            "required": false,
            "description": "Export format",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv",
                "xlsx"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Page Size",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "description": "Sort order - column names separated by commas",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "saved_filters",
            "in": "query",
            "required": false,
            "description": "Saved filter ids separated by commas",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "save_filter",
            "in": "query",
            "required": false,
            "description": "Save filter",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_reviewed",
            "in": "query",
            "required": false,
            "description": "Return Reviewed documents count",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_total",
            "in": "query",
            "required": false,
            "description": "Return total documents count",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_data",
            "in": "query",
            "required": false,
            "description": "Return data",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ignore_errors",
            "in": "query",
            "required": false,
            "description": "Ignore errors",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "description": "Filter params",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rawdb",
          "v1"
        ]
      },
      "post": {
        "operationId": "rawdb-documents-document_type_code:POST",
        "description": "See .get() method signature, .post() method just reflects it and\nuses the same request.GET params to get data",
        "parameters": [
          {
            "name": "document_type_code",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RawdbDocumentsPOSTRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RawdbDocumentsPOSTRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RawdbDocumentsPOSTRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rawdb",
          "v1"
        ]
      }
    },
    "/api/v1/rawdb/project_stats/{project_id}/": {
      "get": {
        "operationId": "rawdb-project_stats-project_id:GET",
        "description": "",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rawdb",
          "v1"
        ]
      }
    },
    "/api/v1/rawdb/config/": {
      "get": {
        "operationId": "rawdb-config:GET",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "rawdb",
          "v1"
        ]
      }
    },
    "/api/v1/rawdb/social_accounts/": {
      "get": {
        "operationId": "rawdb-social_accounts:GET",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "rawdb",
          "v1"
        ]
      }
    },
    "/api/v1/task/tasks/": {
      "get": {
        "operationId": "task-tasks:GET",
        "description": "Task List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      }
    },
    "/api/v1/task/tasks/{id}/": {
      "get": {
        "operationId": "task-tasks-id:GET",
        "description": "Retrieve Task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique value identifying this task.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      }
    },
    "/api/v1/task/load-documents/": {
      "get": {
        "operationId": "task-load-documents:GET",
        "description": "\"Load Documents\" admin task\n\nPOST params:\n    - project: int\n    - source_data: str\n    - source_type: str\n    - document_type: str\n    - delete: bool\n    - run_standard_locators: bool",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      },
      "post": {
        "operationId": "task-load-documents:POST",
        "description": "\"Load Documents\" admin task\n\nPOST params:\n    - project: int\n    - source_data: str\n    - source_type: str\n    - document_type: str\n    - delete: bool\n    - run_standard_locators: bool",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      }
    },
    "/api/v1/task/locate/": {
      "get": {
        "operationId": "task-locate:GET",
        "description": "\"Locate\" admin task\n\nPOST params:\n    - locate_all: bool\n    - geoentity_locate: bool\n    - geoentity_priority: bool\n    - geoentity_delete: bool\n    - date_locate: bool\n    - date_strict: bool\n    - date_delete: bool\n    - amount_locate: bool\n    - amount_delete: bool\n    - citation_locate: bool\n    - citation_delete: bool\n    - copyright_locate: bool\n    - copyright_delete: bool\n    - court_locate: bool\n    - court_delete: bool\n    - currency_locate: bool\n    - currency_delete: bool\n    - duration_locate: bool\n    - duration_delete: bool\n    - definition_locate: bool\n    - definition_delete: bool\n    - distance_locate: bool\n    - distance_delete: bool\n    - party_locate: bool\n    - party_delete: bool\n    - percent_locate: bool\n    - percent_delete: bool\n    - ratio_locate: bool\n    - ratio_delete: bool\n    - regulation_locate: bool\n    - regulation_delete: bool\n    - term_locate: bool\n    - term_delete: bool\n    - trademark_locate: bool\n    - trademark_delete: bool\n    - url_locate: bool\n    - url_delete: bool\n    - parse_choice_sentence: bool\n    - parse_choice_paragraph: bool\n    - project: int",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      },
      "post": {
        "operationId": "task-locate:POST",
        "description": "\"Locate\" admin task\n\nPOST params:\n    - locate_all: bool\n    - geoentity_locate: bool\n    - geoentity_priority: bool\n    - geoentity_delete: bool\n    - date_locate: bool\n    - date_strict: bool\n    - date_delete: bool\n    - amount_locate: bool\n    - amount_delete: bool\n    - citation_locate: bool\n    - citation_delete: bool\n    - copyright_locate: bool\n    - copyright_delete: bool\n    - court_locate: bool\n    - court_delete: bool\n    - currency_locate: bool\n    - currency_delete: bool\n    - duration_locate: bool\n    - duration_delete: bool\n    - definition_locate: bool\n    - definition_delete: bool\n    - distance_locate: bool\n    - distance_delete: bool\n    - party_locate: bool\n    - party_delete: bool\n    - percent_locate: bool\n    - percent_delete: bool\n    - ratio_locate: bool\n    - ratio_delete: bool\n    - regulation_locate: bool\n    - regulation_delete: bool\n    - term_locate: bool\n    - term_delete: bool\n    - trademark_locate: bool\n    - trademark_delete: bool\n    - url_locate: bool\n    - url_delete: bool\n    - parse_choice_sentence: bool\n    - parse_choice_paragraph: bool\n    - project: int",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      }
    },
    "/api/v1/task/update-elastic-index/": {
      "get": {
        "operationId": "task-update-elastic-index:GET",
        "description": "\"Update ElasticSearch Index\" admin task",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      },
      "post": {
        "operationId": "task-update-elastic-index:POST",
        "description": "\"Update ElasticSearch Index\" admin task",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      }
    },
    "/api/v1/task/recall-task/": {
      "get": {
        "operationId": "task-recall-task:GET",
        "description": "\"Recall Task\" admin task\n\nPOST params:\n    - task_pk: int",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      },
      "post": {
        "operationId": "task-recall-task:POST",
        "description": "\"Recall Task\" admin task\n\nPOST params:\n    - task_pk: int",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      }
    },
    "/api/v1/task/task-status/": {
      "get": {
        "operationId": "task-task-status:GET",
        "description": "Check admin task status\n\nGET params:\n    - task_id: int",
        "parameters": [
          {
            "name": "task_id",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      }
    },
    "/api/v1/task/task-log/": {
      "get": {
        "operationId": "task-task-log:GET",
        "description": "Get task log records\nGET params:\n    - task_id: int\n    - records_limit: int",
        "parameters": [
          {
            "name": "task_id",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "records_limit",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      }
    },
    "/api/v1/common/actions/": {
      "get": {
        "operationId": "common-actions:GET",
        "description": "Action List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Action"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/actions/{id}/": {
      "get": {
        "operationId": "common-actions-id:GET",
        "description": "Retrieve Action",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this action.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/review-status-groups/": {
      "get": {
        "operationId": "common-review-status-groups:GET",
        "description": "ReviewStatusGroup List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReviewStatusGroup"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "post": {
        "operationId": "common-review-status-groups:POST",
        "description": "Create ReviewStatusGroup",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatusGroup"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatusGroup"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatusGroup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewStatusGroup"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/review-status-groups/{id}/": {
      "get": {
        "operationId": "common-review-status-groups-id:GET",
        "description": "Retrieve ReviewStatusGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this review status group.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewStatusGroup"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "put": {
        "operationId": "common-review-status-groups-id:PUT",
        "description": "Update ReviewStatusGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this review status group.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatusGroup"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatusGroup"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatusGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewStatusGroup"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "patch": {
        "operationId": "common-review-status-groups-id:PATCH",
        "description": "Partial Update ReviewStatusGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this review status group.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatusGroup"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatusGroup"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatusGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewStatusGroup"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "delete": {
        "operationId": "common-review-status-groups-id:DELETE",
        "description": "Delete ReviewStatusGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this review status group.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/review-statuses/": {
      "get": {
        "operationId": "common-review-statuses:GET",
        "description": "ReviewStatus List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReviewStatusDetail"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "post": {
        "operationId": "common-review-statuses:POST",
        "description": "Create ReviewStatus",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatus"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatus"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatus"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewStatus"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/review-statuses/{id}/": {
      "get": {
        "operationId": "common-review-statuses-id:GET",
        "description": "Retrieve ReviewStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this review status.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewStatusDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "put": {
        "operationId": "common-review-statuses-id:PUT",
        "description": "Update ReviewStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this review status.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatus"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatus"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewStatus"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "patch": {
        "operationId": "common-review-statuses-id:PATCH",
        "description": "Partial Update ReviewStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this review status.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatus"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatus"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ReviewStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewStatus"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "delete": {
        "operationId": "common-review-statuses-id:DELETE",
        "description": "Delete ReviewStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this review status.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/menu-groups/": {
      "get": {
        "operationId": "common-menu-groups:GET",
        "description": "MenuGroup List",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuGroup"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "post": {
        "operationId": "common-menu-groups:POST",
        "description": "Create MenuGroup",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuGroup"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MenuGroup"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MenuGroup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuGroup"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/menu-groups/form-fields/": {
      "get": {
        "operationId": "common-menu-groups-form-fields:GET",
        "description": "GET model form fields description to build UI form for an object:\n\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/menu-groups/{id}/": {
      "get": {
        "operationId": "common-menu-groups-id:GET",
        "description": "Retrieve MenuGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuGroup"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "put": {
        "operationId": "common-menu-groups-id:PUT",
        "description": "Update MenuGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuGroup"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MenuGroup"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MenuGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuGroup"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "patch": {
        "operationId": "common-menu-groups-id:PATCH",
        "description": "Partial Update MenuGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuGroup"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MenuGroup"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MenuGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuGroup"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "delete": {
        "operationId": "common-menu-groups-id:DELETE",
        "description": "Delete MenuGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/menu-groups/{id}/form-fields/": {
      "get": {
        "operationId": "common-menu-groups-id-form-fields:GET",
        "description": "GET model form fields description to build UI form for EXISTING object:\n\n     - value: any - object field value\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/menu-items/": {
      "get": {
        "operationId": "common-menu-items:GET",
        "description": "MenuItem List",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItem"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "post": {
        "operationId": "common-menu-items:POST",
        "description": "Create MenuItem",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuItem"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MenuItem"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MenuItem"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/menu-items/form-fields/": {
      "get": {
        "operationId": "common-menu-items-form-fields:GET",
        "description": "GET model form fields description to build UI form for an object:\n\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/menu-items/{id}/": {
      "get": {
        "operationId": "common-menu-items-id:GET",
        "description": "Retrieve MenuItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "put": {
        "operationId": "common-menu-items-id:PUT",
        "description": "Update MenuItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuItem"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MenuItem"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MenuItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "patch": {
        "operationId": "common-menu-items-id:PATCH",
        "description": "Partial Update MenuItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuItem"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MenuItem"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MenuItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "delete": {
        "operationId": "common-menu-items-id:DELETE",
        "description": "Delete MenuItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/menu-items/{id}/form-fields/": {
      "get": {
        "operationId": "common-menu-items-id-form-fields:GET",
        "description": "GET model form fields description to build UI form for EXISTING object:\n\n     - value: any - object field value\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/app-variables/": {
      "get": {
        "operationId": "common-app-variables:GET",
        "description": "Retrieve App Variable(s)\n\n    Params:\n        - name: str - retrieve specific variable",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "App var name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "post": {
        "operationId": "common-app-variables:POST",
        "description": "Create or update App Variables\n\n    Params:\n        key1: val1,\n        key2: val2, etc",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      },
      "delete": {
        "operationId": "common-app-variables:DELETE",
        "description": "Delete specific App Variable by name\n    Param:\n        - name: str\n        - category: str",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppVarDelete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/common/media/{path}/": {
      "get": {
        "operationId": "common-media-path:GET",
        "description": "If directory:\n  action: None: - list directory\n  action: download - list directory (TODO - download directory)\n  action: info: - dict(info about directory)\nIf file:\n  action: None: - show file\n  action: download - download file\n  action: info: - dict(info about directory)\n\n:param request:\n:param path: str - relative path in /media directory\n\n:query param action: optional str [\"download\", \"info\"]\n:return:",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "description": "Action name",
            "schema": {
              "type": "string",
              "enum": [
                "info",
                "download"
              ],
              "default": "download"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "tags": [
          "common",
          "v1"
        ]
      }
    },
    "/api/v1/document/documents/": {
      "get": {
        "operationId": "document-documents:GET",
        "description": "Document List with Fields",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cluster_id",
            "in": "query",
            "required": false,
            "description": "Cluster id to filter by",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search parameters for djangoQL",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentsForUser"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "post": {
        "operationId": "document-documents:POST",
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsForUser"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsForUser"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsForUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentsForUser"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/documents/download_zip/": {
      "get": {
        "operationId": "document-documents-download_zip:GET",
        "description": "",
        "parameters": [
          {
            "name": "document_ids",
            "in": "query",
            "required": false,
            "description": "Filter by Document ids separated by commas",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_document_ids",
            "in": "query",
            "required": false,
            "description": "Exclude Document ids separated by commas",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDownloadZipResponse"
                }
              },
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "detail"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/documents/for-user/": {
      "get": {
        "operationId": "document-documents-for-user:GET",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "DocumentsForUserResponse"
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/documents/{id}/": {
      "get": {
        "operationId": "document-documents-id:GET",
        "description": "Document Detail with Fields",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentsForUser"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "put": {
        "operationId": "document-documents-id:PUT",
        "description": "Set new assignee OR document status",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsForUser"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsForUser"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsForUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentsForUser"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "patch": {
        "operationId": "document-documents-id:PATCH",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "delete": {
        "operationId": "document-documents-id:DELETE",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/documents/{id}/data/": {
      "get": {
        "operationId": "document-documents-id-data:GET",
        "description": "Restricted set of fields in response (except full_text), see get_serializer_class()",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/documents/{id}/definitions/": {
      "get": {
        "operationId": "document-documents-id-definitions:GET",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDefinitions"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/documents/{id}/extraction/": {
      "get": {
        "operationId": "document-documents-id-extraction:GET",
        "description": "Standard extracted info - Top level + details\n\n    Params:\n        - skip_details: bool - show top-level data only (skip per text-unit data)\n        - values: str - list of str separated by comma like dates,parties,courts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/documents/{id}/fields/": {
      "get": {
        "operationId": "document-documents-id-fields:GET",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "post": {
        "operationId": "document-documents-id-fields:POST",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "put": {
        "operationId": "document-documents-id-fields:PUT",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "patch": {
        "operationId": "document-documents-id-fields:PATCH",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/documents/{id}/full_text/": {
      "get": {
        "operationId": "document-documents-id-full_text:GET",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/documents/{id}/show/": {
      "get": {
        "operationId": "document-documents-id-show:GET",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "description": "Get alternative document file if exists",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-notes/": {
      "get": {
        "operationId": "document-document-notes:GET",
        "description": "Document Note List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "description": "Filter by project id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_id",
            "in": "query",
            "required": false,
            "description": "Filter by document id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "For deleted documents as well",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "export_to",
            "in": "query",
            "required": false,
            "description": "Export data",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentNoteDetail"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "post": {
        "operationId": "document-document-notes:POST",
        "description": "Create Document Note",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentNoteCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentNoteCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentNoteCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentNoteCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-notes/{id}/": {
      "get": {
        "operationId": "document-document-notes-id:GET",
        "description": "Retrieve Document Note",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document note.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentNoteDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "put": {
        "operationId": "document-document-notes-id:PUT",
        "description": "Update Document Note",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document note.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentNoteUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentNoteUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentNoteUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentNoteUpdate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "patch": {
        "operationId": "document-document-notes-id:PATCH",
        "description": "Partial Update Document Note",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document note.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentNoteDetail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentNoteDetail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentNoteDetail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentNoteDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "delete": {
        "operationId": "document-document-notes-id:DELETE",
        "description": "Delete Document Note",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document note.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-fields/": {
      "get": {
        "operationId": "document-document-fields:GET",
        "description": "Document Field List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentFieldList"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-fields/form-fields/": {
      "get": {
        "operationId": "document-document-fields-form-fields:GET",
        "description": "GET model form fields description to build UI form for an object:\n\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-fields/stats/": {
      "get": {
        "operationId": "document-document-fields-stats:GET",
        "description": "",
        "parameters": [
          {
            "name": "document_type_uid",
            "in": "query",
            "required": false,
            "description": "Filter by document type uid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentFieldStatsResponse"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-fields/{uid}/": {
      "get": {
        "operationId": "document-document-fields-uid:GET",
        "description": "Retrieve Document Field",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "put": {
        "operationId": "document-document-fields-uid:PUT",
        "description": "Update Document Field",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document field.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "patch": {
        "operationId": "document-document-fields-uid:PATCH",
        "description": "Partial Update Document Field",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document field.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "delete": {
        "operationId": "document-document-fields-uid:DELETE",
        "description": "Delete Document Field",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document field.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-fields/{uid}/form-fields/": {
      "get": {
        "operationId": "document-document-fields-uid-form-fields:GET",
        "description": "GET model form fields description to build UI form for EXISTING object:\n\n     - value: any - object field value\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-types/": {
      "get": {
        "operationId": "document-document-types:GET",
        "description": "Document Type List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentTypeDetail"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "post": {
        "operationId": "document-document-types:POST",
        "description": "Create Document Type\n\n    Params:\n        - code: str - Short name for field, max 50 symbols\n        - title: str - Verbose name for field, max 100 symbols\n        - field_code_aliases: json - Aliases of field codes for document import purposes\n        - fields: array of objects like [{id: uid, category: id, order: int}, ...]\n        - search_fields: array of uids - set of fields to filter/sort on Document list page\n        - editor_type: str - max 100 symbols (from pre-defined choices)\n        - metadata: json - optional",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTypeCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-types/form-fields/": {
      "get": {
        "operationId": "document-document-types-form-fields:GET",
        "description": "GET model form fields description to build UI form for an object:\n\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-types/stats/": {
      "get": {
        "operationId": "document-document-types-stats:GET",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentTypeStats"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-types/user_project_types/": {
      "get": {
        "operationId": "document-document-types-user_project_types:GET",
        "description": "",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTypeDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-types/{uid}/": {
      "get": {
        "operationId": "document-document-types-uid:GET",
        "description": "Retrieve Document Type",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTypeDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "put": {
        "operationId": "document-document-types-uid:PUT",
        "description": "Update Document Type\n    Params:\n        - code: str - Short name for field, max 50 symbols\n        - title: str - Verbose name for field, max 100 symbols\n        - field_code_aliases: json - Aliases of field codes for document import purposes\n        - fields: array of objects like [{id: uid, category: id, order: int}, ...]\n        - search_fields: array of uids - set of fields to filter/sort on Document list page\n        - editor_type: str - max 100 symbols (from pre-defined choices)\n        - metadata: json - optional",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document type.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTypeCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "patch": {
        "operationId": "document-document-types-uid:PATCH",
        "description": "Partial Update Document Type",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document type.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTypeCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "delete": {
        "operationId": "document-document-types-uid:DELETE",
        "description": "Delete Document Type",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document type.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-types/{uid}/form-fields/": {
      "get": {
        "operationId": "document-document-types-uid-form-fields:GET",
        "description": "GET model form fields description to build UI form for EXISTING object:\n\n     - value: any - object field value\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-types/{uid}/export_doc_type/": {
      "get": {
        "operationId": "document-document-types-uid-export_doc_type:GET",
        "description": "",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "target_version",
            "in": "query",
            "required": false,
            "description": "Version number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-field-categories/": {
      "get": {
        "operationId": "document-document-field-categories:GET",
        "description": "DocumentFieldCategory List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentFieldCategoryList"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "post": {
        "operationId": "document-document-field-categories:POST",
        "description": "Create DocumentFieldCategory\n\n    Params:\n        - document_type: uid\n        - name: str - Verbose name for field category, max 100 symbols\n        - order: int\n        - fields: array of field uids",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCategoryCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCategoryCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCategoryCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldCategoryCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-field-categories/form-fields/": {
      "get": {
        "operationId": "document-document-field-categories-form-fields:GET",
        "description": "GET model form fields description to build UI form for an object:\n\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-field-categories/{id}/": {
      "get": {
        "operationId": "document-document-field-categories-id:GET",
        "description": "Retrieve DocumentFieldCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document field category.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldCategoryList"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "put": {
        "operationId": "document-document-field-categories-id:PUT",
        "description": "Update Document Type\n    Params:\n        - document_type: uid\n        - name: str - Verbose name for field category, max 100 symbols\n        - order: int\n        - fields: array of field uids",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document field category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCategoryCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCategoryCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCategoryCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldCategoryCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "patch": {
        "operationId": "document-document-field-categories-id:PATCH",
        "description": "Partial Update DocumentFieldCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document field category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCategoryCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCategoryCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldCategoryCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldCategoryCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "delete": {
        "operationId": "document-document-field-categories-id:DELETE",
        "description": "Delete DocumentFieldCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document field category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-field-categories/{id}/form-fields/": {
      "get": {
        "operationId": "document-document-field-categories-id-form-fields:GET",
        "description": "GET model form fields description to build UI form for EXISTING object:\n\n     - value: any - object field value\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-field-detectors/": {
      "get": {
        "operationId": "document-document-field-detectors:GET",
        "description": "Document Field List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentFieldDetectorDetail"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "post": {
        "operationId": "document-document-field-detectors:POST",
        "description": "Create Document Field\n    Params:\n        - fields: uid\n        - category: str - max 64 symbols (from pre-defined choices)\n        - exclude_regexps: str - optional\n        - definition_words: str - optional\n        - include_regexps: str - optional\n        - regexps_pre_process_lower: bool, default=False\n        - detected_value: str - max 256 chars\n        - extraction_hint: str - max 30 chars (from pre-defined choices)\n        - text_part: str - max 30 chars (from pre-defined choices)",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldDetectorCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldDetectorCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldDetectorCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldDetectorCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-field-detectors/form-fields/": {
      "get": {
        "operationId": "document-document-field-detectors-form-fields:GET",
        "description": "GET model form fields description to build UI form for an object:\n\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-field-detectors/{uid}/": {
      "get": {
        "operationId": "document-document-field-detectors-uid:GET",
        "description": "Retrieve Document Field",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document field detector.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldDetectorDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "put": {
        "operationId": "document-document-field-detectors-uid:PUT",
        "description": "Update Document Field\n    Params:\n        - fields: uid\n        - category: str - max 64 symbols (from pre-defined choices)\n        - exclude_regexps: str - optional\n        - definition_words: str - optional\n        - include_regexps: str - optional\n        - regexps_pre_process_lower: bool, default=False\n        - detected_value: str - max 256 chars\n        - extraction_hint: str - max 30 chars (from pre-defined choices)\n        - text_part: str - max 30 chars (from pre-defined choices)",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document field detector.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldDetectorCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldDetectorCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldDetectorCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldDetectorCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "patch": {
        "operationId": "document-document-field-detectors-uid:PATCH",
        "description": "Partial Update Document Field",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document field detector.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldDetectorCreate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldDetectorCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldDetectorCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldDetectorCreate"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "delete": {
        "operationId": "document-document-field-detectors-uid:DELETE",
        "description": "Delete Document Field",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document field detector.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-field-detectors/{uid}/form-fields/": {
      "get": {
        "operationId": "document-document-field-detectors-uid-form-fields:GET",
        "description": "GET model form fields description to build UI form for EXISTING object:\n\n     - value: any - object field value\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-field-values/": {
      "get": {
        "operationId": "document-document-field-values:GET",
        "description": "Document Field Value List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentFieldValue"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-field-values/{id}/": {
      "get": {
        "operationId": "document-document-field-values-id:GET",
        "description": "Document Field Value Details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this field value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldValue"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-field-annotations/": {
      "get": {
        "operationId": "document-document-field-annotations:GET",
        "description": "Field Annotation List + Field Annotation False Match List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentFieldAnnotation"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-field-annotations/for-user/": {
      "get": {
        "operationId": "document-document-field-annotations-for-user:GET",
        "description": "",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldAnnotation"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-field-annotations/{uid}/": {
      "get": {
        "operationId": "document-document-field-annotations-uid:GET",
        "description": "Field Annotation Details (not Field Annotation False Match)",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldAnnotation"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/field-annotation-statuses/": {
      "get": {
        "operationId": "document-field-annotation-statuses:GET",
        "description": "FieldAnnotationStatus List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldAnnotationStatus"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "post": {
        "operationId": "document-field-annotation-statuses:POST",
        "description": "Create FieldAnnotationStatus",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldAnnotationStatus"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/FieldAnnotationStatus"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FieldAnnotationStatus"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldAnnotationStatus"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/field-annotation-statuses/{id}/": {
      "get": {
        "operationId": "document-field-annotation-statuses-id:GET",
        "description": "Retrieve FieldAnnotationStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this field annotation status.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldAnnotationStatus"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "put": {
        "operationId": "document-field-annotation-statuses-id:PUT",
        "description": "Update FieldAnnotationStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this field annotation status.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldAnnotationStatus"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/FieldAnnotationStatus"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FieldAnnotationStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldAnnotationStatus"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "patch": {
        "operationId": "document-field-annotation-statuses-id:PATCH",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this field annotation status.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldAnnotationStatus"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/FieldAnnotationStatus"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FieldAnnotationStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldAnnotationStatus"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "delete": {
        "operationId": "document-field-annotation-statuses-id:DELETE",
        "description": "Delete FieldAnnotationStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this field annotation status.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/textunits/": {
      "get": {
        "operationId": "document-textunits:GET",
        "description": "TextUnit List",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search parameters for djangoQL",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextUnitDjangoQL"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/textunits/{id}/": {
      "get": {
        "operationId": "document-textunits-id:GET",
        "description": "Retrieve TextUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this text unit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search parameters for djangoQL",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextUnitDjangoQL"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/annotations/": {
      "get": {
        "operationId": "document-annotations:GET",
        "description": "Annotation (Document Field Value) List",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Annotation"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "post": {
        "operationId": "document-annotations:POST",
        "description": "Create Annotation (Document Field Value)",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotation"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/annotations/{id}/": {
      "get": {
        "operationId": "document-annotations-id:GET",
        "description": "Retrieve Annotation (Document Field Value)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this field annotation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotation"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "put": {
        "operationId": "document-annotations-id:PUT",
        "description": "Update Annotation (Document Field Value)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this field annotation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotation"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "delete": {
        "operationId": "document-annotations-id:DELETE",
        "description": "Delete Annotation (Document Field Value)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this field annotation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/": {
      "get": {
        "operationId": "document-project-project_pk-documents:GET",
        "description": "Document List with Fields",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cluster_id",
            "in": "query",
            "required": false,
            "description": "Cluster id to filter by",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "description": "Search parameters for djangoQL",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentsForUser"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "post": {
        "operationId": "document-project-project_pk-documents:POST",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsForUser"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsForUser"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsForUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentsForUser"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/download_zip/": {
      "get": {
        "operationId": "document-project-project_pk-documents-download_zip:GET",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_ids",
            "in": "query",
            "required": false,
            "description": "Filter by Document ids separated by commas",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_document_ids",
            "in": "query",
            "required": false,
            "description": "Exclude Document ids separated by commas",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDownloadZipResponse"
                }
              },
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "detail"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/for-user/": {
      "get": {
        "operationId": "document-project-project_pk-documents-for-user:GET",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "DocumentsForUserResponse"
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/{id}/": {
      "get": {
        "operationId": "document-project-project_pk-documents-id:GET",
        "description": "Document Detail with Fields",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentsForUser"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "put": {
        "operationId": "document-project-project_pk-documents-id:PUT",
        "description": "Set new assignee OR document status",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsForUser"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsForUser"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsForUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentsForUser"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "patch": {
        "operationId": "document-project-project_pk-documents-id:PATCH",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "delete": {
        "operationId": "document-project-project_pk-documents-id:DELETE",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/{id}/data/": {
      "get": {
        "operationId": "document-project-project_pk-documents-id-data:GET",
        "description": "Restricted set of fields in response (except full_text), see get_serializer_class()",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/{id}/definitions/": {
      "get": {
        "operationId": "document-project-project_pk-documents-id-definitions:GET",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDefinitions"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/{id}/extraction/": {
      "get": {
        "operationId": "document-project-project_pk-documents-id-extraction:GET",
        "description": "Standard extracted info - Top level + details\n\n    Params:\n        - skip_details: bool - show top-level data only (skip per text-unit data)\n        - values: str - list of str separated by comma like dates,parties,courts",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/{id}/fields/": {
      "get": {
        "operationId": "document-project-project_pk-documents-id-fields:GET",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "post": {
        "operationId": "document-project-project_pk-documents-id-fields:POST",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "put": {
        "operationId": "document-project-project_pk-documents-id-fields:PUT",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "patch": {
        "operationId": "document-project-project_pk-documents-id-fields:PATCH",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDetail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/{id}/full_text/": {
      "get": {
        "operationId": "document-project-project_pk-documents-id-full_text:GET",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/{id}/show/": {
      "get": {
        "operationId": "document-project-project_pk-documents-id-show:GET",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this document.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "description": "Get alternative document file if exists",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/document-field-values/": {
      "get": {
        "operationId": "document-project-project_pk-document-field-values:GET",
        "description": "Document Field Value List",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentFieldValue"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/document-field-values/{id}/": {
      "get": {
        "operationId": "document-project-project_pk-document-field-values-id:GET",
        "description": "Document Field Value Details",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this field value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldValue"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/document-field-annotations/": {
      "get": {
        "operationId": "document-project-project_pk-document-field-annotations:GET",
        "description": "Field Annotation List + Field Annotation False Match List",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentFieldAnnotation"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/document-field-annotations/for-user/": {
      "get": {
        "operationId": "document-project-project_pk-document-field-annotations-for-user:GET",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldAnnotation"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/document-field-annotations/{uid}/": {
      "get": {
        "operationId": "document-project-project_pk-document-field-annotations-uid:GET",
        "description": "Field Annotation Details (not Field Annotation False Match)",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldAnnotation"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/": {
      "get": {
        "operationId": "document-project-project_pk-documents-document_pk-annotations:GET",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnnotationInDocument"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "post": {
        "operationId": "document-project-project_pk-documents-document_pk-annotations:POST",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationInDocument"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationInDocument"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationInDocument"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotationInDocument"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/{document_pk}/annotations/{id}/": {
      "get": {
        "operationId": "document-project-project_pk-documents-document_pk-annotations-id:GET",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotationInDocument"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "put": {
        "operationId": "document-project-project_pk-documents-document_pk-annotations-id:PUT",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationInDocument"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationInDocument"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationInDocument"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotationInDocument"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "patch": {
        "operationId": "document-project-project_pk-documents-document_pk-annotations-id:PATCH",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationInDocument"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationInDocument"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationInDocument"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotationInDocument"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      },
      "delete": {
        "operationId": "document-project-project_pk-documents-document_pk-annotations-id:DELETE",
        "description": "",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/stats/": {
      "get": {
        "operationId": "document-stats:GET",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/dump/dump/": {
      "get": {
        "operationId": "dump-dump:GET",
        "description": "Dump all users, roles, email addresses, review statuses, review status groups,\napp vars, document types, fields, field detectors and document filters to json.",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dump",
          "v1"
        ]
      },
      "put": {
        "operationId": "dump-dump:PUT",
        "description": "Upload field values",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "Json file with dumped data"
                }
              }
            }
          }
        },
        "tags": [
          "dump",
          "v1"
        ]
      }
    },
    "/api/v1/dump/field-values/": {
      "get": {
        "operationId": "dump-field-values:GET",
        "description": "Download field values",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dump",
          "v1"
        ]
      },
      "put": {
        "operationId": "dump-field-values:PUT",
        "description": "Upload field values",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "Json file with dumped data"
                }
              }
            }
          }
        },
        "tags": [
          "dump",
          "v1"
        ]
      }
    },
    "/api/v1/dump/document-config/": {
      "get": {
        "operationId": "dump-document-config:GET",
        "description": "Dump document types, fields, field detectors and  document filters to json.",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dump",
          "v1"
        ]
      },
      "put": {
        "operationId": "dump-document-config:PUT",
        "description": "Upload field values",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "Json file with dumped data"
                }
              }
            }
          }
        },
        "tags": [
          "dump",
          "v1"
        ]
      }
    },
    "/api/v1/users/users/": {
      "get": {
        "operationId": "users-users:GET",
        "description": "User List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      },
      "post": {
        "operationId": "users-users:POST",
        "description": "Create User",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      }
    },
    "/api/v1/users/users/form-fields/": {
      "get": {
        "operationId": "users-users-form-fields:GET",
        "description": "GET model form fields description to build UI form for an object:\n\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      }
    },
    "/api/v1/users/users/user_stats/": {
      "get": {
        "operationId": "users-users-user_stats:GET",
        "description": "User stats: projects, document types, tasks",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserStats"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      }
    },
    "/api/v1/users/users/{id}/": {
      "get": {
        "operationId": "users-users-id:GET",
        "description": "Retrieve User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      },
      "put": {
        "operationId": "users-users-id:PUT",
        "description": "Update User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      },
      "patch": {
        "operationId": "users-users-id:PATCH",
        "description": "Partial Update User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      }
    },
    "/api/v1/users/users/{id}/form-fields/": {
      "get": {
        "operationId": "users-users-id-form-fields:GET",
        "description": "GET model form fields description to build UI form for EXISTING object:\n\n     - value: any - object field value\n     - field_type: str - CharField, IntegerField, SomeSerializerField - i.e. fields from a serializer\n     - ui_element: dict - {type: (\"input\" | \"select\" | \"checkbox\" | ...), data_type: (\"string\", \"integer\", \"date\", ...), ...}\n     - label: str - field label declared in a serializer field (default NULL)\n     - field_name: str - field name declared in a serializer field (default NULL)\n     - help_text: str - field help text declared in a serializer field (default NULL)\n     - required: bool - whether field is required\n     - read_only: bool - whether field is read only\n     - allow_null: bool - whether field is may be null\n     - default: bool - default (initial) field value for a new object (default NULL)\n     - choices: array - choices to select from [{choice_id1: choice_verbose_name1, ....}] (default NULL)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      }
    },
    "/api/v1/users/roles/": {
      "get": {
        "operationId": "users-roles:GET",
        "description": "Role List",
        "parameters": [
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      },
      "post": {
        "operationId": "users-roles:POST",
        "description": "Create Role",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      }
    },
    "/api/v1/users/roles/{id}/": {
      "get": {
        "operationId": "users-roles-id:GET",
        "description": "Retrieve Role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this role.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jq_filters",
            "in": "query",
            "required": false,
            "description": "Filter params similar to JQWidgets grid filter params: \n                           filterscount=1, \n                           filterdatafield0=\"a\", \n                           filtervalue0=\"b\", \n                           filtercondition0=\"CONTAINS\", \n                           filteroperator0=1, \n                           sortdatafied=\"c\",\n                           sortorder=\"asc\"\n                           ",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      },
      "put": {
        "operationId": "users-roles-id:PUT",
        "description": "Update Role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this role.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      },
      "patch": {
        "operationId": "users-roles-id:PATCH",
        "description": "Partial Update Role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this role.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      }
    },
    "/api/{var}": {
      "get": {
        "operationId": "var:GET",
        "description": "",
        "parameters": [
          {
            "name": "var",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/coreapi+json": {
                "schema": {}
              },
              "application/openapi+json": {
                "schema": {}
              },
              "text/html": {
                "schema": {}
              }
            },
            "description": ""
          }
        },
        "tags": [
          "{var}",
          "v1"
        ]
      }
    },
    "/api/media-data/{path}/": {
      "get": {
        "operationId": "media-data-path:GET",
        "description": "If directory:\n  action: None: - list directory\n  action: download - list directory (TODO - download directory)\n  action: info: - dict(info about directory)\nIf file:\n  action: None: - show file\n  action: download - download file\n  action: info: - dict(info about directory)\n\n:param request:\n:param path: str - relative path in /media directory\n\n:query param action: optional str [\"download\", \"info\"]\n:return:",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "description": "Action name",
            "schema": {
              "type": "string",
              "enum": [
                "info",
                "download"
              ],
              "default": "download"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "tags": [
          "media_data",
          "v1"
        ]
      }
    },
    "/rest-auth/login/": {
      "post": {
        "operationId": "rest-auth-login:POST",
        "description": "Check the credentials and return the REST Token\nif the credentials are valid and authenticated.\nCalls Django Auth login method to register User ID\nin Django session framework\n\nAccept the following POST parameters: username, password\nReturn the REST Framework Token Object's key.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "rest_auth",
          "v1"
        ]
      }
    },
    "/rest-auth/password/reset/": {
      "post": {
        "operationId": "rest-auth-password-reset:POST",
        "description": "Calls Django Auth PasswordResetForm save method.\n\nAccepts the following POST parameters: email\nReturns the success/fail message.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomPasswordReset"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CustomPasswordReset"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CustomPasswordReset"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAuthCommonResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "rest_auth",
          "v1"
        ]
      }
    },
    "/rest-auth/password/reset/confirm/": {
      "post": {
        "operationId": "rest-auth-password-reset-confirm:POST",
        "description": "Password reset e-mail link is confirmed, therefore\nthis resets the user's password.\n\nAccepts the following POST parameters: token, uid,\n    new_password1, new_password2\nReturns the success/fail message.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomPasswordResetConfirm"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CustomPasswordResetConfirm"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CustomPasswordResetConfirm"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAuthCommonResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "rest_auth",
          "v1"
        ]
      }
    },
    "/rest-auth/password/change/": {
      "post": {
        "operationId": "rest-auth-password-change:POST",
        "description": "Calls Django Auth SetPasswordForm save method.\n\nAccepts the following POST parameters: new_password1, new_password2\nReturns the success/fail message.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomPasswordChange"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CustomPasswordChange"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CustomPasswordChange"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAuthCommonResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "rest_auth",
          "v1"
        ]
      }
    },
    "/rest-auth/registration/": {
      "post": {
        "operationId": "rest-auth-registration:POST",
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Register"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "rest_auth",
          "v1"
        ]
      }
    },
    "/rest-auth/registration/verify-email/": {
      "post": {
        "operationId": "rest-auth-registration-verify-email:POST",
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmail"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyEmail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "rest_auth",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/select_projects/": {
      "post": {
        "operationId": "project-projects-select_projects:POST",
        "description": "Select projects for review in Explorer UI",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelectProjectsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SelectProjectsRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SelectProjectsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectProjectsResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/assign_annotations/": {
      "post": {
        "operationId": "project-projects-id-assign_annotations:POST",
        "description": "Bulk assign batch of annotations to a review team member\n\n    Params:\n        annotation_ids: list[int]\n        all: any value - update all annotations if any value\n        no_annotation_ids: list[int] - exclude those annotations from action (if \"all\" is set)\n        assignee_id: int\n    Returns:\n        int (number of reassigned annotations)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectAnnotationsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectAnnotationsRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectAnnotationsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountSuccessResponse"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "details"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/assign_document/": {
      "post": {
        "operationId": "project-projects-id-assign_document:POST",
        "description": "Bulk assign batch of documents to a review team member\n\n    Params:\n        document_id: int\n        assignee_id: int\n    Returns:\n        bool (number of reassigned documents)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectDocumentRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectDocumentRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectDocumentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountSuccessResponse"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "details"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/assign_documents/": {
      "post": {
        "operationId": "project-projects-id-assign_documents:POST",
        "description": "Bulk assign batch of documents to a review team member\n\n    Params:\n        document_ids: list[int]\n        all: any value - update all documents if any value\n        no_document_ids: list[int] - exclude those docs from action (if \"all\" is set)\n        assignee_id: int\n    Returns:\n        int (number of reassigned documents)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectDocumentsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectDocumentsRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AssignProjectDocumentsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountSuccessResponse"
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "details": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "details"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/cleanup/": {
      "post": {
        "operationId": "project-projects-id-cleanup:POST",
        "description": "Clean project (Generic Contract Type project)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CleanupProjectRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CleanupProjectRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CleanupProjectRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetail"
                }
              }
            },
            "description": ""
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/detect_field_values/": {
      "post": {
        "operationId": "project-projects-id-detect_field_values:POST",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetectProjectFieldValuesRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DetectProjectFieldValuesRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DetectProjectFieldValuesRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskIdResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/make-searchable-pdf/": {
      "post": {
        "operationId": "project-projects-id-make-searchable-pdf:POST",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MakeSearchablePDFRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MakeSearchablePDFRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MakeSearchablePDFRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskIdResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/mark_delete/": {
      "post": {
        "operationId": "project-projects-id-mark_delete:POST",
        "description": "Method marks the whole project (remove_all=True) / the project's documents (remove_all=False)\nfor deleting. These marked documents (and the project) will become hidden in API.\nDocuments, listed in excluded_ids list, will not be marked for deleting.\n\n    Params:\n        - all: bool - mark all filtered by a user documents\n        - remove_all: bool - mark project+documents\n        - exclude_document_ids: list[int]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteProjectsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteProjectsRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteProjectsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkUnmarkForDeleteProjectsReponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/send-clusters-to-project/": {
      "post": {
        "operationId": "project-projects-id-send-clusters-to-project:POST",
        "description": "Send clusters to another Project\n\n    Params:\n        - cluster_ids: list[int]\n        - project_id: int",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendClusterToProjectRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SendClusterToProjectRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SendClusterToProjectRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetail"
                }
              }
            },
            "description": ""
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/set_annotation_status/": {
      "post": {
        "operationId": "project-projects-id-set_annotation_status:POST",
        "description": "Bulk set status for batch of annotations\n\n    Params:\n        document_ids: list[int]\n        all: any value - update all annotations if any value\n        no_annotation_ids: list[int] - exclude those annotations from action (if \"all\" is set)\n        status_id: int - field annotation status id\n        run_mode: str - 'sync', 'background', 'smart'\n    Returns:\n        int (number of reassigned annotations)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetProjectAnnotationsStatusRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetProjectAnnotationsStatusRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SetProjectAnnotationsStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CountSuccessResponse"
                    },
                    {
                      "$ref": "#/components/schemas/SetProjectAnnotationsStatusAsyncResponse"
                    }
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/set_status/": {
      "post": {
        "operationId": "project-projects-id-set_status:POST",
        "description": "Bulk set status for batch of documents\n\n    Params:\n        document_ids: list[int]\n        no_document_ids: list[int] - exclude those docs from action (if \"all\" is set)\n        all: any value - update all documents if any value\n        status_id: int\n    Returns:\n        int (number of reassigned documents)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetProjectDocumentsStatusRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetProjectDocumentsStatusRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SetProjectDocumentsStatusRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountSuccessResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/unmark_delete/": {
      "post": {
        "operationId": "project-projects-id-unmark_delete:POST",
        "description": "Method removes soft delete sign from project only (remove_all=False) or\nfrom the project and the project's documents (remove_all=True)\n    Body params:\n        - all: bool - unmark all filtered by a user documents\n        - remove_all: bool - unmark project+documents\n        - exclude_document_ids: List[int]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteProjectsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteProjectsRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteProjectsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkUnmarkForDeleteProjectsReponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/upload-session/{uid}/_batch_upload/": {
      "post": {
        "operationId": "project-upload-session-uid-_batch_upload:POST",
        "description": "Upload batch of files\n\n    Params:\n        - folder (source_path): str - absolute path to a directory containing files\n        - force: bool (optional) - whether rewrite existing file and Document",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this upload session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadSessionDetail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UploadSessionDetail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadSessionDetail"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadSessionDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/upload-session/{uid}/batch_upload/": {
      "post": {
        "operationId": "project-upload-session-uid-batch_upload:POST",
        "description": "Upload files from given sub-folder in media/data/documents folder\n\n    Params:\n        - source_path: relative path to a folder with documents",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this upload session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadSessionBatchUploadRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UploadSessionBatchUploadRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadSessionBatchUploadRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadSessionDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/upload-session/{uid}/files/": {
      "post": {
        "operationId": "project-upload-session-uid-files:POST",
        "description": "",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this upload session.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Length",
            "in": "header",
            "required": true,
            "description": "Content Length",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "File-Name",
            "in": "header",
            "required": true,
            "description": "Content Length",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Force",
            "in": "header",
            "required": false,
            "description": "Force upload",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Directory-Path",
            "in": "header",
            "required": false,
            "description": "Directory Path",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Force upload",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/offset+octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUploadSessionFilesResponse"
                }
              }
            },
            "description": ""
          },
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUploadSessionFilesResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/upload-session/{uid}/upload/": {
      "post": {
        "operationId": "project-upload-session-uid-upload:POST",
        "description": "Upload a File\n\n    Params:\n        - file: file object\n        - force: bool (optional) - whether rewrite existing file and Document\n        - review_file: bool - whether skip file check (exists or not)\n        - directory_path: str - may be passed from TUS plugin",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this upload session.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "File-Name",
            "in": "header",
            "required": true,
            "description": "File Name",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "File-Encoding",
            "in": "header",
            "required": true,
            "description": "File Encoding",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Force",
            "in": "header",
            "required": false,
            "description": "Force upload",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Review-File",
            "in": "header",
            "required": false,
            "description": "Review File",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Directory-Path",
            "in": "header",
            "required": false,
            "description": "Directory Path",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUploadSessionPOSTResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/projects/{id}/cluster/": {
      "post": {
        "operationId": "project-projects-id-cluster:POST",
        "description": "Cluster Project Documents\n\n    Params:\n        - method: str[KMeans, MiniBatchKMeans, Birch, DBSCAN]\n        - cluster_by: str[term, date, text, definition, duration, party,\n                          geoentity, currency_name, currency_value]\n        - n_clusters: int\n        - force: bool (optional) - force clustering if uncompleted tasks exist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "A unique integer value identifying this project.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterProjectRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ClusterProjectRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ClusterProjectRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterProjectResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/task/load-dictionaries/": {
      "post": {
        "operationId": "task-load-dictionaries:POST",
        "description": "\"Load Dictionaries\" admin task\n\nPOST params:\n    - terms_accounting: bool:\n    - terms_accounting_1: bool:\n    - terms_accounting_1_locale_en: bool:\n    - terms_accounting_2: bool:\n    - terms_accounting_2_locale_en: bool:\n    - terms_accounting_3: bool:\n    - terms_accounting_3_locale_en: bool:\n    - terms_accounting_4: bool:\n    - terms_accounting_4_locale_en: bool:\n    - terms_accounting_5: bool:\n    - terms_accounting_5_locale_en: bool:\n    - terms_scientific: bool:\n    - terms_scientific_1: bool:\n    - terms_scientific1_locale_en: bool:\n    - terms_financial: bool:\n    - terms_financial_1: bool:\n    - terms_financial_1_locale_en: bool:\n    - terms_legal: bool:\n    - terms_legal_1: bool:\n    - terms_legal_1_locale_en: bool:\n    - terms_legal_2: bool:\n    - terms_legal_2_locale_en: bool:\n    - terms_legal_3: bool:\n    - terms_legal_3_locale_en: bool:\n    - terms_legal_4: bool:\n    - terms_legal_4_locale_en: bool:\n    - terms_file_path: str:\n    - terms_delete: bool:\n    - courts: bool:\n    - courts_1: bool:\n    - courts_1_locale_en: bool:\n    - courts_2: bool:\n    - courts_2_locale_en: bool:\n    - courts_file_path: str:\n    - courts_delete: bool:\n    - geoentities: bool:\n    - geoentities_1: bool:\n    - geoentities_1_locale_multi: bool:\n    - geoentities_file_path: str:\n    - geoentities_delete: bool:",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      }
    },
    "/api/v1/task/clean-tasks/": {
      "post": {
        "operationId": "task-clean-tasks:POST",
        "description": "\"Clean Tasks\" admin task",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      }
    },
    "/api/v1/task/purge-task/": {
      "post": {
        "operationId": "task-purge-task:POST",
        "description": "\"Purge Task\" admin task\n\nPOST params:\n    - task_pk: int",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "task",
          "v1"
        ]
      }
    },
    "/api/v1/tus/upload-session/{upload_session_id}/upload/": {
      "post": {
        "operationId": "tus-upload-session-upload_session_id-upload:POST",
        "description": "Create an Upload",
        "parameters": [
          {
            "name": "upload_session_id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "header",
            "required": false,
            "description": "Upload a file even if it exists.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Upload-Length",
            "in": "header",
            "required": true,
            "description": "File length.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Upload-Metadata",
            "in": "header",
            "required": true,
            "description": "Upload metadata include file name, relative path, etc.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tus-Resumable",
            "in": "header",
            "required": true,
            "description": "1.0.0",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              },
              "Upload-Expires": {
                "schema": {
                  "type": "string"
                }
              },
              "Tus-Resumable": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "tus",
          "v1"
        ]
      }
    },
    "/api/v1/document/documents/mark_delete/": {
      "post": {
        "operationId": "document-documents-mark_delete:POST",
        "description": "Method marks a number of documents for deleting. These marked documents will become hidden in API.\n:param request: provide a list of document ids here: document_ids: [...]\n:param kwargs:\n:return: OK or 404",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/documents/unmark_delete/": {
      "post": {
        "operationId": "document-documents-unmark_delete:POST",
        "description": "Method recovers documents, marked for deleting. These documents will become visible in API.\n:param request: provide a list of document ids here: document_ids: [...]\n:param kwargs:\n:return: OK or 404",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-fields/{uid}/check_formula/": {
      "post": {
        "operationId": "document-document-fields-uid-check_formula:POST",
        "description": "Check formula for EXISTING Document Field\nExpects request data arguments:\n- formula: str OR\n- convert_decimals_to_floats_in_formula_args: bool\n- hide_until_python: str\n- field_type: str\n- document_type: str - document type uid\n- depends_on_fields: List[str] - list of field uids\nEither \"request.data.formula\" or \"request.data.hide_until_python\" should be filled.",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document field.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckDocumentFieldFormulaRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CheckDocumentFieldFormulaRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CheckDocumentFieldFormulaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-fields/{uid}/clone/": {
      "post": {
        "operationId": "document-document-fields-uid-clone:POST",
        "description": "Clone existing DocumentField and its depends_on_fields and detectors",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document field.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloneDocumentFieldRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CloneDocumentFieldRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CloneDocumentFieldRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFieldDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-fields/{uid}/pre_delete/": {
      "post": {
        "operationId": "document-document-fields-uid-pre_delete:POST",
        "description": "Get info about related objects for ready-to-delete document type.",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document field.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldDetail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldDetail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentFieldDetail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-types/{uid}/clone/": {
      "post": {
        "operationId": "document-document-types-uid-clone:POST",
        "description": "Clone existing Document Type and its fields",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document type.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloneDocumentTypeRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CloneDocumentTypeRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CloneDocumentTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTypeDetail"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-types/{uid}/pre_delete/": {
      "post": {
        "operationId": "document-document-types-uid-pre_delete:POST",
        "description": "Get info about related objects for ready-to-delete document type.",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this document type.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeDetail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeDetail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeDetail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/annotations/suggest/": {
      "post": {
        "operationId": "document-annotations-suggest:POST",
        "description": "Suggest field value before creating an annotation.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationSuggestRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationSuggestRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationSuggestRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotation"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/mark_delete/": {
      "post": {
        "operationId": "document-project-project_pk-documents-mark_delete:POST",
        "description": "Method marks a number of documents for deleting. These marked documents will become hidden in API.\n:param request: provide a list of document ids here: document_ids: [...]\n:param kwargs:\n:return: OK or 404",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/project/{project_pk}/documents/unmark_delete/": {
      "post": {
        "operationId": "document-project-project_pk-documents-unmark_delete:POST",
        "description": "Method recovers documents, marked for deleting. These documents will become visible in API.\n:param request: provide a list of document ids here: document_ids: [...]\n:param kwargs:\n:return: OK or 404",
        "parameters": [
          {
            "name": "project_pk",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkUnmarkForDeleteDocumentsResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/dump/dump-fixture/": {
      "post": {
        "operationId": "dump-dump-fixture:POST",
        "description": "Download model fixture",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DumpFixture"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DumpFixture"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DumpFixture"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "Json file with dumped fixture"
                }
              }
            }
          }
        },
        "tags": [
          "dump",
          "v1"
        ]
      }
    },
    "/api/v1/dump/load-fixture/": {
      "post": {
        "operationId": "dump-load-fixture:POST",
        "description": "Install model fixtures",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadFixture"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/LoadFixture"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/LoadFixture"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "dump",
          "v1"
        ]
      }
    },
    "/api/v1/logging/log_message/": {
      "post": {
        "operationId": "logging-log_message:POST",
        "description": "Log provided data",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoggingAPIViewRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/LoggingAPIViewRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/LoggingAPIViewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "logging",
          "v1"
        ]
      }
    },
    "/api/v1/users/verify-token/": {
      "post": {
        "operationId": "users-verify-token:POST",
        "description": "Get user data for provided auth_token.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyAuthTokenRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/VerifyAuthTokenRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/VerifyAuthTokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyAuthTokenResponse"
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "users",
          "v1"
        ]
      }
    },
    "/api/v1/document/document-types/import_doc_type/": {
      "put": {
        "operationId": "document-document-types-import_doc_type:PUT",
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeImportRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeImportRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTypeImportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTypeImportResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/annotations/annotate/": {
      "put": {
        "operationId": "document-annotations-annotate:PUT",
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotationUpdateResponse"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/document/annotations/batch/": {
      "put": {
        "operationId": "document-annotations-batch:PUT",
        "description": "Create batch of annotations\n\n    PUT Params:\n         - operation_uid: uid\n         - action: str [\"save\", \"delete\"]\n         - id: int - PK of DocumentFieldValue\n         - data: {\"document\": id, \"field\": uid, \"location_start\": int, \"location_end\": int, \"value\": val}",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AnnotationBatchRequest"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AnnotationBatchRequest"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AnnotationBatchRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnnotationBatchResponse"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "document",
          "v1"
        ]
      }
    },
    "/api/v1/tus/upload-session/{upload_session_id}/upload/{guid}/": {
      "patch": {
        "operationId": "tus-upload-session-upload_session_id-upload-guid:PATCH",
        "description": "Transfer file data",
        "parameters": [
          {
            "name": "upload_session_id",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "header",
            "required": false,
            "description": "Upload a file even if it exists.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Upload-Offset",
            "in": "header",
            "required": true,
            "description": "Upload offset, bytes.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Tus-Resumable",
            "in": "header",
            "required": true,
            "description": "1.0.0",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/offset+octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "204": {
            "headers": {
              "Upload-Offset": {
                "schema": {
                  "type": "integer"
                }
              },
              "Upload-Expires": {
                "schema": {
                  "type": "string"
                }
              },
              "Tus-Resumable": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "460": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "tus",
          "v1"
        ]
      }
    },
    "/api/v1/project/upload-session/{uid}/cancel/": {
      "delete": {
        "operationId": "project-upload-session-uid-cancel:DELETE",
        "description": "Delete a file from session\n\n    Params:\n        - filename: str",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this upload session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    },
    "/api/v1/project/upload-session/{uid}/delete-file/": {
      "delete": {
        "operationId": "project-upload-session-uid-delete-file:DELETE",
        "description": "Delete a file from session\n\n    Params:\n        - filename: str",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "description": "A UUID string identifying this upload session.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadSessionDeleteFileRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "project",
          "v1"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "RestAuthCommonResponse": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string"
          }
        },
        "required": [
          "detail"
        ]
      },
      "SimilarityPOSTObjectResponse": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string"
          },
          "confirm": {
            "type": "boolean"
          }
        },
        "required": [
          "detail"
        ]
      },
      "TaskQueue": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "documents": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "documents_data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "pk": {
                  "type": "integer",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 1024
                },
                "description": {
                  "type": "string",
                  "nullable": true
                },
                "document_type": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "readOnly": true
          },
          "completed_documents": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "completed_documents_data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "pk": {
                  "type": "integer",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 1024
                },
                "description": {
                  "type": "string",
                  "nullable": true
                },
                "document_type": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "readOnly": true
          },
          "reviewers": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "reviewers_data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "pk": {
                  "type": "integer",
                  "readOnly": true
                },
                "username": {
                  "type": "string",
                  "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                  "pattern": "^[\\w.@+-]+$",
                  "maxLength": 150
                },
                "role": {
                  "type": "integer",
                  "nullable": true
                }
              },
              "required": [
                "username"
              ]
            },
            "readOnly": true
          },
          "progress": {
            "type": "string",
            "readOnly": true
          },
          "data": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ProjectList": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "status": {
            "type": "integer"
          },
          "status_data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "maxLength": 100
              },
              "code": {
                "type": "string",
                "nullable": true,
                "maxLength": 100
              },
              "order": {
                "type": "integer",
                "maximum": 32767,
                "minimum": 0
              },
              "is_active": {
                "type": "boolean"
              },
              "group": {
                "type": "integer",
                "nullable": true
              }
            },
            "required": [
              "name",
              "order"
            ],
            "readOnly": true
          },
          "type": {
            "type": "string"
          },
          "type_data": {
            "type": "object",
            "properties": {
              "uid": {
                "type": "string",
                "format": "uuid",
                "readOnly": true
              },
              "code": {
                "type": "string",
                "description": "Field codes must be lowercase, should start with a Latin letter, and contain \nonly Latin letters, digits, and underscores.",
                "maxLength": 50
              },
              "title": {
                "type": "string",
                "maxLength": 100
              }
            },
            "required": [
              "code",
              "title"
            ]
          },
          "count_of_documents": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "name",
          "type_data"
        ]
      },
      "ProjectStats": {
        "type": "object",
        "properties": {
          "project_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type_title": {
            "type": "string"
          },
          "documents_total": {
            "type": "integer"
          },
          "clauses_total": {
            "type": "integer"
          },
          "avg_ocr_grade": {
            "type": "integer",
            "nullable": true
          },
          "document_status_loaded": {
            "type": "integer"
          },
          "document_status_loaded_pcnt": {
            "type": "number"
          },
          "document_status_not_started": {
            "type": "integer"
          },
          "document_status_not_started_pcnt": {
            "type": "number"
          },
          "document_status_in_review": {
            "type": "integer"
          },
          "document_status_in_review_pcnt": {
            "type": "number"
          },
          "document_status_awaiting_qa": {
            "type": "integer"
          },
          "document_status_awaiting_qa_pcnt": {
            "type": "number"
          },
          "document_status_completed": {
            "type": "integer"
          },
          "document_status_completed_pcnt": {
            "type": "number"
          },
          "document_status_excluded": {
            "type": "integer"
          },
          "document_status_excluded_pcnt": {
            "type": "number"
          },
          "clause_status_unreviewed": {
            "type": "integer"
          },
          "clause_status_unreviewed_pcnt": {
            "type": "number"
          },
          "clause_status_accepted": {
            "type": "integer"
          },
          "clause_status_accepted_pcnt": {
            "type": "number"
          },
          "clause_status_rejected": {
            "type": "integer"
          },
          "clause_status_rejected_pcnt": {
            "type": "number"
          }
        },
        "required": [
          "project_id",
          "name",
          "type_title",
          "documents_total",
          "clauses_total",
          "avg_ocr_grade",
          "document_status_loaded",
          "document_status_loaded_pcnt",
          "document_status_not_started",
          "document_status_not_started_pcnt",
          "document_status_in_review",
          "document_status_in_review_pcnt",
          "document_status_awaiting_qa",
          "document_status_awaiting_qa_pcnt",
          "document_status_completed",
          "document_status_completed_pcnt",
          "document_status_excluded",
          "document_status_excluded_pcnt",
          "clause_status_unreviewed",
          "clause_status_unreviewed_pcnt",
          "clause_status_accepted",
          "clause_status_accepted_pcnt",
          "clause_status_rejected",
          "clause_status_rejected_pcnt"
        ]
      },
      "ProjectDetail": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "send_email_notification": {
            "type": "boolean"
          },
          "hide_clause_review": {
            "type": "boolean"
          },
          "status": {
            "type": "integer"
          },
          "status_data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "maxLength": 100
              },
              "code": {
                "type": "string",
                "nullable": true,
                "maxLength": 100
              },
              "order": {
                "type": "integer",
                "maximum": 32767,
                "minimum": 0
              },
              "is_active": {
                "type": "boolean"
              },
              "group": {
                "type": "integer",
                "nullable": true
              }
            },
            "required": [
              "name",
              "order"
            ],
            "readOnly": true
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "owners_data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "readOnly": true
                },
                "username": {
                  "type": "string",
                  "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                  "pattern": "^[\\w.@+-]+$",
                  "maxLength": 150
                },
                "last_name": {
                  "type": "string",
                  "maxLength": 150
                },
                "first_name": {
                  "type": "string",
                  "maxLength": 30
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "maxLength": 254
                },
                "is_superuser": {
                  "type": "boolean",
                  "description": "Designates that this user has all permissions without explicitly assigning them."
                },
                "is_staff": {
                  "type": "boolean",
                  "description": "Designates whether the user can log into this admin site."
                },
                "is_active": {
                  "type": "boolean",
                  "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
                },
                "name": {
                  "type": "string",
                  "maxLength": 255
                },
                "role": {
                  "type": "integer",
                  "nullable": true
                },
                "role_data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "code": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "abbr": {
                      "type": "string",
                      "readOnly": true
                    },
                    "order": {
                      "type": "integer",
                      "maximum": 32767,
                      "minimum": 0
                    },
                    "is_admin": {
                      "type": "boolean"
                    },
                    "is_top_manager": {
                      "type": "boolean"
                    },
                    "is_manager": {
                      "type": "boolean"
                    },
                    "is_reviewer": {
                      "type": "string",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "name",
                    "code",
                    "order"
                  ]
                },
                "organization": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 100
                },
                "photo": {
                  "type": "string",
                  "readOnly": true
                },
                "permissions": {
                  "type": "object",
                  "readOnly": true
                },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
                }
              },
              "required": [
                "username"
              ]
            },
            "readOnly": true
          },
          "reviewers": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "reviewers_data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "readOnly": true
                },
                "username": {
                  "type": "string",
                  "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                  "pattern": "^[\\w.@+-]+$",
                  "maxLength": 150
                },
                "last_name": {
                  "type": "string",
                  "maxLength": 150
                },
                "first_name": {
                  "type": "string",
                  "maxLength": 30
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "maxLength": 254
                },
                "is_superuser": {
                  "type": "boolean",
                  "description": "Designates that this user has all permissions without explicitly assigning them."
                },
                "is_staff": {
                  "type": "boolean",
                  "description": "Designates whether the user can log into this admin site."
                },
                "is_active": {
                  "type": "boolean",
                  "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
                },
                "name": {
                  "type": "string",
                  "maxLength": 255
                },
                "role": {
                  "type": "integer",
                  "nullable": true
                },
                "role_data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "code": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "abbr": {
                      "type": "string",
                      "readOnly": true
                    },
                    "order": {
                      "type": "integer",
                      "maximum": 32767,
                      "minimum": 0
                    },
                    "is_admin": {
                      "type": "boolean"
                    },
                    "is_top_manager": {
                      "type": "boolean"
                    },
                    "is_manager": {
                      "type": "boolean"
                    },
                    "is_reviewer": {
                      "type": "string",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "name",
                    "code",
                    "order"
                  ]
                },
                "organization": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 100
                },
                "photo": {
                  "type": "string",
                  "readOnly": true
                },
                "permissions": {
                  "type": "object",
                  "readOnly": true
                },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
                }
              },
              "required": [
                "username"
              ]
            },
            "readOnly": true
          },
          "super_reviewers": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "super_reviewers_data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "readOnly": true
                },
                "username": {
                  "type": "string",
                  "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                  "pattern": "^[\\w.@+-]+$",
                  "maxLength": 150
                },
                "last_name": {
                  "type": "string",
                  "maxLength": 150
                },
                "first_name": {
                  "type": "string",
                  "maxLength": 30
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "maxLength": 254
                },
                "is_superuser": {
                  "type": "boolean",
                  "description": "Designates that this user has all permissions without explicitly assigning them."
                },
                "is_staff": {
                  "type": "boolean",
                  "description": "Designates whether the user can log into this admin site."
                },
                "is_active": {
                  "type": "boolean",
                  "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
                },
                "name": {
                  "type": "string",
                  "maxLength": 255
                },
                "role": {
                  "type": "integer",
                  "nullable": true
                },
                "role_data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "code": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "abbr": {
                      "type": "string",
                      "readOnly": true
                    },
                    "order": {
                      "type": "integer",
                      "maximum": 32767,
                      "minimum": 0
                    },
                    "is_admin": {
                      "type": "boolean"
                    },
                    "is_top_manager": {
                      "type": "boolean"
                    },
                    "is_manager": {
                      "type": "boolean"
                    },
                    "is_reviewer": {
                      "type": "string",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "name",
                    "code",
                    "order"
                  ]
                },
                "organization": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 100
                },
                "photo": {
                  "type": "string",
                  "readOnly": true
                },
                "permissions": {
                  "type": "object",
                  "readOnly": true
                },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
                }
              },
              "required": [
                "username"
              ]
            },
            "readOnly": true
          },
          "junior_reviewers": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "junior_reviewers_data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "readOnly": true
                },
                "username": {
                  "type": "string",
                  "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                  "pattern": "^[\\w.@+-]+$",
                  "maxLength": 150
                },
                "last_name": {
                  "type": "string",
                  "maxLength": 150
                },
                "first_name": {
                  "type": "string",
                  "maxLength": 30
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "maxLength": 254
                },
                "is_superuser": {
                  "type": "boolean",
                  "description": "Designates that this user has all permissions without explicitly assigning them."
                },
                "is_staff": {
                  "type": "boolean",
                  "description": "Designates whether the user can log into this admin site."
                },
                "is_active": {
                  "type": "boolean",
                  "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
                },
                "name": {
                  "type": "string",
                  "maxLength": 255
                },
                "role": {
                  "type": "integer",
                  "nullable": true
                },
                "role_data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "code": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "abbr": {
                      "type": "string",
                      "readOnly": true
                    },
                    "order": {
                      "type": "integer",
                      "maximum": 32767,
                      "minimum": 0
                    },
                    "is_admin": {
                      "type": "boolean"
                    },
                    "is_top_manager": {
                      "type": "boolean"
                    },
                    "is_manager": {
                      "type": "boolean"
                    },
                    "is_reviewer": {
                      "type": "string",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "name",
                    "code",
                    "order"
                  ]
                },
                "organization": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 100
                },
                "photo": {
                  "type": "string",
                  "readOnly": true
                },
                "permissions": {
                  "type": "object",
                  "readOnly": true
                },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
                }
              },
              "required": [
                "username"
              ]
            },
            "readOnly": true
          },
          "type": {
            "type": "string"
          },
          "type_data": {
            "type": "object",
            "properties": {
              "uid": {
                "type": "string",
                "format": "uuid",
                "readOnly": true
              },
              "code": {
                "type": "string",
                "description": "Field codes must be lowercase, should start with a Latin letter, and contain \nonly Latin letters, digits, and underscores.",
                "maxLength": 50
              },
              "title": {
                "type": "string",
                "maxLength": 100
              }
            },
            "required": [
              "code",
              "title"
            ]
          },
          "progress": {
            "type": "string",
            "readOnly": true
          },
          "user_permissions": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "name",
          "type_data"
        ]
      },
      "ProjectAnnotationsAssigneesResponse": {
        "type": "object",
        "properties": {
          "assignee_id": {
            "type": "integer"
          },
          "assignee_name": {
            "type": "string"
          },
          "annotations_count": {
            "type": "integer"
          },
          "annotation_uids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": [
          "assignee_id",
          "assignee_name",
          "annotations_count",
          "annotation_uids"
        ]
      },
      "ProjectDocumentsAssigneesResponse": {
        "type": "object",
        "properties": {
          "assignee_id": {
            "type": "integer"
          },
          "assignee_name": {
            "type": "string"
          },
          "documents_count": {
            "type": "integer"
          },
          "document_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "assignee_id",
          "assignee_name",
          "documents_count",
          "document_ids"
        ]
      },
      "ProjectProgressResponse": {
        "type": "object",
        "properties": {
          "project_has_completed_sessions": {
            "type": "boolean"
          },
          "user_uncompleted_session_progress": {
            "type": "object",
            "nullable": true
          },
          "other_uncompleted_session_progress": {
            "type": "object",
            "nullable": true
          },
          "clustering": {
            "type": "string"
          },
          "require_clustering": {
            "type": "boolean"
          }
        },
        "required": [
          "project_has_completed_sessions",
          "user_uncompleted_session_progress",
          "other_uncompleted_session_progress"
        ]
      },
      "ProjectClustering": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "document_clusters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "pk": {
                  "type": "integer",
                  "readOnly": true
                },
                "cluster_id": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": -2147483648
                },
                "name": {
                  "type": "string",
                  "maxLength": 300
                },
                "documents_count": {
                  "type": "integer",
                  "readOnly": true
                }
              },
              "required": [
                "name"
              ]
            },
            "readOnly": true
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "readOnly": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "project_clusters_documents_count": {
            "type": "integer"
          }
        },
        "required": [
          "project_clusters_documents_count"
        ]
      },
      "UploadSessionDetail": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "project": {
            "type": "object",
            "properties": {
              "pk": {
                "type": "integer",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "maxLength": 100
              },
              "description": {
                "type": "string",
                "nullable": true
              },
              "send_email_notification": {
                "type": "boolean"
              },
              "hide_clause_review": {
                "type": "boolean"
              },
              "status": {
                "type": "integer"
              },
              "status_data": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "readOnly": true
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "code": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 100
                  },
                  "order": {
                    "type": "integer",
                    "maximum": 32767,
                    "minimum": 0
                  },
                  "is_active": {
                    "type": "boolean"
                  },
                  "group": {
                    "type": "integer",
                    "nullable": true
                  }
                },
                "required": [
                  "name",
                  "order"
                ],
                "readOnly": true
              },
              "owners": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "owners_data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "username": {
                      "type": "string",
                      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                      "pattern": "^[\\w.@+-]+$",
                      "maxLength": 150
                    },
                    "last_name": {
                      "type": "string",
                      "maxLength": 150
                    },
                    "first_name": {
                      "type": "string",
                      "maxLength": 30
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "maxLength": 254
                    },
                    "is_superuser": {
                      "type": "boolean",
                      "description": "Designates that this user has all permissions without explicitly assigning them."
                    },
                    "is_staff": {
                      "type": "boolean",
                      "description": "Designates whether the user can log into this admin site."
                    },
                    "is_active": {
                      "type": "boolean",
                      "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 255
                    },
                    "role": {
                      "type": "integer",
                      "nullable": true
                    },
                    "role_data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "readOnly": true
                        },
                        "name": {
                          "type": "string",
                          "maxLength": 50
                        },
                        "code": {
                          "type": "string",
                          "maxLength": 50
                        },
                        "abbr": {
                          "type": "string",
                          "readOnly": true
                        },
                        "order": {
                          "type": "integer",
                          "maximum": 32767,
                          "minimum": 0
                        },
                        "is_admin": {
                          "type": "boolean"
                        },
                        "is_top_manager": {
                          "type": "boolean"
                        },
                        "is_manager": {
                          "type": "boolean"
                        },
                        "is_reviewer": {
                          "type": "string",
                          "readOnly": true
                        }
                      },
                      "required": [
                        "name",
                        "code",
                        "order"
                      ]
                    },
                    "organization": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 100
                    },
                    "photo": {
                      "type": "string",
                      "readOnly": true
                    },
                    "permissions": {
                      "type": "object",
                      "readOnly": true
                    },
                    "groups": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
                    }
                  },
                  "required": [
                    "username"
                  ]
                },
                "readOnly": true
              },
              "reviewers": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "reviewers_data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "username": {
                      "type": "string",
                      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                      "pattern": "^[\\w.@+-]+$",
                      "maxLength": 150
                    },
                    "last_name": {
                      "type": "string",
                      "maxLength": 150
                    },
                    "first_name": {
                      "type": "string",
                      "maxLength": 30
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "maxLength": 254
                    },
                    "is_superuser": {
                      "type": "boolean",
                      "description": "Designates that this user has all permissions without explicitly assigning them."
                    },
                    "is_staff": {
                      "type": "boolean",
                      "description": "Designates whether the user can log into this admin site."
                    },
                    "is_active": {
                      "type": "boolean",
                      "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 255
                    },
                    "role": {
                      "type": "integer",
                      "nullable": true
                    },
                    "role_data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "readOnly": true
                        },
                        "name": {
                          "type": "string",
                          "maxLength": 50
                        },
                        "code": {
                          "type": "string",
                          "maxLength": 50
                        },
                        "abbr": {
                          "type": "string",
                          "readOnly": true
                        },
                        "order": {
                          "type": "integer",
                          "maximum": 32767,
                          "minimum": 0
                        },
                        "is_admin": {
                          "type": "boolean"
                        },
                        "is_top_manager": {
                          "type": "boolean"
                        },
                        "is_manager": {
                          "type": "boolean"
                        },
                        "is_reviewer": {
                          "type": "string",
                          "readOnly": true
                        }
                      },
                      "required": [
                        "name",
                        "code",
                        "order"
                      ]
                    },
                    "organization": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 100
                    },
                    "photo": {
                      "type": "string",
                      "readOnly": true
                    },
                    "permissions": {
                      "type": "object",
                      "readOnly": true
                    },
                    "groups": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
                    }
                  },
                  "required": [
                    "username"
                  ]
                },
                "readOnly": true
              },
              "super_reviewers": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "super_reviewers_data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "username": {
                      "type": "string",
                      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                      "pattern": "^[\\w.@+-]+$",
                      "maxLength": 150
                    },
                    "last_name": {
                      "type": "string",
                      "maxLength": 150
                    },
                    "first_name": {
                      "type": "string",
                      "maxLength": 30
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "maxLength": 254
                    },
                    "is_superuser": {
                      "type": "boolean",
                      "description": "Designates that this user has all permissions without explicitly assigning them."
                    },
                    "is_staff": {
                      "type": "boolean",
                      "description": "Designates whether the user can log into this admin site."
                    },
                    "is_active": {
                      "type": "boolean",
                      "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 255
                    },
                    "role": {
                      "type": "integer",
                      "nullable": true
                    },
                    "role_data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "readOnly": true
                        },
                        "name": {
                          "type": "string",
                          "maxLength": 50
                        },
                        "code": {
                          "type": "string",
                          "maxLength": 50
                        },
                        "abbr": {
                          "type": "string",
                          "readOnly": true
                        },
                        "order": {
                          "type": "integer",
                          "maximum": 32767,
                          "minimum": 0
                        },
                        "is_admin": {
                          "type": "boolean"
                        },
                        "is_top_manager": {
                          "type": "boolean"
                        },
                        "is_manager": {
                          "type": "boolean"
                        },
                        "is_reviewer": {
                          "type": "string",
                          "readOnly": true
                        }
                      },
                      "required": [
                        "name",
                        "code",
                        "order"
                      ]
                    },
                    "organization": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 100
                    },
                    "photo": {
                      "type": "string",
                      "readOnly": true
                    },
                    "permissions": {
                      "type": "object",
                      "readOnly": true
                    },
                    "groups": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
                    }
                  },
                  "required": [
                    "username"
                  ]
                },
                "readOnly": true
              },
              "junior_reviewers": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "junior_reviewers_data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "username": {
                      "type": "string",
                      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                      "pattern": "^[\\w.@+-]+$",
                      "maxLength": 150
                    },
                    "last_name": {
                      "type": "string",
                      "maxLength": 150
                    },
                    "first_name": {
                      "type": "string",
                      "maxLength": 30
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "maxLength": 254
                    },
                    "is_superuser": {
                      "type": "boolean",
                      "description": "Designates that this user has all permissions without explicitly assigning them."
                    },
                    "is_staff": {
                      "type": "boolean",
                      "description": "Designates whether the user can log into this admin site."
                    },
                    "is_active": {
                      "type": "boolean",
                      "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 255
                    },
                    "role": {
                      "type": "integer",
                      "nullable": true
                    },
                    "role_data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "readOnly": true
                        },
                        "name": {
                          "type": "string",
                          "maxLength": 50
                        },
                        "code": {
                          "type": "string",
                          "maxLength": 50
                        },
                        "abbr": {
                          "type": "string",
                          "readOnly": true
                        },
                        "order": {
                          "type": "integer",
                          "maximum": 32767,
                          "minimum": 0
                        },
                        "is_admin": {
                          "type": "boolean"
                        },
                        "is_top_manager": {
                          "type": "boolean"
                        },
                        "is_manager": {
                          "type": "boolean"
                        },
                        "is_reviewer": {
                          "type": "string",
                          "readOnly": true
                        }
                      },
                      "required": [
                        "name",
                        "code",
                        "order"
                      ]
                    },
                    "organization": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 100
                    },
                    "photo": {
                      "type": "string",
                      "readOnly": true
                    },
                    "permissions": {
                      "type": "object",
                      "readOnly": true
                    },
                    "groups": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
                    }
                  },
                  "required": [
                    "username"
                  ]
                },
                "readOnly": true
              },
              "type": {
                "type": "string"
              },
              "type_data": {
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true
                  },
                  "code": {
                    "type": "string",
                    "description": "Field codes must be lowercase, should start with a Latin letter, and contain \nonly Latin letters, digits, and underscores.",
                    "maxLength": 50
                  },
                  "title": {
                    "type": "string",
                    "maxLength": 100
                  }
                },
                "required": [
                  "code",
                  "title"
                ]
              },
              "progress": {
                "type": "string",
                "readOnly": true
              },
              "user_permissions": {
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "name",
              "type_data"
            ]
          },
          "created_by": {
            "type": "object",
            "properties": {
              "pk": {
                "type": "integer",
                "readOnly": true
              },
              "username": {
                "type": "string",
                "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                "pattern": "^[\\w.@+-]+$",
                "maxLength": 150
              },
              "role": {
                "type": "integer",
                "nullable": true
              }
            },
            "required": [
              "username"
            ]
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "document_type": {
            "type": "string",
            "readOnly": true
          },
          "progress": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "created_by"
        ]
      },
      "ProjectUploadSessionProgressResponse": {
        "type": "object",
        "properties": {
          "project_id": {
            "type": "integer"
          },
          "document_tasks_progress": {
            "type": "number",
            "nullable": true
          },
          "document_tasks_progress_total": {
            "type": "number",
            "nullable": true
          },
          "documents_total_size": {
            "type": "integer"
          },
          "session_status": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "project_id",
          "document_tasks_progress",
          "document_tasks_progress_total",
          "documents_total_size",
          "session_status"
        ]
      },
      "ProjectClusteringStatusResponse": {
        "type": "object",
        "properties": {
          "document_clusters": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "project_clusters_documents_count": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "document_clusters",
          "project_clusters_documents_count",
          "status"
        ]
      },
      "GeoEntityList": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "entity_id": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 0
          },
          "name": {
            "type": "string",
            "maxLength": 1024
          },
          "priority": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "category": {
            "type": "string",
            "maxLength": 1024
          },
          "alias": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "entity_id",
          "name",
          "category"
        ]
      },
      "Party": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 1024
          },
          "type": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "type_abbr": {
            "type": "string",
            "nullable": true,
            "maxLength": 30
          },
          "type_label": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "type_description": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "type_abbr"
        ]
      },
      "TermUsage": {
        "type": "object",
        "properties": {
          "term__term": {
            "type": "string",
            "readOnly": true
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "GeoEntityUsage": {
        "type": "object",
        "properties": {
          "entity__name": {
            "type": "string",
            "readOnly": true
          },
          "entity__category": {
            "type": "string",
            "readOnly": true
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "GeoAliasUsage": {
        "type": "object",
        "properties": {
          "alias__alias": {
            "type": "string",
            "readOnly": true
          },
          "alias__locale": {
            "type": "string",
            "readOnly": true
          },
          "alias__type": {
            "type": "string",
            "readOnly": true
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "alias__entity__name": {
            "type": "string",
            "readOnly": true
          },
          "alias__entity__category": {
            "type": "string",
            "readOnly": true
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Typeahead": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string"
          }
        },
        "required": [
          "q"
        ]
      },
      "PartyUsage": {
        "type": "object",
        "properties": {
          "party__name": {
            "type": "string",
            "readOnly": true
          },
          "party__type_abbr": {
            "type": "string",
            "readOnly": true
          },
          "party__pk": {
            "type": "string",
            "readOnly": true
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "DateUsage": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "date"
        ]
      },
      "DateUsageTimeline": {
        "type": "object",
        "properties": {
          "document_id": {
            "type": "integer"
          },
          "per_month": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "DateUsageCalendar": {
        "type": "object",
        "properties": {
          "document_id": {
            "type": "integer"
          }
        }
      },
      "DateDurationUsage": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "nullable": true
          },
          "amount_str": {
            "type": "string",
            "nullable": true,
            "maxLength": 300
          },
          "duration_type": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "duration_days": {
            "type": "number",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "DefinitionUsage": {
        "type": "object",
        "properties": {
          "definition": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "definition"
        ]
      },
      "CourtUsage": {
        "type": "object",
        "properties": {
          "court__name": {
            "type": "string",
            "readOnly": true
          },
          "court__alias": {
            "type": "string",
            "readOnly": true
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "CurrencyUsage": {
        "type": "object",
        "properties": {
          "usage_type": {
            "type": "string",
            "maxLength": 1024
          },
          "currency": {
            "type": "string",
            "maxLength": 1024
          },
          "amount": {
            "type": "number",
            "nullable": true
          },
          "amount_str": {
            "type": "string",
            "nullable": true,
            "maxLength": 300
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "usage_type",
          "currency"
        ]
      },
      "RegulationUsage": {
        "type": "object",
        "properties": {
          "regulation_type": {
            "type": "string",
            "maxLength": 128
          },
          "regulation_name": {
            "type": "string",
            "maxLength": 1024
          },
          "entity__name": {
            "type": "string",
            "readOnly": true
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "regulation_type",
          "regulation_name"
        ]
      },
      "AmountUsage": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "nullable": true
          },
          "amount_str": {
            "type": "string",
            "nullable": true,
            "maxLength": 300
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "DistanceUsage": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "nullable": true
          },
          "distance_type": {
            "type": "string",
            "maxLength": 1024
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "distance_type"
        ]
      },
      "PercentUsage": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "nullable": true
          },
          "unit_type": {
            "type": "string",
            "maxLength": 1024
          },
          "total": {
            "type": "number",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "unit_type"
        ]
      },
      "RatioUsage": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "nullable": true
          },
          "amount2": {
            "type": "number",
            "nullable": true
          },
          "total": {
            "type": "number",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "CitationUsage": {
        "type": "object",
        "properties": {
          "volume": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "reporter": {
            "type": "string",
            "maxLength": 1024
          },
          "reporter_full_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "page": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "page2": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "court": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "year": {
            "type": "integer",
            "maximum": 32767,
            "nullable": true,
            "minimum": 0
          },
          "citation_str": {
            "type": "string",
            "maxLength": 1024
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "volume",
          "reporter",
          "page",
          "citation_str"
        ]
      },
      "CopyrightUsage": {
        "type": "object",
        "properties": {
          "copyright_str": {
            "type": "string",
            "maxLength": 200
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "copyright_str"
        ]
      },
      "TrademarkUsage": {
        "type": "object",
        "properties": {
          "trademark": {
            "type": "string",
            "maxLength": 200
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "trademark"
        ]
      },
      "UrlUsage": {
        "type": "object",
        "properties": {
          "source_url": {
            "type": "string",
            "maxLength": 1000
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_start": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__location_end": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "source_url"
        ]
      },
      "TextUnitClassification": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__language": {
            "type": "string",
            "readOnly": true
          },
          "class_name": {
            "type": "string",
            "maxLength": 1024
          },
          "class_value": {
            "type": "string",
            "maxLength": 1024
          },
          "user__username": {
            "type": "string",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "class_name",
          "class_value"
        ]
      },
      "TextUnitClassifier": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 1024
          },
          "version": {
            "type": "string",
            "maxLength": 1024
          },
          "class_name": {
            "type": "string",
            "maxLength": 1024
          },
          "is_active": {
            "type": "boolean"
          },
          "suggestions": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "name",
          "version",
          "class_name"
        ]
      },
      "TextUnitClassifierSuggestion": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__document_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__document__description": {
            "type": "string",
            "readOnly": true
          },
          "text_unit__pk": {
            "type": "string",
            "readOnly": true
          },
          "class_name": {
            "type": "string",
            "maxLength": 1024
          },
          "class_value": {
            "type": "string",
            "maxLength": 1024
          },
          "classifier_run": {
            "type": "string",
            "format": "date-time"
          },
          "classifier_confidence": {
            "type": "number"
          }
        },
        "required": [
          "class_name",
          "class_value"
        ]
      },
      "DocumentCluster": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "cluster_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "name": {
            "type": "string",
            "maxLength": 300
          },
          "self_name": {
            "type": "string",
            "maxLength": 200
          },
          "description": {
            "type": "string",
            "maxLength": 300
          },
          "cluster_by": {
            "type": "string",
            "maxLength": 100
          },
          "using": {
            "type": "string",
            "maxLength": 20
          },
          "created_date": {
            "type": "string",
            "format": "date-time"
          },
          "documents_count": {
            "type": "string",
            "readOnly": true
          },
          "document_data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "pk": {
                  "type": "integer",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 1024
                },
                "document_type": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "readOnly": true
          }
        },
        "required": [
          "name",
          "self_name",
          "description",
          "cluster_by",
          "using"
        ]
      },
      "TextUnitCluster": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "cluster_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "name": {
            "type": "string",
            "maxLength": 300
          },
          "self_name": {
            "type": "string",
            "maxLength": 200
          },
          "description": {
            "type": "string",
            "maxLength": 300
          },
          "cluster_by": {
            "type": "string",
            "maxLength": 100
          },
          "using": {
            "type": "string",
            "maxLength": 20
          },
          "created_date": {
            "type": "string",
            "format": "date-time"
          },
          "text_unit_count": {
            "type": "string",
            "readOnly": true
          },
          "text_unit_data": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "name",
          "self_name",
          "description",
          "cluster_by",
          "using"
        ]
      },
      "DocumentSimilarity": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "document_a__name": {
            "type": "string",
            "readOnly": true
          },
          "document_a__description": {
            "type": "string",
            "readOnly": true
          },
          "document_a__pk": {
            "type": "string",
            "readOnly": true
          },
          "document_a__document_type": {
            "type": "string",
            "readOnly": true
          },
          "document_b__name": {
            "type": "string",
            "readOnly": true
          },
          "document_b__description": {
            "type": "string",
            "readOnly": true
          },
          "document_b__pk": {
            "type": "string",
            "readOnly": true
          },
          "document_b__document_type": {
            "type": "string",
            "readOnly": true
          },
          "similarity": {
            "type": "string",
            "format": "decimal",
            "multipleOf": 0.01,
            "maximum": 1000,
            "minimum": -1000
          }
        },
        "required": [
          "similarity"
        ]
      },
      "TextUnitSimilarity": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "text_unit_a__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit_a__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit_a__language": {
            "type": "string",
            "readOnly": true
          },
          "text_unit_a__textunittext__text": {
            "type": "string",
            "readOnly": true
          },
          "text_unit_a__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit_a__document__name": {
            "type": "string",
            "readOnly": true
          },
          "text_unit_b__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit_b__unit_type": {
            "type": "string",
            "readOnly": true
          },
          "text_unit_b__language": {
            "type": "string",
            "readOnly": true
          },
          "text_unit_b__textunittext__text": {
            "type": "string",
            "readOnly": true
          },
          "text_unit_b__document__pk": {
            "type": "string",
            "readOnly": true
          },
          "text_unit_b__document__name": {
            "type": "string",
            "readOnly": true
          },
          "similarity": {
            "type": "string",
            "format": "decimal",
            "multipleOf": 0.01,
            "maximum": 1000,
            "minimum": -1000
          }
        },
        "required": [
          "similarity"
        ]
      },
      "PartySimilarity": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "party_a__name": {
            "type": "string",
            "readOnly": true
          },
          "party_a__description": {
            "type": "string",
            "readOnly": true
          },
          "party_a__pk": {
            "type": "string",
            "readOnly": true
          },
          "party_a__type_abbr": {
            "type": "string",
            "readOnly": true
          },
          "party_b__name": {
            "type": "string",
            "readOnly": true
          },
          "party_b__pk": {
            "type": "string",
            "readOnly": true
          },
          "party_b__type_abbr": {
            "type": "string",
            "readOnly": true
          },
          "similarity": {
            "type": "string",
            "format": "decimal",
            "multipleOf": 0.01,
            "maximum": 1000,
            "minimum": -1000
          }
        },
        "required": [
          "similarity"
        ]
      },
      "Task": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "string",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 100
          },
          "date_start": {
            "type": "string",
            "format": "date-time"
          },
          "date_work_start": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "user__username": {
            "type": "string",
            "readOnly": true
          },
          "date_done": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "duration": {
            "type": "string",
            "readOnly": true
          },
          "progress": {
            "type": "integer",
            "maximum": 2147483647,
            "nullable": true,
            "minimum": 0
          },
          "status": {
            "enum": [
              "FAILURE",
              "PENDING",
              "RECEIVED",
              "RETRY",
              "REVOKED",
              "STARTED",
              "SUCCESS"
            ],
            "type": "string",
            "nullable": true
          },
          "has_error": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Action": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "username": {
                "type": "string",
                "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                "pattern": "^[\\w.@+-]+$",
                "maxLength": 150
              },
              "last_name": {
                "type": "string",
                "maxLength": 150
              },
              "first_name": {
                "type": "string",
                "maxLength": 30
              },
              "email": {
                "type": "string",
                "format": "email",
                "maxLength": 254
              },
              "is_superuser": {
                "type": "boolean",
                "description": "Designates that this user has all permissions without explicitly assigning them."
              },
              "is_staff": {
                "type": "boolean",
                "description": "Designates whether the user can log into this admin site."
              },
              "is_active": {
                "type": "boolean",
                "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
              },
              "name": {
                "type": "string",
                "maxLength": 255
              },
              "role": {
                "type": "integer",
                "nullable": true
              },
              "role_data": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "readOnly": true
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 50
                  },
                  "code": {
                    "type": "string",
                    "maxLength": 50
                  },
                  "abbr": {
                    "type": "string",
                    "readOnly": true
                  },
                  "order": {
                    "type": "integer",
                    "maximum": 32767,
                    "minimum": 0
                  },
                  "is_admin": {
                    "type": "boolean"
                  },
                  "is_top_manager": {
                    "type": "boolean"
                  },
                  "is_manager": {
                    "type": "boolean"
                  },
                  "is_reviewer": {
                    "type": "string",
                    "readOnly": true
                  }
                },
                "required": [
                  "name",
                  "code",
                  "order"
                ]
              },
              "organization": {
                "type": "string",
                "nullable": true,
                "maxLength": 100
              },
              "photo": {
                "type": "string",
                "readOnly": true
              },
              "permissions": {
                "type": "object",
                "readOnly": true
              },
              "groups": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
              }
            },
            "required": [
              "username"
            ]
          },
          "content_type": {
            "type": "integer"
          },
          "object_pk": {
            "type": "string",
            "nullable": true,
            "maxLength": 36
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "app_label": {
            "type": "string",
            "nullable": true,
            "maxLength": 20
          },
          "model_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "object_str": {
            "type": "string",
            "nullable": true,
            "maxLength": 200
          }
        },
        "required": [
          "user",
          "content_type"
        ]
      },
      "ReviewStatusGroup": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "nullable": true,
            "maxLength": 100
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 0
          },
          "is_active": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "order"
        ]
      },
      "ReviewStatusDetail": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "nullable": true,
            "maxLength": 100
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 0
          },
          "group": {
            "type": "integer",
            "nullable": true
          },
          "group_data": {
            "type": "object",
            "properties": {
              "pk": {
                "type": "integer",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "maxLength": 100
              },
              "code": {
                "type": "string",
                "nullable": true,
                "maxLength": 100
              },
              "order": {
                "type": "integer",
                "maximum": 32767,
                "minimum": 0
              },
              "is_active": {
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "order"
            ]
          },
          "is_active": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "order",
          "group_data"
        ]
      },
      "MenuGroup": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Menu item group (folder) name.",
            "maxLength": 100
          },
          "public": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 0
          },
          "user": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "name"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
            "pattern": "^[\\w.@+-]+$",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "first_name": {
            "type": "string",
            "maxLength": 30
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 254
          },
          "is_superuser": {
            "type": "boolean",
            "description": "Designates that this user has all permissions without explicitly assigning them."
          },
          "is_staff": {
            "type": "boolean",
            "description": "Designates whether the user can log into this admin site."
          },
          "is_active": {
            "type": "boolean",
            "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "role": {
            "type": "integer",
            "nullable": true
          },
          "role_data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "maxLength": 50
              },
              "code": {
                "type": "string",
                "maxLength": 50
              },
              "abbr": {
                "type": "string",
                "readOnly": true
              },
              "order": {
                "type": "integer",
                "maximum": 32767,
                "minimum": 0
              },
              "is_admin": {
                "type": "boolean"
              },
              "is_top_manager": {
                "type": "boolean"
              },
              "is_manager": {
                "type": "boolean"
              },
              "is_reviewer": {
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "name",
              "code",
              "order"
            ]
          },
          "organization": {
            "type": "string",
            "nullable": true,
            "maxLength": 100
          },
          "photo": {
            "type": "string",
            "readOnly": true
          },
          "permissions": {
            "type": "object",
            "readOnly": true
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
          }
        },
        "required": [
          "username"
        ]
      },
      "MenuItem": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Menu item name.",
            "maxLength": 100
          },
          "url": {
            "type": "string",
            "description": "Menu item name.",
            "maxLength": 200
          },
          "group": {
            "type": "integer",
            "nullable": true
          },
          "public": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 0
          },
          "user": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "name",
          "url"
        ]
      },
      "DocumentsForUser": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "document_type": {
            "type": "string",
            "nullable": true
          },
          "project": {
            "type": "integer",
            "nullable": true
          },
          "status_name": {
            "type": "string"
          }
        },
        "required": [
          "status_name"
        ]
      },
      "DocumentDownloadZipResponse": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "format": "uuid"
          },
          "detail": {
            "type": "string"
          }
        },
        "required": [
          "task_id",
          "detail"
        ]
      },
      "DocumentsForUserResponse": {
        "type": "object",
        "properties": {
          "total_documents": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "pk": {
                  "type": "integer",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 1024
                },
                "document_type": {
                  "type": "string",
                  "nullable": true
                },
                "project": {
                  "type": "integer",
                  "nullable": true
                },
                "status_name": {
                  "type": "string"
                }
              },
              "required": [
                "status_name"
              ]
            }
          }
        },
        "required": [
          "total_documents",
          "data"
        ]
      },
      "DocumentDetail": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "document_type": {
            "type": "string",
            "nullable": true
          },
          "file_size": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "folder": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "status": {
            "type": "integer",
            "nullable": true
          },
          "status_data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "maxLength": 100
              },
              "code": {
                "type": "string",
                "nullable": true,
                "maxLength": 100
              },
              "order": {
                "type": "integer",
                "maximum": 32767,
                "minimum": 0
              },
              "is_active": {
                "type": "boolean"
              },
              "group": {
                "type": "integer",
                "nullable": true
              }
            },
            "required": [
              "name",
              "order"
            ]
          },
          "available_statuses_data": {
            "type": "string",
            "readOnly": true
          },
          "assignee": {
            "type": "integer",
            "nullable": true
          },
          "assign_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "assignee_data": {
            "type": "object",
            "properties": {
              "pk": {
                "type": "integer",
                "readOnly": true
              },
              "first_name": {
                "type": "string",
                "maxLength": 30
              },
              "last_name": {
                "type": "string",
                "maxLength": 150
              },
              "username": {
                "type": "string",
                "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                "pattern": "^[\\w.@+-]+$",
                "maxLength": 150
              },
              "role": {
                "type": "integer",
                "nullable": true
              },
              "photo": {
                "type": "string",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "maxLength": 255
              }
            },
            "required": [
              "username"
            ],
            "nullable": true
          },
          "available_assignees_data": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true,
            "maxLength": 1024
          },
          "initial_annotation_id": {
            "type": "string",
            "readOnly": true
          },
          "page_locations": {
            "type": "string",
            "readOnly": true
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "pk": {
                  "type": "integer",
                  "readOnly": true
                },
                "note": {
                  "type": "string"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "pk": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "first_name": {
                      "type": "string",
                      "maxLength": 30
                    },
                    "last_name": {
                      "type": "string",
                      "maxLength": 150
                    },
                    "username": {
                      "type": "string",
                      "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                      "pattern": "^[\\w.@+-]+$",
                      "maxLength": 150
                    },
                    "role": {
                      "type": "integer",
                      "nullable": true
                    },
                    "photo": {
                      "type": "string",
                      "readOnly": true
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 255
                    }
                  },
                  "required": [
                    "username"
                  ],
                  "readOnly": true
                },
                "location_start": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": -2147483648,
                  "nullable": true
                },
                "location_end": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": -2147483648,
                  "nullable": true
                },
                "document_id": {
                  "type": "integer"
                },
                "field_value_id": {
                  "type": "integer"
                },
                "field_id": {
                  "type": "string"
                }
              },
              "required": [
                "note",
                "document_id"
              ]
            }
          },
          "field_values": {
            "type": "string",
            "readOnly": true
          },
          "field_value_objects": {
            "type": "string",
            "readOnly": true
          },
          "prev_id": {
            "type": "string",
            "readOnly": true
          },
          "next_id": {
            "type": "string",
            "readOnly": true
          },
          "sections": {
            "type": "string",
            "readOnly": true
          },
          "cluster_id": {
            "type": "string",
            "readOnly": true
          },
          "user_permissions": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "status_data",
          "assignee_data",
          "notes"
        ]
      },
      "DocumentDefinitions": {
        "type": "object",
        "properties": {
          "definition": {
            "type": "string"
          },
          "matches": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "descriptions": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "definition",
          "matches",
          "descriptions"
        ]
      },
      "DocumentNoteDetail": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "note": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "type": "object",
            "properties": {
              "pk": {
                "type": "integer",
                "readOnly": true
              },
              "first_name": {
                "type": "string",
                "maxLength": 30
              },
              "last_name": {
                "type": "string",
                "maxLength": 150
              },
              "username": {
                "type": "string",
                "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                "pattern": "^[\\w.@+-]+$",
                "maxLength": 150
              },
              "role": {
                "type": "integer",
                "nullable": true
              },
              "photo": {
                "type": "string",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "maxLength": 255
              }
            },
            "required": [
              "username"
            ],
            "readOnly": true
          },
          "location_start": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "location_end": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "document_id": {
            "type": "integer"
          },
          "field_value_id": {
            "type": "integer"
          },
          "field_id": {
            "type": "string"
          }
        },
        "required": [
          "note",
          "document_id"
        ]
      },
      "DocumentFieldList": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "document_type": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Field codes must be lowercase, should start with \na Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.",
            "maxLength": 50
          },
          "long_code": {
            "type": "string",
            "maxLength": 150
          },
          "title": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "enum": [
              "address",
              "amount",
              "boolean",
              "choice",
              "company",
              "date",
              "date_recurring",
              "datetime",
              "duration",
              "float",
              "geography",
              "int",
              "linked_documents",
              "money",
              "multi_choice",
              "percent",
              "person",
              "ratio",
              "related_info",
              "string",
              "string_no_word_wrap",
              "text"
            ],
            "type": "string"
          },
          "text_unit_type": {
            "enum": [
              "sentence",
              "paragraph",
              "section"
            ],
            "type": "string"
          },
          "value_detection_strategy": {
            "enum": [
              "disabled",
              "use_regexps_only",
              "regexp_table",
              "use_formula_only",
              "regexps_and_text_based_ml",
              "text_based_ml_only",
              "formula_and_fields_based_ml",
              "fields_based_ml_only",
              "fields_based_prob_ml_only",
              "python_coded_field",
              "field_based_regexps",
              "mlflow_model"
            ],
            "type": "string"
          },
          "python_coded_field": {
            "enum": [
              "generic.EarliestDate",
              "generic.LatestDate",
              "generic.MaxCurrency",
              "generic.Parties",
              "similarity.SimilarDocuments"
            ],
            "type": "string",
            "nullable": true
          },
          "classifier_init_script": {
            "type": "string",
            "nullable": true
          },
          "formula": {
            "type": "string",
            "nullable": true
          },
          "convert_decimals_to_floats_in_formula_args": {
            "type": "boolean",
            "description": "Floating point field values \n    are represented in Python Decimal type to avoid rounding problems in machine numbers representations. \n    Use this checkbox for converting them to Python float type before calculating the formula. \n    Float: 0.1 + 0.2 = 0.30000000000000004. Decimal: 0.1 + 0.2 = 0.3."
          },
          "value_regexp": {
            "type": "string",
            "nullable": true,
            "description": "This regular expression is run on the sentence \n    found by a Field Detector and extracts a specific string value from a Text Unit. The first matching group is used if\n     the regular expression returns multiple matching groups. This is only applicable to string fields."
          },
          "depends_on_fields": {
            "type": "string",
            "readOnly": true
          },
          "confidence": {
            "enum": [
              "High",
              "Medium",
              "Low"
            ],
            "type": "string",
            "nullable": true
          },
          "requires_text_annotations": {
            "type": "boolean"
          },
          "read_only": {
            "type": "boolean"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "maxLength": 100
              },
              "order": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": -2147483648
              }
            },
            "required": [
              "name"
            ],
            "readOnly": true
          },
          "family": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "code": {
                "type": "string",
                "nullable": true,
                "maxLength": 100
              },
              "title": {
                "type": "string",
                "maxLength": 100
              }
            },
            "required": [
              "title"
            ],
            "readOnly": true
          },
          "default_value": {
            "type": "object",
            "nullable": true,
            "description": "When populated, this \n    default value is displayed in the user interface\u2019s annotator sidebar for the associated field. If not populated, the\n     Field Value remains empty by default. Please wrap entries with quotes, example: \u201clandlord\u201d. This is only applicable\n      to Choice and Multichoice fields."
          },
          "choices": {
            "type": "string",
            "readOnly": true
          },
          "allow_values_not_specified_in_choices": {
            "type": "boolean"
          },
          "stop_words": {
            "type": "object",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "training_finished": {
            "type": "boolean"
          },
          "dirty": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 0
          },
          "trained_after_documents_number": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 1
          },
          "hidden_always": {
            "type": "boolean"
          },
          "hide_until_python": {
            "type": "string",
            "nullable": true
          },
          "hide_until_js": {
            "type": "string",
            "nullable": true
          },
          "detect_limit_unit": {
            "enum": [
              "NONE",
              "UNIT"
            ],
            "type": "string",
            "description": "Choose to add an upward limit to the amount of document text \n                                         ContraxSuite will search for this Document Field. For example, you can choose \n                                         to only search the first 10 paragraphs of text for the value required (this \n                                         often works best for values like \u201cCompany,\u201d \u201cExecution Date,\u201d or \u201cParties,\u201d\n                                         all of which typically appear in the first few paragraphs of a contract)."
          },
          "detect_limit_count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "description": "Specify the maximum \nrange for a bounded search. Field detection begins at the top of the document and continues until this Nth \n\"Detect limit unit\" element."
          },
          "display_yes_no": {
            "type": "boolean",
            "description": "Checking this box will \n    display \u201cYes\u201d if Related Info text is found, and display \u201cNo\u201d if no text is found."
          },
          "value_aware": {
            "type": "string",
            "readOnly": true
          },
          "created_by": {
            "type": "integer",
            "nullable": true
          },
          "modified_by": {
            "type": "integer",
            "nullable": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "vectorizer_stop_words": {
            "type": "string",
            "nullable": true,
            "description": "Stop words for vectorizers \n    user in field-based ML field detection. These stop words are excluded from going into the feature vector part \n    build based on this field. In addition to these words the standard sklearn \"english\" word list is used. \n    Format: each word on new line"
          },
          "unsure_choice_value": {
            "type": "string",
            "nullable": true,
            "description": "Makes sense for machine learning \n    strategies with \"Unsure\" category. The strategy will return this value if probabilities of all other categories \n    appear lower than the specified threshold.",
            "maxLength": 256
          },
          "unsure_thresholds_by_value": {
            "type": "object",
            "nullable": true,
            "description": "Makes sense for machine learning \n    strategies with \"Unsure\" category. The strategy will return concrete result (one of choice values) only if \n    the probability of the detected value is greater than this threshold. Otherwise the strategy returns None \n    or the choice value specified in \"Unsure choice value\" field. Format: { \"value1\": 0.9, \"value2\": 0.5, ...}.\n     Default: 0.9"
          },
          "mlflow_model_uri": {
            "type": "string",
            "nullable": true,
            "description": "MLFlow model URI \n    understandable by the MLFlow artifact downloading routines.",
            "maxLength": 1024
          },
          "mlflow_detect_on_document_level": {
            "type": "boolean",
            "description": "If true - whole \n    document text will be sent to the MLFlow model and the field value will be returned for the whole text with no\n    annotations. If false - each text unit will be sent separately."
          }
        },
        "required": [
          "document_type",
          "code",
          "title",
          "modified_by"
        ]
      },
      "DocumentFieldStatsResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          },
          "todo": {
            "type": "integer"
          },
          "sys_generated_confirm_correct": {
            "type": "integer"
          },
          "rejected": {
            "type": "integer"
          },
          "user_generated": {
            "type": "integer"
          },
          "deps_on_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "title",
          "total",
          "todo",
          "sys_generated_confirm_correct",
          "rejected",
          "user_generated",
          "deps_on_fields"
        ]
      },
      "DocumentFieldDetail": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "document_type": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Field codes must be lowercase, should start with \na Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.",
            "maxLength": 50
          },
          "long_code": {
            "type": "string",
            "maxLength": 150
          },
          "title": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "enum": [
              "address",
              "amount",
              "boolean",
              "choice",
              "company",
              "date",
              "date_recurring",
              "datetime",
              "duration",
              "float",
              "geography",
              "int",
              "linked_documents",
              "money",
              "multi_choice",
              "percent",
              "person",
              "ratio",
              "related_info",
              "string",
              "string_no_word_wrap",
              "text"
            ],
            "type": "string"
          },
          "text_unit_type": {
            "enum": [
              "sentence",
              "paragraph",
              "section"
            ],
            "type": "string"
          },
          "value_detection_strategy": {
            "enum": [
              "disabled",
              "use_regexps_only",
              "regexp_table",
              "use_formula_only",
              "regexps_and_text_based_ml",
              "text_based_ml_only",
              "formula_and_fields_based_ml",
              "fields_based_ml_only",
              "fields_based_prob_ml_only",
              "python_coded_field",
              "field_based_regexps",
              "mlflow_model"
            ],
            "type": "string"
          },
          "python_coded_field": {
            "enum": [
              "generic.EarliestDate",
              "generic.LatestDate",
              "generic.MaxCurrency",
              "generic.Parties",
              "similarity.SimilarDocuments"
            ],
            "type": "string",
            "nullable": true
          },
          "classifier_init_script": {
            "type": "string",
            "nullable": true
          },
          "formula": {
            "type": "string",
            "nullable": true
          },
          "convert_decimals_to_floats_in_formula_args": {
            "type": "boolean",
            "description": "Floating point field values \n    are represented in Python Decimal type to avoid rounding problems in machine numbers representations. \n    Use this checkbox for converting them to Python float type before calculating the formula. \n    Float: 0.1 + 0.2 = 0.30000000000000004. Decimal: 0.1 + 0.2 = 0.3."
          },
          "value_regexp": {
            "type": "string",
            "nullable": true,
            "description": "This regular expression is run on the sentence \n    found by a Field Detector and extracts a specific string value from a Text Unit. The first matching group is used if\n     the regular expression returns multiple matching groups. This is only applicable to string fields."
          },
          "depends_on_fields": {
            "type": "string",
            "readOnly": true
          },
          "confidence": {
            "enum": [
              "High",
              "Medium",
              "Low"
            ],
            "type": "string",
            "nullable": true
          },
          "requires_text_annotations": {
            "type": "boolean"
          },
          "read_only": {
            "type": "boolean"
          },
          "category": {
            "type": "string",
            "readOnly": true
          },
          "family": {
            "type": "integer",
            "nullable": true
          },
          "default_value": {
            "type": "object",
            "nullable": true,
            "description": "When populated, this \n    default value is displayed in the user interface\u2019s annotator sidebar for the associated field. If not populated, the\n     Field Value remains empty by default. Please wrap entries with quotes, example: \u201clandlord\u201d. This is only applicable\n      to Choice and Multichoice fields."
          },
          "choices": {
            "type": "string",
            "readOnly": true
          },
          "allow_values_not_specified_in_choices": {
            "type": "boolean"
          },
          "stop_words": {
            "type": "object",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "training_finished": {
            "type": "boolean"
          },
          "dirty": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 0
          },
          "trained_after_documents_number": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 1
          },
          "hidden_always": {
            "type": "boolean"
          },
          "hide_until_python": {
            "type": "string",
            "nullable": true
          },
          "hide_until_js": {
            "type": "string",
            "nullable": true
          },
          "detect_limit_unit": {
            "enum": [
              "NONE",
              "UNIT"
            ],
            "type": "string",
            "description": "Choose to add an upward limit to the amount of document text \n                                         ContraxSuite will search for this Document Field. For example, you can choose \n                                         to only search the first 10 paragraphs of text for the value required (this \n                                         often works best for values like \u201cCompany,\u201d \u201cExecution Date,\u201d or \u201cParties,\u201d\n                                         all of which typically appear in the first few paragraphs of a contract)."
          },
          "detect_limit_count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "description": "Specify the maximum \nrange for a bounded search. Field detection begins at the top of the document and continues until this Nth \n\"Detect limit unit\" element."
          },
          "display_yes_no": {
            "type": "boolean",
            "description": "Checking this box will \n    display \u201cYes\u201d if Related Info text is found, and display \u201cNo\u201d if no text is found."
          },
          "value_aware": {
            "type": "string",
            "readOnly": true
          },
          "created_by": {
            "type": "integer",
            "nullable": true
          },
          "modified_by": {
            "type": "integer",
            "nullable": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "vectorizer_stop_words": {
            "type": "string",
            "nullable": true,
            "description": "Stop words for vectorizers \n    user in field-based ML field detection. These stop words are excluded from going into the feature vector part \n    build based on this field. In addition to these words the standard sklearn \"english\" word list is used. \n    Format: each word on new line"
          },
          "unsure_choice_value": {
            "type": "string",
            "nullable": true,
            "description": "Makes sense for machine learning \n    strategies with \"Unsure\" category. The strategy will return this value if probabilities of all other categories \n    appear lower than the specified threshold.",
            "maxLength": 256
          },
          "unsure_thresholds_by_value": {
            "type": "object",
            "nullable": true,
            "description": "Makes sense for machine learning \n    strategies with \"Unsure\" category. The strategy will return concrete result (one of choice values) only if \n    the probability of the detected value is greater than this threshold. Otherwise the strategy returns None \n    or the choice value specified in \"Unsure choice value\" field. Format: { \"value1\": 0.9, \"value2\": 0.5, ...}.\n     Default: 0.9"
          },
          "mlflow_model_uri": {
            "type": "string",
            "nullable": true,
            "description": "MLFlow model URI \n    understandable by the MLFlow artifact downloading routines.",
            "maxLength": 1024
          },
          "mlflow_detect_on_document_level": {
            "type": "boolean",
            "description": "If true - whole \n    document text will be sent to the MLFlow model and the field value will be returned for the whole text with no\n    annotations. If false - each text unit will be sent separately."
          }
        },
        "required": [
          "document_type",
          "code",
          "title",
          "modified_by"
        ]
      },
      "DocumentTypeDetail": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "description": "Field codes must be lowercase, should start with a Latin letter, and contain \nonly Latin letters, digits, and underscores.",
            "maxLength": 50
          },
          "fields_data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string",
                  "format": "uuid",
                  "readOnly": true
                },
                "document_type": {
                  "type": "string",
                  "nullable": true
                },
                "code": {
                  "type": "string",
                  "description": "Field codes must be lowercase, should start with \na Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.",
                  "maxLength": 50
                },
                "long_code": {
                  "type": "string",
                  "maxLength": 150
                },
                "title": {
                  "type": "string",
                  "maxLength": 100
                },
                "description": {
                  "type": "string",
                  "nullable": true
                },
                "type": {
                  "enum": [
                    "address",
                    "amount",
                    "boolean",
                    "choice",
                    "company",
                    "date",
                    "date_recurring",
                    "datetime",
                    "duration",
                    "float",
                    "geography",
                    "int",
                    "linked_documents",
                    "money",
                    "multi_choice",
                    "percent",
                    "person",
                    "ratio",
                    "related_info",
                    "string",
                    "string_no_word_wrap",
                    "text"
                  ],
                  "type": "string"
                },
                "text_unit_type": {
                  "enum": [
                    "sentence",
                    "paragraph",
                    "section"
                  ],
                  "type": "string"
                },
                "value_detection_strategy": {
                  "enum": [
                    "disabled",
                    "use_regexps_only",
                    "regexp_table",
                    "use_formula_only",
                    "regexps_and_text_based_ml",
                    "text_based_ml_only",
                    "formula_and_fields_based_ml",
                    "fields_based_ml_only",
                    "fields_based_prob_ml_only",
                    "python_coded_field",
                    "field_based_regexps",
                    "mlflow_model"
                  ],
                  "type": "string"
                },
                "python_coded_field": {
                  "enum": [
                    "generic.EarliestDate",
                    "generic.LatestDate",
                    "generic.MaxCurrency",
                    "generic.Parties",
                    "similarity.SimilarDocuments"
                  ],
                  "type": "string",
                  "nullable": true
                },
                "classifier_init_script": {
                  "type": "string",
                  "nullable": true
                },
                "formula": {
                  "type": "string",
                  "nullable": true
                },
                "convert_decimals_to_floats_in_formula_args": {
                  "type": "boolean",
                  "description": "Floating point field values \n    are represented in Python Decimal type to avoid rounding problems in machine numbers representations. \n    Use this checkbox for converting them to Python float type before calculating the formula. \n    Float: 0.1 + 0.2 = 0.30000000000000004. Decimal: 0.1 + 0.2 = 0.3."
                },
                "value_regexp": {
                  "type": "string",
                  "nullable": true,
                  "description": "This regular expression is run on the sentence \n    found by a Field Detector and extracts a specific string value from a Text Unit. The first matching group is used if\n     the regular expression returns multiple matching groups. This is only applicable to string fields."
                },
                "depends_on_fields": {
                  "type": "string",
                  "readOnly": true
                },
                "confidence": {
                  "enum": [
                    "High",
                    "Medium",
                    "Low"
                  ],
                  "type": "string",
                  "nullable": true
                },
                "requires_text_annotations": {
                  "type": "boolean"
                },
                "read_only": {
                  "type": "boolean"
                },
                "category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 100
                    },
                    "order": {
                      "type": "integer",
                      "maximum": 2147483647,
                      "minimum": -2147483648
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "readOnly": true
                },
                "family": {
                  "type": "integer",
                  "nullable": true
                },
                "default_value": {
                  "type": "object",
                  "nullable": true,
                  "description": "When populated, this \n    default value is displayed in the user interface\u2019s annotator sidebar for the associated field. If not populated, the\n     Field Value remains empty by default. Please wrap entries with quotes, example: \u201clandlord\u201d. This is only applicable\n      to Choice and Multichoice fields."
                },
                "choices": {
                  "type": "string",
                  "readOnly": true
                },
                "allow_values_not_specified_in_choices": {
                  "type": "boolean"
                },
                "stop_words": {
                  "type": "object",
                  "nullable": true
                },
                "metadata": {
                  "type": "object",
                  "nullable": true
                },
                "training_finished": {
                  "type": "boolean"
                },
                "dirty": {
                  "type": "boolean"
                },
                "order": {
                  "type": "integer",
                  "maximum": 32767,
                  "minimum": 0
                },
                "trained_after_documents_number": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": 1
                },
                "hidden_always": {
                  "type": "boolean"
                },
                "hide_until_python": {
                  "type": "string",
                  "nullable": true
                },
                "hide_until_js": {
                  "type": "string",
                  "nullable": true
                },
                "detect_limit_unit": {
                  "enum": [
                    "NONE",
                    "UNIT"
                  ],
                  "type": "string",
                  "description": "Choose to add an upward limit to the amount of document text \n                                         ContraxSuite will search for this Document Field. For example, you can choose \n                                         to only search the first 10 paragraphs of text for the value required (this \n                                         often works best for values like \u201cCompany,\u201d \u201cExecution Date,\u201d or \u201cParties,\u201d\n                                         all of which typically appear in the first few paragraphs of a contract)."
                },
                "detect_limit_count": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": -2147483648,
                  "description": "Specify the maximum \nrange for a bounded search. Field detection begins at the top of the document and continues until this Nth \n\"Detect limit unit\" element."
                },
                "display_yes_no": {
                  "type": "boolean",
                  "description": "Checking this box will \n    display \u201cYes\u201d if Related Info text is found, and display \u201cNo\u201d if no text is found."
                },
                "value_aware": {
                  "type": "string",
                  "readOnly": true
                },
                "created_by": {
                  "type": "integer",
                  "nullable": true
                },
                "modified_by": {
                  "type": "integer",
                  "nullable": true
                },
                "created_date": {
                  "type": "string",
                  "format": "date-time",
                  "readOnly": true
                },
                "modified_date": {
                  "type": "string",
                  "format": "date-time",
                  "readOnly": true
                },
                "vectorizer_stop_words": {
                  "type": "string",
                  "nullable": true,
                  "description": "Stop words for vectorizers \n    user in field-based ML field detection. These stop words are excluded from going into the feature vector part \n    build based on this field. In addition to these words the standard sklearn \"english\" word list is used. \n    Format: each word on new line"
                },
                "unsure_choice_value": {
                  "type": "string",
                  "nullable": true,
                  "description": "Makes sense for machine learning \n    strategies with \"Unsure\" category. The strategy will return this value if probabilities of all other categories \n    appear lower than the specified threshold.",
                  "maxLength": 256
                },
                "unsure_thresholds_by_value": {
                  "type": "object",
                  "nullable": true,
                  "description": "Makes sense for machine learning \n    strategies with \"Unsure\" category. The strategy will return concrete result (one of choice values) only if \n    the probability of the detected value is greater than this threshold. Otherwise the strategy returns None \n    or the choice value specified in \"Unsure choice value\" field. Format: { \"value1\": 0.9, \"value2\": 0.5, ...}.\n     Default: 0.9"
                },
                "mlflow_model_uri": {
                  "type": "string",
                  "nullable": true,
                  "description": "MLFlow model URI \n    understandable by the MLFlow artifact downloading routines.",
                  "maxLength": 1024
                },
                "mlflow_detect_on_document_level": {
                  "type": "boolean",
                  "description": "If true - whole \n    document text will be sent to the MLFlow model and the field value will be returned for the whole text with no\n    annotations. If false - each text unit will be sent separately."
                }
              },
              "required": [
                "document_type",
                "code",
                "title",
                "modified_by"
              ]
            },
            "readOnly": true
          },
          "search_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "modified_by__username": {
            "type": "string",
            "readOnly": true
          },
          "editor_type": {
            "enum": [
              "save_by_field",
              "save_all_fields_at_once",
              "no_text"
            ],
            "type": "string",
            "nullable": true
          },
          "created_by": {
            "type": "object",
            "properties": {
              "pk": {
                "type": "integer",
                "readOnly": true
              },
              "first_name": {
                "type": "string",
                "maxLength": 30
              },
              "last_name": {
                "type": "string",
                "maxLength": 150
              },
              "username": {
                "type": "string",
                "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                "pattern": "^[\\w.@+-]+$",
                "maxLength": 150
              },
              "role": {
                "type": "integer",
                "nullable": true
              },
              "photo": {
                "type": "string",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "maxLength": 255
              }
            },
            "required": [
              "username"
            ],
            "nullable": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_by": {
            "type": "object",
            "properties": {
              "pk": {
                "type": "integer",
                "readOnly": true
              },
              "first_name": {
                "type": "string",
                "maxLength": 30
              },
              "last_name": {
                "type": "string",
                "maxLength": 150
              },
              "username": {
                "type": "string",
                "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                "pattern": "^[\\w.@+-]+$",
                "maxLength": 150
              },
              "role": {
                "type": "integer",
                "nullable": true
              },
              "photo": {
                "type": "string",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "maxLength": 255
              }
            },
            "required": [
              "username"
            ],
            "nullable": true
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "fields_number": {
            "type": "integer"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "maxLength": 100
                },
                "order": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": -2147483648
                }
              },
              "required": [
                "name"
              ]
            },
            "readOnly": true
          },
          "managers": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "title",
          "code",
          "created_by",
          "modified_by",
          "fields_number"
        ]
      },
      "DocumentTypeStats": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "code": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "fields_count": {
            "type": "integer"
          },
          "detectors_count": {
            "type": "integer"
          },
          "hide_until_python_count": {
            "type": "integer"
          },
          "hidden_always_count": {
            "type": "integer"
          },
          "hide_until_python_pcnt": {
            "type": "number"
          },
          "hidden_always_pcnt": {
            "type": "number"
          },
          "fields_data": {
            "type": "string",
            "readOnly": true
          },
          "detector_disabled_count": {
            "type": "number"
          },
          "detector_disabled_pcnt": {
            "type": "number"
          },
          "detector_use_regexps_only_count": {
            "type": "number"
          },
          "detector_use_regexps_only_pcnt": {
            "type": "number"
          },
          "detector_regexp_table_count": {
            "type": "number"
          },
          "detector_regexp_table_pcnt": {
            "type": "number"
          },
          "detector_use_formula_only_count": {
            "type": "number"
          },
          "detector_use_formula_only_pcnt": {
            "type": "number"
          },
          "detector_regexps_and_text_based_ml_count": {
            "type": "number"
          },
          "detector_regexps_and_text_based_ml_pcnt": {
            "type": "number"
          },
          "detector_text_based_ml_only_count": {
            "type": "number"
          },
          "detector_text_based_ml_only_pcnt": {
            "type": "number"
          },
          "detector_formula_and_fields_based_ml_count": {
            "type": "number"
          },
          "detector_formula_and_fields_based_ml_pcnt": {
            "type": "number"
          },
          "detector_fields_based_ml_only_count": {
            "type": "number"
          },
          "detector_fields_based_ml_only_pcnt": {
            "type": "number"
          },
          "detector_fields_based_prob_ml_only_count": {
            "type": "number"
          },
          "detector_fields_based_prob_ml_only_pcnt": {
            "type": "number"
          },
          "detector_python_coded_field_count": {
            "type": "number"
          },
          "detector_python_coded_field_pcnt": {
            "type": "number"
          },
          "detector_field_based_regexps_count": {
            "type": "number"
          },
          "detector_field_based_regexps_pcnt": {
            "type": "number"
          },
          "detector_mlflow_model_count": {
            "type": "number"
          },
          "detector_mlflow_model_pcnt": {
            "type": "number"
          }
        },
        "required": [
          "uid",
          "code",
          "title",
          "fields_count",
          "detectors_count",
          "hide_until_python_count",
          "hidden_always_count",
          "hide_until_python_pcnt",
          "hidden_always_pcnt",
          "detector_disabled_count",
          "detector_disabled_pcnt",
          "detector_use_regexps_only_count",
          "detector_use_regexps_only_pcnt",
          "detector_regexp_table_count",
          "detector_regexp_table_pcnt",
          "detector_use_formula_only_count",
          "detector_use_formula_only_pcnt",
          "detector_regexps_and_text_based_ml_count",
          "detector_regexps_and_text_based_ml_pcnt",
          "detector_text_based_ml_only_count",
          "detector_text_based_ml_only_pcnt",
          "detector_formula_and_fields_based_ml_count",
          "detector_formula_and_fields_based_ml_pcnt",
          "detector_fields_based_ml_only_count",
          "detector_fields_based_ml_only_pcnt",
          "detector_fields_based_prob_ml_only_count",
          "detector_fields_based_prob_ml_only_pcnt",
          "detector_python_coded_field_count",
          "detector_python_coded_field_pcnt",
          "detector_field_based_regexps_count",
          "detector_field_based_regexps_pcnt",
          "detector_mlflow_model_count",
          "detector_mlflow_model_pcnt"
        ]
      },
      "DocumentFieldCategoryList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "document_type": {
            "type": "string",
            "nullable": true
          },
          "document_type_title": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true
                },
                "category": {
                  "type": "integer",
                  "nullable": true
                },
                "code": {
                  "type": "string",
                  "description": "Field codes must be lowercase, should start with \na Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.",
                  "maxLength": 50
                },
                "title": {
                  "type": "string",
                  "maxLength": 100
                },
                "order": {
                  "type": "integer",
                  "maximum": 32767,
                  "minimum": 0
                }
              },
              "required": [
                "code",
                "title"
              ]
            }
          },
          "fields_number": {
            "type": "integer"
          },
          "export_key": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "document_type_title",
          "name",
          "fields",
          "fields_number"
        ]
      },
      "DocumentFieldDetectorDetail": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "category": {
            "enum": [
              "simple_config"
            ],
            "type": "string",
            "nullable": true,
            "description": "Field detector category used for technical needs e.g. for determining \nwhich field detectors were created automatically during import process."
          },
          "field": {
            "type": "string"
          },
          "field__code": {
            "type": "string",
            "readOnly": true
          },
          "field__title": {
            "type": "string",
            "readOnly": true
          },
          "field__uid": {
            "type": "string",
            "readOnly": true
          },
          "field__type": {
            "type": "string",
            "readOnly": true
          },
          "field__document_type__title": {
            "type": "string",
            "readOnly": true
          },
          "exclude_regexps": {
            "type": "string",
            "nullable": true,
            "description": "Enter regular expressions, each on a new line, for text patterns \nyou want EXCLUDED. The Field Detector will attempt to skip any Text Unit that contains any of the patterns written \nhere, and will move on to the next Text Unit. Avoid using \u201c.*\u201d and similar unlimited multipliers, as they can crash \nor slow ContraxSuite. Use bounded multipliers for variable length matching, like \u201c.{0,100}\u201d or similar. Note that \nExclude regexps are checked before Definition words and Include regexps. If a Field Detector has Exclude regexps, but \nno Definition words or Include regexps, it will not extract any data."
          },
          "definition_words": {
            "type": "string",
            "nullable": true,
            "description": "Enter words or phrases, each on a new line, that must be present \nin the Text Unit. These words must be in the Definitions List. If ContraxSuite fails to recognize these words as \ndefinitions, then the Field Detector skips and moves to the next Text Unit. If there are Include regexps, then the \nField Detector checks against those requirements. The Field Detector marks the entire Text Unit as a match. Note that \nthe Field Detector checks for definition words after filtering using the Exclude regexps."
          },
          "include_regexps": {
            "type": "string",
            "readOnly": true
          },
          "regexps_pre_process_lower": {
            "type": "boolean",
            "description": "Set 'ignore case' flag for both 'Include regexps' and 'Exclude regexps' options."
          },
          "detected_value": {
            "type": "string",
            "nullable": true,
            "description": "The string value written here \nwill be assigned to the field if the Field Detector positively matches a Text Unit. This is only applicable to Choice, \nMultichoice, and String fields, as their respective Field Detectors do not extract and display values from the source \ntext.",
            "maxLength": 256
          },
          "extraction_hint": {
            "enum": [
              "TAKE_FIRST",
              "TAKE_SECOND",
              "TAKE_LAST",
              "TAKE_MIN",
              "TAKE_MAX"
            ],
            "type": "string",
            "nullable": true,
            "description": "Provide additional instruction on which \nspecific values should be prioritized for extraction, when multiple values of the same type \n(e.g., Company, Person, Geography) are found within the relevant detected Text Unit."
          },
          "text_part": {
            "enum": [
              "FULL",
              "BEFORE_REGEXP",
              "AFTER_REGEXP",
              "INSIDE_REGEXP"
            ],
            "type": "string",
            "description": "Defines which part of the matched Text Unit \nshould be passed to the extraction function. Example: In the string \"2019-01-23 is the start date and 2019-01-24 is the \nend date,\" if text part = \"Before matching substring\" and Include regexp is \"is.{0,100}start\" then \"2019-01-23\" will be \nparsed correctly as the start date."
          }
        },
        "required": [
          "field"
        ]
      },
      "DocumentFieldValue": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "project_id": {
            "type": "integer",
            "readOnly": true
          },
          "project": {
            "type": "string",
            "readOnly": true
          },
          "document_id": {
            "type": "string",
            "readOnly": true
          },
          "document_name": {
            "type": "string",
            "readOnly": true
          },
          "document_status": {
            "type": "string",
            "readOnly": true
          },
          "field_id": {
            "type": "string",
            "readOnly": true
          },
          "field_name": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "object",
            "nullable": true
          },
          "python_value": {
            "type": "string",
            "readOnly": true
          },
          "location_text": {
            "type": "string",
            "readOnly": true
          },
          "modified_by_username": {
            "type": "string",
            "readOnly": true
          },
          "modified_by_id": {
            "type": "string",
            "readOnly": true
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "DocumentFieldAnnotation": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "uid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "project_id": {
            "type": "integer",
            "readOnly": true
          },
          "project_name": {
            "type": "string",
            "readOnly": true
          },
          "document_id": {
            "type": "string",
            "readOnly": true
          },
          "document_name": {
            "type": "string",
            "readOnly": true
          },
          "document_type": {
            "type": "string",
            "readOnly": true
          },
          "document_status": {
            "type": "string",
            "readOnly": true
          },
          "field_id": {
            "type": "string",
            "readOnly": true
          },
          "field_name": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "object",
            "nullable": true
          },
          "location_start": {
            "type": "integer",
            "maximum": 2147483647,
            "nullable": true,
            "minimum": 0
          },
          "location_end": {
            "type": "integer",
            "maximum": 2147483647,
            "nullable": true,
            "minimum": 0
          },
          "location_text": {
            "type": "string",
            "nullable": true
          },
          "assignee_id": {
            "type": "integer"
          },
          "assign_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status_id": {
            "type": "integer"
          },
          "status_name": {
            "type": "string",
            "readOnly": true
          },
          "assignee_name": {
            "type": "string",
            "readOnly": true
          },
          "modified_by_id": {
            "type": "string",
            "readOnly": true
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "assignee_id",
          "status_id"
        ]
      },
      "FieldAnnotationStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "nullable": true,
            "maxLength": 100
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 0
          },
          "is_active": {
            "type": "boolean"
          },
          "is_accepted": {
            "type": "boolean"
          },
          "is_rejected": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "order"
        ]
      },
      "TextUnitDjangoQL": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "unit_type": {
            "type": "string",
            "maxLength": 128
          },
          "text": {
            "type": "string",
            "readOnly": true
          },
          "project_id": {
            "type": "string",
            "readOnly": true
          },
          "project_name": {
            "type": "string"
          },
          "document_id": {
            "type": "string",
            "readOnly": true
          },
          "document_name": {
            "type": "string"
          }
        },
        "required": [
          "unit_type",
          "project_name",
          "document_name"
        ]
      },
      "Annotation": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "document": {
            "type": "integer"
          },
          "field": {
            "type": "string"
          },
          "value": {
            "type": "object",
            "nullable": true
          },
          "location_start": {
            "type": "integer",
            "maximum": 2147483647,
            "nullable": true,
            "minimum": 0
          },
          "location_end": {
            "type": "integer",
            "maximum": 2147483647,
            "nullable": true,
            "minimum": 0
          },
          "location_text": {
            "type": "string",
            "nullable": true
          },
          "modified_by": {
            "type": "integer",
            "nullable": true
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "document",
          "field",
          "value",
          "location_start",
          "location_end"
        ]
      },
      "AnnotationInDocument": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "document": {
            "type": "integer"
          },
          "value": {
            "type": "object",
            "nullable": true
          },
          "field": {
            "type": "string"
          },
          "location_start": {
            "type": "integer",
            "maximum": 2147483647,
            "nullable": true,
            "minimum": 0
          },
          "location_end": {
            "type": "integer",
            "maximum": 2147483647,
            "nullable": true,
            "minimum": 0
          },
          "location_text": {
            "type": "string",
            "nullable": true
          },
          "modified_by": {
            "type": "integer",
            "nullable": true
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "uid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          }
        },
        "required": [
          "document",
          "value",
          "field",
          "location_start",
          "location_end"
        ]
      },
      "UserStats": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "user_name": {
            "type": "string"
          },
          "role_name": {
            "type": "string",
            "nullable": true
          },
          "group_name": {
            "type": "string",
            "nullable": true
          },
          "total_projects": {
            "type": "integer"
          },
          "documents_assigned": {
            "type": "integer"
          },
          "documents_completed": {
            "type": "integer"
          },
          "documents_todo": {
            "type": "integer"
          },
          "documents_completed_pcnt": {
            "type": "number"
          },
          "documents_todo_pcnt": {
            "type": "number"
          },
          "clauses_assigned": {
            "type": "integer"
          },
          "clauses_completed": {
            "type": "integer"
          },
          "clauses_todo": {
            "type": "integer"
          },
          "clauses_completed_pcnt": {
            "type": "number"
          },
          "clauses_todo_pcnt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "user_name",
          "role_name",
          "group_name",
          "total_projects",
          "documents_assigned",
          "documents_completed",
          "documents_todo",
          "documents_completed_pcnt",
          "documents_todo_pcnt",
          "clauses_assigned",
          "clauses_completed",
          "clauses_todo",
          "clauses_completed_pcnt",
          "clauses_todo_pcnt"
        ]
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "code": {
            "type": "string",
            "maxLength": 50
          },
          "abbr": {
            "type": "string",
            "readOnly": true
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 0
          },
          "is_admin": {
            "type": "boolean"
          },
          "is_top_manager": {
            "type": "boolean"
          },
          "is_manager": {
            "type": "boolean"
          },
          "is_reviewer": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "name",
          "code",
          "order"
        ]
      },
      "Login": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "password"
        ]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "maxLength": 40
          },
          "user_name": {
            "type": "string",
            "readOnly": true
          },
          "user": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "key"
        ]
      },
      "CustomPasswordReset": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "email"
        ]
      },
      "CustomPasswordResetConfirm": {
        "type": "object",
        "properties": {
          "new_password1": {
            "type": "string",
            "maxLength": 128
          },
          "new_password2": {
            "type": "string",
            "maxLength": 128
          },
          "uid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "new_password1",
          "new_password2",
          "uid",
          "token"
        ]
      },
      "CustomPasswordChange": {
        "type": "object",
        "properties": {
          "old_password": {
            "type": "string",
            "maxLength": 128
          },
          "new_password": {
            "type": "string",
            "maxLength": 128
          }
        },
        "required": [
          "old_password",
          "new_password"
        ]
      },
      "Register": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 150,
            "minLength": 1
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password1": {
            "type": "string",
            "writeOnly": true
          },
          "password2": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "username",
          "email",
          "password1",
          "password2"
        ]
      },
      "VerifyEmail": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ]
      },
      "ProjectCreate": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "send_email_notification": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ]
      },
      "SelectProjectsRequest": {
        "type": "object",
        "properties": {
          "project_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "project_ids"
        ]
      },
      "SelectProjectsResponse": {
        "type": "object",
        "properties": {
          "saved_filter_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "project_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "show_warning": {
            "type": "boolean"
          }
        },
        "required": [
          "saved_filter_id",
          "user_id",
          "project_ids",
          "show_warning"
        ]
      },
      "AssignProjectAnnotationsRequest": {
        "type": "object",
        "properties": {
          "assignee_id": {
            "type": "integer",
            "nullable": true
          },
          "all": {
            "type": "boolean"
          },
          "annotation_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "no_annotation_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "CountSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "AssignProjectDocumentRequest": {
        "type": "object",
        "properties": {
          "assignee_id": {
            "type": "integer",
            "nullable": true
          },
          "document_id": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "AssignProjectDocumentsRequest": {
        "type": "object",
        "properties": {
          "assignee_id": {
            "type": "integer",
            "nullable": true
          },
          "all": {
            "type": "boolean"
          },
          "document_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "no_document_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "CleanupProjectRequest": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean"
          }
        }
      },
      "DetectProjectFieldValuesRequest": {
        "type": "object",
        "properties": {
          "do_not_update_modified": {
            "type": "boolean"
          },
          "do_not_write": {
            "type": "boolean"
          },
          "document_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "TaskIdResponse": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "task_id"
        ]
      },
      "MakeSearchablePDFRequest": {
        "type": "object",
        "properties": {
          "document_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "MarkUnmarkForDeleteProjectsRequest": {
        "type": "object",
        "properties": {
          "all": {
            "type": "boolean"
          },
          "remove_all": {
            "type": "boolean"
          },
          "exclude_document_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "MarkUnmarkForDeleteProjectsReponse": {
        "type": "object",
        "properties": {
          "count_deleted": {
            "type": "integer"
          }
        },
        "required": [
          "count_deleted"
        ]
      },
      "SendClusterToProjectRequest": {
        "type": "object",
        "properties": {
          "cluster_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "project_id": {
            "type": "integer"
          }
        },
        "required": [
          "cluster_ids",
          "project_id"
        ]
      },
      "SetProjectAnnotationsStatusRequest": {
        "type": "object",
        "properties": {
          "status_id": {
            "type": "integer",
            "nullable": true
          },
          "all": {
            "type": "boolean"
          },
          "annotation_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "no_annotation_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "SetProjectAnnotationsStatusAsyncResponse": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "format": "uuid"
          },
          "annotations": {
            "type": "integer"
          }
        },
        "required": [
          "task_id",
          "annotations"
        ]
      },
      "SetProjectDocumentsStatusRequest": {
        "type": "object",
        "properties": {
          "status_id": {
            "type": "integer",
            "nullable": true
          },
          "all": {
            "type": "boolean"
          },
          "document_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "no_document_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "UploadSession": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "project": {
            "type": "integer"
          },
          "created_by": {
            "type": "integer"
          },
          "upload_files": {
            "type": "object",
            "readOnly": true
          },
          "review_files": {
            "type": "boolean",
            "readOnly": true
          },
          "force": {
            "type": "boolean",
            "readOnly": true
          }
        }
      },
      "UploadSessionBatchUploadRequest": {
        "type": "object",
        "properties": {
          "folder": {
            "type": "string"
          }
        },
        "required": [
          "folder"
        ]
      },
      "ProjectUploadSessionFilesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "ProjectUploadSessionPOSTResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "ClusterProjectRequest": {
        "type": "object",
        "properties": {
          "n_clusters": {
            "type": "integer"
          },
          "force": {
            "type": "boolean"
          },
          "cluster_by": {
            "enum": [
              "term",
              "date",
              "text",
              "definition",
              "duration",
              "party",
              "geoentity",
              "currency_name",
              "currency_value"
            ],
            "type": "string"
          },
          "method": {
            "enum": [
              "kmeans",
              "minibatchkmeans",
              "birch"
            ],
            "type": "string"
          },
          "require_confirmation": {
            "type": "boolean"
          }
        },
        "required": [
          "n_clusters",
          "cluster_by",
          "method"
        ]
      },
      "ClusterProjectResponse": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "format": "uuid"
          },
          "project_clustering_id": {
            "type": "integer"
          }
        },
        "required": [
          "task_id",
          "project_clustering_id"
        ]
      },
      "TextUnitClassificationCreate": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "class_name": {
            "type": "string",
            "maxLength": 1024
          },
          "class_value": {
            "type": "string",
            "maxLength": 1024
          },
          "text_unit_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "class_name",
          "class_value",
          "text_unit_id"
        ]
      },
      "RawdbDocumentsPOSTRequest": {
        "type": "object",
        "properties": {
          "project_ids": {
            "type": "string"
          },
          "columns": {
            "type": "string"
          },
          "associated_text": {
            "type": "boolean"
          },
          "as_zip": {
            "type": "boolean"
          },
          "fmt": {
            "type": "string"
          },
          "limit": {
            "type": "integer"
          },
          "order_by": {
            "type": "string"
          },
          "saved_filters": {
            "type": "string"
          },
          "save_filter": {
            "type": "boolean"
          },
          "return_reviewed": {
            "type": "boolean"
          },
          "return_total": {
            "type": "boolean"
          },
          "return_data": {
            "type": "boolean"
          },
          "ignore_errors": {
            "type": "boolean"
          },
          "filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Upload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "guid": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "type": "string",
            "maxLength": 50
          },
          "upload_offset": {
            "type": "integer",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "format": "int64"
          },
          "upload_length": {
            "type": "integer",
            "maximum": 9223372036854775807,
            "minimum": -9223372036854775808,
            "format": "int64"
          },
          "upload_metadata": {
            "type": "string"
          },
          "filename": {
            "type": "string",
            "maxLength": 255
          },
          "temporary_file_path": {
            "type": "string",
            "nullable": true,
            "maxLength": 4096
          },
          "expires": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "uploaded_file": {
            "type": "string",
            "format": "binary",
            "nullable": true
          }
        },
        "required": [
          "upload_metadata"
        ]
      },
      "ReviewStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "nullable": true,
            "maxLength": 100
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 0
          },
          "is_active": {
            "type": "boolean"
          },
          "group": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "name",
          "order"
        ]
      },
      "MarkUnmarkForDeleteDocumentsRequest": {
        "type": "object",
        "properties": {
          "all": {
            "type": "boolean"
          },
          "project_id": {
            "type": "integer"
          },
          "document_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "project_id"
        ]
      },
      "MarkUnmarkForDeleteDocumentsResponse": {
        "type": "object",
        "properties": {
          "count_deleted": {
            "type": "integer"
          }
        },
        "required": [
          "count_deleted"
        ]
      },
      "DocumentNoteCreate": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "note": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "location_start": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "location_end": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "document_id": {
            "type": "integer"
          },
          "field_value_id": {
            "type": "integer"
          },
          "field_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "nullable": true,
            "maxLength": 200
          },
          "user": {
            "type": "object",
            "properties": {
              "pk": {
                "type": "integer",
                "readOnly": true
              },
              "first_name": {
                "type": "string",
                "maxLength": 30
              },
              "last_name": {
                "type": "string",
                "maxLength": 150
              },
              "username": {
                "type": "string",
                "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                "pattern": "^[\\w.@+-]+$",
                "maxLength": 150
              },
              "role": {
                "type": "integer",
                "nullable": true
              },
              "photo": {
                "type": "string",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "maxLength": 255
              }
            },
            "required": [
              "username"
            ],
            "readOnly": true
          }
        },
        "required": [
          "note",
          "document_id"
        ]
      },
      "CheckDocumentFieldFormulaRequest": {
        "type": "object",
        "properties": {
          "formula": {
            "type": "string"
          },
          "hide_until_python": {
            "type": "string"
          }
        }
      },
      "CloneDocumentFieldRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "document_type": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "code",
          "document_type"
        ]
      },
      "DocumentTypeCreate": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "description": "Field codes must be lowercase, should start with a Latin letter, and contain \nonly Latin letters, digits, and underscores.",
            "maxLength": 50
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "maxLength": 100
                },
                "order": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": -2147483648
                }
              },
              "required": [
                "name"
              ]
            },
            "readOnly": true
          },
          "managers": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true
                },
                "category": {
                  "type": "integer",
                  "nullable": true
                },
                "code": {
                  "type": "string",
                  "description": "Field codes must be lowercase, should start with \na Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.",
                  "maxLength": 50
                },
                "title": {
                  "type": "string",
                  "maxLength": 100
                },
                "order": {
                  "type": "integer",
                  "maximum": 32767,
                  "minimum": 0
                }
              },
              "required": [
                "code",
                "title"
              ]
            },
            "readOnly": true
          },
          "search_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "editor_type": {
            "enum": [
              "save_by_field",
              "save_all_fields_at_once",
              "no_text"
            ],
            "type": "string",
            "nullable": true
          },
          "field_code_aliases": {
            "type": "object",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "warning_message": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "title",
          "code"
        ]
      },
      "CloneDocumentTypeRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "title"
        ]
      },
      "DocumentFieldCategoryCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "document_type": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "fields": {
            "type": "array",
            "items": {},
            "readOnly": true
          },
          "fields_number": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "document_type",
          "name",
          "order"
        ]
      },
      "DocumentFieldDetectorCreate": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "warning_message": {
            "type": "string",
            "readOnly": true
          },
          "category": {
            "enum": [
              "simple_config"
            ],
            "type": "string",
            "nullable": true,
            "description": "Field detector category used for technical needs e.g. for determining \nwhich field detectors were created automatically during import process."
          },
          "exclude_regexps": {
            "type": "string",
            "nullable": true,
            "description": "Enter regular expressions, each on a new line, for text patterns \nyou want EXCLUDED. The Field Detector will attempt to skip any Text Unit that contains any of the patterns written \nhere, and will move on to the next Text Unit. Avoid using \u201c.*\u201d and similar unlimited multipliers, as they can crash \nor slow ContraxSuite. Use bounded multipliers for variable length matching, like \u201c.{0,100}\u201d or similar. Note that \nExclude regexps are checked before Definition words and Include regexps. If a Field Detector has Exclude regexps, but \nno Definition words or Include regexps, it will not extract any data."
          },
          "definition_words": {
            "type": "string",
            "nullable": true,
            "description": "Enter words or phrases, each on a new line, that must be present \nin the Text Unit. These words must be in the Definitions List. If ContraxSuite fails to recognize these words as \ndefinitions, then the Field Detector skips and moves to the next Text Unit. If there are Include regexps, then the \nField Detector checks against those requirements. The Field Detector marks the entire Text Unit as a match. Note that \nthe Field Detector checks for definition words after filtering using the Exclude regexps."
          },
          "include_regexps": {
            "type": "string",
            "nullable": true,
            "description": "Enter regular expressions, each on a new \nline, for text patterns you want INCLUDED. The Field Detector will attempt to match each of these regular expressions \nwithin a given Text Unit. Avoid using \u201c.*\u201d and similar unlimited multipliers, as they can crash or slow ContraxSuite. \nUse bounded multipliers for variable length matching, like \u201c.{0,100}\u201d or similar. Note that Include regexps are checked \nafter both Exclude regexps and Definition words."
          },
          "regexps_pre_process_lower": {
            "type": "boolean",
            "description": "Set 'ignore case' flag for both 'Include regexps' and 'Exclude regexps' options."
          },
          "detected_value": {
            "type": "string",
            "nullable": true,
            "description": "The string value written here \nwill be assigned to the field if the Field Detector positively matches a Text Unit. This is only applicable to Choice, \nMultichoice, and String fields, as their respective Field Detectors do not extract and display values from the source \ntext.",
            "maxLength": 256
          },
          "extraction_hint": {
            "enum": [
              "TAKE_FIRST",
              "TAKE_SECOND",
              "TAKE_LAST",
              "TAKE_MIN",
              "TAKE_MAX"
            ],
            "type": "string",
            "nullable": true,
            "description": "Provide additional instruction on which \nspecific values should be prioritized for extraction, when multiple values of the same type \n(e.g., Company, Person, Geography) are found within the relevant detected Text Unit."
          },
          "text_part": {
            "enum": [
              "FULL",
              "BEFORE_REGEXP",
              "AFTER_REGEXP",
              "INSIDE_REGEXP"
            ],
            "type": "string",
            "description": "Defines which part of the matched Text Unit \nshould be passed to the extraction function. Example: In the string \"2019-01-23 is the start date and 2019-01-24 is the \nend date,\" if text part = \"Before matching substring\" and Include regexp is \"is.{0,100}start\" then \"2019-01-23\" will be \nparsed correctly as the start date."
          },
          "field": {
            "type": "string"
          }
        },
        "required": [
          "field"
        ]
      },
      "AnnotationSuggestRequest": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "format": "uuid"
          },
          "document": {
            "type": "integer"
          },
          "quite": {
            "type": "string"
          }
        },
        "required": [
          "field",
          "document",
          "quite"
        ]
      },
      "DumpFixture": {
        "type": "object",
        "properties": {
          "app_name": {
            "type": "string"
          },
          "model_name": {
            "type": "string"
          },
          "file_name": {
            "type": "string"
          },
          "filter_options": {
            "type": "object"
          },
          "indent": {
            "type": "integer",
            "default": 4
          }
        },
        "required": [
          "app_name",
          "model_name",
          "file_name"
        ]
      },
      "LoadFixture": {
        "type": "object",
        "properties": {
          "fixture": {
            "type": "string"
          },
          "mode": {
            "type": "string",
            "maxLength": 10
          },
          "encoding": {
            "type": "string",
            "maxLength": 10
          }
        },
        "required": [
          "fixture"
        ]
      },
      "LoggingAPIViewRequest": {
        "type": "object",
        "properties": {
          "queryInfo": {
            "type": "object"
          },
          "records": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "queryInfo",
          "records"
        ]
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "readOnly": true,
            "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "first_name": {
            "type": "string",
            "maxLength": 30
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email",
            "readOnly": true
          },
          "organization": {
            "type": "string",
            "nullable": true,
            "maxLength": 100
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true,
            "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
          }
        }
      },
      "VerifyAuthTokenRequest": {
        "type": "object",
        "properties": {
          "auth_token": {
            "type": "string",
            "maxLength": 40
          }
        },
        "required": [
          "auth_token"
        ]
      },
      "VerifyAuthTokenResponse": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "user_name": {
            "type": "string"
          },
          "release_version": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "username": {
                "type": "string",
                "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                "pattern": "^[\\w.@+-]+$",
                "maxLength": 150
              },
              "last_name": {
                "type": "string",
                "maxLength": 150
              },
              "first_name": {
                "type": "string",
                "maxLength": 30
              },
              "email": {
                "type": "string",
                "format": "email",
                "maxLength": 254
              },
              "is_superuser": {
                "type": "boolean",
                "description": "Designates that this user has all permissions without explicitly assigning them."
              },
              "is_staff": {
                "type": "boolean",
                "description": "Designates whether the user can log into this admin site."
              },
              "is_active": {
                "type": "boolean",
                "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
              },
              "name": {
                "type": "string",
                "maxLength": 255
              },
              "role": {
                "type": "integer",
                "nullable": true
              },
              "role_data": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "readOnly": true
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 50
                  },
                  "code": {
                    "type": "string",
                    "maxLength": 50
                  },
                  "abbr": {
                    "type": "string",
                    "readOnly": true
                  },
                  "order": {
                    "type": "integer",
                    "maximum": 32767,
                    "minimum": 0
                  },
                  "is_admin": {
                    "type": "boolean"
                  },
                  "is_top_manager": {
                    "type": "boolean"
                  },
                  "is_manager": {
                    "type": "boolean"
                  },
                  "is_reviewer": {
                    "type": "string",
                    "readOnly": true
                  }
                },
                "required": [
                  "name",
                  "code",
                  "order"
                ]
              },
              "organization": {
                "type": "string",
                "nullable": true,
                "maxLength": 100
              },
              "photo": {
                "type": "string",
                "readOnly": true
              },
              "permissions": {
                "type": "object",
                "readOnly": true
              },
              "groups": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups."
              }
            },
            "required": [
              "username"
            ]
          }
        },
        "required": [
          "key",
          "user_name",
          "release_version",
          "user"
        ]
      },
      "ProjectUpdate": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer"
          },
          "send_email_notification": {
            "type": "boolean"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "reviewers": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "super_reviewers": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "junior_reviewers": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "type": {
            "type": "string"
          },
          "hide_clause_review": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ]
      },
      "GeoEntityUpdate": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "priority": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          }
        }
      },
      "DocumentClusterUpdate": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 300
          }
        },
        "required": [
          "name"
        ]
      },
      "DocumentNoteUpdate": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string"
          }
        },
        "required": [
          "note"
        ]
      },
      "DocumentFieldCreate": {
        "type": "object",
        "properties": {
          "document_type": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Field codes must be lowercase, should start with \na Latin letter, and contain only Latin letters, digits, underscores. Field codes must be unique to every Document Type.",
            "maxLength": 50
          },
          "long_code": {
            "type": "string",
            "readOnly": true,
            "maxLength": 150
          },
          "title": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "enum": [
              "address",
              "amount",
              "boolean",
              "choice",
              "company",
              "date",
              "date_recurring",
              "datetime",
              "duration",
              "float",
              "geography",
              "int",
              "linked_documents",
              "money",
              "multi_choice",
              "percent",
              "person",
              "ratio",
              "related_info",
              "string",
              "string_no_word_wrap",
              "text"
            ],
            "type": "string"
          },
          "text_unit_type": {
            "enum": [
              "sentence",
              "paragraph",
              "section"
            ],
            "type": "string"
          },
          "value_detection_strategy": {
            "enum": [
              "disabled",
              "use_regexps_only",
              "regexp_table",
              "use_formula_only",
              "regexps_and_text_based_ml",
              "text_based_ml_only",
              "formula_and_fields_based_ml",
              "fields_based_ml_only",
              "fields_based_prob_ml_only",
              "python_coded_field",
              "field_based_regexps",
              "mlflow_model"
            ],
            "type": "string"
          },
          "python_coded_field": {
            "enum": [
              "generic.EarliestDate",
              "generic.LatestDate",
              "generic.MaxCurrency",
              "generic.Parties",
              "similarity.SimilarDocuments"
            ],
            "type": "string",
            "nullable": true
          },
          "classifier_init_script": {
            "type": "string",
            "nullable": true,
            "description": "Classifier initialization script. Here is how it used: <br /><br />def&nbsp;init_classifier_impl(field_code:&nbsp;str,&nbsp;init_script:&nbsp;str):<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;init_script&nbsp;is&nbsp;not&nbsp;None:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init_script&nbsp;=&nbsp;init_script.strip()<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;init_script:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;tree&nbsp;as&nbsp;sklearn_tree<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;sklearn_tree.DecisionTreeClassifier()<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;tree&nbsp;as&nbsp;sklearn_tree<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;neural_network&nbsp;as&nbsp;sklearn_neural_network<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;neighbors&nbsp;as&nbsp;sklearn_neighbors<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;svm&nbsp;as&nbsp;sklearn_svm<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;gaussian_process&nbsp;as&nbsp;sklearn_gaussian_process<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn.gaussian_process&nbsp;import&nbsp;kernels&nbsp;as&nbsp;sklearn_gaussian_process_kernels<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;ensemble&nbsp;as&nbsp;sklearn_ensemble<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;naive_bayes&nbsp;as&nbsp;sklearn_naive_bayes<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;discriminant_analysis&nbsp;as&nbsp;sklearn_discriminant_analysis<br />&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;sklearn&nbsp;import&nbsp;linear_model&nbsp;as&nbsp;sklearn_linear_model<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;eval_locals&nbsp;=&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_linear_model':&nbsp;sklearn_linear_model,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_tree':&nbsp;sklearn_tree,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_neural_network':&nbsp;sklearn_neural_network,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_neighbors':&nbsp;sklearn_neighbors,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_svm':&nbsp;sklearn_svm,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_gaussian_process':&nbsp;sklearn_gaussian_process,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_gaussian_process_kernels':&nbsp;sklearn_gaussian_process_kernels,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_ensemble':&nbsp;sklearn_ensemble,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_naive_bayes':&nbsp;sklearn_naive_bayes,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sklearn_discriminant_analysis':&nbsp;sklearn_discriminant_analysis<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;eval_script('classifier&nbsp;init&nbsp;script&nbsp;of&nbsp;field&nbsp;{0}'.format(field_code),&nbsp;init_script,&nbsp;eval_locals)<br />"
          },
          "formula": {
            "type": "string",
            "nullable": true
          },
          "convert_decimals_to_floats_in_formula_args": {
            "type": "boolean",
            "description": "Floating point field values \n    are represented in Python Decimal type to avoid rounding problems in machine numbers representations. \n    Use this checkbox for converting them to Python float type before calculating the formula. \n    Float: 0.1 + 0.2 = 0.30000000000000004. Decimal: 0.1 + 0.2 = 0.3."
          },
          "value_regexp": {
            "type": "string",
            "nullable": true,
            "description": "This regular expression is run on the sentence \n    found by a Field Detector and extracts a specific string value from a Text Unit. The first matching group is used if\n     the regular expression returns multiple matching groups. This is only applicable to string fields."
          },
          "depends_on_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "confidence": {
            "enum": [
              "High",
              "Medium",
              "Low"
            ],
            "type": "string",
            "nullable": true
          },
          "requires_text_annotations": {
            "type": "boolean"
          },
          "read_only": {
            "type": "boolean"
          },
          "category": {
            "type": "integer",
            "nullable": true
          },
          "family": {
            "type": "integer",
            "nullable": true
          },
          "default_value": {
            "type": "object",
            "nullable": true,
            "description": "When populated, this \n    default value is displayed in the user interface\u2019s annotator sidebar for the associated field. If not populated, the\n     Field Value remains empty by default. Please wrap entries with quotes, example: \u201clandlord\u201d. This is only applicable\n      to Choice and Multichoice fields."
          },
          "choices": {
            "type": "string",
            "nullable": true,
            "description": "Newline-separated choices. A choice cannot contain a comma."
          },
          "allow_values_not_specified_in_choices": {
            "type": "boolean"
          },
          "stop_words": {
            "type": "object",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "training_finished": {
            "type": "boolean"
          },
          "dirty": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "maximum": 32767,
            "minimum": 0
          },
          "trained_after_documents_number": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 1
          },
          "hidden_always": {
            "type": "boolean"
          },
          "hide_until_python": {
            "type": "string",
            "nullable": true,
            "description": "        \n            Enter a boolean expression in Python syntax. If this Python expression evaluates to True, then this \n            Document Field will be displayed in the user interface. Likewise, if this Python expression evaluates to \n            False, then this Document Field will be hidden from view. Importantly, if a document\u2019s status is set to \n            complete and this Document Field remains hidden, then this Document Field\u2019s data will be erased. Similarly, \n            this Document Field might contain data that a user can not review if it is hidden and the document has not \n            been set to complete."
          },
          "hide_until_js": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "Target expression (\"Hide until python\" expression converted to JavaScript syntax for frontend). Allowed operators: +, -, *, /, ===, !==, ==, !=, &&, ||, >, <, >=, <=, %"
          },
          "display_yes_no": {
            "type": "boolean",
            "description": "Checking this box will \n    display \u201cYes\u201d if Related Info text is found, and display \u201cNo\u201d if no text is found."
          },
          "detect_limit_unit": {
            "enum": [
              "NONE",
              "UNIT"
            ],
            "type": "string",
            "description": "Choose to add an upward limit to the amount of document text \n                                         ContraxSuite will search for this Document Field. For example, you can choose \n                                         to only search the first 10 paragraphs of text for the value required (this \n                                         often works best for values like \u201cCompany,\u201d \u201cExecution Date,\u201d or \u201cParties,\u201d\n                                         all of which typically appear in the first few paragraphs of a contract)."
          },
          "detect_limit_count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "description": "Specify the maximum \nrange for a bounded search. Field detection begins at the top of the document and continues until this Nth \n\"Detect limit unit\" element."
          },
          "vectorizer_stop_words": {
            "type": "string",
            "nullable": true,
            "description": "Stop words for vectorizers \n    user in field-based ML field detection. These stop words are excluded from going into the feature vector part \n    build based on this field. In addition to these words the standard sklearn \"english\" word list is used. \n    Format: each word on new line"
          },
          "unsure_choice_value": {
            "type": "string",
            "nullable": true,
            "description": "Makes sense for machine learning \n    strategies with \"Unsure\" category. The strategy will return this value if probabilities of all other categories \n    appear lower than the specified threshold.",
            "maxLength": 256
          },
          "unsure_thresholds_by_value": {
            "type": "object",
            "nullable": true,
            "description": "Makes sense for machine learning \n    strategies with \"Unsure\" category. The strategy will return concrete result (one of choice values) only if \n    the probability of the detected value is greater than this threshold. Otherwise the strategy returns None \n    or the choice value specified in \"Unsure choice value\" field. Format: { \"value1\": 0.9, \"value2\": 0.5, ...}.\n     Default: 0.9"
          },
          "mlflow_model_uri": {
            "type": "string",
            "nullable": true,
            "description": "MLFlow model URI \n    understandable by the MLFlow artifact downloading routines.",
            "maxLength": 1024
          },
          "mlflow_detect_on_document_level": {
            "type": "boolean",
            "description": "If true - whole \n    document text will be sent to the MLFlow model and the field value will be returned for the whole text with no\n    annotations. If false - each text unit will be sent separately."
          },
          "warning_message": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "document_type",
          "code",
          "title",
          "type",
          "detect_limit_unit",
          "detect_limit_count"
        ]
      },
      "DocumentTypeImportRequest": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          },
          "update_cache": {
            "type": "boolean"
          },
          "action": {
            "enum": [
              "validate",
              "validate|import",
              "import|auto_fix|retain_missing_objects",
              "import|auto_fix|remove_missing_objects"
            ],
            "type": "string"
          },
          "source_version": {
            "type": "string"
          }
        },
        "required": [
          "file"
        ]
      },
      "DocumentTypeImportResponse": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "task_id"
        ]
      },
      "AnnotationUpdateResponse": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true
          },
          "document": {
            "type": "integer"
          },
          "document_name": {
            "type": "string"
          },
          "field": {
            "type": "string"
          },
          "field_name": {
            "type": "string"
          },
          "value": {
            "type": "object",
            "nullable": true
          },
          "project": {
            "type": "string"
          },
          "location_start": {
            "type": "integer",
            "maximum": 2147483647,
            "nullable": true,
            "minimum": 0
          },
          "location_end": {
            "type": "integer",
            "maximum": 2147483647,
            "nullable": true,
            "minimum": 0
          },
          "location_text": {
            "type": "string",
            "nullable": true
          },
          "modified_by": {
            "type": "integer",
            "nullable": true
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "document",
          "document_name",
          "field",
          "field_name",
          "value",
          "project",
          "location_start",
          "location_end"
        ]
      },
      "AnnotationBatchRequest": {
        "type": "object",
        "properties": {
          "operation_uid": {
            "type": "string",
            "format": "uuid"
          },
          "action": {
            "enum": [
              "delete",
              "save"
            ],
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "operation_uid",
          "action",
          "id",
          "data"
        ]
      },
      "AnnotationBatchResponse": {
        "type": "object",
        "properties": {
          "operation_uid": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "operation_uid",
          "status",
          "data"
        ]
      },
      "UploadSessionDeleteFileRequest": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          }
        },
        "required": [
          "filename"
        ]
      },
      "AppVarDelete": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "category"
        ]
      }
    },
    "securitySchemes": {
      "AuthToken": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "security": [
    {
      "AuthToken": []
    }
  ]
}